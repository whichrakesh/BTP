filename: /home/rakesh/Dropbox/Study/Sem-7/BTP-I/for_loop_extracted/nl.txt
loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L1: (newMatrixOfDouble[i]=,w) (matrixOfDouble[i]*,r) 
}
array table
-----------------------------------------------
newMatrixOfDouble -> [('[i]', 'w', 'normalized', ['i'], 1)]
LDEs formed:1

matrixOfDouble -> [('[i]', 'r', 'normalized', ['i'], 1)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m2 * n2  i++
induction variable: ['i']
{
L2: (newMatrixOfBoolean[i]=,w) (matrixOfBoolean[i]==,r) 
}
array table
-----------------------------------------------
newMatrixOfBoolean -> [('[i]', 'w', 'normalized', ['i'], 2)]
LDEs formed:1

matrixOfBoolean -> [('[i]', 'r', 'normalized', ['i'], 2)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L3: (matrixOfDouble[i]=,w) (matrixOfDouble[i],r) 
}
array table
-----------------------------------------------
matrixOfDouble -> [('[i]', 'w', 'normalized', ['i'], 3), ('[i]', 'r', 'normalized', ['i'], 3)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<size1  i++
induction variable: ['i']
{
L4: (arg1[i]=,w) 
L5: (arg1[i],r) 
}
array table
-----------------------------------------------
arg1 -> [('[i]', 'w', 'normalized', ['i'], 4), ('[i]', 'r', 'normalized', ['i'], 5)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<size1-1  i++
induction variable: ['i']
{
L6: (arg1[i],r) 
L7: (arg1[i]=,w) 
}
array table
-----------------------------------------------
arg1 -> [('[i]', 'r', 'normalized', ['i'], 6), ('[i]', 'w', 'normalized', ['i'], 7)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizedictionary  i++
induction variable: ['i']
{
L8: (dictionary[i],r) 
L9: (dictionary[i],r) 
}
array table
-----------------------------------------------
dictionary -> [('[i]', 'r', 'normalized', ['i'], 8), ('[i]', 'r', 'normalized', ['i'], 9)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < argc  i++
induction variable: ['i']
{
L10: (argv[i],r) 
L11: (argv[i],r) (argv[i],r) 
L12: (argv[i],r) (argv[i],r) 
L13: (dpy[128],r) 
L14: (argv[++i],r) 
L15: (argv[i],r) 
L16: (argv[++i],r) 
L17: (argv[i],r) 
L18: (argv[i],r) 
L19: (argv[i],r) 
L20: (argv[i],r) 
L21: (argv[++i],r) 
L22: (argv[i],r) 
L23: (argv[++i],r) 
L24: (argv[i],r) 
L25: (argv[i],r) 
L26: (argv[i],r) 
}
array table
-----------------------------------------------
dpy -> [('[128]', 'r', 'normalized', ['i'], 13)]
LDEs formed:0

argv -> [('[i]', 'r', 'normalized', ['i'], 10), ('[i]', 'r', 'normalized', ['i'], 11), ('[i]', 'r', 'normalized', ['i'], 11), ('[i]', 'r', 'normalized', ['i'], 12), ('[i]', 'r', 'normalized', ['i'], 12), ('[++i]', 'r', 'normalized', ['i'], 14), ('[i]', 'r', 'normalized', ['i'], 15), ('[++i]', 'r', 'normalized', ['i'], 16), ('[i]', 'r', 'normalized', ['i'], 17), ('[i]', 'r', 'normalized', ['i'], 18), ('[i]', 'r', 'normalized', ['i'], 19), ('[i]', 'r', 'normalized', ['i'], 20), ('[++i]', 'r', 'normalized', ['i'], 21), ('[i]', 'r', 'normalized', ['i'], 22), ('[++i]', 'r', 'normalized', ['i'], 23), ('[i]', 'r', 'normalized', ['i'], 24), ('[i]', 'r', 'normalized', ['i'], 25), ('[i]', 'r', 'normalized', ['i'], 26)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < argc  i++
induction variable: ['i']
{
L27: (pNewArgv[i]=,w) (argv[i],r) 
L28: (pNewArgv[i],r) (argv[i],r) 
}
array table
-----------------------------------------------
pNewArgv -> [('[i]', 'w', 'normalized', ['i'], 27), ('[i]', 'r', 'normalized', ['i'], 28)]
LDEs formed:2

argv -> [('[i]', 'r', 'normalized', ['i'], 27), ('[i]', 'r', 'normalized', ['i'], 28)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < CURRENT_MAX_LINE_SIZE  i++
induction variable: ['i']
{
L29: (cur_line[i]=,w) 
}
array table
-----------------------------------------------
cur_line -> [('[i]', 'w', 'normalized', ['i'], 29)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = cur_pos  i < max_pos  i++
induction variable: ['i']
{
L30: (cur_line[i]=,w) 
}
array table
-----------------------------------------------
cur_line -> [('[i]', 'w', 'normalized', ['i'], 30)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = cur_pos  i < max_pos  i++
induction variable: ['i']
{
L31: (cur_line[i]=,w) (cur_line[i + 1],r) 
}
array table
-----------------------------------------------
cur_line -> [('[i]', 'w', 'normalized', ['i'], 31), ('[i + 1]', 'r', 'normalized', ['i'], 31)]
LDEs formed:2

distinct LDEs:
i1=i2 + 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = cur_pos  i < max_pos  i++
induction variable: ['i']
{
L32: (cur_line[i]=,w) (cur_line[i + 1],r) 
}
array table
-----------------------------------------------
cur_line -> [('[i]', 'w', 'normalized', ['i'], 32), ('[i + 1]', 'r', 'normalized', ['i'], 32)]
LDEs formed:2

distinct LDEs:
i1=i2 + 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = cur_pos  i < max_pos  i++
induction variable: ['i']
{
L33: (cur_line[i],r) 
}
array table
-----------------------------------------------
cur_line -> [('[i]', 'r', 'normalized', ['i'], 33)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < max_pos  i++
induction variable: ['i']
{
L34: (cur_line[i]=,w) 
}
array table
-----------------------------------------------
cur_line -> [('[i]', 'w', 'normalized', ['i'], 34)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = max_pos  i > cur_pos  i--
induction variable: ['i']
{
L35: (cur_line[i]=,w) (cur_line[i - 1],r) 
}
array table
-----------------------------------------------
cur_line -> [('[i]', 'w', 'normalized', ['i'], 35), ('[i - 1]', 'r', 'normalized', ['i'], 35)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizedictionary i++
induction variable: ['i']
{
L36: (dictionary[i],r) 
L37: (dictionary[i],r) 
}
array table
-----------------------------------------------
dictionary -> [('[i]', 'r', 'normalized', ['i'], 36), ('[i]', 'r', 'normalized', ['i'], 37)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim->rank  i++
induction variable: ['i']
{
L38: (gdim.dims[i].n=,w) (dims[i].n,r) 
L39: (gdim.dims[i].is=,w) (dims[i].is,r) 
L40: (gdim.dims[i].os=,w) (dims[i].os,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 38), ('[i]', 'r', 'normalized', ['i'], 39), ('[i]', 'r', 'normalized', ['i'], 40)]
LDEs formed:0

gdim.dims -> [('[i]', 'w', 'normalized', ['i'], 38), ('[i]', 'w', 'normalized', ['i'], 39), ('[i]', 'w', 'normalized', ['i'], 40)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim->rank  i++
induction variable: ['i']
{
L41: (kind[i]=,w) (kind[i],r) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 41), ('[i]', 'r', 'normalized', ['i'], 41)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim->howmany_rank  i++
induction variable: ['i']
{
L42: (gdim.howmany_dims[i].n=,w) (howmany_dims[i].n,r) 
L43: (gdim.howmany_dims[i].is=,w) (howmany_dims[i].is,r) 
L44: (gdim.howmany_dims[i].os=,w) (howmany_dims[i].os,r) 
}
array table
-----------------------------------------------
howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 42), ('[i]', 'r', 'normalized', ['i'], 43), ('[i]', 'r', 'normalized', ['i'], 44)]
LDEs formed:0

gdim.howmany_dims -> [('[i]', 'w', 'normalized', ['i'], 42), ('[i]', 'w', 'normalized', ['i'], 43), ('[i]', 'w', 'normalized', ['i'], 44)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim1->rank  i++
induction variable: ['i']
{
L45: (dims[i].n,r) (dims[i].n,r) 
L46: (dims[i].is,r) (dims[i].is,r) 
L47: (dims[i].os,r) (dims[i].os,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 45), ('[i]', 'r', 'normalized', ['i'], 45), ('[i]', 'r', 'normalized', ['i'], 46), ('[i]', 'r', 'normalized', ['i'], 46), ('[i]', 'r', 'normalized', ['i'], 47), ('[i]', 'r', 'normalized', ['i'], 47)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim1->howmany_rank  i++
induction variable: ['i']
{
L48: (howmany_dims[i].n,r) (howmany_dims[i].n,r) 
L49: (howmany_dims[i].is,r) (howmany_dims[i].is,r) 
L50: (howmany_dims[i].os,r) (howmany_dims[i].os,r) 
}
array table
-----------------------------------------------
howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 48), ('[i]', 'r', 'normalized', ['i'], 48), ('[i]', 'r', 'normalized', ['i'], 49), ('[i]', 'r', 'normalized', ['i'], 49), ('[i]', 'r', 'normalized', ['i'], 50), ('[i]', 'r', 'normalized', ['i'], 50)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rank  i++
induction variable: ['i']
{
L51: (kind1[i],r) (kind2[i],r) 
}
array table
-----------------------------------------------
kind2 -> [('[i]', 'r', 'normalized', ['i'], 51)]
LDEs formed:0

kind1 -> [('[i]', 'r', 'normalized', ['i'], 51)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L52: (dims[i],r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 52)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < lA  i++
induction variable: ['i']
{
L53: (Ai[i],r) 
}
array table
-----------------------------------------------
Ai -> [('[i]', 'r', 'normalized', ['i'], 53)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < nas2  i++
induction variable: ['i']
{
L54: (Ar[iA * i],r) (Ar[iA * (nA - i)],r) 
}
array table
-----------------------------------------------
Ar -> [('[iA * i]', 'r', 'not normalized', ['i'], 54), ('[iA * (nA - i)]', 'r', 'not normalized', ['i'], 54)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= nas2  i++
induction variable: ['i']
{
L55: (Ar[iA * i],r) (Ar[iA * (nA - i)],r) 
}
array table
-----------------------------------------------
Ar -> [('[iA * i]', 'r', 'not normalized', ['i'], 55), ('[iA * (nA - i)]', 'r', 'not normalized', ['i'], 55)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < nas2  i++
induction variable: ['i']
{
L56: (Ai[iA * i],r) (Ai[iA * (nA - i)],r) 
}
array table
-----------------------------------------------
Ai -> [('[iA * i]', 'r', 'not normalized', ['i'], 56), ('[iA * (nA - i)]', 'r', 'not normalized', ['i'], 56)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= nas2  i++
induction variable: ['i']
{
L57: (Ai[iA * i],r) (Ai[iA * (nA - i)],r) 
}
array table
-----------------------------------------------
Ai -> [('[iA * i]', 'r', 'not normalized', ['i'], 57), ('[iA * (nA - i)]', 'r', 'not normalized', ['i'], 57)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k < nAs2  k++
induction variable: ['k']
{
	loop info: l = 1  l < mA  l++
	induction variable: ['k', 'l']
	{
	L58: (Ar[l1],r) (Ar[l2],r) 
	}
 }
array table
-----------------------------------------------
Ar -> [('[l1]', 'r', 'not normalized', ['k', 'l'], 58), ('[l2]', 'r', 'not normalized', ['k', 'l'], 58)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k < nAs2  k++
induction variable: ['k']
{
	loop info: l = 1  l < mA  l++
	induction variable: ['k', 'l']
	{
	L59: (Ar[l1],r) (Ar[l2],r) (Ai[l1],r) (Ai[l2],r) 
	}
 }
array table
-----------------------------------------------
Ai -> [('[l1]', 'r', 'not normalized', ['k', 'l'], 59), ('[l2]', 'r', 'not normalized', ['k', 'l'], 59)]
LDEs formed:0

Ar -> [('[l1]', 'r', 'not normalized', ['k', 'l'], 59), ('[l2]', 'r', 'not normalized', ['k', 'l'], 59)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
	loop info: j = 0  j < ndims  j++
	induction variable: ['i', 'j']
	{
	L60: (dims1[l]=,w) (dims[j],r) 
	L61: (incr1[l]=,w) (incr[j],r) 
	}
 }
array table
-----------------------------------------------
dims -> [('[j]', 'r', 'normalized', ['i', 'j'], 60)]
LDEs formed:0

incr -> [('[j]', 'r', 'normalized', ['i', 'j'], 61)]
LDEs formed:0

dims1 -> [('[l]', 'w', 'not normalized', ['i', 'j'], 60)]
LDEs formed:1

incr1 -> [('[l]', 'w', 'not normalized', ['i', 'j'], 61)]
LDEs formed:1

distinct LDEs:
l=l
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L62: (incr[i],r) 
}
array table
-----------------------------------------------
incr -> [('[i]', 'r', 'normalized', ['i'], 62)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L63: (dims[i]-,r) (incr[i],r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 63)]
LDEs formed:0

incr -> [('[i]', 'r', 'normalized', ['i'], 63)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < (ndims - 1)  i++
induction variable: ['i']
{
L64: (incr1[i]=,w) (incr1[i - 1]*,r) (dims[i]-,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 64)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 64), ('[i - 1]', 'r', 'normalized', ['i'], 64)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < (ndims - 1)  i++
induction variable: ['i']
{
L65: (dims1[i]=,w) (dims1[i - 1]+,r) (dims[i]-,r) (incr[i],r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 65)]
LDEs formed:0

incr -> [('[i]', 'r', 'normalized', ['i'], 65)]
LDEs formed:0

dims1 -> [('[i]', 'w', 'normalized', ['i'], 65), ('[i - 1]', 'r', 'normalized', ['i'], 65)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L66: (dims[i]-,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 66)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nSubs2  i++
induction variable: ['i']
{
L67: (Ar[l1],r) (Ar[l2],r) 
L68: (incr[0],r) 
	loop info: j = ndims - 2  j >= 0  j--
	induction variable: ['i', 'j']
	{
	L69: (incr1[j]==,r) 
	L70: (dims1[j]+,r) (incr[j + 1],r) 
	}
 }
array table
-----------------------------------------------
incr -> [('[0]', 'r', 'normalized', ['i', 'j'], 68), ('[j + 1]', 'r', 'normalized', ['i', 'j'], 70)]
LDEs formed:0

Ar -> [('[l1]', 'r', 'not normalized', ['i', 'j'], 67), ('[l2]', 'r', 'not normalized', ['i', 'j'], 67)]
LDEs formed:0

dims1 -> [('[j]', 'r', 'normalized', ['i', 'j'], 70)]
LDEs formed:0

incr1 -> [('[j]', 'r', 'normalized', ['i', 'j'], 69)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nSubs2  i++
induction variable: ['i']
{
L70: (Ar[l1],r) (Ar[l2]|,r) (Ai[l1],r) (Ai[l2],r) 
L71: (incr[0],r) 
	loop info: j = ndims - 2  j >= 0  j--
	induction variable: ['i', 'j']
	{
	L72: (incr1[j]==,r) 
	L73: (dims1[j]+,r) (incr[j + 1],r) 
	}
 }
array table
-----------------------------------------------
Ai -> [('[l1]', 'r', 'not normalized', ['i', 'j'], 70), ('[l2]', 'r', 'not normalized', ['i', 'j'], 70)]
LDEs formed:0

incr -> [('[0]', 'r', 'normalized', ['i', 'j'], 71), ('[j + 1]', 'r', 'normalized', ['i', 'j'], 73)]
LDEs formed:0

Ar -> [('[l1]', 'r', 'not normalized', ['i', 'j'], 70), ('[l2]', 'r', 'not normalized', ['i', 'j'], 70)]
LDEs formed:0

dims1 -> [('[j]', 'r', 'normalized', ['i', 'j'], 73)]
LDEs formed:0

incr1 -> [('[j]', 'r', 'normalized', ['i', 'j'], 72)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L73: (dims[i]=,w) (gdim.dims[i].n,r) 
L74: (incr[i]=,w) (gdim.dims[i].is,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'w', 'normalized', ['i'], 73)]
LDEs formed:1

incr -> [('[i]', 'w', 'normalized', ['i'], 74)]
LDEs formed:1

gdim.dims -> [('[i]', 'r', 'normalized', ['i'], 73), ('[i]', 'r', 'normalized', ['i'], 74)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < gdim.howmany_rank  i++
induction variable: ['i']
{
L75: (dims1[i]=,w) (dims1[i - 1]*,r) (gdim.howmany_dims[i].n,r) 
}
array table
-----------------------------------------------
dims1 -> [('[i]', 'w', 'normalized', ['i'], 75), ('[i - 1]', 'r', 'normalized', ['i'], 75)]
LDEs formed:2

gdim.howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 75)]
LDEs formed:0

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.howmany_rank  i++
induction variable: ['i']
{
L76: (gdim.howmany_dims[i].n-,r) (gdim.howmany_dims[i].is,r) 
L77: (incr1[i]=,w) 
}
array table
-----------------------------------------------
gdim.howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 76), ('[i]', 'r', 'normalized', ['i'], 76)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 77)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ir = 0  ir < gdim.howmany_rank  ir++
induction variable: ['ir']
{
	loop info: i = 1  i <= m  i++
	induction variable: ['ir', 'i']
	{
	L78: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
	L79: (gdim.howmany_dims[0].is,r) 
		loop info: k = gdim.howmany_rank - 2  k >= 0  k--
		induction variable: ['ir', 'i', 'k']
		{
		L80: (dims1[k]==,r) 
		L81: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
		}
 	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 78), ('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 78)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 80)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 79), ('[k + 1]', 'r', 'normalized', ['ir', 'i', 'k'], 81)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 81)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ir = 0  ir < gdim.howmany_rank  ir++
induction variable: ['ir']
{
	loop info: i = 1  i <= m  i++
	induction variable: ['ir', 'i']
	{
	L82: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
	L83: (gdim.howmany_dims[0].is,r) 
		loop info: k = gdim.howmany_rank - 2  k >= 0  k--
		induction variable: ['ir', 'i', 'k']
		{
		L84: (dims1[k]==,r) 
		L85: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
		}
 	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 82), ('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 82)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 84)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 83), ('[k + 1]', 'r', 'normalized', ['ir', 'i', 'k'], 85)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 85)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ir = 0  ir < gdim.howmany_rank  ir++
induction variable: ['ir']
{
	loop info: i = 1  i <= m  i++
	induction variable: ['ir', 'i']
	{
	L86: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
	L87: (gdim.dims[1].n,r) (gdim.dims[1].is,r) 
	L88: (gdim.howmany_dims[0].is,r) 
		loop info: k = gdim.howmany_rank - 2  k >= 0  k--
		induction variable: ['ir', 'i', 'k']
		{
		L89: (dims1[k]==,r) 
		L90: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
		}
 	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 86), ('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 86), ('[1]', 'r', 'normalized', ['ir', 'i', 'k'], 87), ('[1]', 'r', 'normalized', ['ir', 'i', 'k'], 87)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 89)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 88), ('[k + 1]', 'r', 'normalized', ['ir', 'i', 'k'], 90)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 90)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ir = 0  ir < gdim.howmany_rank  ir++
induction variable: ['ir']
{
	loop info: i = 1  i <= m  i++
	induction variable: ['ir', 'i']
	{
	L91: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
	L92: (gdim.dims[1].n,r) (gdim.dims[1].is,r) 
	L93: (gdim.howmany_dims[0].is,r) 
		loop info: k = gdim.howmany_rank - 2  k >= 0  k--
		induction variable: ['ir', 'i', 'k']
		{
		L94: (dims1[k]==,r) 
		L95: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
		}
 	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 91), ('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 91), ('[1]', 'r', 'normalized', ['ir', 'i', 'k'], 92), ('[1]', 'r', 'normalized', ['ir', 'i', 'k'], 92)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 94)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 93), ('[k + 1]', 'r', 'normalized', ['ir', 'i', 'k'], 95)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 95)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L96: (dims[i]=,w) (gdim.dims[i].n,r) 
L97: (incr[i]=,w) (gdim.dims[i].is,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'w', 'normalized', ['i'], 96)]
LDEs formed:1

incr -> [('[i]', 'w', 'normalized', ['i'], 97)]
LDEs formed:1

gdim.dims -> [('[i]', 'r', 'normalized', ['i'], 96), ('[i]', 'r', 'normalized', ['i'], 97)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ir = 0  ir < gdim.howmany_rank  ir++
induction variable: ['ir']
{
	loop info: i = 1  i <= m  i++
	induction variable: ['ir', 'i']
	{
	L98: (gdim.howmany_dims[0].is,r) 
		loop info: k = gdim.howmany_rank - 2  k >= 0  k--
		induction variable: ['ir', 'i', 'k']
		{
		L99: (dims1[k]==,r) 
		L100: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
		}
 	}
 }
array table
-----------------------------------------------
dims1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 99)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['ir', 'i', 'k'], 98), ('[k + 1]', 'r', 'normalized', ['ir', 'i', 'k'], 100)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['ir', 'i', 'k'], 100)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n  i++
induction variable: ['i']
{
L101: (Ar[l2]=,w) (Ar[l1],r) 
}
array table
-----------------------------------------------
Ar -> [('[l2]', 'w', 'not normalized', ['i'], 101), ('[l1]', 'r', 'not normalized', ['i'], 101)]
LDEs formed:2

distinct LDEs:
l2=l2
l2=l1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n  i++
induction variable: ['i']
{
L102: (Ar[l2]=,w) (Ar[l1],r) 
L103: (Ai[l2]=,w) (Ai[l1],r) 
}
array table
-----------------------------------------------
Ai -> [('[l2]', 'w', 'not normalized', ['i'], 103), ('[l1]', 'r', 'not normalized', ['i'], 103)]
LDEs formed:2

Ar -> [('[l2]', 'w', 'not normalized', ['i'], 102), ('[l1]', 'r', 'not normalized', ['i'], 102)]
LDEs formed:2

distinct LDEs:
l2=l2
l2=l1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < n  j++
induction variable: ['j']
{
	loop info: i = 1  i < mA  i++
	induction variable: ['j', 'i']
	{
	L103: (Ar[l2]=,w) (Ar[l1],r) 
	}
 }
array table
-----------------------------------------------
Ar -> [('[l2]', 'w', 'not normalized', ['j', 'i'], 103), ('[l1]', 'r', 'not normalized', ['j', 'i'], 103)]
LDEs formed:2

distinct LDEs:
l2=l2
l2=l1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < n  j++
induction variable: ['j']
{
	loop info: i = 1  i < mA  i++
	induction variable: ['j', 'i']
	{
	L104: (Ar[l2]=,w) (Ar[l1],r) 
	L105: (Ai[l2]=,w) (Ai[l1],r) 
	}
 }
array table
-----------------------------------------------
Ai -> [('[l2]', 'w', 'not normalized', ['j', 'i'], 105), ('[l1]', 'r', 'not normalized', ['j', 'i'], 105)]
LDEs formed:2

Ar -> [('[l2]', 'w', 'not normalized', ['j', 'i'], 104), ('[l1]', 'r', 'not normalized', ['j', 'i'], 104)]
LDEs formed:2

distinct LDEs:
l2=l2
l2=l1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
	loop info: j = 0  j < ndims  j++
	induction variable: ['i', 'j']
	{
	L105: (dims1[l]=,w) (dims[j],r) 
	L106: (incr1[l]=,w) (incr[j],r) 
	}
 }
array table
-----------------------------------------------
dims -> [('[j]', 'r', 'normalized', ['i', 'j'], 105)]
LDEs formed:0

incr -> [('[j]', 'r', 'normalized', ['i', 'j'], 106)]
LDEs formed:0

dims1 -> [('[l]', 'w', 'not normalized', ['i', 'j'], 105)]
LDEs formed:1

incr1 -> [('[l]', 'w', 'not normalized', ['i', 'j'], 106)]
LDEs formed:1

distinct LDEs:
l=l
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L107: (incr[i],r) 
}
array table
-----------------------------------------------
incr -> [('[i]', 'r', 'normalized', ['i'], 107)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L108: (dims[i]-,r) (incr[i],r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 108)]
LDEs formed:0

incr -> [('[i]', 'r', 'normalized', ['i'], 108)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < (ndims - 1)  i++
induction variable: ['i']
{
L109: (incr1[i]=,w) (incr1[i - 1]*,r) (dims[i]-,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 109)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 109), ('[i - 1]', 'r', 'normalized', ['i'], 109)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < (ndims - 1)  i++
induction variable: ['i']
{
L110: (dims1[i]=,w) (dims1[i - 1]+,r) (dims[i]-,r) (incr[i],r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 110)]
LDEs formed:0

incr -> [('[i]', 'r', 'normalized', ['i'], 110)]
LDEs formed:0

dims1 -> [('[i]', 'w', 'normalized', ['i'], 110), ('[i - 1]', 'r', 'normalized', ['i'], 110)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L111: (dims[i]-,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'r', 'normalized', ['i'], 111)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nSubs2  i++
induction variable: ['i']
{
L112: (Ar[l2]=,w) (Ar[l1],r) 
L113: (incr[0],r) 
	loop info: j = ndims - 2  j >= 0  j--
	induction variable: ['i', 'j']
	{
	L114: (incr1[j]==,r) 
	L115: (dims1[j]+,r) (incr[j + 1],r) 
	}
 }
array table
-----------------------------------------------
incr -> [('[0]', 'r', 'normalized', ['i', 'j'], 113), ('[j + 1]', 'r', 'normalized', ['i', 'j'], 115)]
LDEs formed:0

Ar -> [('[l2]', 'w', 'not normalized', ['i', 'j'], 112), ('[l1]', 'r', 'not normalized', ['i', 'j'], 112)]
LDEs formed:2

dims1 -> [('[j]', 'r', 'normalized', ['i', 'j'], 115)]
LDEs formed:0

incr1 -> [('[j]', 'r', 'normalized', ['i', 'j'], 114)]
LDEs formed:0

distinct LDEs:
l2=l2
l2=l1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nSubs2  i++
induction variable: ['i']
{
L115: (Ar[l2]=,w) (Ar[l1],r) 
L116: (Ai[l2]=,w) (Ai[l1],r) 
L117: (incr[0],r) 
	loop info: j = ndims - 2  j >= 0  j--
	induction variable: ['i', 'j']
	{
	L118: (incr1[j]==,r) 
	L119: (dims1[j]+,r) (incr[j + 1],r) 
	}
 }
array table
-----------------------------------------------
Ai -> [('[l2]', 'w', 'not normalized', ['i', 'j'], 116), ('[l1]', 'r', 'not normalized', ['i', 'j'], 116)]
LDEs formed:2

incr -> [('[0]', 'r', 'normalized', ['i', 'j'], 117), ('[j + 1]', 'r', 'normalized', ['i', 'j'], 119)]
LDEs formed:0

Ar -> [('[l2]', 'w', 'not normalized', ['i', 'j'], 115), ('[l1]', 'r', 'not normalized', ['i', 'j'], 115)]
LDEs formed:2

dims1 -> [('[j]', 'r', 'normalized', ['i', 'j'], 119)]
LDEs formed:0

incr1 -> [('[j]', 'r', 'normalized', ['i', 'j'], 118)]
LDEs formed:0

distinct LDEs:
l2=l2
l2=l1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L119: (dims[i]=,w) (gdim.dims[i].n,r) 
L120: (incr[i]=,w) (gdim.dims[i].is,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'w', 'normalized', ['i'], 119)]
LDEs formed:1

incr -> [('[i]', 'w', 'normalized', ['i'], 120)]
LDEs formed:1

gdim.dims -> [('[i]', 'r', 'normalized', ['i'], 119), ('[i]', 'r', 'normalized', ['i'], 120)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < hrank  i++
induction variable: ['i']
{
L121: (dims1[i]=,w) (dims1[i - 1]*,r) (gdim.howmany_dims[i].n,r) 
}
array table
-----------------------------------------------
dims1 -> [('[i]', 'w', 'normalized', ['i'], 121), ('[i - 1]', 'r', 'normalized', ['i'], 121)]
LDEs formed:2

gdim.howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 121)]
LDEs formed:0

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < hrank  i++
induction variable: ['i']
{
L122: (incr1[i]=,w) (incr1[i - 1]+,r) (gdim.howmany_dims[i].n-,r) (gdim.howmany_dims[i].is,r) 
}
array table
-----------------------------------------------
gdim.howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 122), ('[i]', 'r', 'normalized', ['i'], 122)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 122), ('[i - 1]', 'r', 'normalized', ['i'], 122)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L123: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
L124: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L125: (dims1[k]==,r) 
	L126: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 123), ('[0]', 'r', 'normalized', ['i', 'k'], 123)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 125)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 124), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 126)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 126)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L127: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
L128: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L129: (dims1[k]==,r) 
	L130: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 127), ('[0]', 'r', 'normalized', ['i', 'k'], 127)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 129)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 128), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 130)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 130)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L131: (gdim.dims[0].n,r) (gdim.dims[0].is,r) (gdim.dims[1].n,r) (gdim.dims[1].is,r) 
L132: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L133: (dims1[k]==,r) 
	L134: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 131), ('[0]', 'r', 'normalized', ['i', 'k'], 131), ('[1]', 'r', 'normalized', ['i', 'k'], 131), ('[1]', 'r', 'normalized', ['i', 'k'], 131)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 133)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 132), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 134)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 134)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L135: (gdim.dims[0].n,r) (gdim.dims[0].is,r) (gdim.dims[1].n,r) (gdim.dims[1].is,r) 
L136: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L137: (dims1[k]==,r) 
	L138: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 135), ('[0]', 'r', 'normalized', ['i', 'k'], 135), ('[1]', 'r', 'normalized', ['i', 'k'], 135), ('[1]', 'r', 'normalized', ['i', 'k'], 135)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 137)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 136), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 138)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 138)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L139: (dims[i]=,w) (gdim.dims[i].n,r) 
L140: (incr[i]=,w) (gdim.dims[i].is,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'w', 'normalized', ['i'], 139)]
LDEs formed:1

incr -> [('[i]', 'w', 'normalized', ['i'], 140)]
LDEs formed:1

gdim.dims -> [('[i]', 'r', 'normalized', ['i'], 139), ('[i]', 'r', 'normalized', ['i'], 140)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L141: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L142: (dims1[k]==,r) 
	L143: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 142)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 141), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 143)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 143)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < nA  i++
induction variable: ['i']
{
L144: (Ar[i * iA]*=,w) 
}
array table
-----------------------------------------------
Ar -> [('[i * iA]', 'w', 'not normalized', ['i'], 144)]
LDEs formed:1

distinct LDEs:
i1 * iA=i2 * iA
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < nA  i++
induction variable: ['i']
{
L145: (Ar[i * iA]*=,w) 
L146: (Ai[i * iA]*=,w) 
}
array table
-----------------------------------------------
Ai -> [('[i * iA]', 'w', 'not normalized', ['i'], 146)]
LDEs formed:1

Ar -> [('[i * iA]', 'w', 'not normalized', ['i'], 145)]
LDEs formed:1

distinct LDEs:
i1 * iA=i2 * iA
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j < nA  j++
induction variable: ['j']
{
L146: (Ar[j * jA],r) 
}
array table
-----------------------------------------------
Ar -> [('[j * jA]', 'r', 'not normalized', ['j'], 146)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j < nA  j++
induction variable: ['j']
{
L147: (Ar[j * jA],r) (Ai[j * jA],r) 
}
array table
-----------------------------------------------
Ai -> [('[j * jA]', 'r', 'not normalized', ['j'], 147)]
LDEs formed:0

Ar -> [('[j * jA]', 'r', 'not normalized', ['j'], 147)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < dims[0]  i++
induction variable: ['i']
{
L148: (incr[0],r) 
}
array table
-----------------------------------------------
incr -> [('[0]', 'r', 'normalized', ['i'], 148)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < dims[0]  i++
induction variable: ['i']
{
L149: (incr[0],r) (incr[0],r) 
}
array table
-----------------------------------------------
incr -> [('[0]', 'r', 'normalized', ['i'], 149), ('[0]', 'r', 'normalized', ['i'], 149)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L150: (dims[i]=,w) (gdim.dims[i].n,r) 
L151: (incr[i]=,w) (gdim.dims[i].is,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'w', 'normalized', ['i'], 150)]
LDEs formed:1

incr -> [('[i]', 'w', 'normalized', ['i'], 151)]
LDEs formed:1

gdim.dims -> [('[i]', 'r', 'normalized', ['i'], 150), ('[i]', 'r', 'normalized', ['i'], 151)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < hrank  i++
induction variable: ['i']
{
L152: (dims1[i]=,w) (dims1[i - 1]*,r) (gdim.howmany_dims[i].n,r) 
}
array table
-----------------------------------------------
dims1 -> [('[i]', 'w', 'normalized', ['i'], 152), ('[i - 1]', 'r', 'normalized', ['i'], 152)]
LDEs formed:2

gdim.howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 152)]
LDEs formed:0

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < hrank  i++
induction variable: ['i']
{
L153: (incr1[i]=,w) (incr1[i - 1]+,r) (gdim.howmany_dims[i].n-,r) (gdim.howmany_dims[i].is,r) 
}
array table
-----------------------------------------------
gdim.howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 153), ('[i]', 'r', 'normalized', ['i'], 153)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 153), ('[i - 1]', 'r', 'normalized', ['i'], 153)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L154: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
L155: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L156: (dims1[k]==,r) 
	L157: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 154), ('[0]', 'r', 'normalized', ['i', 'k'], 154)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 156)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 155), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 157)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 157)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L158: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
L159: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L160: (dims1[k]==,r) 
	L161: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 158), ('[0]', 'r', 'normalized', ['i', 'k'], 158)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 160)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 159), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 161)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 161)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L162: (Ar[j],r) (gdim.dims[0].n,r) (gdim.dims[0].is,r) (gdim.dims[1].n,r) (gdim.dims[1].is,r) 
L163: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L164: (dims1[k]==,r) 
	L165: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 162), ('[0]', 'r', 'normalized', ['i', 'k'], 162), ('[1]', 'r', 'normalized', ['i', 'k'], 162), ('[1]', 'r', 'normalized', ['i', 'k'], 162)]
LDEs formed:0

Ar -> [('[j]', 'r', 'not normalized', ['i', 'k'], 162)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 164)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 163), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 165)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 165)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L166: (Ar[j],r) (Ai[j],r) (gdim.dims[0].n,r) (gdim.dims[0].is,r) (gdim.dims[1].n,r) (gdim.dims[1].is,r) 
L167: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L168: (dims1[k]==,r) 
	L169: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 169)]
LDEs formed:0

Ai -> [('[j]', 'r', 'not normalized', ['i', 'k'], 166)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 168)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 167), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 169)]
LDEs formed:0

gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 166), ('[0]', 'r', 'normalized', ['i', 'k'], 166), ('[1]', 'r', 'normalized', ['i', 'k'], 166), ('[1]', 'r', 'normalized', ['i', 'k'], 166)]
LDEs formed:0

Ar -> [('[j]', 'r', 'not normalized', ['i', 'k'], 166)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L167: (dims[i]=,w) (gdim.dims[i].n,r) 
L168: (incr[i]=,w) (gdim.dims[i].is,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'w', 'normalized', ['i'], 167)]
LDEs formed:1

incr -> [('[i]', 'w', 'normalized', ['i'], 168)]
LDEs formed:1

gdim.dims -> [('[i]', 'r', 'normalized', ['i'], 167), ('[i]', 'r', 'normalized', ['i'], 168)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L169: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L170: (dims1[k]==,r) 
	L171: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 170)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 169), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 171)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 171)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nA  i++
induction variable: ['i']
{
L172: (Ar[i * iA]*=,w) 
}
array table
-----------------------------------------------
Ar -> [('[i * iA]', 'w', 'not normalized', ['i'], 172)]
LDEs formed:1

distinct LDEs:
i1 * iA=i2 * iA
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nA  i++
induction variable: ['i']
{
L173: (Ar[i * iA]*=,w) 
L174: (Ai[i * iA]*=,w) 
}
array table
-----------------------------------------------
Ai -> [('[i * iA]', 'w', 'not normalized', ['i'], 174)]
LDEs formed:1

Ar -> [('[i * iA]', 'w', 'not normalized', ['i'], 173)]
LDEs formed:1

distinct LDEs:
i1 * iA=i2 * iA
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nA  j++
induction variable: ['j']
{
L174: (Ar[j * jA],r) 
}
array table
-----------------------------------------------
Ar -> [('[j * jA]', 'r', 'not normalized', ['j'], 174)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nA  j++
induction variable: ['j']
{
L175: (Ar[j * jA],r) (Ai[j * jA],r) 
}
array table
-----------------------------------------------
Ai -> [('[j * jA]', 'r', 'not normalized', ['j'], 175)]
LDEs formed:0

Ar -> [('[j * jA]', 'r', 'not normalized', ['j'], 175)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < dims[0]  i++
induction variable: ['i']
{
L176: (incr[0],r) 
}
array table
-----------------------------------------------
incr -> [('[0]', 'r', 'normalized', ['i'], 176)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < dims[0]  i++
induction variable: ['i']
{
L177: (incr[0],r) (incr[0],r) 
}
array table
-----------------------------------------------
incr -> [('[0]', 'r', 'normalized', ['i'], 177), ('[0]', 'r', 'normalized', ['i'], 177)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L178: (dims[i]=,w) (gdim.dims[i].n,r) 
L179: (incr[i]=,w) (gdim.dims[i].is,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'w', 'normalized', ['i'], 178)]
LDEs formed:1

incr -> [('[i]', 'w', 'normalized', ['i'], 179)]
LDEs formed:1

gdim.dims -> [('[i]', 'r', 'normalized', ['i'], 178), ('[i]', 'r', 'normalized', ['i'], 179)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < hrank  i++
induction variable: ['i']
{
L180: (dims1[i]=,w) (dims1[i - 1]*,r) (gdim.howmany_dims[i].n,r) 
}
array table
-----------------------------------------------
dims1 -> [('[i]', 'w', 'normalized', ['i'], 180), ('[i - 1]', 'r', 'normalized', ['i'], 180)]
LDEs formed:2

gdim.howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 180)]
LDEs formed:0

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < hrank  i++
induction variable: ['i']
{
L181: (incr1[i]=,w) (incr1[i - 1]+,r) (gdim.howmany_dims[i].n-,r) (gdim.howmany_dims[i].is,r) 
}
array table
-----------------------------------------------
gdim.howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 181), ('[i]', 'r', 'normalized', ['i'], 181)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 181), ('[i - 1]', 'r', 'normalized', ['i'], 181)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L182: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
L183: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L184: (dims1[k]==,r) 
	L185: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 182), ('[0]', 'r', 'normalized', ['i', 'k'], 182)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 184)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 183), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 185)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 185)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L186: (gdim.dims[0].n,r) (gdim.dims[0].is,r) 
L187: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L188: (dims1[k]==,r) 
	L189: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 186), ('[0]', 'r', 'normalized', ['i', 'k'], 186)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 188)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 187), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 189)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 189)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L190: (Ar[j],r) (gdim.dims[0].n,r) (gdim.dims[0].is,r) (gdim.dims[1].n,r) (gdim.dims[1].is,r) 
L191: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L192: (dims1[k]==,r) 
	L193: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 190), ('[0]', 'r', 'normalized', ['i', 'k'], 190), ('[1]', 'r', 'normalized', ['i', 'k'], 190), ('[1]', 'r', 'normalized', ['i', 'k'], 190)]
LDEs formed:0

Ar -> [('[j]', 'r', 'not normalized', ['i', 'k'], 190)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 192)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 191), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 193)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 193)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L194: (Ar[j],r) (Ai[j],r) (gdim.dims[0].n,r) (gdim.dims[0].is,r) (gdim.dims[1].n,r) (gdim.dims[1].is,r) 
L195: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L196: (dims1[k]==,r) 
	L197: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 197)]
LDEs formed:0

Ai -> [('[j]', 'r', 'not normalized', ['i', 'k'], 194)]
LDEs formed:0

dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 196)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 195), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 197)]
LDEs formed:0

gdim.dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 194), ('[0]', 'r', 'normalized', ['i', 'k'], 194), ('[1]', 'r', 'normalized', ['i', 'k'], 194), ('[1]', 'r', 'normalized', ['i', 'k'], 194)]
LDEs formed:0

Ar -> [('[j]', 'r', 'not normalized', ['i', 'k'], 194)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L195: (dims[i]=,w) (gdim.dims[i].n,r) 
L196: (incr[i]=,w) (gdim.dims[i].is,r) 
}
array table
-----------------------------------------------
dims -> [('[i]', 'w', 'normalized', ['i'], 195)]
LDEs formed:1

incr -> [('[i]', 'w', 'normalized', ['i'], 196)]
LDEs formed:1

gdim.dims -> [('[i]', 'r', 'normalized', ['i'], 195), ('[i]', 'r', 'normalized', ['i'], 196)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= m  i++
induction variable: ['i']
{
L197: (gdim.howmany_dims[0].is,r) 
	loop info: k = hrank - 2  k >= 0  k--
	induction variable: ['i', 'k']
	{
	L198: (dims1[k]==,r) 
	L199: (incr1[k]+,r) (gdim.howmany_dims[k + 1].is,r) 
	}
 }
array table
-----------------------------------------------
dims1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 198)]
LDEs formed:0

gdim.howmany_dims -> [('[0]', 'r', 'normalized', ['i', 'k'], 197), ('[k + 1]', 'r', 'normalized', ['i', 'k'], 199)]
LDEs formed:0

incr1 -> [('[k]', 'r', 'normalized', ['i', 'k'], 199)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L200: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 200)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = (first_nonsingleton)  i < ndimsA  i++
induction variable: ['i']
{
L201: (dimsA[i],r) 
L202: (gdim.dims[j].n=,w) (dimsA[i],r) 
L203: (gdim.dims[j].is=,w) 
L204: (gdim.dims[j].os=,w) 
L205: (dimsA[i],r) 
}
array table
-----------------------------------------------
gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 202), ('[j]', 'w', 'not normalized', ['i'], 203), ('[j]', 'w', 'not normalized', ['i'], 204)]
LDEs formed:6

dimsA -> [('[i]', 'r', 'normalized', ['i'], 201), ('[i]', 'r', 'normalized', ['i'], 202), ('[i]', 'r', 'normalized', ['i'], 205)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L206: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 206)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rank  i++
induction variable: ['i']
{
L207: (Sel[i],r) 
L208: (Sel[i],r) 
L209: (Sel[i],r) (Sel[i - 1],r) 
}
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i'], 207), ('[i]', 'r', 'normalized', ['i'], 208), ('[i]', 'r', 'normalized', ['i'], 209), ('[i - 1]', 'r', 'normalized', ['i'], 209)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L210: (Sel[j]==,r) 
L211: (gdim.dims[j].n=,w) (dimsA[i],r) 
L212: (gdim.dims[j].is=,w) 
L213: (gdim.dims[j].os=,w) 
L214: (dimsA[i],r) 
}
array table
-----------------------------------------------
gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 211), ('[j]', 'w', 'not normalized', ['i'], 212), ('[j]', 'w', 'not normalized', ['i'], 213)]
LDEs formed:6

Sel -> [('[j]', 'r', 'not normalized', ['i'], 210)]
LDEs formed:0

dimsA -> [('[i]', 'r', 'normalized', ['i'], 211), ('[i]', 'r', 'normalized', ['i'], 214)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L215: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = Sel[i - 1] + 1  j <= Sel[i] - 1  j++
	induction variable: ['i', 'j']
		{
		L216: (dimsA[j - 1],r) 
		}
 }
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 215), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 215)]
LDEs formed:0

dimsA -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 216)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= (Sel[0] - 1)  j++
induction variable: ['j']
{
L217: (dimsA[j - 1],r) 
}
array table
-----------------------------------------------
dimsA -> [('[j - 1]', 'r', 'normalized', ['j'], 217)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L218: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L219: (dimsA[j - 1],r) 
		}
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L220: (dimsA[j - 1],r) 
		L221: (gdim.howmany_dims[ih].is=,w) 
		L222: (gdim.howmany_dims[ih].os=,w) 
		L223: (gdim.howmany_dims[ih].n=,w) 
		}
L224: (Sel[i]-,r) 
}
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 218), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 218), ('[i]', 'r', 'normalized', ['i', 'j'], 224)]
LDEs formed:0

gdim.howmany_dims -> [('[ih]', 'w', 'not normalized', ['i', 'j'], 221), ('[ih]', 'w', 'not normalized', ['i', 'j'], 222), ('[ih]', 'w', 'not normalized', ['i', 'j'], 223)]
LDEs formed:6

dimsA -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 219), ('[j - 1]', 'r', 'normalized', ['i', 'j'], 220)]
LDEs formed:0

distinct LDEs:
ih=ih
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = (Sel[rank - 1] + 1)  j <= ndimsA  j++
induction variable: ['j']
{
L221: (dimsA[j - 1],r) 
}
array table
-----------------------------------------------
dimsA -> [('[j - 1]', 'r', 'normalized', ['j'], 221)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L222: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 222)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L223: (Dim1[i],r) 
L224: (Dim1[i],r) 
}
array table
-----------------------------------------------
Dim1 -> [('[i]', 'r', 'normalized', ['i'], 223), ('[i]', 'r', 'normalized', ['i'], 224)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L225: (Incr[i],r) 
L226: (Incr[i],r) (Incr[i - 1],r) 
}
array table
-----------------------------------------------
Incr -> [('[i]', 'r', 'normalized', ['i'], 225), ('[i]', 'r', 'normalized', ['i'], 226), ('[i - 1]', 'r', 'normalized', ['i'], 226)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k < ndims  k++
induction variable: ['k']
{
L227: (Incr[k]%,r) 
L228: (Incr[k],r) 
L229: (Dim[nd++]=,w) (Incr[k]/,r) 
L230: (Incr[k],r) 
L231: (Dim[nd++]=,w) (Dim1[k],r) 
L232: (Dim1[k],r) 
L233: (Sel[k]=,w) 
}
array table
-----------------------------------------------
Sel -> [('[k]', 'w', 'normalized', ['k'], 233)]
LDEs formed:1

Dim -> [('[nd++]', 'w', 'not normalized', ['k'], 229), ('[nd++]', 'w', 'not normalized', ['k'], 231)]
LDEs formed:3

Incr -> [('[k]', 'r', 'normalized', ['k'], 227), ('[k]', 'r', 'normalized', ['k'], 228), ('[k]', 'r', 'normalized', ['k'], 229), ('[k]', 'r', 'normalized', ['k'], 230)]
LDEs formed:0

Dim1 -> [('[k]', 'r', 'normalized', ['k'], 231), ('[k]', 'r', 'normalized', ['k'], 232)]
LDEs formed:0

distinct LDEs:
nd++=nd++
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L233: (Sel[j]==,r) 
L234: (gdim.dims[j].n=,w) (Dim[i],r) 
L235: (gdim.dims[j].is=,w) 
L236: (gdim.dims[j].os=,w) 
L237: (Dim[i],r) 
}
array table
-----------------------------------------------
Dim -> [('[i]', 'r', 'normalized', ['i'], 234), ('[i]', 'r', 'normalized', ['i'], 237)]
LDEs formed:0

gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 234), ('[j]', 'w', 'not normalized', ['i'], 235), ('[j]', 'w', 'not normalized', ['i'], 236)]
LDEs formed:6

Sel -> [('[j]', 'r', 'not normalized', ['i'], 233)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L234: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = Sel[i - 1] + 1  j <= Sel[i] - 1  j++
	induction variable: ['i', 'j']
		{
		L235: (Dim[j - 1],r) 
		}
 }
array table
-----------------------------------------------
Dim -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 235)]
LDEs formed:0

Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 234), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 234)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= (Sel[0] - 1)  j++
induction variable: ['j']
{
L235: (Dim[j - 1],r) 
}
array table
-----------------------------------------------
Dim -> [('[j - 1]', 'r', 'normalized', ['j'], 235)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L236: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L237: (Dim[j - 1],r) 
		}
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L238: (Dim[j - 1],r) 
		L239: (gdim.howmany_dims[ih].is=,w) 
		L240: (gdim.howmany_dims[ih].os=,w) 
		L241: (gdim.howmany_dims[ih].n=,w) 
		}
L242: (Sel[i]-,r) 
}
array table
-----------------------------------------------
Dim -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 237), ('[j - 1]', 'r', 'normalized', ['i', 'j'], 238)]
LDEs formed:0

Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 236), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 236), ('[i]', 'r', 'normalized', ['i', 'j'], 242)]
LDEs formed:0

gdim.howmany_dims -> [('[ih]', 'w', 'not normalized', ['i', 'j'], 239), ('[ih]', 'w', 'not normalized', ['i', 'j'], 240), ('[ih]', 'w', 'not normalized', ['i', 'j'], 241)]
LDEs formed:6

distinct LDEs:
ih=ih
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = (Sel[rank - 1] + 1)  j <= ndims  j++
induction variable: ['j']
{
L242: (Dim[j - 1],r) 
}
array table
-----------------------------------------------
Dim -> [('[j - 1]', 'r', 'normalized', ['j'], 242)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L243: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 243)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L244: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 244)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L245: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 245)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L246: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 246)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L247: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 247)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L248: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 248)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L249: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 249)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < howmany_rank  i++
induction variable: ['i']
{
L250: (dims1[i]=,w) (dims1[i - 1]*,r) (howmany_dims[i].n,r) 
}
array table
-----------------------------------------------
dims1 -> [('[i]', 'w', 'normalized', ['i'], 250), ('[i - 1]', 'r', 'normalized', ['i'], 250)]
LDEs formed:2

howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 250)]
LDEs formed:0

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < howmany_rank  i++
induction variable: ['i']
{
L251: (howmany_dims[i].n-,r) (howmany_dims[i].is,r) 
L252: (incr1[i]=,w) 
}
array table
-----------------------------------------------
howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 251), ('[i]', 'r', 'normalized', ['i'], 251)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 252)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i1 = 1  i1 <= nloop  i1++
induction variable: ['i1']
{
L253: (Ar[i],r) (Ar[i],r) 
L254: (Ai[i],r) (Ai[i],r) 
L255: (howmany_dims[0].is,r) 
	loop info: i2 = howmany_rank - 2  i2 >= 0  i2--
	induction variable: ['i1', 'i2']
	{
	L256: (dims1[i2],r) 
	L257: (howmany_dims[i2 + 1].is-,r) (incr1[i2],r) 
	}
 }
array table
-----------------------------------------------
Ai -> [('[i]', 'r', 'not normalized', ['i1', 'i2'], 254), ('[i]', 'r', 'not normalized', ['i1', 'i2'], 254)]
LDEs formed:0

Ar -> [('[i]', 'r', 'not normalized', ['i1', 'i2'], 253), ('[i]', 'r', 'not normalized', ['i1', 'i2'], 253)]
LDEs formed:0

dims1 -> [('[i2]', 'r', 'normalized', ['i1', 'i2'], 256)]
LDEs formed:0

incr1 -> [('[i2]', 'r', 'normalized', ['i1', 'i2'], 257)]
LDEs formed:0

howmany_dims -> [('[0]', 'r', 'normalized', ['i1', 'i2'], 255), ('[i2 + 1]', 'r', 'normalized', ['i1', 'i2'], 257)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m1 * n1  j++
induction variable: ['j']
{
	loop info: i = 0  i < nb_flag  i++
	induction variable: ['j', 'i']
	{
	L258: (Str1[j],r) (Str[i],r) 
	}
 }
array table
-----------------------------------------------
Str1 -> [('[j]', 'r', 'normalized', ['j', 'i'], 258)]
LDEs formed:0

Str -> [('[i]', 'r', 'normalized', ['j', 'i'], 258)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1 i < nb_flag  i++
induction variable: ['i']
{
L259: (flagt[i],r) (flagt[i],r) 
L260: (Str3[j - 1]=,w) (Str[i],r) 
L261: (Str3[j - 1]==,r) 
}
array table
-----------------------------------------------
Str3 -> [('[j - 1]', 'w', 'not normalized', ['i'], 260), ('[j - 1]', 'r', 'not normalized', ['i'], 261)]
LDEs formed:2

flagt -> [('[i]', 'r', 'normalized', ['i'], 259), ('[i]', 'r', 'normalized', ['i'], 259)]
LDEs formed:0

Str -> [('[i]', 'r', 'normalized', ['i'], 260)]
LDEs formed:0

distinct LDEs:
j - 1=j - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L261: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 261)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = (first_nonsingleton)  i < ndimsA  i++
induction variable: ['i']
{
L262: (dimsA[i],r) 
L263: (gdim.dims[j].n=,w) (dimsA[i],r) 
L264: (gdim.dims[j].is=,w) 
L265: (gdim.dims[j].os=,w) 
L266: (dimsA[i],r) 
}
array table
-----------------------------------------------
gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 263), ('[j]', 'w', 'not normalized', ['i'], 264), ('[j]', 'w', 'not normalized', ['i'], 265)]
LDEs formed:6

dimsA -> [('[i]', 'r', 'normalized', ['i'], 262), ('[i]', 'r', 'normalized', ['i'], 263), ('[i]', 'r', 'normalized', ['i'], 266)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L267: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 267)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rank  i++
induction variable: ['i']
{
L268: (Sel[i],r) 
L269: (Sel[i],r) 
L270: (Sel[i],r) (Sel[i - 1],r) 
}
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i'], 268), ('[i]', 'r', 'normalized', ['i'], 269), ('[i]', 'r', 'normalized', ['i'], 270), ('[i - 1]', 'r', 'normalized', ['i'], 270)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L271: (Sel[j]==,r) 
L272: (gdim.dims[j].n=,w) (dimsA[i],r) 
L273: (gdim.dims[j].is=,w) 
L274: (gdim.dims[j].os=,w) 
L275: (dimsA[i],r) 
}
array table
-----------------------------------------------
gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 272), ('[j]', 'w', 'not normalized', ['i'], 273), ('[j]', 'w', 'not normalized', ['i'], 274)]
LDEs formed:6

Sel -> [('[j]', 'r', 'not normalized', ['i'], 271)]
LDEs formed:0

dimsA -> [('[i]', 'r', 'normalized', ['i'], 272), ('[i]', 'r', 'normalized', ['i'], 275)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L276: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = Sel[i - 1] + 1  j <= Sel[i] - 1  j++
	induction variable: ['i', 'j']
		{
		L277: (dimsA[j - 1],r) 
		}
 }
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 276), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 276)]
LDEs formed:0

dimsA -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 277)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= (Sel[0] - 1)  j++
induction variable: ['j']
{
L278: (dimsA[j - 1],r) 
}
array table
-----------------------------------------------
dimsA -> [('[j - 1]', 'r', 'normalized', ['j'], 278)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L279: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L280: (dimsA[j - 1],r) 
		}
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L281: (dimsA[j - 1],r) 
		L282: (gdim.howmany_dims[ih].is=,w) 
		L283: (gdim.howmany_dims[ih].os=,w) 
		L284: (gdim.howmany_dims[ih].n=,w) 
		}
L285: (Sel[i]-,r) 
}
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 279), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 279), ('[i]', 'r', 'normalized', ['i', 'j'], 285)]
LDEs formed:0

gdim.howmany_dims -> [('[ih]', 'w', 'not normalized', ['i', 'j'], 282), ('[ih]', 'w', 'not normalized', ['i', 'j'], 283), ('[ih]', 'w', 'not normalized', ['i', 'j'], 284)]
LDEs formed:6

dimsA -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 280), ('[j - 1]', 'r', 'normalized', ['i', 'j'], 281)]
LDEs formed:0

distinct LDEs:
ih=ih
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = (Sel[rank - 1] + 1)  j <= ndimsA  j++
induction variable: ['j']
{
L282: (dimsA[j - 1],r) 
}
array table
-----------------------------------------------
dimsA -> [('[j - 1]', 'r', 'normalized', ['j'], 282)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L283: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 283)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L284: (Dim1[i],r) 
L285: (Dim1[i],r) 
}
array table
-----------------------------------------------
Dim1 -> [('[i]', 'r', 'normalized', ['i'], 284), ('[i]', 'r', 'normalized', ['i'], 285)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L286: (Incr[i],r) 
L287: (Incr[i],r) (Incr[i - 1],r) 
}
array table
-----------------------------------------------
Incr -> [('[i]', 'r', 'normalized', ['i'], 286), ('[i]', 'r', 'normalized', ['i'], 287), ('[i - 1]', 'r', 'normalized', ['i'], 287)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k < ndims  k++
induction variable: ['k']
{
L288: (Incr[k]%,r) 
L289: (Incr[k],r) 
L290: (Dim[nd++]=,w) (Incr[k]/,r) 
L291: (Incr[k],r) 
L292: (Dim[nd++]=,w) (Dim1[k],r) 
L293: (Dim1[k],r) 
L294: (Sel[k]=,w) 
}
array table
-----------------------------------------------
Sel -> [('[k]', 'w', 'normalized', ['k'], 294)]
LDEs formed:1

Dim -> [('[nd++]', 'w', 'not normalized', ['k'], 290), ('[nd++]', 'w', 'not normalized', ['k'], 292)]
LDEs formed:3

Incr -> [('[k]', 'r', 'normalized', ['k'], 288), ('[k]', 'r', 'normalized', ['k'], 289), ('[k]', 'r', 'normalized', ['k'], 290), ('[k]', 'r', 'normalized', ['k'], 291)]
LDEs formed:0

Dim1 -> [('[k]', 'r', 'normalized', ['k'], 292), ('[k]', 'r', 'normalized', ['k'], 293)]
LDEs formed:0

distinct LDEs:
nd++=nd++
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L294: (Sel[j]==,r) 
L295: (gdim.dims[j].n=,w) (Dim[i],r) 
L296: (gdim.dims[j].is=,w) 
L297: (gdim.dims[j].os=,w) 
L298: (Dim[i],r) 
}
array table
-----------------------------------------------
Dim -> [('[i]', 'r', 'normalized', ['i'], 295), ('[i]', 'r', 'normalized', ['i'], 298)]
LDEs formed:0

gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 295), ('[j]', 'w', 'not normalized', ['i'], 296), ('[j]', 'w', 'not normalized', ['i'], 297)]
LDEs formed:6

Sel -> [('[j]', 'r', 'not normalized', ['i'], 294)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L295: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = Sel[i - 1] + 1  j <= Sel[i] - 1  j++
	induction variable: ['i', 'j']
		{
		L296: (Dim[j - 1],r) 
		}
 }
array table
-----------------------------------------------
Dim -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 296)]
LDEs formed:0

Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 295), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 295)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= (Sel[0] - 1)  j++
induction variable: ['j']
{
L296: (Dim[j - 1],r) 
}
array table
-----------------------------------------------
Dim -> [('[j - 1]', 'r', 'normalized', ['j'], 296)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L297: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L298: (Dim[j - 1],r) 
		}
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L299: (Dim[j - 1],r) 
		L300: (gdim.howmany_dims[ih].is=,w) 
		L301: (gdim.howmany_dims[ih].os=,w) 
		L302: (gdim.howmany_dims[ih].n=,w) 
		}
L303: (Sel[i]-,r) 
}
array table
-----------------------------------------------
Dim -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 298), ('[j - 1]', 'r', 'normalized', ['i', 'j'], 299)]
LDEs formed:0

Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 297), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 297), ('[i]', 'r', 'normalized', ['i', 'j'], 303)]
LDEs formed:0

gdim.howmany_dims -> [('[ih]', 'w', 'not normalized', ['i', 'j'], 300), ('[ih]', 'w', 'not normalized', ['i', 'j'], 301), ('[ih]', 'w', 'not normalized', ['i', 'j'], 302)]
LDEs formed:6

distinct LDEs:
ih=ih
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = (Sel[rank - 1] + 1)  j <= ndims  j++
induction variable: ['j']
{
L303: (Dim[j - 1],r) 
}
array table
-----------------------------------------------
Dim -> [('[j - 1]', 'r', 'normalized', ['j'], 303)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L304: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 304)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L305: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 305)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L306: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 306)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L307: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 307)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L308: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 308)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L309: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 309)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < gdim.rank  i++
induction variable: ['i']
{
L310: (kind[i]=,w) 
}
array table
-----------------------------------------------
kind -> [('[i]', 'w', 'normalized', ['i'], 310)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < howmany_rank  i++
induction variable: ['i']
{
L311: (dims1[i]=,w) (dims1[i - 1]*,r) (howmany_dims[i].n,r) 
}
array table
-----------------------------------------------
dims1 -> [('[i]', 'w', 'normalized', ['i'], 311), ('[i - 1]', 'r', 'normalized', ['i'], 311)]
LDEs formed:2

howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 311)]
LDEs formed:0

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < howmany_rank  i++
induction variable: ['i']
{
L312: (howmany_dims[i].n-,r) (howmany_dims[i].is,r) 
L313: (incr1[i]=,w) 
}
array table
-----------------------------------------------
howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 312), ('[i]', 'r', 'normalized', ['i'], 312)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 313)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i1 = 1  i1 <= nloop  i1++
induction variable: ['i1']
{
L314: (Ar[i],r) (Ar[i],r) 
L315: (Ai[i],r) (Ai[i],r) 
L316: (howmany_dims[0].is,r) 
	loop info: i2 = howmany_rank - 2  i2 >= 0  i2--
	induction variable: ['i1', 'i2']
	{
	L317: (dims1[i2],r) 
	L318: (howmany_dims[i2 + 1].is-,r) (incr1[i2],r) 
	}
 }
array table
-----------------------------------------------
Ai -> [('[i]', 'r', 'not normalized', ['i1', 'i2'], 315), ('[i]', 'r', 'not normalized', ['i1', 'i2'], 315)]
LDEs formed:0

Ar -> [('[i]', 'r', 'not normalized', ['i1', 'i2'], 314), ('[i]', 'r', 'not normalized', ['i1', 'i2'], 314)]
LDEs formed:0

dims1 -> [('[i2]', 'r', 'normalized', ['i1', 'i2'], 317)]
LDEs formed:0

incr1 -> [('[i2]', 'r', 'normalized', ['i1', 'i2'], 318)]
LDEs formed:0

howmany_dims -> [('[0]', 'r', 'normalized', ['i1', 'i2'], 316), ('[i2 + 1]', 'r', 'normalized', ['i1', 'i2'], 318)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)strlen(Str)  i++
induction variable: ['i']
{
L319: (Str[i]==,r) 
L320: (Str1[n1 - 1]=,w) 
	loop info: k = 0  k < len  k++
	induction variable: ['i', 'k']
		{
		L321: (Str1[n1 - 1][k]=,w) (Str[k + j],r) 
		}
L322: (Str1[n1 - 1][len]=,w) 
}
array table
-----------------------------------------------
Str1 -> [('[n1 - 1]', 'w', 'not normalized', ['i', 'k'], 320), ('[n1 - 1][k]', 'w', 'not normalized', ['i', 'k'], 321), ('[n1 - 1][len]', 'w', 'not normalized', ['i', 'k'], 322)]
LDEs formed:12

Str -> [('[i]', 'r', 'normalized', ['i', 'k'], 319), ('[k + j]', 'r', 'not normalized', ['i', 'k'], 321)]
LDEs formed:0

distinct LDEs:
n1 - 1=n1 - 1,len=len
n1 - 1=n1 - 1
n1 - 1=n1 - 1,k1=k2
n1 - 1=n1 - 1,k1=len
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m1*n1  j++
induction variable: ['j']
{
L322: (Str1[j],r) 
	loop info: i = 0  i < (int)strlen(Str1[j])  i++
	induction variable: ['j', 'i']
	{
	L323: (Str[k+i]=,w) (Str1[j][i],r) 
	}
L324: (Str1[j],r) 
L325: (Str1[j],r) 
}
array table
-----------------------------------------------
Str1 -> [('[j]', 'r', 'normalized', ['j', 'i'], 322), ('[j][i]', 'r', 'normalized', ['j', 'i'], 323), ('[j]', 'r', 'normalized', ['j', 'i'], 324), ('[j]', 'r', 'normalized', ['j', 'i'], 325)]
LDEs formed:0

Str -> [('[k+i]', 'w', 'not normalized', ['j', 'i'], 323)]
LDEs formed:1

distinct LDEs:
k+i1=k+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L324: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 324)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = (first_nonsingleton)  i < ndimsA  i++
induction variable: ['i']
{
L325: (dimsA[i],r) 
L326: (gdim.dims[j].n=,w) (dimsA[i],r) 
L327: (gdim.dims[j].is=,w) 
L328: (gdim.dims[j].os=,w) 
L329: (dimsA[i],r) 
}
array table
-----------------------------------------------
gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 326), ('[j]', 'w', 'not normalized', ['i'], 327), ('[j]', 'w', 'not normalized', ['i'], 328)]
LDEs formed:6

dimsA -> [('[i]', 'r', 'normalized', ['i'], 325), ('[i]', 'r', 'normalized', ['i'], 326), ('[i]', 'r', 'normalized', ['i'], 329)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L330: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 330)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rank  i++
induction variable: ['i']
{
L331: (Sel[i],r) 
L332: (Sel[i],r) 
L333: (Sel[i],r) (Sel[i - 1],r) 
}
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i'], 331), ('[i]', 'r', 'normalized', ['i'], 332), ('[i]', 'r', 'normalized', ['i'], 333), ('[i - 1]', 'r', 'normalized', ['i'], 333)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L334: (Sel[j]==,r) 
L335: (gdim.dims[j].n=,w) (dimsA[i],r) 
L336: (gdim.dims[j].is=,w) 
L337: (gdim.dims[j].os=,w) 
L338: (dimsA[i],r) 
}
array table
-----------------------------------------------
gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 335), ('[j]', 'w', 'not normalized', ['i'], 336), ('[j]', 'w', 'not normalized', ['i'], 337)]
LDEs formed:6

Sel -> [('[j]', 'r', 'not normalized', ['i'], 334)]
LDEs formed:0

dimsA -> [('[i]', 'r', 'normalized', ['i'], 335), ('[i]', 'r', 'normalized', ['i'], 338)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L339: (Sel[i],r) (Sel[i-1]+,r) 
	loop info: j = Sel[i - 1] + 1  j <= Sel[i] - 1  j++
	induction variable: ['i', 'j']
		{
		L340: (dimsA[j - 1],r) 
		}
 }
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 339), ('[i-1]', 'r', 'normalized', ['i', 'j'], 339)]
LDEs formed:0

dimsA -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 340)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank -1  i++
induction variable: ['i']
{
L341: (Sel[i],r) (Sel[i - 1]+,r) 
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		}
	loop info: j = (Sel[i - 1] + 1)  j <= (Sel[i] - 1)  j++
	induction variable: ['i', 'j']
		{
		L342: (dimsA[j - 1],r) 
		L343: (gdim.howmany_dims[ih].is=,w) 
		L344: (gdim.howmany_dims[ih].os=,w) 
		L345: (gdim.howmany_dims[ih].n=,w) 
		}
L346: (Sel[i]-,r) 
}
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i', 'j'], 341), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 341), ('[i]', 'r', 'normalized', ['i', 'j'], 346)]
LDEs formed:0

gdim.howmany_dims -> [('[ih]', 'w', 'not normalized', ['i', 'j'], 343), ('[ih]', 'w', 'not normalized', ['i', 'j'], 344), ('[ih]', 'w', 'not normalized', ['i', 'j'], 345)]
LDEs formed:6

dimsA -> [('[j - 1]', 'r', 'normalized', ['i', 'j'], 342)]
LDEs formed:0

distinct LDEs:
ih=ih
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L343: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 343)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L344: (Dim1[i],r) 
L345: (Dim1[i],r) 
}
array table
-----------------------------------------------
Dim1 -> [('[i]', 'r', 'normalized', ['i'], 344), ('[i]', 'r', 'normalized', ['i'], 345)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L346: (Incr[i],r) 
L347: (Incr[i],r) (Incr[i - 1],r) 
}
array table
-----------------------------------------------
Incr -> [('[i]', 'r', 'normalized', ['i'], 346), ('[i]', 'r', 'normalized', ['i'], 347), ('[i - 1]', 'r', 'normalized', ['i'], 347)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k < ndims  k++
induction variable: ['k']
{
L348: (Incr[k]%,r) 
L349: (Incr[k],r) 
L350: (Dim[nd++]=,w) (Incr[k]/,r) 
L351: (Incr[k],r) 
L352: (Dim[nd++]=,w) (Dim1[k],r) 
L353: (Dim1[k],r) 
L354: (Sel[k]=,w) 
}
array table
-----------------------------------------------
Sel -> [('[k]', 'w', 'normalized', ['k'], 354)]
LDEs formed:1

Dim -> [('[nd++]', 'w', 'not normalized', ['k'], 350), ('[nd++]', 'w', 'not normalized', ['k'], 352)]
LDEs formed:3

Incr -> [('[k]', 'r', 'normalized', ['k'], 348), ('[k]', 'r', 'normalized', ['k'], 349), ('[k]', 'r', 'normalized', ['k'], 350), ('[k]', 'r', 'normalized', ['k'], 351)]
LDEs formed:0

Dim1 -> [('[k]', 'r', 'normalized', ['k'], 352), ('[k]', 'r', 'normalized', ['k'], 353)]
LDEs formed:0

distinct LDEs:
nd++=nd++
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndims  i++
induction variable: ['i']
{
L354: (Sel[j]==,r) 
L355: (gdim.dims[j].n=,w) (Dim[i],r) 
L356: (gdim.dims[j].is=,w) 
L357: (gdim.dims[j].os=,w) 
L358: (Dim[i],r) 
}
array table
-----------------------------------------------
Dim -> [('[i]', 'r', 'normalized', ['i'], 355), ('[i]', 'r', 'normalized', ['i'], 358)]
LDEs formed:0

gdim.dims -> [('[j]', 'w', 'not normalized', ['i'], 355), ('[j]', 'w', 'not normalized', ['i'], 356), ('[j]', 'w', 'not normalized', ['i'], 357)]
LDEs formed:6

Sel -> [('[j]', 'r', 'not normalized', ['i'], 354)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= rank - 1  i++
induction variable: ['i']
{
L355: (Sel[i],r) (Sel[i - 1]+,r) 
}
array table
-----------------------------------------------
Sel -> [('[i]', 'r', 'normalized', ['i'], 355), ('[i - 1]', 'r', 'normalized', ['i'], 355)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 2  i <= rank  i++
induction variable: ['i']
{
L356: (Sel[i - 1],r) (Sel[i - 2]+,r) 
	loop info: j = (Sel[i - 2] + 1)  j <= (Sel[i - 1] - 1)  j++
	induction variable: ['i', 'j']
		}
L357: (gdim.howmany_dims[ih].is=,w) 
L358: (gdim.howmany_dims[ih].os=,w) 
L359: (gdim.howmany_dims[ih].n=,w) 
L360: (Sel[i - 1]-,r) 
}
array table
-----------------------------------------------
Sel -> [('[i - 1]', 'r', 'normalized', ['i', 'j'], 356), ('[i - 2]', 'r', 'normalized', ['i', 'j'], 356), ('[i - 1]', 'r', 'normalized', ['i', 'j'], 360)]
LDEs formed:0

gdim.howmany_dims -> [('[ih]', 'w', 'not normalized', ['i', 'j'], 357), ('[ih]', 'w', 'not normalized', ['i', 'j'], 358), ('[ih]', 'w', 'not normalized', ['i', 'j'], 359)]
LDEs formed:6

distinct LDEs:
ih=ih
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndimsA  i++
induction variable: ['i']
{
L360: (dimsA[i],r) 
}
array table
-----------------------------------------------
dimsA -> [('[i]', 'r', 'normalized', ['i'], 360)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < howmany_rank  i++
induction variable: ['i']
{
L361: (howmany_dims[i].n-,r) (howmany_dims[i].is,r) 
L362: (incr1[i]=,w) 
}
array table
-----------------------------------------------
howmany_dims -> [('[i]', 'r', 'normalized', ['i'], 361), ('[i]', 'r', 'normalized', ['i'], 361)]
LDEs formed:0

incr1 -> [('[i]', 'w', 'normalized', ['i'], 362)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i1 = 1  i1 <= nloop  i1++
induction variable: ['i1']
{
L363: (ri[i],r) (ii[i],r) (ro[i],r) (io[i],r) 
L364: (howmany_dims[0].is,r) 
	loop info: i2 = howmany_rank - 2  i2 >= 0  i2--
	induction variable: ['i1', 'i2']
	{
	L365: (dims1[i2],r) 
	L366: (howmany_dims[i2 + 1].is-,r) (incr1[i2],r) 
	}
 }
array table
-----------------------------------------------
howmany_dims -> [('[0]', 'r', 'normalized', ['i1', 'i2'], 364), ('[i2 + 1]', 'r', 'normalized', ['i1', 'i2'], 366)]
LDEs formed:0

incr1 -> [('[i2]', 'r', 'normalized', ['i1', 'i2'], 366)]
LDEs formed:0

dims1 -> [('[i2]', 'r', 'normalized', ['i1', 'i2'], 365)]
LDEs formed:0

ii -> [('[i]', 'r', 'not normalized', ['i1', 'i2'], 363)]
LDEs formed:0

io -> [('[i]', 'r', 'not normalized', ['i1', 'i2'], 363)]
LDEs formed:0

ro -> [('[i]', 'r', 'not normalized', ['i1', 'i2'], 363)]
LDEs formed:0

ri -> [('[i]', 'r', 'not normalized', ['i1', 'i2'], 363)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mOut  i++ 
induction variable: ['i']
{
	loop info: j=0  j < nA  j++ 
	induction variable: ['i', 'j']
	{
	L364: (T[j]=,w) 
	}
	loop info: j=0  j < nOut  j++ 
	induction variable: ['i', 'j']
	{
	L365: (Out[i+j*mOut]=,w) 
	}
 }
array table
-----------------------------------------------
T -> [('[j]', 'w', 'normalized', ['i', 'j'], 364)]
LDEs formed:1

Out -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j'], 365)]
LDEs formed:1

distinct LDEs:
j1=j2
i1+j1*mOut=i2+j2*mOut
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mOut  i++ 
induction variable: ['i']
{
	loop info: j = 0  j < nA  j++ 
	induction variable: ['i', 'j']
		{
		L366: (Tr[j]=,w) 
		L367: (Ti[j]=,w) 
		}
	loop info: j = 0  j < nA  j++ 
	induction variable: ['i', 'j']
		{
		L368: (Tr[j]=,w) 
		L369: (Ti[j]=,w) 
		}
	loop info: j = 0  j < nA  j++ 
	induction variable: ['i', 'j']
		{
		L370: (Tr[j]=,w) 
		L371: (Ti[j]=,w) 
		}
	loop info: j = 0  j < nA  j++ 
	induction variable: ['i', 'j']
		{
		L372: (Tr[j]=,w) 
		L373: (Ti[j]=,w) 
		}
	loop info: j = 0  j < nOut  j++ 
	induction variable: ['i', 'j']
	{
	L374: (Outr[i+j*mOut]=,w) 
	L375: (Outi[i+j*mOut]=,w) 
	L376: (Outr[i+j*mOut]-=,w) 
	L377: (Outi[i+j*mOut]=,w) 
	}
 }
array table
-----------------------------------------------
Outi -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j'], 375), ('[i+j*mOut]', 'w', 'not normalized', ['i', 'j'], 377)]
LDEs formed:3

Outr -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j'], 374), ('[i+j*mOut]', 'w', 'not normalized', ['i', 'j'], 376)]
LDEs formed:3

Tr -> [('[j]', 'w', 'normalized', ['i', 'j'], 366), ('[j]', 'w', 'normalized', ['i', 'j'], 368), ('[j]', 'w', 'normalized', ['i', 'j'], 370), ('[j]', 'w', 'normalized', ['i', 'j'], 372)]
LDEs formed:10

Ti -> [('[j]', 'w', 'normalized', ['i', 'j'], 367), ('[j]', 'w', 'normalized', ['i', 'j'], 369), ('[j]', 'w', 'normalized', ['i', 'j'], 371), ('[j]', 'w', 'normalized', ['i', 'j'], 373)]
LDEs formed:10

distinct LDEs:
j1=j2
i1+j1*mOut=i2+j2*mOut
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < mOut  i++ 
induction variable: ['i']
{
L374: (Out[i]=,w) 
}
array table
-----------------------------------------------
Out -> [('[i]', 'w', 'normalized', ['i'], 374)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nOut  j++ 
induction variable: ['j']
{
L375: (Out[j]=,w) 
}
array table
-----------------------------------------------
Out -> [('[j]', 'w', 'normalized', ['j'], 375)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	L376: (Out[i+j*mOut]=,w) 
	}
 }
array table
-----------------------------------------------
Out -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j', 'bj', 'aj'], 376)]
LDEs formed:1

distinct LDEs:
i1+j1*mOut=i2+j2*mOut
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < mOut  i++ 
induction variable: ['i']
{
L377: (Outr[i]=,w) 
L378: (Outi[i]=,w) 
}
array table
-----------------------------------------------
Outi -> [('[i]', 'w', 'normalized', ['i'], 378)]
LDEs formed:1

Outr -> [('[i]', 'w', 'normalized', ['i'], 377)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	L378: (Outr[i+j*mOut]=,w) 
	L379: (Outi[i+j*mOut]=,w) 
	}
 }
array table
-----------------------------------------------
Outi -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j', 'bj', 'aj'], 379)]
LDEs formed:1

Outr -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j', 'bj', 'aj'], 378)]
LDEs formed:1

distinct LDEs:
i1+j1*mOut=i2+j2*mOut
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mOut  i++ 
induction variable: ['i']
{
L379: (Outr[i]=,w) 
L380: (Outi[i]=,w) 
}
array table
-----------------------------------------------
Outi -> [('[i]', 'w', 'normalized', ['i'], 380)]
LDEs formed:1

Outr -> [('[i]', 'w', 'normalized', ['i'], 379)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	L380: (Outr[i+j*mOut]=,w) 
	L381: (Outi[i+j*mOut]=,w) 
	}
 }
array table
-----------------------------------------------
Outi -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j', 'bj', 'aj'], 381)]
LDEs formed:1

Outr -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j', 'bj', 'aj'], 380)]
LDEs formed:1

distinct LDEs:
i1+j1*mOut=i2+j2*mOut
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < mOut  i++ 
induction variable: ['i']
{
L381: (Outr[i]=,w) 
L382: (Outi[i]=,w) 
}
array table
-----------------------------------------------
Outi -> [('[i]', 'w', 'normalized', ['i'], 382)]
LDEs formed:1

Outr -> [('[i]', 'w', 'normalized', ['i'], 381)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	L382: (Outr[i+j*mOut]=,w) 
	L383: (Outi[i+j*mOut]=,w) 
	}
 }
array table
-----------------------------------------------
Outi -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j', 'bj', 'aj'], 383)]
LDEs formed:1

Outr -> [('[i+j*mOut]', 'w', 'not normalized', ['i', 'j', 'bj', 'aj'], 382)]
LDEs formed:1

distinct LDEs:
i1+j1*mOut=i2+j2*mOut
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m * n  i++
induction variable: ['i']
{
L383: (x[%d]=,w) (cxtmp[i],r) 
}
array table
-----------------------------------------------
x -> [('[%d]', 'w', 'not normalized', ['i'], 383)]
LDEs formed:1

cxtmp -> [('[i]', 'r', 'normalized', ['i'], 383)]
LDEs formed:0

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < SizeJOBS  i++
induction variable: ['i']
{
L384: (JOBS[i]=,w) 
}
array table
-----------------------------------------------
JOBS -> [('[i]', 'w', 'normalized', ['i'], 384)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < SizeJOBS  i++
induction variable: ['i']
{
L385: (JOBS[i],r) 
L386: (JOBS[i],r) 
L387: (JOBS[i]=,w) 
}
array table
-----------------------------------------------
JOBS -> [('[i]', 'r', 'normalized', ['i'], 385), ('[i]', 'r', 'normalized', ['i'], 386), ('[i]', 'w', 'normalized', ['i'], 387)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m * n  i++
induction variable: ['i']
{
L388: (x[%d]=,w) (cxtmp[i],r) 
}
array table
-----------------------------------------------
x -> [('[%d]', 'w', 'not normalized', ['i'], 388)]
LDEs formed:1

cxtmp -> [('[i]', 'r', 'normalized', ['i'], 388)]
LDEs formed:0

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < SizeJOBS  i++
induction variable: ['i']
{
L389: (JOBS[i]=,w) 
}
array table
-----------------------------------------------
JOBS -> [('[i]', 'w', 'normalized', ['i'], 389)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < SizeJOBS  i++
induction variable: ['i']
{
L390: (JOBS[%d]=,w) (JOBS[i],r) 
}
array table
-----------------------------------------------
JOBS -> [('[%d]', 'w', 'not normalized', ['i'], 390), ('[i]', 'r', 'normalized', ['i'], 390)]
LDEs formed:2

distinct LDEs:
%d=i2
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m * n  i++
induction variable: ['i']
{
L391: (C[%d]=,w) (cxtmp[i],r) 
}
array table
-----------------------------------------------
C -> [('[%d]', 'w', 'not normalized', ['i'], 391)]
LDEs formed:1

cxtmp -> [('[i]', 'r', 'normalized', ['i'], 391)]
LDEs formed:0

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < SizeJOBS  i++
induction variable: ['i']
{
L392: (JOBS[i],r) 
L393: (JOBS[i],r) 
L394: (JOBS[i]=,w) 
}
array table
-----------------------------------------------
JOBS -> [('[i]', 'r', 'normalized', ['i'], 392), ('[i]', 'r', 'normalized', ['i'], 393), ('[i]', 'w', 'normalized', ['i'], 394)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m * n  i++
induction variable: ['i']
{
L395: (x[%d]=,w) (cxtmp[i],r) 
}
array table
-----------------------------------------------
x -> [('[%d]', 'w', 'not normalized', ['i'], 395)]
LDEs formed:1

cxtmp -> [('[i]', 'r', 'normalized', ['i'], 395)]
LDEs formed:0

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < SizeJOBS  i++
induction variable: ['i']
{
L396: (JOBS[i]=,w) 
}
array table
-----------------------------------------------
JOBS -> [('[i]', 'w', 'normalized', ['i'], 396)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < SizeJOBS  i++
induction variable: ['i']
{
L397: (JOBS[i],r) 
L398: (JOBS[i],r) 
L399: (JOBS[i]=,w) 
}
array table
-----------------------------------------------
JOBS -> [('[i]', 'r', 'normalized', ['i'], 397), ('[i]', 'r', 'normalized', ['i'], 398), ('[i]', 'w', 'normalized', ['i'], 399)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rowA_ * colA_  i++
induction variable: ['i']
{
L400: (A[%d]=,w) (matrixOfDouble[i],r) 
}
array table
-----------------------------------------------
A -> [('[%d]', 'w', 'not normalized', ['i'], 400)]
LDEs formed:1

matrixOfDouble -> [('[i]', 'r', 'normalized', ['i'], 400)]
LDEs formed:0

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rowB_ * colB_  i++
induction variable: ['i']
{
L401: (B[%d]=,w) (matrixOfDoubleB[i],r) 
}
array table
-----------------------------------------------
B -> [('[%d]', 'w', 'not normalized', ['i'], 401)]
LDEs formed:1

matrixOfDoubleB -> [('[i]', 'r', 'normalized', ['i'], 401)]
LDEs formed:0

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0   j < rowB_   j++
induction variable: ['j']
{
	loop info: i = 0   i < colB_   i++
	induction variable: ['j', 'i']
	{
	L402: (matrixOfDoubleB[i * rowB_ + j],r) 
	}
 }
array table
-----------------------------------------------
matrixOfDoubleB -> [('[i * rowB_ + j]', 'r', 'not normalized', ['j', 'i'], 402)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rowA_ * colA_  i++
induction variable: ['i']
{
L403: (A[%d]=,w) (matrixOfBoolean[i],r) 
}
array table
-----------------------------------------------
A -> [('[%d]', 'w', 'not normalized', ['i'], 403)]
LDEs formed:1

matrixOfBoolean -> [('[i]', 'r', 'normalized', ['i'], 403)]
LDEs formed:0

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rowB_ * colB_  i++
induction variable: ['i']
{
L404: (B[%d]=,w) (matrixOfBooleanB[i],r) 
}
array table
-----------------------------------------------
matrixOfBooleanB -> [('[i]', 'r', 'normalized', ['i'], 404)]
LDEs formed:0

B -> [('[%d]', 'w', 'not normalized', ['i'], 404)]
LDEs formed:1

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0   j < rowB_   j++
induction variable: ['j']
{
	loop info: i = 0   i < colB_   i++
	induction variable: ['j', 'i']
	{
	L405: (matrixOfBooleanB[i * rowB_ + j],r) 
	}
 }
array table
-----------------------------------------------
matrixOfBooleanB -> [('[i * rowB_ + j]', 'r', 'not normalized', ['j', 'i'], 405)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rowA_ * colA_ * 2  i++
induction variable: ['i']
{
L406: (A[%d]=,w) (matrixOfComplex[i],r) 
}
array table
-----------------------------------------------
A -> [('[%d]', 'w', 'not normalized', ['i'], 406)]
LDEs formed:1

matrixOfComplex -> [('[i]', 'r', 'normalized', ['i'], 406)]
LDEs formed:0

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rowA_ * colA_  i++
induction variable: ['i']
{
L407: (matrixOfComplex[i],r) (matrixOfComplex[i + colA_],r) 
}
array table
-----------------------------------------------
matrixOfComplex -> [('[i]', 'r', 'normalized', ['i'], 407), ('[i + colA_]', 'r', 'not normalized', ['i'], 407)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rowB_ * colB_  i++
induction variable: ['i']
{
L408: (B[%d]=,w) (matrixOfComplexB[i],r) 
}
array table
-----------------------------------------------
matrixOfComplexB -> [('[i]', 'r', 'normalized', ['i'], 408)]
LDEs formed:0

B -> [('[%d]', 'w', 'not normalized', ['i'], 408)]
LDEs formed:1

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < rowB_ * colB_  i++
induction variable: ['i']
{
L409: (B[%d]=,w) (matrixOfComplexB_img[i],r) 
}
array table
-----------------------------------------------
matrixOfComplexB_img -> [('[i]', 'r', 'normalized', ['i'], 409)]
LDEs formed:0

B -> [('[%d]', 'w', 'not normalized', ['i'], 409)]
LDEs formed:1

distinct LDEs:
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0   j < rowB_   j++
induction variable: ['j']
{
	loop info: i = 0   i < colB_   i++
	induction variable: ['j', 'i']
	{
	L410: (matrixOfComplexB[i * rowB_ + j],r) (matrixOfComplexB_img[i * rowB_ + j],r) 
	}
 }
array table
-----------------------------------------------
matrixOfComplexB -> [('[i * rowB_ + j]', 'r', 'not normalized', ['j', 'i'], 410)]
LDEs formed:0

matrixOfComplexB_img -> [('[i * rowB_ + j]', 'r', 'not normalized', ['j', 'i'], 410)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L411: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 411)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 411)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0   j < iCols   j++
induction variable: ['j']
{
	loop info: i = 0   i < iRows   i++
	induction variable: ['j', 'i']
	{
	L412: (pstData[j * iRows + i],r) 
	}
 }
array table
-----------------------------------------------
pstData -> [('[j * iRows + i]', 'r', 'not normalized', ['j', 'i'], 412)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L413: (pstData[i],r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'r', 'normalized', ['i'], 413)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L414: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 414)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 414)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0   j < iCols   j++
induction variable: ['j']
{
	loop info: i = 0   i < iRows   i++
	induction variable: ['j', 'i']
	{
	L415: (pstData[j * iRows + i],r) 
	}
 }
array table
-----------------------------------------------
pstData -> [('[j * iRows + i]', 'r', 'not normalized', ['j', 'i'], 415)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L416: (pstData[i],r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'r', 'normalized', ['i'], 416)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNbLines  i++
induction variable: ['i']
{
L417: (msgs[i],r) 
}
array table
-----------------------------------------------
msgs -> [('[i]', 'r', 'normalized', ['i'], 417)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNbLines  i++
induction variable: ['i']
{
L418: (msgs[i],r) 
}
array table
-----------------------------------------------
msgs -> [('[i]', 'r', 'normalized', ['i'], 418)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numberjobs  i++
induction variable: ['i']
{
L419: (jobs[i],r) 
L420: (jobs[i],r) 
L421: (LOCALJOBS[i]=,w) (jobs[i],r) 
L422: (LOCALJOBS[i],r) 
L423: (LOCALJOBS[i],r) (jobs[i],r) 
L424: (LOCALJOBS[%d],r) 
L425: (jobs[%d]==,r) 
}
array table
-----------------------------------------------
LOCALJOBS -> [('[i]', 'w', 'normalized', ['i'], 421), ('[i]', 'r', 'normalized', ['i'], 422), ('[i]', 'r', 'normalized', ['i'], 423), ('[%d]', 'r', 'not normalized', ['i'], 424)]
LDEs formed:4

jobs -> [('[i]', 'r', 'normalized', ['i'], 419), ('[i]', 'r', 'normalized', ['i'], 420), ('[i]', 'r', 'normalized', ['i'], 421), ('[i]', 'r', 'normalized', ['i'], 423), ('[%d]', 'r', 'not normalized', ['i'], 425)]
LDEs formed:0

distinct LDEs:
i1=%d
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jobsloop = 0  jobsloop < numberjobs  jobsloop++
induction variable: ['jobsloop']
{
L426: (jobs[jobsloop],r) 
L427: (LOCALJOBS[jobsloop],r) 
}
array table
-----------------------------------------------
LOCALJOBS -> [('[jobsloop]', 'r', 'normalized', ['jobsloop'], 427)]
LDEs formed:0

jobs -> [('[jobsloop]', 'r', 'normalized', ['jobsloop'], 426)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l = (len - 1)  l > 0  l--
induction variable: ['l']
{
L427: (line[l]==,r) 
L428: (line[l]=,w) 
}
array table
-----------------------------------------------
line -> [('[l]', 'r', 'normalized', ['l'], 427), ('[l]', 'w', 'normalized', ['l'], 428)]
LDEs formed:2

distinct LDEs:
l1=l2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l = len - 1  l > 0  l--
induction variable: ['l']
{
L429: (line[l]==,r) 
L430: (line[l - 1]==,r) 
}
array table
-----------------------------------------------
line -> [('[l]', 'r', 'normalized', ['l'], 429), ('[l - 1]', 'r', 'normalized', ['l'], 430)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<size1  i++
induction variable: ['i']
{
L431: (arg1[i]=,w) 
L432: (arg1[i],r) 
}
array table
-----------------------------------------------
arg1 -> [('[i]', 'w', 'normalized', ['i'], 431), ('[i]', 'r', 'normalized', ['i'], 432)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<size1-1  i++
induction variable: ['i']
{
L433: (arg1[i],r) 
L434: (arg1[i]=,w) 
}
array table
-----------------------------------------------
arg1 -> [('[i]', 'r', 'normalized', ['i'], 433), ('[i]', 'w', 'normalized', ['i'], 434)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L435: (result[i],r) 
L436: (result[i],r) 
L437: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 435), ('[i]', 'r', 'normalized', ['i'], 436), ('[i]', 'w', 'normalized', ['i'], 437)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < length_input_string  i++
induction variable: ['i']
{
L438: (input_string[i],r) (returnedValues[i]=,w) 
L439: (returnedValues[i]=,w) 
}
array table
-----------------------------------------------
input_string -> [('[i]', 'r', 'normalized', ['i'], 438)]
LDEs formed:0

returnedValues -> [('[i]', 'w', 'normalized', ['i'], 438), ('[i]', 'w', 'normalized', ['i'], 439)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < length_input_string  i++
induction variable: ['i']
{
L440: (wcInput_string[i],r) (returnedValues[i]=,w) 
L441: (returnedValues[i]=,w) 
}
array table
-----------------------------------------------
returnedValues -> [('[i]', 'w', 'normalized', ['i'], 440), ('[i]', 'w', 'normalized', ['i'], 441)]
LDEs formed:3

wcInput_string -> [('[i]', 'r', 'normalized', ['i'], 440)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x =0   x < mn  x++
induction variable: ['x']
{
	loop info: y = 0 y < (int)strlen(Input_Matrix[x]) y++
	induction variable: ['x', 'y']
	{
	L441: (Output_Matrix[x][y]=,w) (Input_Matrix[x][y],r) 
	L442: (Output_Matrix[x][y]=,w) (Input_Matrix[x][y],r) 
	}
L443: (Output_Matrix[x][y]=,w) 
}
array table
-----------------------------------------------
Input_Matrix -> [('[x][y]', 'r', 'normalized', ['x', 'y'], 441), ('[x][y]', 'r', 'normalized', ['x', 'y'], 442)]
LDEs formed:0

Output_Matrix -> [('[x][y]', 'w', 'normalized', ['x', 'y'], 441), ('[x][y]', 'w', 'normalized', ['x', 'y'], 442), ('[x][y]', 'w', 'normalized', ['x', 'y'], 443)]
LDEs formed:12

distinct LDEs:
x1=x2,y1=y2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < Dim_Input_strings i++
induction variable: ['i']
{
L444: (Output_strings[i]=,w) (Input_strings[i],r) 
L445: (Output_strings[i],r) 
}
array table
-----------------------------------------------
Output_strings -> [('[i]', 'w', 'normalized', ['i'], 444), ('[i]', 'r', 'normalized', ['i'], 445)]
LDEs formed:2

Input_strings -> [('[i]', 'r', 'normalized', ['i'], 444)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = i-1  j > (i/2 -t)   j-- 
induction variable: ['j']
{
L445: (wcstr[j],r) 
L446: (wcstr[j]=,w) (wcstr[k],r) 
L447: (wcstr[k++]=,w) 
}
array table
-----------------------------------------------
wcstr -> [('[j]', 'r', 'normalized', ['j'], 445), ('[j]', 'w', 'normalized', ['j'], 446), ('[k]', 'r', 'not normalized', ['j'], 446), ('[k++]', 'w', 'not normalized', ['j'], 447)]
LDEs formed:7

distinct LDEs:
k++=k++
j1=j2
j1=k++
k=k++
j1=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i < *nstring + 1   i++
induction variable: ['i']
{
L448: (ptrstrings[i]-,r) 
L449: (ptrstrings[i],r) 
}
array table
-----------------------------------------------
ptrstrings -> [('[i]', 'r', 'normalized', ['i'], 448), ('[i]', 'r', 'normalized', ['i'], 449)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L450: (Scistring[j],r) 
}
array table
-----------------------------------------------
Scistring -> [('[j]', 'r', 'normalized', ['j'], 450)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < *nstring + 1  i++
induction variable: ['i']
{
L451: (ptrstrings[i]-,r) 
L452: (ptrstrings[i],r) 
L453: (strings[i - 1]=,w) 
}
array table
-----------------------------------------------
ptrstrings -> [('[i]', 'r', 'normalized', ['i'], 451), ('[i]', 'r', 'normalized', ['i'], 452)]
LDEs formed:0

strings -> [('[i - 1]', 'w', 'normalized', ['i'], 453)]
LDEs formed:1

distinct LDEs:
i1 - 1=i2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < *nd + 1  i++
induction variable: ['i']
{
L454: (description[di],r) 
L455: (ptrdesc[i]-,r) 
	loop info: j = 0  j < ni  ++j
	induction variable: ['i', 'j']
	{
	L456: (p[j]=,w) (SciS[j],r) 
	}
L457: (p[ni]=,w) 
L458: (p[ni]=,w) 
}
array table
-----------------------------------------------
p -> [('[j]', 'w', 'normalized', ['i', 'j'], 456), ('[ni]', 'w', 'not normalized', ['i', 'j'], 457), ('[ni]', 'w', 'not normalized', ['i', 'j'], 458)]
LDEs formed:6

SciS -> [('[j]', 'r', 'normalized', ['i', 'j'], 456)]
LDEs formed:0

description -> [('[di]', 'r', 'not normalized', ['i', 'j'], 454)]
LDEs formed:0

ptrdesc -> [('[i]', 'r', 'normalized', ['i', 'j'], 455)]
LDEs formed:0

distinct LDEs:
j1=j2
ni=ni
j1=ni
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  x = 0 x < Dim_Input_Matrix  x++
induction variable: ['x']
{
L456: (Output_Matrix[0][x]=,w) (Input_Matrix[x],r) 
}
array table
-----------------------------------------------
Input_Matrix -> [('[x]', 'r', 'normalized', ['x'], 456)]
LDEs formed:0

Output_Matrix -> [('[0][x]', 'w', 'normalized', ['x'], 456)]
LDEs formed:2

distinct LDEs:
0=0,x1=x2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < nbOutput_Matrix  i++
induction variable: ['i']
{
L457: (Output_Matrix[i]=,w) (Input_String[0][i],r) 
}
array table
-----------------------------------------------
Input_String -> [('[0][i]', 'r', 'normalized', ['i'], 457)]
LDEs formed:0

Output_Matrix -> [('[i]', 'w', 'normalized', ['i'], 457)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < m1n1  i++
induction variable: ['i']
{
L458: (OutputStrings[i]=,w) 
L459: (OutputStrings[i],r) 
L460: (OutputStrings[i],r) 
}
array table
-----------------------------------------------
OutputStrings -> [('[i]', 'w', 'normalized', ['i'], 458), ('[i]', 'r', 'normalized', ['i'], 459), ('[i]', 'r', 'normalized', ['i'], 460)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < Dim_InputStrings  i++
induction variable: ['i']
{
L461: (InputChar[0][0],r) 
L462: (InputChar[i][0],r) 
L463: (InputStrings[i],r) 
L464: (InputStrings[i],r) 
L465: (wcOutput_Strings[i]=,w) 
L466: (wcOutput_Strings[i],r) 
L467: (wcOutput_Strings[i]=,w) 
L468: (wcOutput_Strings[i],r) 
}
array table
-----------------------------------------------
InputChar -> [('[0][0]', 'r', 'normalized', ['i'], 461), ('[i][0]', 'r', 'normalized', ['i'], 462)]
LDEs formed:0

InputStrings -> [('[i]', 'r', 'normalized', ['i'], 463), ('[i]', 'r', 'normalized', ['i'], 464)]
LDEs formed:0

wcOutput_Strings -> [('[i]', 'w', 'normalized', ['i'], 465), ('[i]', 'r', 'normalized', ['i'], 466), ('[i]', 'w', 'normalized', ['i'], 467), ('[i]', 'r', 'normalized', ['i'], 468)]
LDEs formed:7

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: nn = l - 1   nn >= 0  --nn
induction variable: ['nn']
{
L469: (str[nn],r) 
L470: (line[nn]=,w) 
}
array table
-----------------------------------------------
line -> [('[nn]', 'w', 'normalized', ['nn'], 470)]
LDEs formed:1

str -> [('[nn]', 'r', 'normalized', ['nn'], 469)]
LDEs formed:0

distinct LDEs:
nn1=nn2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < strings_dim  i++
induction variable: ['i']
{
L470: (strings_input[i],r) 
L471: (replacedStrings[i]=,w) 
}
array table
-----------------------------------------------
replacedStrings -> [('[i]', 'w', 'normalized', ['i'], 471)]
LDEs formed:1

strings_input -> [('[i]', 'r', 'normalized', ['i'], 470)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < strings_dim  i++
induction variable: ['i']
{
L471: (strings_input[i],r) 
L472: (replacedStrings[i]=,w) 
}
array table
-----------------------------------------------
replacedStrings -> [('[i]', 'w', 'normalized', ['i'], 472)]
LDEs formed:1

strings_input -> [('[i]', 'r', 'normalized', ['i'], 471)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < length_input_string  i++
induction variable: ['i']
{
L472: (input_string[i],r) (returnedValues[i]=,w) 
L473: (returnedValues[i]=,w) 
}
array table
-----------------------------------------------
input_string -> [('[i]', 'r', 'normalized', ['i'], 472)]
LDEs formed:0

returnedValues -> [('[i]', 'w', 'normalized', ['i'], 472), ('[i]', 'w', 'normalized', ['i'], 473)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < dim_One  i++
induction variable: ['i']
{
L474: (returnedValues[i]=,w) (Input_String_One[i],r) (Input_String_Two[j],r) 
L475: (returnedValues[i]=,w) (Input_String_One[i],r) (Input_String_Two[j],r) 
}
array table
-----------------------------------------------
returnedValues -> [('[i]', 'w', 'normalized', ['i'], 474), ('[i]', 'w', 'normalized', ['i'], 475)]
LDEs formed:3

Input_String_Two -> [('[j]', 'r', 'not normalized', ['i'], 474), ('[j]', 'r', 'not normalized', ['i'], 475)]
LDEs formed:0

Input_String_One -> [('[i]', 'r', 'normalized', ['i'], 474), ('[i]', 'r', 'normalized', ['i'], 475)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  x = 0  x < InputStringsDim   x++
induction variable: ['x']
{
	loop info:  i = (int)strlen(InputStrings[x]) - 1   i > 0   i--
	induction variable: ['x', 'i']
	{
	L476: (InputStrings[x][i]==,r) 
	L477: (InputStrings[x][i]==,r) 
	L478: (InputStrings[x][i]==,r) 
	}
	loop info: i = 0  i < (int)strlen(InputStrings[x])  i++
	induction variable: ['x', 'i']
		{
		L479: (InputStrings[x][i]==,r) 
		L480: (InputStrings[x][i]==,r) 
		L481: (InputStrings[x][i]==,r) 
		}
L482: (InputStrings[x][0]==,r) 
L483: (InputStrings[x][0]==,r) 
L484: (OutputStrings[x],r) 
L485: (InputStrings[x],r) 
L486: (OutputStrings[x],r) 
L487: (OutputStrings[x],r) (InputStrings[x],r) 
}
array table
-----------------------------------------------
InputStrings -> [('[x][i]', 'r', 'normalized', ['x', 'i'], 476), ('[x][i]', 'r', 'normalized', ['x', 'i'], 477), ('[x][i]', 'r', 'normalized', ['x', 'i'], 478), ('[x][i]', 'r', 'normalized', ['x', 'i'], 479), ('[x][i]', 'r', 'normalized', ['x', 'i'], 480), ('[x][i]', 'r', 'normalized', ['x', 'i'], 481), ('[x][0]', 'r', 'normalized', ['x', 'i'], 482), ('[x][0]', 'r', 'normalized', ['x', 'i'], 483), ('[x]', 'r', 'normalized', ['x', 'i'], 485), ('[x]', 'r', 'normalized', ['x', 'i'], 487)]
LDEs formed:0

OutputStrings -> [('[x]', 'r', 'normalized', ['x', 'i'], 484), ('[x]', 'r', 'normalized', ['x', 'i'], 486), ('[x]', 'r', 'normalized', ['x', 'i'], 487)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	loop info: i = 0  i < count * 2  i += 2
	induction variable: ['gmatched', 'i']
		{
		L488: (use_offsets[i],r) 
		L489: (use_offsets[i],r) 
		L490: (use_offsets[i + 1],r) 
		}
	loop info: copynamesptr = copynames  *copynamesptr != 0  copynamesptr += (int
	induction variable: ['gmatched', 'i', 'copynamesptr']
		{
		L491: (copybuffer[256],r) 
		}
	loop info: i = 0  i < 32  i++
	induction variable: ['gmatched', 'i', 'copynamesptr']
		{
		}
	loop info: getnamesptr = getnames  *getnamesptr != 0  getnamesptr += (int
	induction variable: ['gmatched', 'i', 'copynamesptr', 'getnamesptr']
		{
		}
L492: (use_offsets[0]==,r) (use_offsets[1],r) 
L493: (use_offsets[0]==,r) 
L494: (use_offsets[1],r) 
L495: (use_offsets[1],r) 
L496: (use_offsets[1],r) 
}
array table
-----------------------------------------------
copybuffer -> [('[256]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 491)]
LDEs formed:0

use_offsets -> [('[i]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 488), ('[i]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 489), ('[i + 1]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 490), ('[0]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 492), ('[1]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 492), ('[0]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 493), ('[1]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 494), ('[1]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 495), ('[1]', 'r', 'normalized', ['gmatched', 'i', 'copynamesptr', 'getnamesptr'], 496)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < length_input_string  i++
induction variable: ['i']
{
L497: (input_string[i],r) (returnedValues[i]=,w) 
L498: (returnedValues[i]=,w) 
}
array table
-----------------------------------------------
input_string -> [('[i]', 'r', 'normalized', ['i'], 497)]
LDEs formed:0

returnedValues -> [('[i]', 'w', 'normalized', ['i'], 497), ('[i]', 'w', 'normalized', ['i'], 498)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < mn  i++
induction variable: ['i']
{
L499: (stringInput[i],r) 
	loop info: j = 0 j < row  j++
	induction variable: ['i', 'j']
	{
	L500: (vectInput[j],r) 
	L501: (wcOutput[j]=,w) 
	L502: (wcOutput[j]=,w) (vectInput[j]-,r) 
	}
L503: (wcOutput[j]=,w) 
L504: (parts[i]=,w) 
}
array table
-----------------------------------------------
wcOutput -> [('[j]', 'w', 'normalized', ['i', 'j'], 501), ('[j]', 'w', 'normalized', ['i', 'j'], 502), ('[j]', 'w', 'normalized', ['i', 'j'], 503)]
LDEs formed:6

vectInput -> [('[j]', 'r', 'normalized', ['i', 'j'], 500), ('[j]', 'r', 'normalized', ['i', 'j'], 502)]
LDEs formed:0

parts -> [('[i]', 'w', 'normalized', ['i', 'j'], 504)]
LDEs formed:1

stringInput -> [('[i]', 'r', 'normalized', ['i', 'j'], 499)]
LDEs formed:0

distinct LDEs:
j1=j2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizeIndices  i++
induction variable: ['i']
{
L500: (indices[i],r) (indices[i],r) 
L501: (indices[i],r) (indices[i + 1],r) 
}
array table
-----------------------------------------------
indices -> [('[i]', 'r', 'normalized', ['i'], 500), ('[i]', 'r', 'normalized', ['i'], 500), ('[i]', 'r', 'normalized', ['i'], 501), ('[i + 1]', 'r', 'normalized', ['i'], 501)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizeIndices  i++
induction variable: ['i']
{
L502: (indices[i],r) 
L503: (indices[i]-,r) (indices[i - 1],r) 
L504: (splitted[i]=,w) 
L505: (splitted[i],r) 
L506: (splitted[i]==,r) 
L507: (wcstringToSplit[j],r) 
L508: (wcStrDest[lengthToCopy]=,w) 
L509: (indices[i],r) 
}
array table
-----------------------------------------------
indices -> [('[i]', 'r', 'normalized', ['i'], 502), ('[i]', 'r', 'normalized', ['i'], 503), ('[i - 1]', 'r', 'normalized', ['i'], 503), ('[i]', 'r', 'normalized', ['i'], 509)]
LDEs formed:0

wcstringToSplit -> [('[j]', 'r', 'not normalized', ['i'], 507)]
LDEs formed:0

wcStrDest -> [('[lengthToCopy]', 'w', 'not normalized', ['i'], 508)]
LDEs formed:1

splitted -> [('[i]', 'w', 'normalized', ['i'], 504), ('[i]', 'r', 'normalized', ['i'], 505), ('[i]', 'r', 'normalized', ['i'], 506)]
LDEs formed:3

distinct LDEs:
lengthToCopy=lengthToCopy
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizedelim  i++
induction variable: ['i']
{
L507: (delim[i],r) 
L508: (wcdelimiters[i]=,w) (wcdelim[0],r) 
}
array table
-----------------------------------------------
wcdelimiters -> [('[i]', 'w', 'normalized', ['i'], 508)]
LDEs formed:1

wcdelim -> [('[0]', 'r', 'normalized', ['i'], 508)]
LDEs formed:0

delim -> [('[i]', 'r', 'normalized', ['i'], 507)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbOutput_Matrix   i++ 
induction variable: ['i']
{
L508: (Output_Matrix[i],r) 
}
array table
-----------------------------------------------
Output_Matrix -> [('[i]', 'r', 'normalized', ['i'], 508)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  x = 0  x < m1n1  x++ 
induction variable: ['x']
{
L509: (values[x],r) 
}
array table
-----------------------------------------------
values -> [('[x]', 'r', 'normalized', ['x'], 509)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mOne * nOne  i++
induction variable: ['i']
{
L510: (pStVarOne[i]=,w) (lenStVarOne[i]+,r) 
L511: (pStVarOne[i]==,r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'w', 'normalized', ['i'], 510), ('[i]', 'r', 'normalized', ['i'], 511)]
LDEs formed:2

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 510)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0  x < len  x++
induction variable: ['x']
{
L511: (Input_IntMatrix[x],r) (Input_IntMatrix[x],r) 
L512: (Input_IntMatrix[x],r) 
L513: (Output_StringMatrix[x]=,w) (Input_IntMatrix[x],r) 
L514: (Output_StringMatrix[x]=,w) (Input_IntMatrix[x],r) 
}
array table
-----------------------------------------------
Input_IntMatrix -> [('[x]', 'r', 'normalized', ['x'], 511), ('[x]', 'r', 'normalized', ['x'], 511), ('[x]', 'r', 'normalized', ['x'], 512), ('[x]', 'r', 'normalized', ['x'], 513), ('[x]', 'r', 'normalized', ['x'], 514)]
LDEs formed:0

Output_StringMatrix -> [('[x]', 'w', 'normalized', ['x'], 513), ('[x]', 'w', 'normalized', ['x'], 514)]
LDEs formed:3

distinct LDEs:
x1=x2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mn   i++
induction variable: ['i']
{
L515: (Output_String_Matrix[i]=,w) (Input_String_Matrix_One[i],r) 
L516: (Output_String_Matrix[i]==,r) 
}
array table
-----------------------------------------------
Input_String_Matrix_One -> [('[i]', 'r', 'normalized', ['i'], 515)]
LDEs formed:0

Output_String_Matrix -> [('[i]', 'w', 'normalized', ['i'], 515), ('[i]', 'r', 'normalized', ['i'], 516)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < mn i++
induction variable: ['i']
{
L517: (Output_Matrix[i]=,w) (Input_Matrix[i],r) 
L518: (Output_Matrix[i]==,r) 
}
array table
-----------------------------------------------
Input_Matrix -> [('[i]', 'r', 'normalized', ['i'], 517)]
LDEs formed:0

Output_Matrix -> [('[i]', 'w', 'normalized', ['i'], 517), ('[i]', 'r', 'normalized', ['i'], 518)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0  x < mn2  ++x
induction variable: ['x']
{
L519: (Str2[x],r) 
L520: (Str[0],r) 
L521: (Str2[x],r) 
L522: (pstCapturedString[nbposition],r) (piCapturedStringCount[nbposition],r) 
L523: (strOutput_Start[Output_Start]=,w) 
L524: (strOutput_End[Output_End]=,w) 
L525: (values_start[nbValues_start]=,w) 
L526: (values_end[nbValues_end]=,w) 
L527: (wcvalues_start[nbValues_start]=,w) 
L528: (wcvalues_end[nbValues_end]=,w) 
L529: (pointer[Output_End],r) 
}
array table
-----------------------------------------------
strOutput_Start -> [('[Output_Start]', 'w', 'not normalized', ['x'], 523)]
LDEs formed:1

strOutput_End -> [('[Output_End]', 'w', 'not normalized', ['x'], 524)]
LDEs formed:1

wcvalues_end -> [('[nbValues_end]', 'w', 'not normalized', ['x'], 528)]
LDEs formed:1

piCapturedStringCount -> [('[nbposition]', 'r', 'not normalized', ['x'], 522)]
LDEs formed:0

Str2 -> [('[x]', 'r', 'normalized', ['x'], 519), ('[x]', 'r', 'normalized', ['x'], 521)]
LDEs formed:0

wcvalues_start -> [('[nbValues_start]', 'w', 'not normalized', ['x'], 527)]
LDEs formed:1

values_start -> [('[nbValues_start]', 'w', 'not normalized', ['x'], 525)]
LDEs formed:1

values_end -> [('[nbValues_end]', 'w', 'not normalized', ['x'], 526)]
LDEs formed:1

pstCapturedString -> [('[nbposition]', 'r', 'not normalized', ['x'], 522)]
LDEs formed:0

Str -> [('[0]', 'r', 'normalized', ['x'], 520)]
LDEs formed:0

pointer -> [('[Output_End]', 'r', 'not normalized', ['x'], 529)]
LDEs formed:0

distinct LDEs:
nbValues_end=nbValues_end
nbValues_start=nbValues_start
Output_Start=Output_Start
Output_End=Output_End
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbValues_start   i++ 
induction variable: ['i']
{
L530: (wcvalues_start[i],r) 
}
array table
-----------------------------------------------
wcvalues_start -> [('[i]', 'r', 'normalized', ['i'], 530)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbposition   i++ 
induction variable: ['i']
{
L531: (wcvalues_end[i],r) 
}
array table
-----------------------------------------------
wcvalues_end -> [('[i]', 'r', 'normalized', ['i'], 531)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < nbValues_start  i++
induction variable: ['i']
{
L532: (values_end[i]-,r) (values_start[i]+,r) 
L533: (match[i]=,w) 
L534: (match[i],r) (Str[0]+,r) (values_start[i]-,r) 
L535: (match[i][len]=,w) 
}
array table
-----------------------------------------------
values_end -> [('[i]', 'r', 'normalized', ['i'], 532)]
LDEs formed:0

Str -> [('[0]', 'r', 'normalized', ['i'], 534)]
LDEs formed:0

match -> [('[i]', 'w', 'normalized', ['i'], 533), ('[i]', 'r', 'normalized', ['i'], 534), ('[i][len]', 'w', 'not normalized', ['i'], 535)]
LDEs formed:10

values_start -> [('[i]', 'r', 'normalized', ['i'], 532), ('[i]', 'r', 'normalized', ['i'], 534)]
LDEs formed:0

distinct LDEs:
i1=i2,len=len
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nbposition   i++
induction variable: ['i']
{
L535: (piCapturedStringCount[i],r) 
}
array table
-----------------------------------------------
piCapturedStringCount -> [('[i]', 'r', 'normalized', ['i'], 535)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iMax   i++
induction variable: ['i']
{
	loop info: j = 0   j < numRow   j++
	induction variable: ['i', 'j']
	{
	L536: (piCapturedStringCount[j],r) 
	L537: (pstOutpuStr[index]=,w) (pstCapturedString[j][i],r) 
	L538: (pstOutpuStr[index]=,w) 
	}
 }
array table
-----------------------------------------------
piCapturedStringCount -> [('[j]', 'r', 'normalized', ['i', 'j'], 536)]
LDEs formed:0

pstOutpuStr -> [('[index]', 'w', 'not normalized', ['i', 'j'], 537), ('[index]', 'w', 'not normalized', ['i', 'j'], 538)]
LDEs formed:3

pstCapturedString -> [('[j][i]', 'r', 'normalized', ['i', 'j'], 537)]
LDEs formed:0

distinct LDEs:
index=index
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nbposition   i++
induction variable: ['i']
{
L538: (pstCapturedString[i],r) (piCapturedStringCount[i],r) 
}
array table
-----------------------------------------------
piCapturedStringCount -> [('[i]', 'r', 'normalized', ['i'], 538)]
LDEs formed:0

pstCapturedString -> [('[i]', 'r', 'normalized', ['i'], 538)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L539: (Output_String[i]=,w) 
L540: (Output_String[i]==,r) 
L541: (Output_String[i],r) (Input_String_One[i],r) 
	loop info: j = 1  j < Col_One  j++
	induction variable: ['i', 'j']
	{
	L542: (Output_String[i],r) 
	L543: (Output_String[i],r) (Input_String_One[i + Row_One * j],r) 
	}
 }
array table
-----------------------------------------------
Output_String -> [('[i]', 'w', 'normalized', ['i', 'j'], 539), ('[i]', 'r', 'normalized', ['i', 'j'], 540), ('[i]', 'r', 'normalized', ['i', 'j'], 541), ('[i]', 'r', 'normalized', ['i', 'j'], 542), ('[i]', 'r', 'normalized', ['i', 'j'], 543)]
LDEs formed:5

Input_String_One -> [('[i]', 'r', 'normalized', ['i', 'j'], 541), ('[i + Row_One * j]', 'r', 'not normalized', ['i', 'j'], 543)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Col_One  j++
induction variable: ['j']
{
L544: (Output_String[j]=,w) (Input_String_One[j * Row_One],r) 
L545: (Output_String[j]==,r) 
	loop info: i = 1  i < Row_One  i++
	induction variable: ['j', 'i']
	{
	L546: (Output_String[j],r) 
	L547: (Output_String[j]=,w) (Output_String[j],r) 
	L548: (Output_String[j]==,r) 
	L549: (Output_String[j],r) 
	L550: (Input_String_One[i + Row_One * j],r) 
	L551: (Output_String[j],r) 
	L552: (Input_String_One[i + Row_One * j],r) 
	L553: (Output_String[j]=,w) (Output_String[j],r) 
	L554: (Output_String[j]==,r) 
	L555: (Output_String[j],r) (Input_String_One[i + Row_One * j],r) 
	}
 }
array table
-----------------------------------------------
Output_String -> [('[j]', 'w', 'normalized', ['j', 'i'], 544), ('[j]', 'r', 'normalized', ['j', 'i'], 545), ('[j]', 'r', 'normalized', ['j', 'i'], 546), ('[j]', 'w', 'normalized', ['j', 'i'], 547), ('[j]', 'r', 'normalized', ['j', 'i'], 547), ('[j]', 'r', 'normalized', ['j', 'i'], 548), ('[j]', 'r', 'normalized', ['j', 'i'], 549), ('[j]', 'r', 'normalized', ['j', 'i'], 551), ('[j]', 'w', 'normalized', ['j', 'i'], 553), ('[j]', 'r', 'normalized', ['j', 'i'], 553), ('[j]', 'r', 'normalized', ['j', 'i'], 554), ('[j]', 'r', 'normalized', ['j', 'i'], 555)]
LDEs formed:33

Input_String_One -> [('[j * Row_One]', 'r', 'not normalized', ['j', 'i'], 544), ('[i + Row_One * j]', 'r', 'not normalized', ['j', 'i'], 550), ('[i + Row_One * j]', 'r', 'not normalized', ['j', 'i'], 552), ('[i + Row_One * j]', 'r', 'not normalized', ['j', 'i'], 555)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < Number_Inputs_One  i++
induction variable: ['i']
{
L556: (Input_String_One[i],r) 
L557: (Input_String_Two[0],r) 
}
array table
-----------------------------------------------
Input_String_One -> [('[i]', 'r', 'normalized', ['i'], 556)]
LDEs formed:0

Input_String_Two -> [('[0]', 'r', 'normalized', ['i'], 557)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mn  i++
induction variable: ['i']
{
L558: (Input_String_One[i],r) (lengths[i],r) 
L559: (Input_String_One[i],r) (lengths[i],r) 
L560: (lengths[i],r) 
}
array table
-----------------------------------------------
lengths -> [('[i]', 'r', 'normalized', ['i'], 558), ('[i]', 'r', 'normalized', ['i'], 559), ('[i]', 'r', 'normalized', ['i'], 560)]
LDEs formed:0

Input_String_One -> [('[i]', 'r', 'normalized', ['i'], 558), ('[i]', 'r', 'normalized', ['i'], 559)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizelengths  i++
induction variable: ['i']
{
L560: (lengths[i],r) 
}
array table
-----------------------------------------------
lengths -> [('[i]', 'r', 'normalized', ['i'], 560)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0  x < mn  x++
induction variable: ['x']
{
L561: (StringsLength[x]=,w) 
}
array table
-----------------------------------------------
StringsLength -> [('[x]', 'w', 'normalized', ['x'], 561)]
LDEs formed:1

distinct LDEs:
x1=x2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0 j < m1n1  j++
induction variable: ['j']
{
L562: (InputString_Parameter1[j],r) (InputString_Parameter2[i],r) 
L563: (OutputStrings[j]=,w) 
L564: (OutputStrings[j]==,r) 
L565: (InputString_Parameter1[j],r) (InputString_Parameter2[i],r) 
L566: (OutputStrings[j]=,w) 
L567: (OutputStrings[j]==,r) 
L568: (OutputStrings[j]=,w) 
L569: (OutputStrings[j]==,r) 
}
array table
-----------------------------------------------
OutputStrings -> [('[j]', 'w', 'normalized', ['j'], 563), ('[j]', 'r', 'normalized', ['j'], 564), ('[j]', 'w', 'normalized', ['j'], 566), ('[j]', 'r', 'normalized', ['j'], 567), ('[j]', 'w', 'normalized', ['j'], 568), ('[j]', 'r', 'normalized', ['j'], 569)]
LDEs formed:15

InputString_Parameter2 -> [('[i]', 'r', 'not normalized', ['j'], 562), ('[i]', 'r', 'not normalized', ['j'], 565)]
LDEs formed:0

InputString_Parameter1 -> [('[j]', 'r', 'normalized', ['j'], 562), ('[j]', 'r', 'normalized', ['j'], 565)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < m2 * n2  k++
induction variable: ['k']
{
L566: (pStrsTwo[k],r) 
}
array table
-----------------------------------------------
pStrsTwo -> [('[k]', 'r', 'normalized', ['k'], 566)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m2n2 j++
induction variable: ['j']
{
L567: (InputString_Parameter1[j],r) 
L568: (InputLength_Parameter2[j],r) (InputLength_Parameter2_checked[j]=,w) 
L569: (InputLength_Parameter2[j],r) (InputLength_Parameter2_checked[j]=,w) 
L570: (InputLength_Parameter2_checked[j]=,w) (InputLength_Parameter2[j],r) 
}
array table
-----------------------------------------------
InputLength_Parameter2_checked -> [('[j]', 'w', 'normalized', ['j'], 568), ('[j]', 'w', 'normalized', ['j'], 569), ('[j]', 'w', 'normalized', ['j'], 570)]
LDEs formed:6

InputLength_Parameter2 -> [('[j]', 'r', 'normalized', ['j'], 568), ('[j]', 'r', 'normalized', ['j'], 569), ('[j]', 'r', 'normalized', ['j'], 570)]
LDEs formed:0

InputString_Parameter1 -> [('[j]', 'r', 'normalized', ['j'], 567)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < m1n1   i++
induction variable: ['i']
{
L568: (InputString_Parameter1[i],r) 
L569: (InputLength_Parameter2_checked[j]+,r) 
L570: (InputLength_Parameter2_checked[j],r) 
L571: (InputLength_Parameter2_checked[j],r) 
L572: (OutputStrings[i]=,w) 
}
array table
-----------------------------------------------
InputLength_Parameter2_checked -> [('[j]', 'r', 'not normalized', ['i'], 569), ('[j]', 'r', 'not normalized', ['i'], 570), ('[j]', 'r', 'not normalized', ['i'], 571)]
LDEs formed:0

OutputStrings -> [('[i]', 'w', 'normalized', ['i'], 572)]
LDEs formed:1

InputString_Parameter1 -> [('[i]', 'r', 'normalized', ['i'], 568)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L569: (pStVarOne[i]=,w) (lenStVarOne[i]+,r) 
L570: (pStVarOne[i]==,r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'w', 'normalized', ['i'], 569), ('[i]', 'r', 'normalized', ['i'], 570)]
LDEs formed:2

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 569)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m_out * n_out  i++
induction variable: ['i']
{
L570: (pStVarOne[i],r) 
L571: (lenStVarOne[i],r) 
	loop info: j = 0  j < lenStVarOne[i]  j++
	induction variable: ['i', 'j']
		{
		L572: (pStVarOne[i][j]==,r) 
		L573: (pStVarOne[i][j]=,w) 
		}
L574: (pStVarOne[i],r) 
L575: (pStVarOne[i],r) 
L576: (pStVarOne[i],r) 
L577: (pdOut[i]=,w) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'r', 'normalized', ['i', 'j'], 570), ('[i][j]', 'r', 'normalized', ['i', 'j'], 572), ('[i][j]', 'w', 'normalized', ['i', 'j'], 573), ('[i]', 'r', 'normalized', ['i', 'j'], 574), ('[i]', 'r', 'normalized', ['i', 'j'], 575), ('[i]', 'r', 'normalized', ['i', 'j'], 576)]
LDEs formed:6

lenStVarOne -> [('[i]', 'r', 'normalized', ['i', 'j'], 571)]
LDEs formed:0

pdOut -> [('[i]', 'w', 'normalized', ['i', 'j'], 577)]
LDEs formed:1

distinct LDEs:
i1=i2,j1=j2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < m2n2   i++
induction variable: ['i']
{
L578: (wStrings_Input2[i]=,w) (Strings_Input2[i],r) 
}
array table
-----------------------------------------------
wStrings_Input2 -> [('[i]', 'w', 'normalized', ['i'], 578)]
LDEs formed:1

Strings_Input2 -> [('[i]', 'r', 'normalized', ['i'], 578)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0  x < m2n2  ++x
induction variable: ['x']
{
L579: (Strings_Input1[0],r) (Strings_Input2[x],r) 
L580: (Strings_Input1[0],r) 
L581: (partStr[Output_Start]=,w) 
L582: (values[nbValues++].data=,w) 
L583: (values[nbposition++].position=,w) 
}
array table
-----------------------------------------------
values -> [('[nbValues++]', 'w', 'not normalized', ['x'], 582), ('[nbposition++]', 'w', 'not normalized', ['x'], 583)]
LDEs formed:3

Strings_Input2 -> [('[x]', 'r', 'normalized', ['x'], 579)]
LDEs formed:0

Strings_Input1 -> [('[0]', 'r', 'normalized', ['x'], 579), ('[0]', 'r', 'normalized', ['x'], 580)]
LDEs formed:0

partStr -> [('[Output_Start]', 'w', 'not normalized', ['x'], 581)]
LDEs formed:1

distinct LDEs:
nbValues++=nbposition++
nbValues++=nbValues++
Output_Start=Output_Start
nbposition++=nbposition++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0  x < m2n2   ++x
induction variable: ['x']
{
L582: (wStrings_Input2[x],r) 
L583: (wStrings_Input2[x],r) 
L584: (values[nbValues++].data=,w) 
L585: (values[nbposition++].position=,w) 
L586: (values[0],r) 
}
array table
-----------------------------------------------
wStrings_Input2 -> [('[x]', 'r', 'normalized', ['x'], 582), ('[x]', 'r', 'normalized', ['x'], 583)]
LDEs formed:0

values -> [('[nbValues++]', 'w', 'not normalized', ['x'], 584), ('[nbposition++]', 'w', 'not normalized', ['x'], 585), ('[0]', 'r', 'normalized', ['x'], 586)]
LDEs formed:5

distinct LDEs:
nbValues++=nbposition++
nbposition++=0
nbValues++=nbValues++
nbposition++=nbposition++
nbValues++=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbValues   i++ 
induction variable: ['i']
{
L587: (values[i].data,r) 
}
array table
-----------------------------------------------
values -> [('[i]', 'r', 'normalized', ['i'], 587)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbposition   i++ 
induction variable: ['i']
{
L588: (values[i].position,r) 
}
array table
-----------------------------------------------
values -> [('[i]', 'r', 'normalized', ['i'], 588)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbElems  i++
induction variable: ['i']
{
L589: (pdVarOne[i],r) 
L590: (bOutputMatrix[i]=,w) 
L591: (bOutputMatrix[i]=,w) 
}
array table
-----------------------------------------------
bOutputMatrix -> [('[i]', 'w', 'normalized', ['i'], 590), ('[i]', 'w', 'normalized', ['i'], 591)]
LDEs formed:3

pdVarOne -> [('[i]', 'r', 'normalized', ['i'], 589)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (m1 * n1)  i++
induction variable: ['i']
{
L590: (lenStVarOne[i],r) 
L591: (pwcStVarOne[i]=,w) (lenStVarOne[i]+,r) 
L592: (pwcStVarOne[i]==,r) 
}
array table
-----------------------------------------------
pwcStVarOne -> [('[i]', 'w', 'normalized', ['i'], 591), ('[i]', 'r', 'normalized', ['i'], 592)]
LDEs formed:2

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 590), ('[i]', 'r', 'normalized', ['i'], 591)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (m1 * n1)  i++
induction variable: ['i']
{
L592: (pwcStVarOne[i],r) 
	loop info: j = 0  j < len  j++
	induction variable: ['i', 'j']
	{
	L593: (wcInput[j],r) 
	L594: (bOutputMatrix[x]=,w) 
	L595: (bOutputMatrix[x]=,w) 
	}
 }
array table
-----------------------------------------------
pwcStVarOne -> [('[i]', 'r', 'normalized', ['i', 'j'], 592)]
LDEs formed:0

bOutputMatrix -> [('[x]', 'w', 'not normalized', ['i', 'j'], 594), ('[x]', 'w', 'not normalized', ['i', 'j'], 595)]
LDEs formed:3

wcInput -> [('[j]', 'r', 'normalized', ['i', 'j'], 593)]
LDEs formed:0

distinct LDEs:
x=x
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < m1n1   i++ 
induction variable: ['i']
{
L594: (InputString_Parameter1[i],r) 
L595: (InputString_Parameter2[j],r) 
L596: (InputString_Parameter1[i],r) (InputString_Parameter2[j],r) 
}
array table
-----------------------------------------------
InputString_Parameter2 -> [('[j]', 'r', 'not normalized', ['i'], 595), ('[j]', 'r', 'not normalized', ['i'], 596)]
LDEs formed:0

InputString_Parameter1 -> [('[i]', 'r', 'normalized', ['i'], 594), ('[i]', 'r', 'normalized', ['i'], 596)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0   x < iRowsiCols   x++
induction variable: ['x']
{
L597: (Input_StringMatrix_1[x],r) 
L598: (Input_StringMatrix_1[x],r) 
L599: (Input_StringMatrix_1[x],r) 
L600: (Input_StringMatrix_1[x][iSign + 1]==,r) 
	loop info: y = 0   y < first_nb   y++
	induction variable: ['x', 'y']
		{
		L601: (Input_StringMatrix_1[x][y],r) 
		L602: (OutputDoubles[x]=,w) 
		L603: (Input_StringMatrix_1[x],r) 
		}
L604: (Input_StringMatrix_1[x],r) 
L605: (OutputDoubles[x]=,w) 
L606: (Input_StringMatrix_1[x],r) 
L607: (OutputDoubles[x]=,w) (Input_StringMatrix_1[x]+,r) 
L608: (Input_StringMatrix_1[x],r) 
L609: (OutputDoubles[x]=,w) 
L610: (OutputDoubles[x]=,w) (Input_StringMatrix_1[x],r) 
L611: (OutputStrings[x]=,w) 
L612: (OutputStrings[x]=,w) 
L613: (OutputStrings[x]==,r) 
L614: (OutputStrings[x],r) 
L615: (OutputStrings[x],r) 
}
array table
-----------------------------------------------
Input_StringMatrix_1 -> [('[x]', 'r', 'normalized', ['x', 'y'], 597), ('[x]', 'r', 'normalized', ['x', 'y'], 598), ('[x]', 'r', 'normalized', ['x', 'y'], 599), ('[x][iSign + 1]', 'r', 'not normalized', ['x', 'y'], 600), ('[x][y]', 'r', 'normalized', ['x', 'y'], 601), ('[x]', 'r', 'normalized', ['x', 'y'], 603), ('[x]', 'r', 'normalized', ['x', 'y'], 604), ('[x]', 'r', 'normalized', ['x', 'y'], 606), ('[x]', 'r', 'normalized', ['x', 'y'], 607), ('[x]', 'r', 'normalized', ['x', 'y'], 608), ('[x]', 'r', 'normalized', ['x', 'y'], 610)]
LDEs formed:0

OutputStrings -> [('[x]', 'w', 'normalized', ['x', 'y'], 611), ('[x]', 'w', 'normalized', ['x', 'y'], 612), ('[x]', 'r', 'normalized', ['x', 'y'], 613), ('[x]', 'r', 'normalized', ['x', 'y'], 614), ('[x]', 'r', 'normalized', ['x', 'y'], 615)]
LDEs formed:9

OutputDoubles -> [('[x]', 'w', 'normalized', ['x', 'y'], 602), ('[x]', 'w', 'normalized', ['x', 'y'], 605), ('[x]', 'w', 'normalized', ['x', 'y'], 607), ('[x]', 'w', 'normalized', ['x', 'y'], 609), ('[x]', 'w', 'normalized', ['x', 'y'], 610)]
LDEs formed:15

distinct LDEs:
x1=x2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mn_Two   i++
induction variable: ['i']
{
L611: (Delimiters[i],r) 
L612: (Delimiters[i],r) 
}
array table
-----------------------------------------------
Delimiters -> [('[i]', 'r', 'normalized', ['i'], 611), ('[i]', 'r', 'normalized', ['i'], 612)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m2 * n2  i++
induction variable: ['i']
{
L613: (pStrVarTwo[i],r) 
}
array table
-----------------------------------------------
pStrVarTwo -> [('[i]', 'r', 'normalized', ['i'], 613)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0  x < mn_one  x++
induction variable: ['x']
{
L614: (Inputs_param_one[x],r) 
}
array table
-----------------------------------------------
Inputs_param_one -> [('[x]', 'r', 'normalized', ['x'], 614)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: y = 0  y < mn_one  ++y
induction variable: ['y']
{
	loop info: x = 0  x < mn_two  ++x
	induction variable: ['y', 'x']
	{
	L615: (Inputs_param_two[x],r) 
	L616: (Inputs_param_one[y],r) 
	L617: (values[results->currentLength]=,w) 
	L618: (positions[results->currentLength]=,w) 
	}
 }
array table
-----------------------------------------------
values -> [('[results->currentLength]', 'w', 'not normalized', ['y', 'x'], 617)]
LDEs formed:1

Inputs_param_one -> [('[y]', 'r', 'normalized', ['y', 'x'], 616)]
LDEs formed:0

Inputs_param_two -> [('[x]', 'r', 'normalized', ['y', 'x'], 615)]
LDEs formed:0

positions -> [('[results->currentLength]', 'w', 'not normalized', ['y', 'x'], 618)]
LDEs formed:1

distinct LDEs:
results->currentLength=results->currentLength
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: y = 0  y < mn_one  ++y
induction variable: ['y']
{
	loop info: x = 0  x < mn_two  ++x
	induction variable: ['y', 'x']
	{
	L619: (Inputs_param_one[y],r) 
	L620: (Inputs_param_two[x],r) 
	L621: (values[results->currentLength]=,w) 
	L622: (positions[results->currentLength]=,w) 
	}
 }
array table
-----------------------------------------------
values -> [('[results->currentLength]', 'w', 'not normalized', ['y', 'x'], 621)]
LDEs formed:1

Inputs_param_one -> [('[y]', 'r', 'normalized', ['y', 'x'], 619)]
LDEs formed:0

Inputs_param_two -> [('[x]', 'r', 'normalized', ['y', 'x'], 620)]
LDEs formed:0

positions -> [('[results->currentLength]', 'w', 'not normalized', ['y', 'x'], 622)]
LDEs formed:1

distinct LDEs:
results->currentLength=results->currentLength
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m2n2  i++
induction variable: ['i']
{
L623: (Strings_Input_Two[i],r) 
}
array table
-----------------------------------------------
Strings_Input_Two -> [('[i]', 'r', 'normalized', ['i'], 623)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0  x < grepresults.currentLength  x++
induction variable: ['x']
{
L624: (grepresults.values[x],r) 
}
array table
-----------------------------------------------
grepresults.values -> [('[x]', 'r', 'normalized', ['x'], 624)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 0  x < grepresults.currentLength  x++
induction variable: ['x']
{
L625: (grepresults.positions[x],r) 
}
array table
-----------------------------------------------
grepresults.positions -> [('[x]', 'r', 'normalized', ['x'], 625)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < m1n1   i++ 
induction variable: ['i']
{
L626: (InputString_Parameter1[i],r) 
L627: (InputString_Parameter2[j],r) 
L628: (InputString_Parameter1[i],r) (InputString_Parameter2[j],r) 
}
array table
-----------------------------------------------
InputString_Parameter2 -> [('[j]', 'r', 'not normalized', ['i'], 627), ('[j]', 'r', 'not normalized', ['i'], 628)]
LDEs formed:0

InputString_Parameter1 -> [('[i]', 'r', 'normalized', ['i'], 626), ('[i]', 'r', 'normalized', ['i'], 628)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < m2n2  i++
induction variable: ['i']
{
L629: (SecondParamaterValue[i],r) 
}
array table
-----------------------------------------------
SecondParamaterValue -> [('[i]', 'r', 'normalized', ['i'], 629)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m  i++
induction variable: ['i']
{
L630: (pdblColorMap[i]=,w) (defcolors[3 * i]/,r) 
L631: (pdblColorMap[i + m]=,w) (defcolors[3 * i + 1]/,r) 
L632: (pdblColorMap[i + 2 * m]=,w) (defcolors[3 * i + 2]/,r) 
}
array table
-----------------------------------------------
defcolors -> [('[3 * i]', 'r', 'normalized', ['i'], 630), ('[3 * i + 1]', 'r', 'normalized', ['i'], 631), ('[3 * i + 2]', 'r', 'normalized', ['i'], 632)]
LDEs formed:0

pdblColorMap -> [('[i]', 'w', 'normalized', ['i'], 630), ('[i + m]', 'w', 'not normalized', ['i'], 631), ('[i + 2 * m]', 'w', 'not normalized', ['i'], 632)]
LDEs formed:6

distinct LDEs:
i1=i2
i1 + m=i2 + 2 * m
i1=i2 + m
i1 + 2 * m=i2 + 2 * m
i1=i2 + 2 * m
i1 + m=i2 + m
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < defaultNumberTicks  i++
induction variable: ['i']
{
L633: (tab[i],r) 
L634: (stringVector[i]=,w) 
L635: (stringVector[i]==,r) 
}
array table
-----------------------------------------------
stringVector -> [('[i]', 'w', 'normalized', ['i'], 634), ('[i]', 'r', 'normalized', ['i'], 635)]
LDEs formed:2

tab -> [('[i]', 'r', 'normalized', ['i'], 633)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < defaultNumberTicks  i++
induction variable: ['i']
{
L634: (stringVector[i],r) 
L635: (tabZTicksLocations[i],r) 
L636: (stringVector[i]=,w) 
L637: (stringVector[i]==,r) 
}
array table
-----------------------------------------------
tabZTicksLocations -> [('[i]', 'r', 'normalized', ['i'], 635)]
LDEs formed:0

stringVector -> [('[i]', 'r', 'normalized', ['i'], 634), ('[i]', 'w', 'normalized', ['i'], 636), ('[i]', 'r', 'normalized', ['i'], 637)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbRow * nbCol   i++ 
induction variable: ['i']
{
L638: (data[i]=,w) (textMat[i],r) 
L639: (data[i],r) (textMat[i],r) 
}
array table
-----------------------------------------------
data -> [('[i]', 'w', 'normalized', ['i'], 638), ('[i]', 'r', 'normalized', ['i'], 639)]
LDEs formed:2

textMat -> [('[i]', 'r', 'normalized', ['i'], 638), ('[i]', 'r', 'normalized', ['i'], 639)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbRow * nbCol   i++ 
induction variable: ['i']
{
L640: (data[i]=,w) 
L641: (data[i],r) 
}
array table
-----------------------------------------------
data -> [('[i]', 'w', 'normalized', ['i'], 640), ('[i]', 'r', 'normalized', ['i'], 641)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < aaint[1]  i++
induction variable: ['i']
{
L642: (dXGrads[i]=,w) (drect[0]+,r) 
}
array table
-----------------------------------------------
dXGrads -> [('[i]', 'w', 'normalized', ['i'], 642)]
LDEs formed:1

drect -> [('[0]', 'r', 'normalized', ['i'], 642)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < aaint[3]  i++
induction variable: ['i']
{
L643: (dYGrads[i]=,w) (drect[2]+,r) 
}
array table
-----------------------------------------------
drect -> [('[2]', 'r', 'normalized', ['i'], 643)]
LDEs formed:0

dYGrads -> [('[i]', 'w', 'normalized', ['i'], 643)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < aaint[1]  i++
induction variable: ['i']
{
L644: (dXGrads[i],r) 
L645: (dXGrads[i],r) 
L646: (stringVector[i]=,w) 
L647: (stringVector[i],r) (dXGrads[i],r) 
L648: (stringVector[i][iSize - 1]=,w) 
}
array table
-----------------------------------------------
dXGrads -> [('[i]', 'r', 'normalized', ['i'], 644), ('[i]', 'r', 'normalized', ['i'], 645), ('[i]', 'r', 'normalized', ['i'], 647)]
LDEs formed:0

stringVector -> [('[i]', 'w', 'normalized', ['i'], 646), ('[i]', 'r', 'normalized', ['i'], 647), ('[i][iSize - 1]', 'w', 'not normalized', ['i'], 648)]
LDEs formed:10

distinct LDEs:
i1=i2,iSize - 1=iSize - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < aaint[1]  i++
induction variable: ['i']
{
L649: (stringVector[i],r) 
}
array table
-----------------------------------------------
stringVector -> [('[i]', 'r', 'normalized', ['i'], 649)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < aaint[3]  i++
induction variable: ['i']
{
L650: (dYGrads[i],r) 
L651: (dYGrads[i],r) 
L652: (stringVector[i]=,w) 
L653: (stringVector[i],r) (dYGrads[i],r) 
L654: (stringVector[i][iSize - 1]=,w) 
}
array table
-----------------------------------------------
stringVector -> [('[i]', 'w', 'normalized', ['i'], 652), ('[i]', 'r', 'normalized', ['i'], 653), ('[i][iSize - 1]', 'w', 'not normalized', ['i'], 654)]
LDEs formed:10

dYGrads -> [('[i]', 'r', 'normalized', ['i'], 650), ('[i]', 'r', 'normalized', ['i'], 651), ('[i]', 'r', 'normalized', ['i'], 653)]
LDEs formed:0

distinct LDEs:
i1=i2,iSize - 1=iSize - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < aaint[3]  i++
induction variable: ['i']
{
L654: (stringVector[i],r) 
}
array table
-----------------------------------------------
stringVector -> [('[i]', 'r', 'normalized', ['i'], 654)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < *n1  jj++
induction variable: ['jj']
{
L655: (style[jj],r) 
L656: (x[jj * (*n2)],r) 
L657: (y[jj * (*n2)],r) 
L658: (style[jj],r) 
L659: (style[jj],r) 
L660: (x[jj * (*n2)],r) 
L661: (y[jj * (*n2)],r) 
L662: (tabofhandles[cmpt]=,w) 
L663: (hdltab[cmpt]=,w) 
}
array table
-----------------------------------------------
y -> [('[jj * (*n2)]', 'r', 'not normalized', ['jj'], 657), ('[jj * (*n2)]', 'r', 'not normalized', ['jj'], 661)]
LDEs formed:0

x -> [('[jj * (*n2)]', 'r', 'not normalized', ['jj'], 656), ('[jj * (*n2)]', 'r', 'not normalized', ['jj'], 660)]
LDEs formed:0

style -> [('[jj]', 'r', 'normalized', ['jj'], 655), ('[jj]', 'r', 'normalized', ['jj'], 658), ('[jj]', 'r', 'normalized', ['jj'], 659)]
LDEs formed:0

tabofhandles -> [('[cmpt]', 'w', 'not normalized', ['jj'], 662)]
LDEs formed:1

hdltab -> [('[cmpt]', 'w', 'not normalized', ['jj'], 663)]
LDEs formed:1

distinct LDEs:
cmpt=cmpt
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<num i++
induction variable: ['i']
{
L664: (ArrayWGraph[i],r) 
}
array table
-----------------------------------------------
ArrayWGraph -> [('[i]', 'r', 'normalized', ['i'], 664)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (*n1)  i++
induction variable: ['i']
{
L665: (style[i]=,w) 
}
array table
-----------------------------------------------
style -> [('[i]', 'w', 'normalized', ['i'], 665)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1   i < n   i++
induction variable: ['i']
{
L666: (x[i],r) (x[i],r) 
L667: (x[i],r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'r', 'normalized', ['i'], 666), ('[i]', 'r', 'normalized', ['i'], 666), ('[i]', 'r', 'normalized', ['i'], 667)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i < nbElement - 1   i++ 
induction variable: ['i']
{
L668: (vector[i + 1],r) (vector[i],r) 
}
array table
-----------------------------------------------
vector -> [('[i + 1]', 'r', 'normalized', ['i'], 668), ('[i]', 'r', 'normalized', ['i'], 668)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i < nbElement - 1   i++ 
induction variable: ['i']
{
L669: (vector[i + 1],r) (vector[i],r) 
}
array table
-----------------------------------------------
vector -> [('[i + 1]', 'r', 'normalized', ['i'], 669), ('[i]', 'r', 'normalized', ['i'], 669)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbElement  i++
induction variable: ['i']
{
L670: (vector[i],r) 
}
array table
-----------------------------------------------
vector -> [('[i]', 'r', 'normalized', ['i'], 670)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbElement   i++ 
induction variable: ['i']
{
L671: (src[i],r) 
L672: (dest[i],r) 
L673: (dest[i]=,w) 
L674: (dest[i]==,r) 
L675: (dest[i],r) (src[i],r) 
}
array table
-----------------------------------------------
dest -> [('[i]', 'r', 'normalized', ['i'], 672), ('[i]', 'w', 'normalized', ['i'], 673), ('[i]', 'r', 'normalized', ['i'], 674), ('[i]', 'r', 'normalized', ['i'], 675)]
LDEs formed:4

src -> [('[i]', 'r', 'normalized', ['i'], 671), ('[i]', 'r', 'normalized', ['i'], 675)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbElement   i++ 
induction variable: ['i']
{
L676: (dest[i]=,w) 
}
array table
-----------------------------------------------
dest -> [('[i]', 'w', 'normalized', ['i'], 676)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = endCopy   i < destSize   i++ 
induction variable: ['i']
{
L677: (dest[i]=,w) 
}
array table
-----------------------------------------------
dest -> [('[i]', 'w', 'normalized', ['i'], 677)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbElement  i++ 
induction variable: ['i']
{
L678: (res[i]=,w) 
}
array table
-----------------------------------------------
res -> [('[i]', 'w', 'normalized', ['i'], 678)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbRow * nbCol   i++ 
induction variable: ['i']
{
L679: (text[i][0]==,r) 
L680: (text[i][0]==,r) 
}
array table
-----------------------------------------------
text -> [('[i][0]', 'r', 'normalized', ['i'], 679), ('[i][0]', 'r', 'normalized', ['i'], 680)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < *numrow   i++ 
induction variable: ['i']
{
L681: (tab[i]=,w) (dataX[i],r) 
L682: (tab[*numrow + i]=,w) (dataY[i],r) 
L683: (tab[(2 * (*numrow)) + i]=,w) 
}
array table
-----------------------------------------------
dataY -> [('[i]', 'r', 'normalized', ['i'], 682)]
LDEs formed:0

dataX -> [('[i]', 'r', 'normalized', ['i'], 681)]
LDEs formed:0

tab -> [('[i]', 'w', 'normalized', ['i'], 681), ('[*numrow + i]', 'w', 'not normalized', ['i'], 682), ('[(2 * (*numrow)) + i]', 'w', 'not normalized', ['i'], 683)]
LDEs formed:6

distinct LDEs:
i1=(2 * (*numrow)) + i2
i1=*numrow + i2
*numrow + i1=*numrow + i2
(2 * (*numrow)) + i1=(2 * (*numrow)) + i2
i1=i2
*numrow + i1=(2 * (*numrow)) + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < *numrow   i++ 
induction variable: ['i']
{
L684: (tab[i]=,w) (dataX[i],r) 
L685: (tab[*numrow + i]=,w) (dataY[i],r) 
L686: (tab[(2 * (*numrow)) + i]=,w) (dataZ[i],r) 
}
array table
-----------------------------------------------
dataY -> [('[i]', 'r', 'normalized', ['i'], 685)]
LDEs formed:0

dataX -> [('[i]', 'r', 'normalized', ['i'], 684)]
LDEs formed:0

tab -> [('[i]', 'w', 'normalized', ['i'], 684), ('[*numrow + i]', 'w', 'not normalized', ['i'], 685), ('[(2 * (*numrow)) + i]', 'w', 'not normalized', ['i'], 686)]
LDEs formed:6

dataZ -> [('[i]', 'r', 'normalized', ['i'], 686)]
LDEs formed:0

distinct LDEs:
i1=(2 * (*numrow)) + i2
i1=*numrow + i2
*numrow + i1=*numrow + i2
(2 * (*numrow)) + i1=(2 * (*numrow)) + i2
i1=i2
*numrow + i1=(2 * (*numrow)) + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *numrow  i++
induction variable: ['i']
{
L687: (tab[2 * i]=,w) (arrowBases[3 * i],r) 
L688: (tab[2 * i + 1]=,w) (arrowDirections[3 * i],r) 
L689: (tab[2 * (*numrow) + 2 * i]=,w) (arrowBases[3 * i + 1],r) 
L690: (tab[2 * (*numrow) + 2 * i + 1]=,w) (arrowDirections[3 * i + 1],r) 
L691: (tab[4 * (*numrow) + 2 * i]=,w) (arrowBases[3 * i + 2],r) 
L692: (tab[4 * (*numrow) + 2 * i + 1]=,w) (arrowDirections[3 * i + 2],r) 
}
array table
-----------------------------------------------
arrowDirections -> [('[3 * i]', 'r', 'normalized', ['i'], 688), ('[3 * i + 1]', 'r', 'normalized', ['i'], 690), ('[3 * i + 2]', 'r', 'normalized', ['i'], 692)]
LDEs formed:0

arrowBases -> [('[3 * i]', 'r', 'normalized', ['i'], 687), ('[3 * i + 1]', 'r', 'normalized', ['i'], 689), ('[3 * i + 2]', 'r', 'normalized', ['i'], 691)]
LDEs formed:0

tab -> [('[2 * i]', 'w', 'normalized', ['i'], 687), ('[2 * i + 1]', 'w', 'normalized', ['i'], 688), ('[2 * (*numrow) + 2 * i]', 'w', 'not normalized', ['i'], 689), ('[2 * (*numrow) + 2 * i + 1]', 'w', 'not normalized', ['i'], 690), ('[4 * (*numrow) + 2 * i]', 'w', 'not normalized', ['i'], 691), ('[4 * (*numrow) + 2 * i + 1]', 'w', 'not normalized', ['i'], 692)]
LDEs formed:21

distinct LDEs:
2 * i1=4 * (*numrow) + 2 * i2
2 * (*numrow) + 2 * i1 + 1=4 * (*numrow) + 2 * i2 + 1
2 * i1 + 1=2 * (*numrow) + 2 * i2 + 1
2 * i1=2 * (*numrow) + 2 * i2 + 1
2 * i1 + 1=4 * (*numrow) + 2 * i2
2 * i1=2 * (*numrow) + 2 * i2
2 * i1 + 1=2 * (*numrow) + 2 * i2
2 * i1 + 1=4 * (*numrow) + 2 * i2 + 1
2 * i1=2 * i2 + 1
2 * (*numrow) + 2 * i1=4 * (*numrow) + 2 * i2
2 * (*numrow) + 2 * i1 + 1=4 * (*numrow) + 2 * i2
4 * (*numrow) + 2 * i1=4 * (*numrow) + 2 * i2 + 1
2 * i1 + 1=2 * i2 + 1
4 * (*numrow) + 2 * i1 + 1=4 * (*numrow) + 2 * i2 + 1
2 * (*numrow) + 2 * i1=2 * (*numrow) + 2 * i2
2 * (*numrow) + 2 * i1=2 * (*numrow) + 2 * i2 + 1
2 * i1=2 * i2
2 * (*numrow) + 2 * i1=4 * (*numrow) + 2 * i2 + 1
2 * (*numrow) + 2 * i1 + 1=2 * (*numrow) + 2 * i2 + 1
4 * (*numrow) + 2 * i1=4 * (*numrow) + 2 * i2
2 * i1=4 * (*numrow) + 2 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nx * ny  i++
induction variable: ['i']
{
L693: (tab[i]=,w) (data[i],r) 
}
array table
-----------------------------------------------
data -> [('[i]', 'r', 'normalized', ['i'], 693)]
LDEs formed:0

tab -> [('[i]', 'w', 'normalized', ['i'], 693)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *numrow  i++
induction variable: ['i']
{
L694: (tab[i]=,w) (coordinates[3 * i],r) 
L695: (tab[*numrow + i]=,w) (coordinates[3 * i + 1],r) 
L696: (tab[*numrow * 2 + i]=,w) (values[i],r) 
}
array table
-----------------------------------------------
values -> [('[i]', 'r', 'normalized', ['i'], 696)]
LDEs formed:0

coordinates -> [('[3 * i]', 'r', 'normalized', ['i'], 694), ('[3 * i + 1]', 'r', 'normalized', ['i'], 695)]
LDEs formed:0

tab -> [('[i]', 'w', 'normalized', ['i'], 694), ('[*numrow + i]', 'w', 'not normalized', ['i'], 695), ('[*numrow * 2 + i]', 'w', 'not normalized', ['i'], 696)]
LDEs formed:6

distinct LDEs:
*numrow + i1=*numrow * 2 + i2
i1=*numrow + i2
*numrow + i1=*numrow + i2
i1=*numrow * 2 + i2
*numrow * 2 + i1=*numrow * 2 + i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 3  i++
induction variable: ['i']
{
L697: (logflagPropertyNames[i],r) 
L698: (flags[i]=,w) 
L699: (flags[i]=,w) 
}
array table
-----------------------------------------------
logflagPropertyNames -> [('[i]', 'r', 'normalized', ['i'], 697)]
LDEs formed:0

flags -> [('[i]', 'w', 'normalized', ['i'], 698), ('[i]', 'w', 'normalized', ['i'], 699)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i < nx   i++
induction variable: ['i']
{
L700: (xx[i],r) 
}
array table
-----------------------------------------------
xx -> [('[i]', 'r', 'normalized', ['i'], 700)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = ind + 1   i < size   i++ 
induction variable: ['i']
{
L701: (changedArray[i - 1]=,w) (changedArray[i],r) 
}
array table
-----------------------------------------------
changedArray -> [('[i - 1]', 'w', 'normalized', ['i'], 701), ('[i]', 'r', 'normalized', ['i'], 701)]
LDEs formed:2

distinct LDEs:
i1 - 1=i2
i1 - 1=i2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = *nbTicks - 1   i >= 0   i-- 
induction variable: ['i']
{
L702: (removedTicks[i],r) 
}
array table
-----------------------------------------------
removedTicks -> [('[i]', 'r', 'normalized', ['i'], 702)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < initSize   i++ 
induction variable: ['i']
{
L703: (removedTicks[i]=,w) 
}
array table
-----------------------------------------------
removedTicks -> [('[i]', 'w', 'normalized', ['i'], 703)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbRemove   i++ 
induction variable: ['i']
{
L704: (removedTicks[remIndex]=,w) 
}
array table
-----------------------------------------------
removedTicks -> [('[remIndex]', 'w', 'not normalized', ['i'], 704)]
LDEs formed:1

distinct LDEs:
remIndex=remIndex
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < size  i++
induction variable: ['i']
{
L705: (_grads[i]=,w) 
}
array table
-----------------------------------------------
_grads -> [('[i]', 'w', 'normalized', ['i'], 705)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i <= (int )(size / pas)  i++
induction variable: ['i']
{
L706: (_grads[i]=,w) 
}
array table
-----------------------------------------------
_grads -> [('[i]', 'w', 'normalized', ['i'], 706)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nx  i++
induction variable: ['i']
{
L707: (x[i]=,w) (tmpx[i],r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'w', 'normalized', ['i'], 707)]
LDEs formed:1

tmpx -> [('[i]', 'r', 'normalized', ['i'], 707)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ny  i++
induction variable: ['i']
{
L708: (y[i]=,w) (tmpy[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 708)]
LDEs formed:1

tmpy -> [('[i]', 'r', 'normalized', ['i'], 708)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = x3 - 1  j > 1  j--
induction variable: ['j']
{
L709: (x[3]=,w) 
}
array table
-----------------------------------------------
x -> [('[3]', 'w', 'normalized', ['j'], 709)]
LDEs formed:1

distinct LDEs:
3=3
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = y3 - 1  j > 1  j--
induction variable: ['j']
{
L710: (y[3]=,w) 
}
array table
-----------------------------------------------
y -> [('[3]', 'w', 'normalized', ['j'], 710)]
LDEs formed:1

distinct LDEs:
3=3
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n  i++
induction variable: ['i']
{
L711: (val[i],r) 
}
array table
-----------------------------------------------
val -> [('[i]', 'r', 'normalized', ['i'], 711)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n - 1  i++
induction variable: ['i']
{
L712: (val[0]+,r) 
}
array table
-----------------------------------------------
val -> [('[0]', 'r', 'normalized', ['i'], 712)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n - 1  i++
induction variable: ['i']
{
L713: (val[0]*,r) (val[2],r) 
}
array table
-----------------------------------------------
val -> [('[0]', 'r', 'normalized', ['i'], 713), ('[2]', 'r', 'normalized', ['i'], 713)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbTics   i++ 
induction variable: ['i']
{
L714: (vector[i],r) 
}
array table
-----------------------------------------------
vector -> [('[i]', 'r', 'normalized', ['i'], 714)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbStrings   i++ 
induction variable: ['i']
{
L715: (res[i]=,w) (values[i],r) 
}
array table
-----------------------------------------------
res -> [('[i]', 'w', 'normalized', ['i'], 715)]
LDEs formed:1

values -> [('[i]', 'r', 'normalized', ['i'], 715)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < n   i++
induction variable: ['i']
{
L716: (vect[i],r) (vect[i],r) 
L717: (vect[i],r) 
}
array table
-----------------------------------------------
vect -> [('[i]', 'r', 'normalized', ['i'], 716), ('[i]', 'r', 'normalized', ['i'], 716), ('[i]', 'r', 'normalized', ['i'], 717)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < n   i++
induction variable: ['i']
{
L718: (vect[i],r) (vect[i],r) 
L719: (vect[i],r) 
}
array table
-----------------------------------------------
vect -> [('[i]', 'r', 'normalized', ['i'], 718), ('[i]', 'r', 'normalized', ['i'], 718), ('[i]', 'r', 'normalized', ['i'], 719)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < n   i++
induction variable: ['i']
{
L720: (vect[i],r) 
L721: (vect[i],r) 
L722: (vect[i],r) 
L723: (vect[i],r) 
L724: (vect[i],r) 
}
array table
-----------------------------------------------
vect -> [('[i]', 'r', 'normalized', ['i'], 720), ('[i]', 'r', 'normalized', ['i'], 721), ('[i]', 'r', 'normalized', ['i'], 722), ('[i]', 'r', 'normalized', ['i'], 723), ('[i]', 'r', 'normalized', ['i'], 724)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 4  i++
induction variable: ['i']
{
	loop info: j = 0  j < 4  j++
	induction variable: ['i', 'j']
	{
	L725: (mat4D[i][j]=,w) 
	}
L726: (mat4D[i][i]=,w) 
}
array table
-----------------------------------------------
mat4D -> [('[i][j]', 'w', 'normalized', ['i', 'j'], 725), ('[i][i]', 'w', 'normalized', ['i', 'j'], 726)]
LDEs formed:6

distinct LDEs:
i1=i2,j1=i2
i1=i2,j1=j2
i1=i2,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 4  i++
induction variable: ['i']
{
L727: (res4D[i]=,w) (vect3D[0]*,r) (mat4D[i][0]+,r) (vect3D[1]*,r) (mat4D[i][1],r) 
L728: (vect3D[2]*,r) (mat4D[i][2]+,r) (mat4D[i][3],r) 
}
array table
-----------------------------------------------
vect3D -> [('[0]', 'r', 'normalized', ['i'], 727), ('[1]', 'r', 'normalized', ['i'], 727), ('[2]', 'r', 'normalized', ['i'], 728)]
LDEs formed:0

mat4D -> [('[i][0]', 'r', 'normalized', ['i'], 727), ('[i][1]', 'r', 'normalized', ['i'], 727), ('[i][2]', 'r', 'normalized', ['i'], 728), ('[i][3]', 'r', 'normalized', ['i'], 728)]
LDEs formed:0

res4D -> [('[i]', 'w', 'normalized', ['i'], 727)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<(int)strlen(legend) i++
induction variable: ['i']
{
L728: (legend[i]==,r) 
}
array table
-----------------------------------------------
legend -> [('[i]', 'r', 'normalized', ['i'], 728)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < count  i++
induction variable: ['i']
{
L729: (legend[arobaseIndex],r) (legend[arobaseIndex],r) 
L730: (Str[i]=,w) 
L731: (Str[i]==,r) 
	loop info: j = 0  j < stringLength  j++
	induction variable: ['i', 'j']
	{
	L732: (Str[i][j]=,w) (legend[prevIndex + j],r) 
	}
L733: (Str[i][stringLength]=,w) 
}
array table
-----------------------------------------------
legend -> [('[arobaseIndex]', 'r', 'not normalized', ['i', 'j'], 729), ('[arobaseIndex]', 'r', 'not normalized', ['i', 'j'], 729), ('[prevIndex + j]', 'r', 'not normalized', ['i', 'j'], 732)]
LDEs formed:0

Str -> [('[i]', 'w', 'normalized', ['i', 'j'], 730), ('[i]', 'r', 'normalized', ['i', 'j'], 731), ('[i][j]', 'w', 'normalized', ['i', 'j'], 732), ('[i][stringLength]', 'w', 'not normalized', ['i', 'j'], 733)]
LDEs formed:18

distinct LDEs:
i1=i2,j1=stringLength
i1=i2,stringLength=stringLength
i1=i2,j1=j2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iChildrenCount   ++i
induction variable: ['i']
{
L734: (pstChildrenUID[i],r) 
}
array table
-----------------------------------------------
pstChildrenUID -> [('[i]', 'r', 'normalized', ['i'], 734)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iChildrenCount   ++i
induction variable: ['i']
{
L735: (pstChildrenUID[i],r) 
}
array table
-----------------------------------------------
pstChildrenUID -> [('[i]', 'r', 'normalized', ['i'], 735)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNumVPG * iNum  i++
induction variable: ['i']
{
L736: (dataX[i]+=,w) 
L737: (dataY[i]+=,w) 
L738: (dataZ[i]+=,w) 
}
array table
-----------------------------------------------
dataY -> [('[i]', 'w', 'normalized', ['i'], 737)]
LDEs formed:1

dataX -> [('[i]', 'w', 'normalized', ['i'], 736)]
LDEs formed:1

dataZ -> [('[i]', 'w', 'normalized', ['i'], 738)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNum  i++
induction variable: ['i']
{
L739: (pdblData[3 * i]+=,w) 
L740: (pdblData[3 * i + 1]+=,w) 
L741: (pdblData[3 * i + 2]+=,w) 
}
array table
-----------------------------------------------
pdblData -> [('[3 * i]', 'w', 'normalized', ['i'], 739), ('[3 * i + 1]', 'w', 'normalized', ['i'], 740), ('[3 * i + 2]', 'w', 'normalized', ['i'], 741)]
LDEs formed:6

distinct LDEs:
3 * i1=3 * i2
3 * i1 + 1=3 * i2 + 1
3 * i1 + 1=3 * i2 + 2
3 * i1 + 2=3 * i2 + 2
3 * i1=3 * i2 + 2
3 * i1=3 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNumX  i++
induction variable: ['i']
{
L742: (dataX[i]+=,w) 
}
array table
-----------------------------------------------
dataX -> [('[i]', 'w', 'normalized', ['i'], 742)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNumY  i++
induction variable: ['i']
{
L743: (dataY[i]+=,w) 
}
array table
-----------------------------------------------
dataY -> [('[i]', 'w', 'normalized', ['i'], 743)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNumX  i++
induction variable: ['i']
{
L744: (dataX[i]+=,w) 
}
array table
-----------------------------------------------
dataX -> [('[i]', 'w', 'normalized', ['i'], 744)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNumY  i++
induction variable: ['i']
{
L745: (dataY[i]+=,w) 
}
array table
-----------------------------------------------
dataY -> [('[i]', 'w', 'normalized', ['i'], 745)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNum  i++
induction variable: ['i']
{
L746: (dataX[i]+=,w) 
L747: (dataY[i]+=,w) 
}
array table
-----------------------------------------------
dataY -> [('[i]', 'w', 'normalized', ['i'], 747)]
LDEs formed:1

dataX -> [('[i]', 'w', 'normalized', ['i'], 746)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNum  i++
induction variable: ['i']
{
L747: (dataZ[i]+=,w) 
}
array table
-----------------------------------------------
dataZ -> [('[i]', 'w', 'normalized', ['i'], 747)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNumX  i++
induction variable: ['i']
{
L748: (dataX[i]+=,w) 
}
array table
-----------------------------------------------
dataX -> [('[i]', 'w', 'normalized', ['i'], 748)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNumY  i++
induction variable: ['i']
{
L749: (dataY[i]+=,w) 
}
array table
-----------------------------------------------
dataY -> [('[i]', 'w', 'normalized', ['i'], 749)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNumZ  i++
induction variable: ['i']
{
L750: (dataZ[i]+=,w) 
}
array table
-----------------------------------------------
dataZ -> [('[i]', 'w', 'normalized', ['i'], 750)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < champDimensions[0]  i++
induction variable: ['i']
{
L751: (pdblData[i]+=,w) 
}
array table
-----------------------------------------------
pdblData -> [('[i]', 'w', 'normalized', ['i'], 751)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < champDimensions[1]  i++
induction variable: ['i']
{
L752: (pdblDataY[i]+=,w) 
}
array table
-----------------------------------------------
pdblDataY -> [('[i]', 'w', 'normalized', ['i'], 752)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < champDimensions[0]*champDimensions[1]  i++
induction variable: ['i']
{
L753: (pdblDataZ[i]+=,w) 
}
array table
-----------------------------------------------
pdblDataZ -> [('[i]', 'w', 'normalized', ['i'], 753)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNum  i++
induction variable: ['i']
{
L754: (pdblData[3 * i]+=,w) 
L755: (pdblData[3 * i + 1]+=,w) 
L756: (pdblData[3 * i + 2]+=,w) 
}
array table
-----------------------------------------------
pdblData -> [('[3 * i]', 'w', 'normalized', ['i'], 754), ('[3 * i + 1]', 'w', 'normalized', ['i'], 755), ('[3 * i + 2]', 'w', 'normalized', ['i'], 756)]
LDEs formed:6

distinct LDEs:
3 * i1=3 * i2
3 * i1 + 1=3 * i2 + 1
3 * i1 + 1=3 * i2 + 2
3 * i1 + 2=3 * i2 + 2
3 * i1=3 * i2 + 2
3 * i1=3 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNum  i++
induction variable: ['i']
{
L757: (pdblDirection[3 * i]+=,w) 
L758: (pdblDirection[3 * i + 1]+=,w) 
L759: (pdblDirection[3 * i + 2]+=,w) 
}
array table
-----------------------------------------------
pdblDirection -> [('[3 * i]', 'w', 'normalized', ['i'], 757), ('[3 * i + 1]', 'w', 'normalized', ['i'], 758), ('[3 * i + 2]', 'w', 'normalized', ['i'], 759)]
LDEs formed:6

distinct LDEs:
3 * i1=3 * i2
3 * i1 + 1=3 * i2 + 1
3 * i1 + 1=3 * i2 + 2
3 * i1 + 2=3 * i2 + 2
3 * i1=3 * i2 + 2
3 * i1=3 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i <  n2   i++
induction variable: ['i']
{
L760: (ybd_cont[i]=,w) 
L761: (xbd_cont[i]=,w) 
}
array table
-----------------------------------------------
xbd_cont -> [('[i]', 'w', 'normalized', ['i'], 761)]
LDEs formed:1

ybd_cont -> [('[i]', 'w', 'normalized', ['i'], 760)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i <  n1   i++
induction variable: ['i']
{
L761: (ybd_cont[n2+i-1]=,w) 
L762: (xbd_cont[n2+i-1]=,w) 
}
array table
-----------------------------------------------
xbd_cont -> [('[n2+i-1]', 'w', 'not normalized', ['i'], 762)]
LDEs formed:1

ybd_cont -> [('[n2+i-1]', 'w', 'not normalized', ['i'], 761)]
LDEs formed:1

distinct LDEs:
n2+i1-1=n2+i2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = n2-2   i >= 0    i--
induction variable: ['i']
{
L762: (ybd_cont[2*n2 +n1-3-i]=,w) 
L763: (xbd_cont[2*n2 +n1-3-i]=,w) 
}
array table
-----------------------------------------------
xbd_cont -> [('[2*n2 +n1-3-i]', 'w', 'not normalized', ['i'], 763)]
LDEs formed:1

ybd_cont -> [('[2*n2 +n1-3-i]', 'w', 'not normalized', ['i'], 762)]
LDEs formed:1

distinct LDEs:
2*n2 +n1-3-i1=2*n2 +n1-3-i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = n1-2   i >= 0   i--
induction variable: ['i']
{
L763: (ybd_cont[2*n2 +2*n1-4-i]=,w) 
L764: (xbd_cont[2*n2 +2*n1-4-i]=,w) 
}
array table
-----------------------------------------------
xbd_cont -> [('[2*n2 +2*n1-4-i]', 'w', 'not normalized', ['i'], 764)]
LDEs formed:1

ybd_cont -> [('[2*n2 +2*n1-4-i]', 'w', 'not normalized', ['i'], 763)]
LDEs formed:1

distinct LDEs:
2*n2 +2*n1-4-i1=2*n2 +2*n1-4-i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  c= 0   c < ncont   c++
induction variable: ['c']
{
L764: (style[c],r) 
	loop info:  i = 0   i < n1  i++
	induction variable: ['c', 'i']
	}
	loop info:  k = 1   k < n5   k++
	induction variable: ['c', 'i', 'k']
	{
	L765: (xbd_cont[k],r) (ybd_cont[k],r) 
	L766: (xbd_cont[k-1],r) (ybd_cont[k-1],r) 
	L767: (zCont[c],r) 
	L768: (zCont[c],r) 
	L769: (zCont[c],r) 
	}
	loop info:  i = 1   i < n1-1  i++
	induction variable: ['c', 'i', 'k']
	}
 }
array table
-----------------------------------------------
style -> [('[c]', 'r', 'normalized', ['c', 'i', 'k'], 764)]
LDEs formed:0

zCont -> [('[c]', 'r', 'normalized', ['c', 'i', 'k'], 767), ('[c]', 'r', 'normalized', ['c', 'i', 'k'], 768), ('[c]', 'r', 'normalized', ['c', 'i', 'k'], 769)]
LDEs formed:0

xbd_cont -> [('[k]', 'r', 'normalized', ['c', 'i', 'k'], 765), ('[k-1]', 'r', 'normalized', ['c', 'i', 'k'], 766)]
LDEs formed:0

ybd_cont -> [('[k]', 'r', 'normalized', ['c', 'i', 'k'], 765), ('[k-1]', 'r', 'normalized', ['c', 'i', 'k'], 766)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iChild = iNbChildren - 1  iChild >= 0  iChild--
induction variable: ['iChild']
{
L767: (pChildren[iChild],r) 
L768: (pChildren[iChild],r) 
L769: (pChildren[iChild],r) 
}
array table
-----------------------------------------------
pChildren -> [('[iChild]', 'r', 'normalized', ['iChild'], 767), ('[iChild]', 'r', 'normalized', ['iChild'], 768), ('[iChild]', 'r', 'normalized', ['iChild'], 769)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nblegends  i++
induction variable: ['i']
{
L770: (tabofhandles[i],r) 
L771: (lineIDS[nblegends - i - 1]=,w) 
}
array table
-----------------------------------------------
tabofhandles -> [('[i]', 'r', 'normalized', ['i'], 770)]
LDEs formed:0

lineIDS -> [('[nblegends - i - 1]', 'w', 'not normalized', ['i'], 771)]
LDEs formed:1

distinct LDEs:
nblegends - i1 - 1=nblegends - i2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n1  i++
induction variable: ['i']
{
L772: (dataVector[i]=,w) (pvecx[i],r) 
L773: (dataVector[n1 + i]=,w) (pvecy[i],r) 
}
array table
-----------------------------------------------
pvecx -> [('[i]', 'r', 'normalized', ['i'], 772)]
LDEs formed:0

pvecy -> [('[i]', 'r', 'normalized', ['i'], 773)]
LDEs formed:0

dataVector -> [('[i]', 'w', 'normalized', ['i'], 772), ('[n1 + i]', 'w', 'not normalized', ['i'], 773)]
LDEs formed:3

distinct LDEs:
i1=n1 + i2
n1 + i1=n1 + i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n1  i++
induction variable: ['i']
{
L774: (dataVector[i]=,w) 
L775: (dataVector[n1 + i]=,w) 
}
array table
-----------------------------------------------
dataVector -> [('[i]', 'w', 'normalized', ['i'], 774), ('[n1 + i]', 'w', 'not normalized', ['i'], 775)]
LDEs formed:3

distinct LDEs:
i1=n1 + i2
n1 + i1=n1 + i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n1  i++
induction variable: ['i']
{
L776: (dataVector[2 * n1 + i]=,w) 
}
array table
-----------------------------------------------
dataVector -> [('[2 * n1 + i]', 'w', 'not normalized', ['i'], 776)]
LDEs formed:1

distinct LDEs:
2 * n1 + i1=2 * n1 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n1  i++
induction variable: ['i']
{
L777: (dataVector[2 * n1 + i]=,w) (pvecz[i],r) 
}
array table
-----------------------------------------------
pvecz -> [('[i]', 'r', 'normalized', ['i'], 777)]
LDEs formed:0

dataVector -> [('[2 * n1 + i]', 'w', 'not normalized', ['i'], 777)]
LDEs formed:1

distinct LDEs:
2 * n1 + i1=2 * n1 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nb_tics_labels  i++
induction variable: ['i']
{
L778: (str[i]==,r) 
}
array table
-----------------------------------------------
str -> [('[i]', 'r', 'normalized', ['i'], 778)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numberArrows  i++
induction variable: ['i']
{
L779: (arrowCoords[3 * i]=,w) (vx[2 * i],r) 
L780: (arrowCoords[3 * i + 1]=,w) (vy[2 * i],r) 
L781: (arrowCoords[3 * i + 2]=,w) (vz[2 * i],r) 
L782: (arrowCoords[3 * i + 2]=,w) 
}
array table
-----------------------------------------------
vx -> [('[2 * i]', 'r', 'normalized', ['i'], 779)]
LDEs formed:0

vy -> [('[2 * i]', 'r', 'normalized', ['i'], 780)]
LDEs formed:0

arrowCoords -> [('[3 * i]', 'w', 'normalized', ['i'], 779), ('[3 * i + 1]', 'w', 'normalized', ['i'], 780), ('[3 * i + 2]', 'w', 'normalized', ['i'], 781), ('[3 * i + 2]', 'w', 'normalized', ['i'], 782)]
LDEs formed:10

vz -> [('[2 * i]', 'r', 'normalized', ['i'], 781)]
LDEs formed:0

distinct LDEs:
3 * i1=3 * i2
3 * i1 + 1=3 * i2 + 1
3 * i1 + 1=3 * i2 + 2
3 * i1 + 2=3 * i2 + 2
3 * i1=3 * i2 + 2
3 * i1=3 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numberArrows  i++
induction variable: ['i']
{
L782: (arrowCoords[3 * i]=,w) (vx[2 * i + 1],r) 
L783: (arrowCoords[3 * i + 1]=,w) (vy[2 * i + 1],r) 
L784: (arrowCoords[3 * i + 2]=,w) (vz[2 * i + 1],r) 
L785: (arrowCoords[3 * i + 2]=,w) 
}
array table
-----------------------------------------------
vx -> [('[2 * i + 1]', 'r', 'normalized', ['i'], 782)]
LDEs formed:0

vy -> [('[2 * i + 1]', 'r', 'normalized', ['i'], 783)]
LDEs formed:0

arrowCoords -> [('[3 * i]', 'w', 'normalized', ['i'], 782), ('[3 * i + 1]', 'w', 'normalized', ['i'], 783), ('[3 * i + 2]', 'w', 'normalized', ['i'], 784), ('[3 * i + 2]', 'w', 'normalized', ['i'], 785)]
LDEs formed:10

vz -> [('[2 * i + 1]', 'r', 'normalized', ['i'], 784)]
LDEs formed:0

distinct LDEs:
3 * i1=3 * i2
3 * i1 + 1=3 * i2 + 1
3 * i1 + 1=3 * i2 + 2
3 * i1 + 2=3 * i2 + 2
3 * i1=3 * i2 + 2
3 * i1=3 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numberArrows  i++
induction variable: ['i']
{
L785: (arrowCoords[3 * i]=,w) (vfx[i],r) 
L786: (arrowCoords[3 * i + 1]=,w) (vfy[i],r) 
L787: (arrowCoords[3 * i + 2]=,w) 
}
array table
-----------------------------------------------
arrowCoords -> [('[3 * i]', 'w', 'normalized', ['i'], 785), ('[3 * i + 1]', 'w', 'normalized', ['i'], 786), ('[3 * i + 2]', 'w', 'normalized', ['i'], 787)]
LDEs formed:6

vfy -> [('[i]', 'r', 'normalized', ['i'], 786)]
LDEs formed:0

vfx -> [('[i]', 'r', 'normalized', ['i'], 785)]
LDEs formed:0

distinct LDEs:
3 * i1=3 * i2
3 * i1 + 1=3 * i2 + 1
3 * i1 + 1=3 * i2 + 2
3 * i1 + 2=3 * i2 + 2
3 * i1=3 * i2 + 2
3 * i1=3 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < number  i++
induction variable: ['i']
{
L786: (handelsvalue[i],r) 
}
array table
-----------------------------------------------
handelsvalue -> [('[i]', 'r', 'normalized', ['i'], 786)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < number  i++
induction variable: ['i']
{
L787: (children[number - i - 1],r) 
}
array table
-----------------------------------------------
children -> [('[number - i - 1]', 'r', 'not normalized', ['i'], 787)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbRow * nbCol   i++ 
induction variable: ['i']
{
L788: (data[i]=,w) 
}
array table
-----------------------------------------------
data -> [('[i]', 'w', 'normalized', ['i'], 788)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < mat->nbRow * mat->nbCol   i++ 
induction variable: ['i']
{
L789: (data[i],r) 
L790: (data[i]=,w) 
}
array table
-----------------------------------------------
data -> [('[i]', 'r', 'normalized', ['i'], 789), ('[i]', 'w', 'normalized', ['i'], 790)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i = 0   i < nbCol   i++ 
induction variable: ['i']
{
L791: (values[i],r) 
L792: (values[i],r) 
L793: (gridStyles[i]=,w) 
}
array table
-----------------------------------------------
gridStyles -> [('[i]', 'w', 'normalized', ['i'], 793)]
LDEs formed:1

values -> [('[i]', 'r', 'normalized', ['i'], 791), ('[i]', 'r', 'normalized', ['i'], 792)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iLinksCount   i++
induction variable: ['i']
{
L793: (links[i]=,w) 
}
array table
-----------------------------------------------
links -> [('[i]', 'w', 'normalized', ['i'], 793)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < nbCol  i++ 
induction variable: ['i']
{
L794: (values[i],r) 
L795: (values[i],r) 
L796: (status[i]=,w) (axesReversePropertiesNames[i],r) 
L797: (status[i],r) 
}
array table
-----------------------------------------------
status -> [('[i]', 'w', 'normalized', ['i'], 796), ('[i]', 'r', 'normalized', ['i'], 797)]
LDEs formed:2

values -> [('[i]', 'r', 'normalized', ['i'], 794), ('[i]', 'r', 'normalized', ['i'], 795)]
LDEs formed:0

axesReversePropertiesNames -> [('[i]', 'r', 'normalized', ['i'], 796)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < nbCol   i++ 
induction variable: ['i']
{
L797: (values[i],r) 
L798: (axisSubticksPropertiesNames[i],r) 
}
array table
-----------------------------------------------
axisSubticksPropertiesNames -> [('[i]', 'r', 'normalized', ['i'], 798)]
LDEs formed:0

values -> [('[i]', 'r', 'normalized', ['i'], 797)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < 3   i++ 
induction variable: ['i']
{
L798: (axesReversePropertiesNames[i],r) 
L799: (axes_reverse[i]=,w) 
L800: (axes_reverse[i]=,w) 
L801: (axes_reverse[i]==,r) 
	loop info:  j = 0   j < i   j++ 
	induction variable: ['i', 'j']
		{
		L802: (axes_reverse[j],r) 
		}
 }
array table
-----------------------------------------------
axes_reverse -> [('[i]', 'w', 'normalized', ['i', 'j'], 799), ('[i]', 'w', 'normalized', ['i', 'j'], 800), ('[i]', 'r', 'normalized', ['i', 'j'], 801), ('[j]', 'r', 'normalized', ['i', 'j'], 802)]
LDEs formed:7

axesReversePropertiesNames -> [('[i]', 'r', 'normalized', ['i', 'j'], 798)]
LDEs formed:0

distinct LDEs:
i1=j2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < 3   i++ 
induction variable: ['i']
{
L799: (axes_reverse[i],r) 
}
array table
-----------------------------------------------
axes_reverse -> [('[i]', 'r', 'normalized', ['i'], 799)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbElement   i++ 
induction variable: ['i']
{
L800: (dest[i]=,w) (values[i],r) 
}
array table
-----------------------------------------------
dest -> [('[i]', 'w', 'normalized', ['i'], 800)]
LDEs formed:1

values -> [('[i]', 'r', 'normalized', ['i'], 800)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nbElement   i++ 
induction variable: ['i']
{
L801: (values[i],r) 
L802: (res[i]=,w) 
L803: (res[i]==,r) 
L804: (res[i],r) (values[i],r) 
}
array table
-----------------------------------------------
res -> [('[i]', 'w', 'normalized', ['i'], 802), ('[i]', 'r', 'normalized', ['i'], 803), ('[i]', 'r', 'normalized', ['i'], 804)]
LDEs formed:3

values -> [('[i]', 'r', 'normalized', ['i'], 801), ('[i]', 'r', 'normalized', ['i'], 804)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 3  i++
induction variable: ['i']
{
L805: (logFlags[i]==,r) 
L806: (logFlagsString[i]=,w) 
L807: (logFlagsString[i]=,w) 
}
array table
-----------------------------------------------
logFlagsString -> [('[i]', 'w', 'normalized', ['i'], 806), ('[i]', 'w', 'normalized', ['i'], 807)]
LDEs formed:3

logFlags -> [('[i]', 'r', 'normalized', ['i'], 805)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_PROPERTIES  i++
induction variable: ['i']
{
L806: (propertyTable[i].key,r) (propertyTable[i].accessor,r) 
}
array table
-----------------------------------------------
propertyTable -> [('[i]', 'r', 'normalized', ['i'], 806), ('[i]', 'r', 'normalized', ['i'], 806)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_PROPERTIES  i++
induction variable: ['i']
{
L807: (dictionary[i]=,w) (propertyTable[i].key,r) 
}
array table
-----------------------------------------------
propertyTable -> [('[i]', 'r', 'normalized', ['i'], 807)]
LDEs formed:0

dictionary -> [('[i]', 'w', 'normalized', ['i'], 807)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iLinksCount  i++
induction variable: ['i']
{
L808: (handles[i]=,w) (links[i],r) 
}
array table
-----------------------------------------------
handles -> [('[i]', 'w', 'normalized', ['i'], 808)]
LDEs formed:1

links -> [('[i]', 'r', 'normalized', ['i'], 808)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 11  i++
induction variable: ['i']
{
L809: (legendLocationsNames[i],r) 
}
array table
-----------------------------------------------
legendLocationsNames -> [('[i]', 'r', 'normalized', ['i'], 809)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < piChildrenCount[0]  ++i
induction variable: ['i']
{
L810: (pstChildrenUID[i],r) 
}
array table
-----------------------------------------------
pstChildrenUID -> [('[i]', 'r', 'normalized', ['i'], 810)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < piChildrenCount[0]  ++i
induction variable: ['i']
{
L811: (pstChildrenUID[i],r) 
L812: (plChildren[iChildIndex++]=,w) (pstChildrenUID[i],r) 
}
array table
-----------------------------------------------
pstChildrenUID -> [('[i]', 'r', 'normalized', ['i'], 811), ('[i]', 'r', 'normalized', ['i'], 812)]
LDEs formed:0

plChildren -> [('[iChildIndex++]', 'w', 'not normalized', ['i'], 812)]
LDEs formed:1

distinct LDEs:
iChildIndex++=iChildIndex++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < 3   i++ 
induction variable: ['i']
{
L813: (axesAutoTicksPropertiesNames[i],r) 
L814: (auto_ticks[i]=,w) 
L815: (auto_ticks[i]=,w) 
L816: (auto_ticks[i]==,r) 
	loop info:  j = 0   j < i   j++ 
	induction variable: ['i', 'j']
		{
		L817: (auto_ticks[j],r) 
		}
 }
array table
-----------------------------------------------
axesAutoTicksPropertiesNames -> [('[i]', 'r', 'normalized', ['i', 'j'], 813)]
LDEs formed:0

auto_ticks -> [('[i]', 'w', 'normalized', ['i', 'j'], 814), ('[i]', 'w', 'normalized', ['i', 'j'], 815), ('[i]', 'r', 'normalized', ['i', 'j'], 816), ('[j]', 'r', 'normalized', ['i', 'j'], 817)]
LDEs formed:7

distinct LDEs:
i1=j2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < 3   i++ 
induction variable: ['i']
{
L818: (auto_ticks[i],r) 
}
array table
-----------------------------------------------
auto_ticks -> [('[i]', 'r', 'normalized', ['i'], 818)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < mSize  i++ 
induction variable: ['i']
{
L819: (values[i],r) 
L820: (autoTicks[i]=,w) 
L821: (values[i],r) 
L822: (autoTicks[i]=,w) 
}
array table
-----------------------------------------------
autoTicks -> [('[i]', 'w', 'normalized', ['i'], 820), ('[i]', 'w', 'normalized', ['i'], 822)]
LDEs formed:3

values -> [('[i]', 'r', 'normalized', ['i'], 819), ('[i]', 'r', 'normalized', ['i'], 821)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbtics  i++
induction variable: ['i']
{
L822: (u_xgrads[i],r) 
L823: (u_xgrads[cmpteur]=,w) (u_xgrads[i],r) 
}
array table
-----------------------------------------------
u_xgrads -> [('[i]', 'r', 'normalized', ['i'], 822), ('[cmpteur]', 'w', 'not normalized', ['i'], 823), ('[i]', 'r', 'normalized', ['i'], 823)]
LDEs formed:3

distinct LDEs:
cmpteur=cmpteur
i1=cmpteur
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < cmpteur  i++
induction variable: ['i']
{
L824: (ticklabel[cmpteur2]=,w) (u_xlabels[i + offset],r) 
L825: (ticklabel[cmpteur2],r) (u_xlabels[i + offset],r) 
}
array table
-----------------------------------------------
u_xlabels -> [('[i + offset]', 'r', 'not normalized', ['i'], 824), ('[i + offset]', 'r', 'not normalized', ['i'], 825)]
LDEs formed:0

ticklabel -> [('[cmpteur2]', 'w', 'not normalized', ['i'], 824), ('[cmpteur2]', 'r', 'not normalized', ['i'], 825)]
LDEs formed:2

distinct LDEs:
cmpteur2=cmpteur2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 3  i++
induction variable: ['i']
{
L826: (logFlags[i]==,r) 
L827: (curLogFlags[i]=,w) 
L828: (curLogFlags[i]=,w) 
}
array table
-----------------------------------------------
curLogFlags -> [('[i]', 'w', 'normalized', ['i'], 827), ('[i]', 'w', 'normalized', ['i'], 828)]
LDEs formed:3

logFlags -> [('[i]', 'r', 'normalized', ['i'], 826)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 3  i++
induction variable: ['i']
{
L827: (curLogFlags[i]==,r) 
L828: (logFlags[i]=,w) 
L829: (logFlags[i]=,w) 
}
array table
-----------------------------------------------
curLogFlags -> [('[i]', 'r', 'normalized', ['i'], 827)]
LDEs formed:0

logFlags -> [('[i]', 'w', 'normalized', ['i'], 828), ('[i]', 'w', 'normalized', ['i'], 829)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < 3   i++ 
induction variable: ['i']
{
L830: (axesVisiblePropertiesNames[i],r) 
L831: (axes_visible[i]=,w) 
L832: (axes_visible[i]=,w) 
L833: (axes_visible[i]==,r) 
	loop info:  j = 0   j < i   j++ 
	induction variable: ['i', 'j']
		{
		L834: (axes_visible[j],r) 
		}
 }
array table
-----------------------------------------------
axesVisiblePropertiesNames -> [('[i]', 'r', 'normalized', ['i', 'j'], 830)]
LDEs formed:0

axes_visible -> [('[i]', 'w', 'normalized', ['i', 'j'], 831), ('[i]', 'w', 'normalized', ['i', 'j'], 832), ('[i]', 'r', 'normalized', ['i', 'j'], 833), ('[j]', 'r', 'normalized', ['i', 'j'], 834)]
LDEs formed:7

distinct LDEs:
i1=j2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < 3   i++ 
induction variable: ['i']
{
L835: (axes_visible[i],r) 
}
array table
-----------------------------------------------
axes_visible -> [('[i]', 'r', 'normalized', ['i'], 835)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < nbCol   i++ 
induction variable: ['i']
{
L836: (values[i],r) 
L837: (values[i],r) 
L838: (status[i]=,w) (axesVisiblePropertiesNames[i],r) 
L839: (status[i],r) 
}
array table
-----------------------------------------------
status -> [('[i]', 'w', 'normalized', ['i'], 838), ('[i]', 'r', 'normalized', ['i'], 839)]
LDEs formed:2

axesVisiblePropertiesNames -> [('[i]', 'r', 'normalized', ['i'], 838)]
LDEs formed:0

values -> [('[i]', 'r', 'normalized', ['i'], 836), ('[i]', 'r', 'normalized', ['i'], 837)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_PROPERTIES  i++
induction variable: ['i']
{
L838: (propertyTable[i].key,r) (propertyTable[i].accessor,r) 
}
array table
-----------------------------------------------
propertyTable -> [('[i]', 'r', 'normalized', ['i'], 838), ('[i]', 'r', 'normalized', ['i'], 838)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_PROPERTIES  i++
induction variable: ['i']
{
L839: (propertyTable[i].key,r) 
L840: (propertyTable[i].key,r) 
L841: (dictionary[i]=,w) 
}
array table
-----------------------------------------------
propertyTable -> [('[i]', 'r', 'normalized', ['i'], 839), ('[i]', 'r', 'normalized', ['i'], 840)]
LDEs formed:0

dictionary -> [('[i]', 'w', 'normalized', ['i'], 841)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < childrenCount  i++
induction variable: ['i']
{
L842: (children[i],r) 
}
array table
-----------------------------------------------
children -> [('[i]', 'r', 'normalized', ['i'], 842)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < childrenCount  i++
induction variable: ['i']
{
L843: (pstChildrenUID[i],r) 
L844: (pstChildrenUID[i],r) 
}
array table
-----------------------------------------------
pstChildrenUID -> [('[i]', 'r', 'normalized', ['i'], 843), ('[i]', 'r', 'normalized', ['i'], 844)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbObjects  i++
induction variable: ['i']
{
L845: (objectsUID[i],r) 
L846: (objectsUID[i],r) 
L847: (objectsUID[i],r) 
}
array table
-----------------------------------------------
objectsUID -> [('[i]', 'r', 'normalized', ['i'], 845), ('[i]', 'r', 'normalized', ['i'], 846), ('[i]', 'r', 'normalized', ['i'], 847)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numArrows  i++
induction variable: ['i']
{
L848: (arrowPoints[3 * i]=,w) (tab[2 * i],r) 
L849: (arrowPoints[3 * i + 1]=,w) (tab[2 * numArrows + 2 * i],r) 
L850: (arrowPoints[3 * i + 2]=,w) (tab[4 * numArrows + 2 * i],r) 
L851: (arrowPoints[3 * i + 2]=,w) 
}
array table
-----------------------------------------------
arrowPoints -> [('[3 * i]', 'w', 'normalized', ['i'], 848), ('[3 * i + 1]', 'w', 'normalized', ['i'], 849), ('[3 * i + 2]', 'w', 'normalized', ['i'], 850), ('[3 * i + 2]', 'w', 'normalized', ['i'], 851)]
LDEs formed:10

tab -> [('[2 * i]', 'r', 'normalized', ['i'], 848), ('[2 * numArrows + 2 * i]', 'r', 'not normalized', ['i'], 849), ('[4 * numArrows + 2 * i]', 'r', 'not normalized', ['i'], 850)]
LDEs formed:0

distinct LDEs:
3 * i1=3 * i2
3 * i1 + 1=3 * i2 + 1
3 * i1 + 1=3 * i2 + 2
3 * i1 + 2=3 * i2 + 2
3 * i1=3 * i2 + 2
3 * i1=3 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numArrows  i++
induction variable: ['i']
{
L851: (arrowPoints[3 * i]=,w) (tab[2 * i + 1],r) 
L852: (arrowPoints[3 * i + 1]=,w) (tab[2 * numArrows + 2 * i + 1],r) 
L853: (arrowPoints[3 * i + 2]=,w) (tab[4 * numArrows + 2 * i + 1],r) 
L854: (arrowPoints[3 * i + 2]=,w) 
}
array table
-----------------------------------------------
arrowPoints -> [('[3 * i]', 'w', 'normalized', ['i'], 851), ('[3 * i + 1]', 'w', 'normalized', ['i'], 852), ('[3 * i + 2]', 'w', 'normalized', ['i'], 853), ('[3 * i + 2]', 'w', 'normalized', ['i'], 854)]
LDEs formed:10

tab -> [('[2 * i + 1]', 'r', 'normalized', ['i'], 851), ('[2 * numArrows + 2 * i + 1]', 'r', 'not normalized', ['i'], 852), ('[4 * numArrows + 2 * i + 1]', 'r', 'not normalized', ['i'], 853)]
LDEs formed:0

distinct LDEs:
3 * i1=3 * i2
3 * i1 + 1=3 * i2 + 1
3 * i1 + 1=3 * i2 + 2
3 * i1 + 2=3 * i2 + 2
3 * i1=3 * i2 + 2
3 * i1=3 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbCoords  i++
induction variable: ['i']
{
L854: (curCoords[3]=,w) (xCoords[i],r) (yCoords[i],r) 
L855: (curPixCoords[2],r) 
L856: (xPixCoords[i]=,w) (curPixCoords[0],r) 
L857: (yPixCoords[i]=,w) (curPixCoords[1],r) 
}
array table
-----------------------------------------------
xPixCoords -> [('[i]', 'w', 'normalized', ['i'], 856)]
LDEs formed:1

yPixCoords -> [('[i]', 'w', 'normalized', ['i'], 857)]
LDEs formed:1

curPixCoords -> [('[2]', 'r', 'normalized', ['i'], 855), ('[0]', 'r', 'normalized', ['i'], 856), ('[1]', 'r', 'normalized', ['i'], 857)]
LDEs formed:0

xCoords -> [('[i]', 'r', 'normalized', ['i'], 854)]
LDEs formed:0

yCoords -> [('[i]', 'r', 'normalized', ['i'], 854)]
LDEs formed:0

curCoords -> [('[3]', 'w', 'normalized', ['i'], 854)]
LDEs formed:1

distinct LDEs:
3=3
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbCoords  i++
induction variable: ['i']
{
L855: (curPixCoords[2]=,w) (xPixCoords[i],r) (yPixCoords[i],r) 
L856: (curCoords[2],r) 
L857: (xUserCoords[i]=,w) (curCoords[0],r) 
L858: (yUserCoords[i]=,w) (curCoords[1],r) 
}
array table
-----------------------------------------------
xPixCoords -> [('[i]', 'r', 'normalized', ['i'], 855)]
LDEs formed:0

yUserCoords -> [('[i]', 'w', 'normalized', ['i'], 858)]
LDEs formed:1

yPixCoords -> [('[i]', 'r', 'normalized', ['i'], 855)]
LDEs formed:0

curPixCoords -> [('[2]', 'w', 'normalized', ['i'], 855)]
LDEs formed:1

xUserCoords -> [('[i]', 'w', 'normalized', ['i'], 857)]
LDEs formed:1

curCoords -> [('[2]', 'r', 'normalized', ['i'], 856), ('[0]', 'r', 'normalized', ['i'], 857), ('[1]', 'r', 'normalized', ['i'], 858)]
LDEs formed:0

distinct LDEs:
2=2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *n  ++i
induction variable: ['i']
{
L859: (zcol[i],r) 
L860: (zcol[i],r) 
L861: (x[*m * i],r) (y[*m * i],r) (z[*m * i],r) 
L862: (zcol[i],r) 
L863: (x[*m * i],r) (y[*m * i],r) (z[*m * i],r) 
L864: (x[*m * i],r) (y[*m * i],r) (z[*m * i],r) 
L865: (hdltab[i]=,w) 
}
array table
-----------------------------------------------
zcol -> [('[i]', 'r', 'normalized', ['i'], 859), ('[i]', 'r', 'normalized', ['i'], 860), ('[i]', 'r', 'normalized', ['i'], 862)]
LDEs formed:0

x -> [('[*m * i]', 'r', 'not normalized', ['i'], 861), ('[*m * i]', 'r', 'not normalized', ['i'], 863), ('[*m * i]', 'r', 'not normalized', ['i'], 864)]
LDEs formed:0

hdltab -> [('[i]', 'w', 'normalized', ['i'], 865)]
LDEs formed:1

z -> [('[*m * i]', 'r', 'not normalized', ['i'], 861), ('[*m * i]', 'r', 'not normalized', ['i'], 863), ('[*m * i]', 'r', 'not normalized', ['i'], 864)]
LDEs formed:0

y -> [('[*m * i]', 'r', 'not normalized', ['i'], 861), ('[*m * i]', 'r', 'not normalized', ['i'], 863), ('[*m * i]', 'r', 'not normalized', ['i'], 864)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iChildrenCount   ++i
induction variable: ['i']
{
L865: (pstChildrenUID[i],r) 
L866: (pstChildrenUID[iChildrenCount - i - 1],r) 
}
array table
-----------------------------------------------
pstChildrenUID -> [('[i]', 'r', 'normalized', ['i'], 865), ('[iChildrenCount - i - 1]', 'r', 'not normalized', ['i'], 866)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n  i++
induction variable: ['i']
{
L867: (tabofhandles[i]=,w) 
}
array table
-----------------------------------------------
tabofhandles -> [('[i]', 'w', 'normalized', ['i'], 867)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iChildrenCount   ++i
induction variable: ['i']
{
L868: (pstChildrenUID[i],r) 
L869: (pstChildrenUID[i]=,w) 
L870: (pstChildrenUID[i],r) 
L871: (pstChildrenUID[i]=,w) 
}
array table
-----------------------------------------------
pstChildrenUID -> [('[i]', 'r', 'normalized', ['i'], 868), ('[i]', 'w', 'normalized', ['i'], 869), ('[i]', 'r', 'normalized', ['i'], 870), ('[i]', 'w', 'normalized', ['i'], 871)]
LDEs formed:7

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NUMSETFONC   i++
induction variable: ['i']
{
L872: (KeyTab_[i],r) 
}
array table
-----------------------------------------------
KeyTab_ -> [('[i]', 'r', 'normalized', ['i'], 872)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 4  i++
induction variable: ['i']
{
L873: (rect[i]=,w) (rectVect[i],r) 
}
array table
-----------------------------------------------
rectVect -> [('[i]', 'r', 'normalized', ['i'], 873)]
LDEs formed:0

rect -> [('[i]', 'w', 'normalized', ['i'], 873)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < childrencount[0]  ++i
induction variable: ['i']
{
L874: (childrenUID[i],r) 
L875: (childrenUID[i],r) 
}
array table
-----------------------------------------------
childrenUID -> [('[i]', 'r', 'normalized', ['i'], 874), ('[i]', 'r', 'normalized', ['i'], 875)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < childrencount[0]  ++i
induction variable: ['i']
{
L876: (childrenUID[i],r) 
L877: (childrenUID[i],r) 
}
array table
-----------------------------------------------
childrenUID -> [('[i]', 'r', 'normalized', ['i'], 876), ('[i]', 'r', 'normalized', ['i'], 877)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nb_handles  i++
induction variable: ['i']
{
	loop info: iChild = 0  iChild < iChildCount  iChild++
	induction variable: ['i', 'iChild']
		{
		L878: (pstChildren[iChild],r) 
		L879: (pstChildren[iChild],r) 
		}
 }
array table
-----------------------------------------------
pstChildren -> [('[iChild]', 'r', 'normalized', ['i', 'iChild'], 878), ('[iChild]', 'r', 'normalized', ['i', 'iChild'], 879)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbObjects  i++ 
induction variable: ['i']
{
L880: (objectsId[i]=,w) 
}
array table
-----------------------------------------------
objectsId -> [('[i]', 'w', 'normalized', ['i'], 880)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 4  i++
induction variable: ['i']
{
L881: (initRect[i]=,w) 
}
array table
-----------------------------------------------
initRect -> [('[i]', 'w', 'normalized', ['i'], 881)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbDims  i++
induction variable: ['i']
{
L882: (initRect[i]=,w) (rect[i],r) 
}
array table
-----------------------------------------------
initRect -> [('[i]', 'w', 'normalized', ['i'], 882)]
LDEs formed:1

rect -> [('[i]', 'r', 'normalized', ['i'], 882)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < _iSelectedRectSize / 2  i++
induction variable: ['i']
{
L883: (_piJavaValues[i + 1],r) 
L884: (_piJavaValues[i + 4],r) 
}
array table
-----------------------------------------------
_piJavaValues -> [('[i + 1]', 'r', 'normalized', ['i'], 883), ('[i + 4]', 'r', 'normalized', ['i'], 884)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < n   i++
induction variable: ['i']
{
L885: (handelsvalue[i]=,w) 
L886: (handelsvalue[i],r) 
}
array table
-----------------------------------------------
handelsvalue -> [('[i]', 'w', 'normalized', ['i'], 885), ('[i]', 'r', 'normalized', ['i'], 886)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < NUMSETFONC   i++ 
induction variable: ['i']
{
L887: (KeyTab_[i],r) 
}
array table
-----------------------------------------------
KeyTab_ -> [('[i]', 'r', 'normalized', ['i'], 887)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 2   i <= Rhs   i++ 
induction variable: ['i']
{
L888: (xm[i - 2],r) (xn[i - 2],r) 
L889: (x[i - 2]=,w) 
L890: (xx[i - 2]=,w) 
}
array table
-----------------------------------------------
x -> [('[i - 2]', 'w', 'normalized', ['i'], 889)]
LDEs formed:1

xx -> [('[i - 2]', 'w', 'normalized', ['i'], 890)]
LDEs formed:1

xn -> [('[i - 2]', 'r', 'normalized', ['i'], 888)]
LDEs formed:0

xm -> [('[i - 2]', 'r', 'normalized', ['i'], 888)]
LDEs formed:0

distinct LDEs:
i1 - 2=i2 - 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 4   i++
induction variable: ['i']
{
L889: (xx[i]=,w) 
}
array table
-----------------------------------------------
xx -> [('[i]', 'w', 'normalized', ['i'], 889)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < childrencount[0]  ++i
induction variable: ['i']
{
L890: (childrenUID[i],r) 
L891: (childrenUID[i],r) 
}
array table
-----------------------------------------------
childrenUID -> [('[i]', 'r', 'normalized', ['i'], 890), ('[i]', 'r', 'normalized', ['i'], 891)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m  i++
induction variable: ['i']
{
L892: (pdblColorMap[i]=,w) (defcolors[3 * i]/,r) 
L893: (pdblColorMap[i + m]=,w) (defcolors[3 * i + 1]/,r) 
L894: (pdblColorMap[i + 2 * m]=,w) (defcolors[3 * i + 2]/,r) 
}
array table
-----------------------------------------------
defcolors -> [('[3 * i]', 'r', 'normalized', ['i'], 892), ('[3 * i + 1]', 'r', 'normalized', ['i'], 893), ('[3 * i + 2]', 'r', 'normalized', ['i'], 894)]
LDEs formed:0

pdblColorMap -> [('[i]', 'w', 'normalized', ['i'], 892), ('[i + m]', 'w', 'not normalized', ['i'], 893), ('[i + 2 * m]', 'w', 'not normalized', ['i'], 894)]
LDEs formed:6

distinct LDEs:
i1=i2
i1 + m=i2 + 2 * m
i1=i2 + m
i1 + 2 * m=i2 + 2 * m
i1=i2 + 2 * m
i1 + m=i2 + m
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n  i++
induction variable: ['i']
{
L895: (userCoords[3]=,w) (x[i],r) (y[i],r) (z[i],r) 
L896: (x[i]=,w) (userCoords2d[0],r) 
L897: (y[i]=,w) (userCoords2d[1],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 895), ('[i]', 'w', 'normalized', ['i'], 897)]
LDEs formed:2

userCoords -> [('[3]', 'w', 'normalized', ['i'], 895)]
LDEs formed:1

userCoords2d -> [('[0]', 'r', 'normalized', ['i'], 896), ('[1]', 'r', 'normalized', ['i'], 897)]
LDEs formed:0

z -> [('[i]', 'r', 'normalized', ['i'], 895)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 895), ('[i]', 'w', 'normalized', ['i'], 896)]
LDEs formed:2

distinct LDEs:
3=3
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L897: (windowNumbers[i],r) 
L898: (windowNumbers[i],r) 
}
array table
-----------------------------------------------
windowNumbers -> [('[i]', 'r', 'normalized', ['i'], 897), ('[i]', 'r', 'normalized', ['i'], 898)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1   i++
induction variable: ['i']
{
L899: (windowNumbers[i],r) 
}
array table
-----------------------------------------------
windowNumbers -> [('[i]', 'r', 'normalized', ['i'], 899)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 4  i++
induction variable: ['i']
{
L900: (numrow[i]=,w) 
L901: (numcol[i]=,w) 
L902: (lxyzcol[i]=,w) 
}
array table
-----------------------------------------------
numcol -> [('[i]', 'w', 'normalized', ['i'], 901)]
LDEs formed:1

numrow -> [('[i]', 'w', 'normalized', ['i'], 900)]
LDEs formed:1

lxyzcol -> [('[i]', 'w', 'normalized', ['i'], 902)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_PROPERTIES_SUPPORTED  i++
induction variable: ['i']
{
L903: (propertiesSupported[i],r) 
}
array table
-----------------------------------------------
propertiesSupported -> [('[i]', 'r', 'normalized', ['i'], 903)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < new_dimsize   k++
induction variable: ['k']
{
L904: (new_dims[k]=,w) (dims[k],r) 
}
array table
-----------------------------------------------
new_dims -> [('[k]', 'w', 'normalized', ['k'], 904)]
LDEs formed:1

dims -> [('[k]', 'r', 'normalized', ['k'], 904)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = new_dimsize   k < H->dimsize   k++ 
induction variable: ['k']
{
L905: (new_dims[new_dimsize - 1]*=,w) (dims[k],r) 
}
array table
-----------------------------------------------
new_dims -> [('[new_dimsize - 1]', 'w', 'not normalized', ['k'], 905)]
LDEs formed:1

dims -> [('[k]', 'r', 'normalized', ['k'], 905)]
LDEs formed:0

distinct LDEs:
new_dimsize - 1=new_dimsize - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < mn   k++ 
induction variable: ['k']
{
L906: (td[k],r) 
L907: (ti[k]=,w) 
}
array table
-----------------------------------------------
td -> [('[k]', 'r', 'normalized', ['k'], 906)]
LDEs formed:0

ti -> [('[k]', 'w', 'normalized', ['k'], 907)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < *mn   k++ 
induction variable: ['k']
{
L908: (ti[k]=,w) 
}
array table
-----------------------------------------------
ti -> [('[k]', 'w', 'normalized', ['k'], 908)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < *mn   i++ 
induction variable: ['i']
{
L909: (ti[i],r) 
L910: (ti[i],r) 
L911: (ti[i],r) 
L912: (ti[i]--,w) 
}
array table
-----------------------------------------------
ti -> [('[i]', 'r', 'normalized', ['i'], 909), ('[i]', 'r', 'normalized', ['i'], 910), ('[i]', 'r', 'normalized', ['i'], 911), ('[i]', 'w', 'normalized', ['i'], 912)]
LDEs formed:4

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 1   k < *mn   k++ 
induction variable: ['k']
{
L913: (ti[k]=,w) (ti[k - 1]+,r) 
}
array table
-----------------------------------------------
ti -> [('[k]', 'w', 'normalized', ['k'], 913), ('[k - 1]', 'r', 'normalized', ['k'], 913)]
LDEs formed:2

distinct LDEs:
k1=k2
k1=k2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < nmax   k++ 
induction variable: ['k']
{
L914: (ti[i]=,w) 
}
array table
-----------------------------------------------
ti -> [('[i]', 'w', 'not normalized', ['k'], 914)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < nmax   k++ 
induction variable: ['k']
{
L915: (ti[i]=,w) 
}
array table
-----------------------------------------------
ti -> [('[i]', 'w', 'not normalized', ['k'], 915)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < B.nel   k++ 
induction variable: ['k']
{
L916: (ti[k]=,w) (B.jcol[k]-,r) 
}
array table
-----------------------------------------------
B.jcol -> [('[k]', 'r', 'normalized', ['k'], 916)]
LDEs formed:0

ti -> [('[k]', 'w', 'normalized', ['k'], 916)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < B.m   k++ 
induction variable: ['k']
{
L917: (ti[i]=,w) 
}
array table
-----------------------------------------------
ti -> [('[i]', 'w', 'not normalized', ['k'], 917)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < B.m   i++ 
induction variable: ['i']
{
L918: (B.jcol[k]-,r) 
L919: (ti[k]=,w) 
}
array table
-----------------------------------------------
B.jcol -> [('[k]', 'r', 'not normalized', ['i'], 918)]
LDEs formed:0

ti -> [('[k]', 'w', 'not normalized', ['i'], 919)]
LDEs formed:1

distinct LDEs:
k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < K   k++ 
induction variable: ['k']
{
L920: (j[k]=,w) (id[k],r) 
}
array table
-----------------------------------------------
j -> [('[k]', 'w', 'normalized', ['k'], 920)]
LDEs formed:1

id -> [('[k]', 'r', 'normalized', ['k'], 920)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = dimsize - 1   i > 0   i-- 
induction variable: ['i']
{
	loop info:  k = K - 1   k >= 0   k--
	induction variable: ['i', 'k']
	{
	L921: (dims[i - 1]*,r) (j[k],r) 
		loop info:  p = nd - 1   p >= 0   p-- 
		induction variable: ['i', 'k', 'p']
		{
		L922: (j[m]=,w) (id[p]+,r) 
		}
 	}
 }
array table
-----------------------------------------------
dims -> [('[i - 1]', 'r', 'normalized', ['i', 'k', 'p'], 921)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['i', 'k', 'p'], 921), ('[m]', 'w', 'not normalized', ['i', 'k', 'p'], 922)]
LDEs formed:2

id -> [('[p]', 'r', 'normalized', ['i', 'k', 'p'], 922)]
LDEs formed:0

distinct LDEs:
m=m
k1=m
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i <= nb_index_vectors   i++ 
induction variable: ['i']
{
L923: (H.dims[i - 1],r) 
L924: (H.dims[i - 1],r) 
}
array table
-----------------------------------------------
H.dims -> [('[i - 1]', 'r', 'normalized', ['i'], 923), ('[i - 1]', 'r', 'normalized', ['i'], 924)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < final_dimsize   k++ 
induction variable: ['k']
{
L925: (He.dims[k]=,w) 
}
array table
-----------------------------------------------
He.dims -> [('[k]', 'w', 'normalized', ['k'], 925)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L926: (He.R[k]=,w) (j[k],r) 
}
array table
-----------------------------------------------
j -> [('[k]', 'r', 'normalized', ['k'], 926)]
LDEs formed:0

He.R -> [('[k]', 'w', 'normalized', ['k'], 926)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L927: (He.I[k]=,w) (j[k],r) 
}
array table
-----------------------------------------------
j -> [('[k]', 'r', 'normalized', ['k'], 927)]
LDEs formed:0

He.I -> [('[k]', 'w', 'normalized', ['k'], 927)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L928: (Pe[k]=,w) (j[k],r) 
}
array table
-----------------------------------------------
j -> [('[k]', 'r', 'normalized', ['k'], 928)]
LDEs formed:0

Pe -> [('[k]', 'w', 'normalized', ['k'], 928)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L929: (Pe[k]=,w) (j[k],r) 
}
array table
-----------------------------------------------
j -> [('[k]', 'r', 'normalized', ['k'], 929)]
LDEs formed:0

Pe -> [('[k]', 'w', 'normalized', ['k'], 929)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L930: (siPe[k]=,w) (j[k],r) 
}
array table
-----------------------------------------------
siPe -> [('[k]', 'w', 'normalized', ['k'], 930)]
LDEs formed:1

j -> [('[k]', 'r', 'normalized', ['k'], 930)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L931: (cPe[k]=,w) (j[k],r) 
}
array table
-----------------------------------------------
j -> [('[k]', 'r', 'normalized', ['k'], 931)]
LDEs formed:0

cPe -> [('[k]', 'w', 'normalized', ['k'], 931)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i <= nb_index_vectors   i++ 
induction variable: ['i']
{
L932: (A.dims[i - 1],r) 
L933: (A.dims[i - 1],r) 
L934: (B.dims[iconf]==,r) 
L935: (B.dims[iconf],r) 
}
array table
-----------------------------------------------
A.dims -> [('[i - 1]', 'r', 'normalized', ['i'], 932), ('[i - 1]', 'r', 'normalized', ['i'], 933)]
LDEs formed:0

B.dims -> [('[iconf]', 'r', 'not normalized', ['i'], 934), ('[iconf]', 'r', 'not normalized', ['i'], 935)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L936: (j[k],r) (B.R[0],r) 
}
array table
-----------------------------------------------
B.R -> [('[0]', 'r', 'normalized', ['k'], 936)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 936)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L937: (j[k],r) (B.I[0],r) 
}
array table
-----------------------------------------------
B.I -> [('[0]', 'r', 'normalized', ['k'], 937)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 937)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L938: (j[k],r) (B.R[k],r) 
}
array table
-----------------------------------------------
B.R -> [('[k]', 'r', 'normalized', ['k'], 938)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 938)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L939: (j[k],r) (B.I[k],r) 
}
array table
-----------------------------------------------
B.I -> [('[k]', 'r', 'normalized', ['k'], 939)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 939)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L940: (j[k],r) (PB[0],r) 
}
array table
-----------------------------------------------
PB -> [('[0]', 'r', 'normalized', ['k'], 940)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 940)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L941: (j[k],r) (PB[k],r) 
}
array table
-----------------------------------------------
PB -> [('[k]', 'r', 'normalized', ['k'], 941)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 941)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L942: (j[k],r) (PB[0],r) 
}
array table
-----------------------------------------------
PB -> [('[0]', 'r', 'normalized', ['k'], 942)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 942)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L943: (j[k],r) (PB[k],r) 
}
array table
-----------------------------------------------
PB -> [('[k]', 'r', 'normalized', ['k'], 943)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 943)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L944: (j[k],r) (siPB[0],r) 
}
array table
-----------------------------------------------
j -> [('[k]', 'r', 'normalized', ['k'], 944)]
LDEs formed:0

siPB -> [('[0]', 'r', 'normalized', ['k'], 944)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L945: (j[k],r) (siPB[k],r) 
}
array table
-----------------------------------------------
j -> [('[k]', 'r', 'normalized', ['k'], 945)]
LDEs formed:0

siPB -> [('[k]', 'r', 'normalized', ['k'], 945)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L946: (j[k],r) (cPB[0],r) 
}
array table
-----------------------------------------------
cPB -> [('[0]', 'r', 'normalized', ['k'], 946)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 946)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < ntot   k++ 
induction variable: ['k']
{
L947: (j[k],r) (cPB[k],r) 
}
array table
-----------------------------------------------
cPB -> [('[k]', 'r', 'normalized', ['k'], 947)]
LDEs formed:0

j -> [('[k]', 'r', 'normalized', ['k'], 947)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *ns  ++i
induction variable: ['i']
{
L948: (ptr[i - 1],r) 
L949: (ptr[i],r) 
L950: (chars[k - 1],r) 
}
array table
-----------------------------------------------
chars -> [('[k - 1]', 'r', 'not normalized', ['i'], 950)]
LDEs formed:0

ptr -> [('[i - 1]', 'r', 'normalized', ['i'], 948), ('[i]', 'r', 'normalized', ['i'], 949)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0  k < *nf  k++
induction variable: ['k']
{
L950: (fnames[k],r) 
L951: (ivt[l],r) (fnames[k],r) 
L952: (ivt[stp+1]=,w) (ivt[stp]+,r) 
}
array table
-----------------------------------------------
ivt -> [('[l]', 'r', 'not normalized', ['k'], 951), ('[stp+1]', 'w', 'not normalized', ['k'], 952), ('[stp]', 'r', 'not normalized', ['k'], 952)]
LDEs formed:3

fnames -> [('[k]', 'r', 'normalized', ['k'], 950), ('[k]', 'r', 'normalized', ['k'], 951)]
LDEs formed:0

distinct LDEs:
stp+1=stp
l=stp+1
stp+1=stp+1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j = 0   j < 4   j++ 
induction variable: ['j']
{
L952: (b[j]=,w) (a[j],r) 
	loop info:  i = 1   i <= k   i++ 
	induction variable: ['j', 'i']
	}
L953: (Ig[j][g]=,w) (b[j],r) (Cg[j][g],r) (m[j],r) 
}
array table
-----------------------------------------------
a -> [('[j]', 'r', 'normalized', ['j', 'i'], 952)]
LDEs formed:0

m -> [('[j]', 'r', 'normalized', ['j', 'i'], 953)]
LDEs formed:0

b -> [('[j]', 'w', 'normalized', ['j', 'i'], 952), ('[j]', 'r', 'normalized', ['j', 'i'], 953)]
LDEs formed:2

Cg -> [('[j][g]', 'r', 'not normalized', ['j', 'i'], 953)]
LDEs formed:0

Ig -> [('[j][g]', 'w', 'not normalized', ['j', 'i'], 953)]
LDEs formed:2

distinct LDEs:
j1=j2
j1=j2,g=g
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk=0 kk<N-M kk++
induction variable: ['kk']
{
L954: (mt[kk]&,r) (mt[kk+1]&,r) 
L955: (mt[kk]=,w) (mt[kk+M]^,r) (mag01[y & 0x1],r) 
}
array table
-----------------------------------------------
mt -> [('[kk]', 'r', 'normalized', ['kk'], 954), ('[kk+1]', 'r', 'normalized', ['kk'], 954), ('[kk]', 'w', 'normalized', ['kk'], 955), ('[kk+M]', 'r', 'not normalized', ['kk'], 955)]
LDEs formed:4

mag01 -> [('[y & 0x1]', 'r', 'not normalized', ['kk'], 955)]
LDEs formed:0

distinct LDEs:
kk1+1=kk2
kk1=kk2
kk1=kk2+M
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  kk<N-1 kk++
induction variable: ['kk']
{
L956: (mt[kk]&,r) (mt[kk+1]&,r) 
L957: (mt[kk]=,w) (mt[kk+(M-N)]^,r) (mag01[y & 0x1],r) 
}
array table
-----------------------------------------------
mt -> [('[kk]', 'r', 'normalized', ['kk'], 956), ('[kk+1]', 'r', 'normalized', ['kk'], 956), ('[kk]', 'w', 'normalized', ['kk'], 957), ('[kk+(M-N)]', 'r', 'not normalized', ['kk'], 957)]
LDEs formed:4

mag01 -> [('[y & 0x1]', 'r', 'not normalized', ['kk'], 957)]
LDEs formed:0

distinct LDEs:
kk1+1=kk2
kk1=kk2
kk1=kk2+(M-N)
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: mti=1  mti<N  mti++
induction variable: ['mti']
{
L958: (mt[mti]=,w) (mt[mti-1]^,r) (mt[mti-1]>>,r) 
L959: (mt[mti]&=,w) 
}
array table
-----------------------------------------------
mt -> [('[mti]', 'w', 'normalized', ['mti'], 958), ('[mti-1]', 'r', 'normalized', ['mti'], 958), ('[mti-1]', 'r', 'normalized', ['mti'], 958), ('[mti]', 'w', 'normalized', ['mti'], 959)]
LDEs formed:7

distinct LDEs:
mti1=mti2-1
mti1=mti2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L960: (swb_state[i]=,w) 
}
array table
-----------------------------------------------
swb_state -> [('[i]', 'w', 'normalized', ['i', 'j'], 960)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j<n  j++
induction variable: ['j']
{
	loop info: ip = (m->colptr)[j]  ip < (m->colptr)[j+1]  ip++
	induction variable: ['j', 'ip']
	{
	L961: (len[i]++,w) 
	L962: (len[j]++,w) 
	}
 }
array table
-----------------------------------------------
len -> [('[i]', 'w', 'not normalized', ['j', 'ip'], 961), ('[j]', 'w', 'normalized', ['j', 'ip'], 962)]
LDEs formed:3

distinct LDEs:
i=i
j1=j2
i=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j<n  j++
induction variable: ['j']
{
	loop info: ip = (m->colptr)[j]  ip < (m->colptr)[j+1]  ip++
	induction variable: ['j', 'ip']
	{
	L963: (next[i],r) 
	L964: (next[j],r) 
	L965: (next[i],r) 
	L966: (next[j],r) 
	L967: (next[i]++,w) 
	L968: (next[j]++,w) 
	}
 }
array table
-----------------------------------------------
next -> [('[i]', 'r', 'not normalized', ['j', 'ip'], 963), ('[j]', 'r', 'normalized', ['j', 'ip'], 964), ('[i]', 'r', 'not normalized', ['j', 'ip'], 965), ('[j]', 'r', 'normalized', ['j', 'ip'], 966), ('[i]', 'w', 'not normalized', ['j', 'ip'], 967), ('[j]', 'w', 'normalized', ['j', 'ip'], 968)]
LDEs formed:11

distinct LDEs:
i=i
j1=j2
i=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j<n  j++
induction variable: ['j']
{
	loop info: ip = (A->colptr)[j]  ip < (A->colptr)[j+1]  ip++
	induction variable: ['j', 'ip']
	{
	L969: (invperm[i],r) 
	L970: (invperm[j],r) 
	L971: (len[J]++,w) 
	}
 }
array table
-----------------------------------------------
invperm -> [('[i]', 'r', 'not normalized', ['j', 'ip'], 969), ('[j]', 'r', 'normalized', ['j', 'ip'], 970)]
LDEs formed:0

len -> [('[J]', 'w', 'not normalized', ['j', 'ip'], 971)]
LDEs formed:1

distinct LDEs:
J=J
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j<n  j++
induction variable: ['j']
{
	loop info: ip = (A->colptr)[j]  ip < (A->colptr)[j+1]  ip++
	induction variable: ['j', 'ip']
	{
	L972: (invperm[i],r) 
	L973: (invperm[j],r) 
	L974: (len[J],r) 
	L975: (len[J],r) 
	L976: (len[J]++,w) 
	}
 }
array table
-----------------------------------------------
invperm -> [('[i]', 'r', 'not normalized', ['j', 'ip'], 972), ('[j]', 'r', 'normalized', ['j', 'ip'], 973)]
LDEs formed:0

len -> [('[J]', 'r', 'not normalized', ['j', 'ip'], 974), ('[J]', 'r', 'not normalized', ['j', 'ip'], 975), ('[J]', 'w', 'not normalized', ['j', 'ip'], 976)]
LDEs formed:3

distinct LDEs:
J=J
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mtr->sn_size) j++
induction variable: ['j']
{
L977: (colptr[*(firstcol_in_supernode+j)],r) 
L978: (colptr[*(firstcol_in_supernode+j)],r) 
	loop info: i=0 i < A->colptr[*(firstcol_in_supernode+j)+1]- A->colptr[*(firstcol_in_supernode+j)] 	i++
	induction variable: ['j', 'i']
	{
	L979: (ind[i],r) 
	L980: (ind[i],r) (re[i],r) 
	L981: (ind[i],r) (re[i],r) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i]', 'r', 'normalized', ['j', 'i'], 979), ('[i]', 'r', 'normalized', ['j', 'i'], 980), ('[i]', 'r', 'normalized', ['j', 'i'], 981)]
LDEs formed:0

re -> [('[i]', 'r', 'normalized', ['j', 'i'], 980), ('[i]', 'r', 'normalized', ['j', 'i'], 981)]
LDEs formed:0

colptr -> [('[*(firstcol_in_supernode+j)]', 'r', 'not normalized', ['j', 'i'], 977), ('[*(firstcol_in_supernode+j)]', 'r', 'not normalized', ['j', 'i'], 978)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<my_mtr->up_size j++
induction variable: ['j']
{
	loop info: i=j i<my_mtr->up_size i++
	induction variable: ['j', 'i']
	{
	L979: (up_vertices[j],r) 
	L980: (up_vertices[i],r) 
	}
 }
array table
-----------------------------------------------
up_vertices -> [('[j]', 'r', 'normalized', ['j', 'i'], 979), ('[i]', 'r', 'normalized', ['j', 'i'], 980)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c=first_child[j]  c != -1  c = next_child[c]
induction variable: ['c']
{
L981: (first_descendant[c],r) (first_descendant[c],r) 
}
array table
-----------------------------------------------
first_descendant -> [('[c]', 'r', 'normalized', ['c'], 981), ('[c]', 'r', 'normalized', ['c'], 981)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < n  j++
induction variable: ['j']
{
	loop info: ip=0  ip<jnnz  ip++
	induction variable: ['j', 'ip']
	{
	L982: (rowcount[i]++,w) 
	}
 }
array table
-----------------------------------------------
rowcount -> [('[i]', 'w', 'not normalized', ['j', 'ip'], 982)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i <= n  i++
induction variable: ['i']
{
L983: (rowcount[i],r) 
L984: (rowcount[i]=,w) 
}
array table
-----------------------------------------------
rowcount -> [('[i]', 'r', 'normalized', ['i'], 983), ('[i]', 'w', 'normalized', ['i'], 984)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < n  j++
induction variable: ['j']
{
	loop info: ip=0  ip<jnnz  ip++
	induction variable: ['j', 'ip']
	{
	L985: (rowcount[i],r) (rowptr[i+1],r) 
	L986: (rowcount[i],r) 
	L987: (rowcount[i]++,w) 
	}
 }
array table
-----------------------------------------------
rowcount -> [('[i]', 'r', 'not normalized', ['j', 'ip'], 985), ('[i]', 'r', 'not normalized', ['j', 'ip'], 986), ('[i]', 'w', 'not normalized', ['j', 'ip'], 987)]
LDEs formed:3

rowptr -> [('[i+1]', 'r', 'not normalized', ['j', 'ip'], 985)]
LDEs formed:0

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<n  i++
induction variable: ['i']
{
L986: (realroot[i]=,w) 
L987: (parent[i]=,w) 
	loop info: kp=rowptr[i]  kp<rowptr[i+1]  kp++
	induction variable: ['i', 'kp']
	{
	L988: (colind[kp],r) 
	L989: (realroot[u2],r) 
	L990: (parent[t]==,r) 
	L991: (parent[t]=,w) 
	L992: (realroot[vroot]=,w) 
	}
 }
array table
-----------------------------------------------
realroot -> [('[i]', 'w', 'normalized', ['i', 'kp'], 986), ('[u2]', 'r', 'not normalized', ['i', 'kp'], 989), ('[vroot]', 'w', 'not normalized', ['i', 'kp'], 992)]
LDEs formed:5

parent -> [('[i]', 'w', 'normalized', ['i', 'kp'], 987), ('[t]', 'r', 'not normalized', ['i', 'kp'], 990), ('[t]', 'w', 'not normalized', ['i', 'kp'], 991)]
LDEs formed:5

colind -> [('[kp]', 'r', 'normalized', ['i', 'kp'], 988)]
LDEs formed:0

distinct LDEs:
i1=u2
i1=vroot
t=t
i1=i2
u2=vroot
i1=t
vroot=vroot
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=n-1  j>=0  j--
induction variable: ['j']
{
L989: (next_child[j]=,w) (parent[j],r) 
L990: (parent[j],r) 
}
array table
-----------------------------------------------
next_child -> [('[j]', 'w', 'normalized', ['j'], 989)]
LDEs formed:1

parent -> [('[j]', 'r', 'normalized', ['j'], 989), ('[j]', 'r', 'normalized', ['j'], 990)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: u=0  u < n  u++
induction variable: ['u']
{
L991: (first_child[u]==,r) 
L992: (wt[u]=,w) 
L993: (wt[u]=,w) 
}
array table
-----------------------------------------------
first_child -> [('[u]', 'r', 'normalized', ['u'], 991)]
LDEs formed:0

wt -> [('[u]', 'w', 'normalized', ['u'], 992), ('[u]', 'w', 'normalized', ['u'], 993)]
LDEs formed:3

distinct LDEs:
u1=u2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: p=0  p<n  p++
induction variable: ['p']
{
L994: (postorder[p],r) 
L995: (parent[jp],r) (parent[jp],r) 
	loop info: ip = (A->colptr)[jp]  ip < (A->colptr)[jp+1]  ip++
	induction variable: ['p', 'ip']
	{
	L996: (first_descendant[jp],r) (prev_nbr[u],r) 
	L997: (wt[jp]++,w) 
	L998: (prev_p[ju],r) 
	L999: (l_rc[ju]+=,w) (level[jp]-,r) (level[ju],r) 
	L1000: (l_rc[ju]+=,w) (level[jp]-,r) (level[q],r) 
	L1001: (wt[q]--,w) 
	L1002: (prev_p[ju]=,w) 
	L1003: (prev_nbr[u]=,w) 
	L1004: (parent[jp],r) 
	L1005: (parent[jp],r) (ipostorder[jp],r) 
	L1006: (parent[jp],r) (ipostorder[jp],r) (parent[jp],r) 
	L1007: (parent[jp],r) (ipostorder[jp],r) 
	L1008: (parent[jp],r) 
	}
	loop info: u2=0  u2<n  u2++
	induction variable: ['p', 'ip', 'u2']
	{
	L1009: (l_cc[u2]=,w) (wt[u2],r) 
	L1010: (wt[u2],r) 
	}
L1011: (parent[u2],r) 
L1012: (parent[u2],r) (l_cc[u2],r) 
L1013: (l_cc[u2],r) 
}
array table
-----------------------------------------------
first_descendant -> [('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 996)]
LDEs formed:0

parent -> [('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 995), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 995), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1004), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1005), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1006), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1006), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1007), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1008), ('[u2]', 'r', 'normalized', ['p', 'ip', 'u2'], 1011), ('[u2]', 'r', 'normalized', ['p', 'ip', 'u2'], 1012)]
LDEs formed:0

level -> [('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 999), ('[ju]', 'r', 'not normalized', ['p', 'ip', 'u2'], 999), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1000), ('[q]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1000)]
LDEs formed:0

l_rc -> [('[ju]', 'w', 'not normalized', ['p', 'ip', 'u2'], 999), ('[ju]', 'w', 'not normalized', ['p', 'ip', 'u2'], 1000)]
LDEs formed:3

ipostorder -> [('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1005), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1006), ('[jp]', 'r', 'not normalized', ['p', 'ip', 'u2'], 1007)]
LDEs formed:0

prev_p -> [('[ju]', 'r', 'not normalized', ['p', 'ip', 'u2'], 998), ('[ju]', 'w', 'not normalized', ['p', 'ip', 'u2'], 1002)]
LDEs formed:2

l_cc -> [('[u2]', 'w', 'normalized', ['p', 'ip', 'u2'], 1009), ('[u2]', 'r', 'normalized', ['p', 'ip', 'u2'], 1012), ('[u2]', 'r', 'normalized', ['p', 'ip', 'u2'], 1013)]
LDEs formed:3

wt -> [('[jp]', 'w', 'not normalized', ['p', 'ip', 'u2'], 997), ('[q]', 'w', 'not normalized', ['p', 'ip', 'u2'], 1001), ('[u2]', 'r', 'normalized', ['p', 'ip', 'u2'], 1009), ('[u2]', 'r', 'normalized', ['p', 'ip', 'u2'], 1010)]
LDEs formed:7

prev_nbr -> [('[u]', 'r', 'not normalized', ['p', 'ip', 'u2'], 996), ('[u]', 'w', 'not normalized', ['p', 'ip', 'u2'], 1003)]
LDEs formed:2

postorder -> [('[p]', 'r', 'normalized', ['p', 'ip', 'u2'], 994)]
LDEs formed:0

distinct LDEs:
u=u
ju=ju
u21=u22
jp=q
q=q
jp=u22
jp=jp
q=u22
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < n  j++
induction variable: ['j']
{
	loop info: ip=0  ip<jnnz  ip++
	induction variable: ['j', 'ip']
	{
	L995: (rowcount[i]++,w) 
	}
 }
array table
-----------------------------------------------
rowcount -> [('[i]', 'w', 'not normalized', ['j', 'ip'], 995)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i <= n  i++
induction variable: ['i']
{
L996: (rowcount[i],r) 
L997: (rowcount[i]=,w) 
}
array table
-----------------------------------------------
rowcount -> [('[i]', 'r', 'normalized', ['i'], 996), ('[i]', 'w', 'normalized', ['i'], 997)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < n  j++
induction variable: ['j']
{
	loop info: ip=0  ip<jnnz  ip++
	induction variable: ['j', 'ip']
	{
	L998: (rowcount[i],r) (rowptr[i+1],r) 
	L999: (rowcount[i],r) 
	L1000: (rowcount[i]++,w) 
	}
 }
array table
-----------------------------------------------
rowcount -> [('[i]', 'r', 'not normalized', ['j', 'ip'], 998), ('[i]', 'r', 'not normalized', ['j', 'ip'], 999), ('[i]', 'w', 'not normalized', ['j', 'ip'], 1000)]
LDEs formed:3

rowptr -> [('[i+1]', 'r', 'not normalized', ['j', 'ip'], 998)]
LDEs formed:0

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<n  i++
induction variable: ['i']
{
L999: (realroot[i]=,w) 
L1000: (parent[i]=,w) 
	loop info: kp=rowptr[i]  kp<rowptr[i+1]  kp++
	induction variable: ['i', 'kp']
	{
	L1001: (colind[kp],r) 
	L1002: (realroot[u],r) 
	L1003: (parent[t]==,r) 
	L1004: (parent[t]=,w) 
	L1005: (realroot[vroot]=,w) 
	}
 }
array table
-----------------------------------------------
realroot -> [('[i]', 'w', 'normalized', ['i', 'kp'], 999), ('[u]', 'r', 'not normalized', ['i', 'kp'], 1002), ('[vroot]', 'w', 'not normalized', ['i', 'kp'], 1005)]
LDEs formed:5

parent -> [('[i]', 'w', 'normalized', ['i', 'kp'], 1000), ('[t]', 'r', 'not normalized', ['i', 'kp'], 1003), ('[t]', 'w', 'not normalized', ['i', 'kp'], 1004)]
LDEs formed:5

colind -> [('[kp]', 'r', 'normalized', ['i', 'kp'], 1001)]
LDEs formed:0

distinct LDEs:
i1=vroot
u=vroot
t=t
i1=i2
i1=u
i1=t
vroot=vroot
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<n  i++
induction variable: ['i']
{
L1002: (l_rc[i]=,w) 
L1003: (marker[ i ]=,w) 
	loop info: kp=rowptr[i]  kp<rowptr[i+1]  kp++
	induction variable: ['i', 'kp']
	{
	L1004: (colind[kp],r) 
	L1005: (marker[j],r) 
	L1006: (l_cc[j]++,w) 
	L1007: (l_rc[i]++,w) 
	L1008: (marker[j]=,w) 
	L1009: (parent[j],r) 
	}
 }
array table
-----------------------------------------------
marker -> [('[ i ]', 'w', 'normalized', ['i', 'kp'], 1003), ('[j]', 'r', 'not normalized', ['i', 'kp'], 1005), ('[j]', 'w', 'not normalized', ['i', 'kp'], 1008)]
LDEs formed:5

l_cc -> [('[j]', 'w', 'not normalized', ['i', 'kp'], 1006)]
LDEs formed:1

parent -> [('[j]', 'r', 'not normalized', ['i', 'kp'], 1009)]
LDEs formed:0

l_rc -> [('[i]', 'w', 'normalized', ['i', 'kp'], 1002), ('[i]', 'w', 'normalized', ['i', 'kp'], 1007)]
LDEs formed:3

colind -> [('[kp]', 'r', 'normalized', ['i', 'kp'], 1004)]
LDEs formed:0

distinct LDEs:
j=j
 i1 = i2 
i1=i2
 i1 =j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=(A->colptr)[j]  ip<(A->colptr)[j+1]  ip++
induction variable: ['ip']
{
L1005: (map[i]==,r) 
}
array table
-----------------------------------------------
map -> [('[i]', 'r', 'not normalized', ['ip'], 1005)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c=first_child[j]  c != -1  c = next_child[c]
induction variable: ['c']
{
L1006: (column_to_sn_map[c],r) 
	loop info: ip=sn_size[c_sn]  ip<sn_up_size[c_sn]  ip++
	induction variable: ['c', 'ip']
	{
	L1007: (sn_rowind[c_sn][ip],r) 
	L1008: (map[i],r) 
	L1009: (map[i]=,w) 
	L1010: (rowind[nnz]=,w) 
	}
 }
array table
-----------------------------------------------
sn_rowind -> [('[c_sn][ip]', 'r', 'not normalized', ['c', 'ip'], 1007)]
LDEs formed:0

column_to_sn_map -> [('[c]', 'r', 'normalized', ['c', 'ip'], 1006)]
LDEs formed:0

rowind -> [('[nnz]', 'w', 'not normalized', ['c', 'ip'], 1010)]
LDEs formed:1

map -> [('[i]', 'r', 'not normalized', ['c', 'ip'], 1008), ('[i]', 'w', 'not normalized', ['c', 'ip'], 1009)]
LDEs formed:2

distinct LDEs:
nnz=nnz
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=(A->colptr)[j]  ip<(A->colptr)[j+1]  ip++
induction variable: ['ip']
{
L1010: (map[i],r) 
L1011: (map[i]=,w) 
L1012: (rowind[nnz]=,w) 
}
array table
-----------------------------------------------
map -> [('[i]', 'r', 'not normalized', ['ip'], 1010), ('[i]', 'w', 'not normalized', ['ip'], 1011)]
LDEs formed:2

rowind -> [('[nnz]', 'w', 'not normalized', ['ip'], 1012)]
LDEs formed:1

distinct LDEs:
i=i
nnz=nnz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c=first_child[j]  c != -1  c = next_child[c]
induction variable: ['c']
{
L1013: (column_to_sn_map[c],r) 
L1014: (first_child[j],r) 
L1015: (sn_first_child[*n_sn]=,w) 
L1016: (sn_next_child[ c_sn ]=,w) (sn_first_child[*n_sn],r) 
L1017: (sn_first_child[*n_sn]=,w) 
}
array table
-----------------------------------------------
column_to_sn_map -> [('[c]', 'r', 'normalized', ['c'], 1013)]
LDEs formed:0

first_child -> [('[j]', 'r', 'not normalized', ['c'], 1014)]
LDEs formed:0

sn_next_child -> [('[ c_sn ]', 'w', 'not normalized', ['c'], 1016)]
LDEs formed:1

sn_first_child -> [('[*n_sn]', 'w', 'not normalized', ['c'], 1015), ('[*n_sn]', 'r', 'not normalized', ['c'], 1016), ('[*n_sn]', 'w', 'not normalized', ['c'], 1017)]
LDEs formed:5

distinct LDEs:
 c_sn = c_sn 
*n_sn=*n_sn
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c_sn=sn_first_child[sn]  c_sn != -1  c_sn = sn_next_child[c_sn]
induction variable: ['c_sn']
{
L1018: (c_znz[i]=,w) 
L1019: (c_znz[i].zeros+,r) (c_znz[i].nonzeros==,r) 
L1020: (sn_up_size[c_sn]-,r) (sn_size[c_sn],r) (sn_size[c_sn],r) 
L1021: (sn_size[c_sn]*,r) (sn_size[c_sn]+,r) 
}
array table
-----------------------------------------------
sn_size -> [('[c_sn]', 'r', 'normalized', ['c_sn'], 1020), ('[c_sn]', 'r', 'normalized', ['c_sn'], 1020), ('[c_sn]', 'r', 'normalized', ['c_sn'], 1021), ('[c_sn]', 'r', 'normalized', ['c_sn'], 1021)]
LDEs formed:0

c_znz -> [('[i]', 'w', 'not normalized', ['c_sn'], 1018), ('[i]', 'r', 'not normalized', ['c_sn'], 1019), ('[i]', 'r', 'not normalized', ['c_sn'], 1019)]
LDEs formed:3

sn_up_size -> [('[c_sn]', 'r', 'normalized', ['c_sn'], 1020)]
LDEs formed:0

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nchildren  i++
induction variable: ['i']
{
L1021: (c_znz[i],r) 
L1022: (c_znz[i],r) 
}
array table
-----------------------------------------------
c_znz -> [('[i]', 'r', 'normalized', ['i'], 1021), ('[i]', 'r', 'normalized', ['i'], 1022)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c_sn=sn_first_child[sn]  c_sn != -1  c_sn = sn_next_child[c_sn]
induction variable: ['c_sn']
{
	loop info: ip=0  ip<sn_size[c_sn]  ip++
	induction variable: ['c_sn', 'ip']
	{
	L1023: (sn_rowind[c_sn][ip],r) 
	L1024: (map[i],r) 
	L1025: (map[i]=,w) 
	L1026: (rowind[nnz]=,w) 
	}
 }
array table
-----------------------------------------------
sn_rowind -> [('[c_sn][ip]', 'r', 'normalized', ['c_sn', 'ip'], 1023)]
LDEs formed:0

map -> [('[i]', 'r', 'not normalized', ['c_sn', 'ip'], 1024), ('[i]', 'w', 'not normalized', ['c_sn', 'ip'], 1025)]
LDEs formed:2

rowind -> [('[nnz]', 'w', 'not normalized', ['c_sn', 'ip'], 1026)]
LDEs formed:1

distinct LDEs:
i=i
nnz=nnz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=0  ip<sn_size[sn]  ip++
induction variable: ['ip']
{
L1027: (sn_rowind[sn][ip],r) 
L1028: (map[i],r) 
L1029: (map[i]=,w) 
L1030: (rowind[nnz]=,w) 
}
array table
-----------------------------------------------
sn_rowind -> [('[sn][ip]', 'r', 'not normalized', ['ip'], 1027)]
LDEs formed:0

map -> [('[i]', 'r', 'not normalized', ['ip'], 1028), ('[i]', 'w', 'not normalized', ['ip'], 1029)]
LDEs formed:2

rowind -> [('[nnz]', 'w', 'not normalized', ['ip'], 1030)]
LDEs formed:1

distinct LDEs:
i=i
nnz=nnz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c_sn=sn_first_child[sn]  c_sn != -1  c_sn = sn_next_child[c_sn]
induction variable: ['c_sn']
{
	loop info: ip=sn_size[c_sn]  ip<sn_up_size[c_sn]  ip++
	induction variable: ['c_sn', 'ip']
	{
	L1031: (sn_rowind[c_sn][ip],r) 
	L1032: (map[i],r) 
	L1033: (map[i]=,w) 
	L1034: (rowind[nnz]=,w) 
	}
 }
array table
-----------------------------------------------
sn_rowind -> [('[c_sn][ip]', 'r', 'normalized', ['c_sn', 'ip'], 1031)]
LDEs formed:0

map -> [('[i]', 'r', 'not normalized', ['c_sn', 'ip'], 1032), ('[i]', 'w', 'not normalized', ['c_sn', 'ip'], 1033)]
LDEs formed:2

rowind -> [('[nnz]', 'w', 'not normalized', ['c_sn', 'ip'], 1034)]
LDEs formed:1

distinct LDEs:
i=i
nnz=nnz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=sn_size[sn]  ip<sn_up_size[sn]  ip++
induction variable: ['ip']
{
L1035: (sn_rowind[sn][ip],r) 
L1036: (map[i],r) 
L1037: (map[i]=,w) 
L1038: (rowind[nnz]=,w) 
}
array table
-----------------------------------------------
sn_rowind -> [('[sn][ip]', 'r', 'not normalized', ['ip'], 1035)]
LDEs formed:0

map -> [('[i]', 'r', 'not normalized', ['ip'], 1036), ('[i]', 'w', 'not normalized', ['ip'], 1037)]
LDEs formed:2

rowind -> [('[nnz]', 'w', 'not normalized', ['ip'], 1038)]
LDEs formed:1

distinct LDEs:
i=i
nnz=nnz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=0  ip<nnz  ip++
induction variable: ['ip']
{
L1039: (rowind[ip],r) 
}
array table
-----------------------------------------------
rowind -> [('[ip]', 'r', 'normalized', ['ip'], 1039)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=0  ip<new_sn_size  ip++
induction variable: ['ip']
{
L1040: (rowind[ip],r) 
L1041: (zcount[i]=,w) 
}
array table
-----------------------------------------------
rowind -> [('[ip]', 'r', 'normalized', ['ip'], 1040)]
LDEs formed:0

zcount -> [('[i]', 'w', 'not normalized', ['ip'], 1041)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=new_sn_size  ip<new_sn_up_size  ip++
induction variable: ['ip']
{
L1042: (rowind[ip],r) 
L1043: (zcount[i]=,w) 
}
array table
-----------------------------------------------
rowind -> [('[ip]', 'r', 'normalized', ['ip'], 1042)]
LDEs formed:0

zcount -> [('[i]', 'w', 'not normalized', ['ip'], 1043)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c_sn=sn_first_child[sn]  c_sn != -1  c_sn = sn_next_child[c_sn]
induction variable: ['c_sn']
{
	loop info: ip=0  ip<sn_size[c_sn]  ip++
	induction variable: ['c_sn', 'ip']
	{
	L1044: (sn_rowind[c_sn][ip],r) 
	L1045: (zcount[i]-=,w) 
	}
L1046: (sn_size[c_sn],r) (sn_up_size[c_sn],r) 
L1047: (sn_rowind[c_sn][ip],r) 
L1048: (zcount[i]-=,w) (sn_size[c_sn],r) 
}
array table
-----------------------------------------------
sn_rowind -> [('[c_sn][ip]', 'r', 'normalized', ['c_sn', 'ip'], 1044), ('[c_sn][ip]', 'r', 'normalized', ['c_sn', 'ip'], 1047)]
LDEs formed:0

zcount -> [('[i]', 'w', 'not normalized', ['c_sn', 'ip'], 1045), ('[i]', 'w', 'not normalized', ['c_sn', 'ip'], 1048)]
LDEs formed:3

sn_size -> [('[c_sn]', 'r', 'normalized', ['c_sn', 'ip'], 1046), ('[c_sn]', 'r', 'normalized', ['c_sn', 'ip'], 1048)]
LDEs formed:0

sn_up_size -> [('[c_sn]', 'r', 'normalized', ['c_sn', 'ip'], 1046)]
LDEs formed:0

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=0  ip<sn_size[sn]  ip++
induction variable: ['ip']
{
L1047: (sn_rowind[sn][ip],r) 
L1048: (zcount[i]-=,w) 
}
array table
-----------------------------------------------
sn_rowind -> [('[sn][ip]', 'r', 'not normalized', ['ip'], 1047)]
LDEs formed:0

zcount -> [('[i]', 'w', 'not normalized', ['ip'], 1048)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=sn_size[sn]  ip<sn_up_size[sn]  ip++
induction variable: ['ip']
{
L1049: (sn_rowind[sn][ip],r) 
L1050: (zcount[i]-=,w) (sn_size[sn],r) 
}
array table
-----------------------------------------------
sn_rowind -> [('[sn][ip]', 'r', 'not normalized', ['ip'], 1049)]
LDEs formed:0

zcount -> [('[i]', 'w', 'not normalized', ['ip'], 1050)]
LDEs formed:1

sn_size -> [('[sn]', 'r', 'not normalized', ['ip'], 1050)]
LDEs formed:0

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=0  ip<new_sn_up_size  ip++
induction variable: ['ip']
{
L1051: (rowind[ip],r) 
L1052: (zcount[i],r) 
L1053: (zcount[i],r) 
}
array table
-----------------------------------------------
rowind -> [('[ip]', 'r', 'normalized', ['ip'], 1051)]
LDEs formed:0

zcount -> [('[i]', 'r', 'not normalized', ['ip'], 1052), ('[i]', 'r', 'not normalized', ['ip'], 1053)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c_sn=sn_first_child[sn]  c_sn != -1  c_sn = sn_next_child[c_sn]
induction variable: ['c_sn']
{
	loop info: ip=0  ip<sn_size[c_sn]  ip++
	induction variable: ['c_sn', 'ip']
	{
	L1054: (sn_rowind[c_sn],r) 
	L1055: (column_to_sn_map[i]==,r) 
	L1056: (column_to_sn_map[i]=,w) 
	}
	loop info: gc_sn=sn_first_child[c_sn]  gc_sn != -1  gc_sn = sn_next_child[gc_sn]
	induction variable: ['c_sn', 'ip', 'gc_sn']
	{
	L1057: (rowind[nchildren]=,w) 
	}
 }
array table
-----------------------------------------------
sn_rowind -> [('[c_sn]', 'r', 'normalized', ['c_sn', 'ip', 'gc_sn'], 1054)]
LDEs formed:0

column_to_sn_map -> [('[i]', 'r', 'not normalized', ['c_sn', 'ip', 'gc_sn'], 1055), ('[i]', 'w', 'not normalized', ['c_sn', 'ip', 'gc_sn'], 1056)]
LDEs formed:2

rowind -> [('[nchildren]', 'w', 'not normalized', ['c_sn', 'ip', 'gc_sn'], 1057)]
LDEs formed:1

distinct LDEs:
i=i
nchildren=nchildren
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: c_sn=sn_first_child[sn]  c_sn != -1  c_sn = sn_next_child[c_sn]
induction variable: ['c_sn']
{
L1058: (sn_rowind[c_sn],r) 
L1059: (sn_rowind[c_sn]=,w) 
L1060: (sn_size[c_sn]=,w) 
L1061: (sn_up_size[c_sn]=,w) 
}
array table
-----------------------------------------------
sn_rowind -> [('[c_sn]', 'r', 'normalized', ['c_sn'], 1058), ('[c_sn]', 'w', 'normalized', ['c_sn'], 1059)]
LDEs formed:2

sn_size -> [('[c_sn]', 'w', 'normalized', ['c_sn'], 1060)]
LDEs formed:1

sn_up_size -> [('[c_sn]', 'w', 'normalized', ['c_sn'], 1061)]
LDEs formed:1

distinct LDEs:
c_sn1=c_sn2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nchildren  i++
induction variable: ['i']
{
L1062: (rowind[i],r) (sn_first_child[sn],r) 
L1063: (sn_first_child[sn]=,w) (rowind[i],r) 
}
array table
-----------------------------------------------
rowind -> [('[i]', 'r', 'normalized', ['i'], 1062), ('[i]', 'r', 'normalized', ['i'], 1063)]
LDEs formed:0

sn_first_child -> [('[sn]', 'r', 'not normalized', ['i'], 1062), ('[sn]', 'w', 'not normalized', ['i'], 1063)]
LDEs formed:2

distinct LDEs:
sn=sn
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j<(A->n)  j++
induction variable: ['j']
{
L1064: (cc1[j],r) (cc2[j],r) (cc1[j],r) (cc2[j],r) 
L1065: (cc1[j]==,r) (cc2[j],r) 
}
array table
-----------------------------------------------
cc1 -> [('[j]', 'r', 'normalized', ['j'], 1064), ('[j]', 'r', 'normalized', ['j'], 1064), ('[j]', 'r', 'normalized', ['j'], 1065)]
LDEs formed:0

cc2 -> [('[j]', 'r', 'normalized', ['j'], 1064), ('[j]', 'r', 'normalized', ['j'], 1064), ('[j]', 'r', 'normalized', ['j'], 1065)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j<(A->n)  j++
induction variable: ['j']
{
L1066: (rc1[j],r) (rc2[j],r) (rc1[j],r) (rc2[j],r) 
L1067: (rc1[j]==,r) (rc2[j],r) 
}
array table
-----------------------------------------------
rc1 -> [('[j]', 'r', 'normalized', ['j'], 1066), ('[j]', 'r', 'normalized', ['j'], 1066), ('[j]', 'r', 'normalized', ['j'], 1067)]
LDEs formed:0

rc2 -> [('[j]', 'r', 'normalized', ['j'], 1066), ('[j]', 'r', 'normalized', ['j'], 1066), ('[j]', 'r', 'normalized', ['j'], 1067)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = (A->n)-1  j >= 0  j--
induction variable: ['j']
{
L1068: (parent[j],r) 
L1069: (next_child[j]=,w) (first_child[p],r) 
L1070: (first_child[p]=,w) 
}
array table
-----------------------------------------------
next_child -> [('[j]', 'w', 'normalized', ['j'], 1069)]
LDEs formed:1

first_child -> [('[p]', 'r', 'not normalized', ['j'], 1069), ('[p]', 'w', 'not normalized', ['j'], 1070)]
LDEs formed:2

parent -> [('[j]', 'r', 'normalized', ['j'], 1068)]
LDEs formed:0

distinct LDEs:
j1=j2
p=p
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: child = first_child[sn]  child != -1  child = next_child[child]
induction variable: ['child']
{
L1069: (sn_up_size[sn],r) 
L1070: (sn_struct[sn],r) 
}
array table
-----------------------------------------------
sn_struct -> [('[sn]', 'r', 'not normalized', ['child'], 1070)]
LDEs formed:0

sn_up_size -> [('[sn]', 'r', 'not normalized', ['child'], 1069)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jp=0  jp<sn_size  jp++
induction variable: ['jp']
{
L1070: (xdense[jp]=,w) (xdense[jp]/,r) (sn_blocks[sn],r) (sn_blocks_ld[sn]*,r) 
	loop info: ip=jp+1  ip<sn_size  ip++
	induction variable: ['jp', 'ip']
	{
	L1071: (xdense[ip]-=,w) (xdense[jp]*,r) (sn_blocks[sn],r) (sn_blocks_ld[sn]*,r) 
	}
 }
array table
-----------------------------------------------
sn_blocks -> [('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1070), ('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1071)]
LDEs formed:0

sn_blocks_ld -> [('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1070), ('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1071)]
LDEs formed:0

xdense -> [('[jp]', 'w', 'normalized', ['jp', 'ip'], 1070), ('[jp]', 'r', 'normalized', ['jp', 'ip'], 1070), ('[ip]', 'w', 'normalized', ['jp', 'ip'], 1071), ('[jp]', 'r', 'normalized', ['jp', 'ip'], 1071)]
LDEs formed:7

distinct LDEs:
jp1=ip2
ip1=ip2
jp1=jp2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jp=0  jp<sn_size  jp++
induction variable: ['jp']
{
	loop info: ip=0  ip<up_size  ip++
	induction variable: ['jp', 'ip']
	{
	L1072: (bdense[ip]+=,w) (xdense[jp]*,r) (up_blocks[sn],r) (up_blocks_ld[sn]*,r) 
	}
 }
array table
-----------------------------------------------
bdense -> [('[ip]', 'w', 'normalized', ['jp', 'ip'], 1072)]
LDEs formed:1

up_blocks_ld -> [('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1072)]
LDEs formed:0

up_blocks -> [('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1072)]
LDEs formed:0

xdense -> [('[jp]', 'r', 'normalized', ['jp', 'ip'], 1072)]
LDEs formed:0

distinct LDEs:
ip1=ip2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jp=0  jp<sn_size  jp++
induction variable: ['jp']
{
L1073: (sn_struct[sn][jp],r) 
L1074: (x[j]=,w) (b[j]/,r) (sn_blocks[sn],r) (sn_blocks_ld[sn]*,r) 
	loop info: ip=jp+1  ip<sn_size  ip++
	induction variable: ['jp', 'ip']
	{
	L1075: (sn_struct[sn][ip],r) 
	L1076: (b[i]-=,w) (x[j]*,r) (sn_blocks[sn],r) (sn_blocks_ld[sn]*,r) 
	}
	loop info: ip=0  ip<up_size  ip++
	induction variable: ['jp', 'ip']
	{
	L1077: (sn_struct[sn][sn_size + ip],r) 
	L1078: (b[i]-=,w) (x[j]*,r) (up_blocks[sn],r) (up_blocks_ld[sn]*,r) 
	}
 }
array table
-----------------------------------------------
b -> [('[j]', 'r', 'not normalized', ['jp', 'ip'], 1074), ('[i]', 'w', 'not normalized', ['jp', 'ip'], 1076), ('[i]', 'w', 'not normalized', ['jp', 'ip'], 1078)]
LDEs formed:5

up_blocks -> [('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1078)]
LDEs formed:0

sn_struct -> [('[sn][jp]', 'r', 'not normalized', ['jp', 'ip'], 1073), ('[sn][ip]', 'r', 'not normalized', ['jp', 'ip'], 1075), ('[sn][sn_size + ip]', 'r', 'not normalized', ['jp', 'ip'], 1077)]
LDEs formed:0

sn_blocks -> [('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1074), ('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1076)]
LDEs formed:0

sn_blocks_ld -> [('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1074), ('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1076)]
LDEs formed:0

x -> [('[j]', 'w', 'not normalized', ['jp', 'ip'], 1074), ('[j]', 'r', 'not normalized', ['jp', 'ip'], 1076), ('[j]', 'r', 'not normalized', ['jp', 'ip'], 1078)]
LDEs formed:3

up_blocks_ld -> [('[sn]', 'r', 'not normalized', ['jp', 'ip'], 1078)]
LDEs formed:0

distinct LDEs:
i=i
j=j
j=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=sn_size-1  ip>=0  ip--
induction variable: ['ip']
{
	loop info: jp=0  jp<up_size  jp++
	induction variable: ['ip', 'jp']
	{
	L1079: (bdense[ip]-=,w) (xdense[jp]*,r) (up_blocks[sn],r) (up_blocks_ld[sn]*,r) 
	}
 }
array table
-----------------------------------------------
bdense -> [('[ip]', 'w', 'normalized', ['ip', 'jp'], 1079)]
LDEs formed:1

up_blocks_ld -> [('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1079)]
LDEs formed:0

up_blocks -> [('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1079)]
LDEs formed:0

xdense -> [('[jp]', 'r', 'normalized', ['ip', 'jp'], 1079)]
LDEs formed:0

distinct LDEs:
ip1=ip2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=sn_size-1  ip>=0  ip--
induction variable: ['ip']
{
	loop info: jp=sn_size-1  jp>ip  jp--
	induction variable: ['ip', 'jp']
	{
	L1080: (bdense[ip]-=,w) (bdense[jp]*,r) (sn_blocks[sn],r) (sn_blocks_ld[sn]*,r) 
	}
L1081: (bdense[ip]=,w) (bdense[ip]/,r) (sn_blocks[sn],r) (sn_blocks_ld[sn]*,r) 
}
array table
-----------------------------------------------
bdense -> [('[ip]', 'w', 'normalized', ['ip', 'jp'], 1080), ('[jp]', 'r', 'normalized', ['ip', 'jp'], 1080), ('[ip]', 'w', 'normalized', ['ip', 'jp'], 1081), ('[ip]', 'r', 'normalized', ['ip', 'jp'], 1081)]
LDEs formed:7

sn_blocks_ld -> [('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1080), ('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1081)]
LDEs formed:0

sn_blocks -> [('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1080), ('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1081)]
LDEs formed:0

distinct LDEs:
ip1=jp2
ip1=ip2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ip=sn_size-1  ip>=0  ip--
induction variable: ['ip']
{
L1082: (sn_struct[sn][ip],r) 
	loop info: jp=0  jp<up_size  jp++
	induction variable: ['ip', 'jp']
	{
	L1083: (sn_struct[sn][sn_size + jp],r) 
	L1084: (b[i]-=,w) (x[j]*,r) (up_blocks[sn],r) (up_blocks_ld[sn]*,r) 
	}
	loop info: jp=sn_size-1  jp>ip  jp--
	induction variable: ['ip', 'jp']
	{
	L1085: (sn_struct[sn][jp],r) 
	L1086: (b[i]-=,w) (x[j]*,r) (sn_blocks[sn],r) (sn_blocks_ld[sn]*,r) 
	}
L1087: (x[i]=,w) (b[i]/,r) (sn_blocks[sn],r) (sn_blocks_ld[sn]*,r) 
}
array table
-----------------------------------------------
b -> [('[i]', 'w', 'not normalized', ['ip', 'jp'], 1084), ('[i]', 'w', 'not normalized', ['ip', 'jp'], 1086), ('[i]', 'r', 'not normalized', ['ip', 'jp'], 1087)]
LDEs formed:5

up_blocks -> [('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1084)]
LDEs formed:0

sn_struct -> [('[sn][ip]', 'r', 'not normalized', ['ip', 'jp'], 1082), ('[sn][sn_size + jp]', 'r', 'not normalized', ['ip', 'jp'], 1083), ('[sn][jp]', 'r', 'not normalized', ['ip', 'jp'], 1085)]
LDEs formed:0

sn_blocks -> [('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1086), ('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1087)]
LDEs formed:0

sn_blocks_ld -> [('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1086), ('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1087)]
LDEs formed:0

x -> [('[j]', 'r', 'not normalized', ['ip', 'jp'], 1084), ('[j]', 'r', 'not normalized', ['ip', 'jp'], 1086), ('[i]', 'w', 'not normalized', ['ip', 'jp'], 1087)]
LDEs formed:3

up_blocks_ld -> [('[sn]', 'r', 'not normalized', ['ip', 'jp'], 1084)]
LDEs formed:0

distinct LDEs:
i=i
j=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: sn=0  sn<L->n_sn  sn++
induction variable: ['sn']
{
	loop info: jp=0  jp<(L->sn_size)[sn]  jp++
	induction variable: ['sn', 'jp']
	{
	L1085: (len[j]=,w) 
		loop info: ip=jp  ip<(L->sn_size)[sn]  ip++
		induction variable: ['sn', 'jp', 'ip']
		{
		L1086: (len[j]++,w) 
		}
	L1087: (len[j]++,w) 
	}
 }
array table
-----------------------------------------------
len -> [('[j]', 'w', 'not normalized', ['sn', 'jp', 'ip'], 1085), ('[j]', 'w', 'not normalized', ['sn', 'jp', 'ip'], 1086), ('[j]', 'w', 'not normalized', ['sn', 'jp', 'ip'], 1087)]
LDEs formed:6

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j = 0   j < ma   j++ 
induction variable: ['j']
{
L1088: (At[i + na * j]=,w) (A[j + ma * i],r) 
}
array table
-----------------------------------------------
A -> [('[j + ma * i]', 'r', 'not normalized', ['j'], 1088)]
LDEs formed:0

At -> [('[i + na * j]', 'w', 'not normalized', ['j'], 1088)]
LDEs formed:1

distinct LDEs:
i + na * j1=i + na * j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i <= n   i++ 
induction variable: ['i']
{
L1089: (p[i]=,w) 
}
array table
-----------------------------------------------
p -> [('[i]', 'w', 'normalized', ['i'], 1089)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  k = 0   k < nel   k++ 
induction variable: ['k']
{
L1090: (icol[k],r) 
}
array table
-----------------------------------------------
icol -> [('[k]', 'r', 'normalized', ['k'], 1090)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 2   i <= n   i++ 
induction variable: ['i']
{
L1091: (p[i]+=,w) (p[i - 1],r) 
}
array table
-----------------------------------------------
p -> [('[i]', 'w', 'normalized', ['i'], 1091), ('[i - 1]', 'r', 'normalized', ['i'], 1091)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < m   i++ 
induction variable: ['i']
{
L1092: (icol[k]-,r) 
L1093: (p[j],r) 
L1094: (irow[kb]=,w) 
L1095: (R[kb]=,w) (R[k],r) 
L1096: (I[kb]=,w) (I[k],r) 
L1097: (p[j]++,w) 
}
array table
-----------------------------------------------
I -> [('[kb]', 'w', 'not normalized', ['i'], 1096), ('[k]', 'r', 'not normalized', ['i'], 1096)]
LDEs formed:2

p -> [('[j]', 'r', 'not normalized', ['i'], 1093), ('[j]', 'w', 'not normalized', ['i'], 1097)]
LDEs formed:2

R -> [('[kb]', 'w', 'not normalized', ['i'], 1095), ('[k]', 'r', 'not normalized', ['i'], 1095)]
LDEs formed:2

icol -> [('[k]', 'r', 'not normalized', ['i'], 1092)]
LDEs formed:0

irow -> [('[kb]', 'w', 'not normalized', ['i'], 1094)]
LDEs formed:1

distinct LDEs:
j=j
kb=kb
kb=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = n - 1   i > 0   i-- 
induction variable: ['i']
{
L1095: (p[i]=,w) (p[i - 1],r) 
}
array table
-----------------------------------------------
p -> [('[i]', 'w', 'normalized', ['i'], 1095), ('[i - 1]', 'r', 'normalized', ['i'], 1095)]
LDEs formed:2

distinct LDEs:
i1=i2 - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < A->m   i++ 
induction variable: ['i']
{
L1096: (mnel[i],r) 
L1097: (icol[k],r) 
}
array table
-----------------------------------------------
mnel -> [('[i]', 'r', 'normalized', ['i'], 1096)]
LDEs formed:0

icol -> [('[k]', 'r', 'not normalized', ['i'], 1097)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++ 
induction variable: ['i']
{
L1098: (mnel[i],r) 
L1099: (mnel[i]&,r) (icol[k + l],r) 
L1100: (mnel[i],r) 
L1101: (icol[k + l],r) 
L1102: (R[k + l],r) 
L1103: (mnel[i]-,r) 
L1104: (colptr[i]=,w) 
	loop info:  p = l   p < A->mnel[i]   p++
	induction variable: ['i', 'p']
			{
			L1105: (values[nnz]=,w) (R[k + p],r) 
			L1106: (rowind[nnz]=,w) (icol[k + p]-,r) 
			}
L1107: (mnel[i],r) 
}
array table
-----------------------------------------------
rowind -> [('[nnz]', 'w', 'not normalized', ['i', 'p'], 1106)]
LDEs formed:1

colptr -> [('[i]', 'w', 'normalized', ['i', 'p'], 1104)]
LDEs formed:1

mnel -> [('[i]', 'r', 'normalized', ['i', 'p'], 1098), ('[i]', 'r', 'normalized', ['i', 'p'], 1099), ('[i]', 'r', 'normalized', ['i', 'p'], 1100), ('[i]', 'r', 'normalized', ['i', 'p'], 1103), ('[i]', 'r', 'normalized', ['i', 'p'], 1107)]
LDEs formed:0

R -> [('[k + l]', 'r', 'not normalized', ['i', 'p'], 1102), ('[k + p]', 'r', 'not normalized', ['i', 'p'], 1105)]
LDEs formed:0

values -> [('[nnz]', 'w', 'not normalized', ['i', 'p'], 1105)]
LDEs formed:1

icol -> [('[k + l]', 'r', 'not normalized', ['i', 'p'], 1099), ('[k + l]', 'r', 'not normalized', ['i', 'p'], 1101), ('[k + p]', 'r', 'not normalized', ['i', 'p'], 1106)]
LDEs formed:0

distinct LDEs:
nnz=nnz
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < A->m   i++ 
induction variable: ['i']
{
	loop info:  l = 0   l < A->mnel[i]   l++ 
	induction variable: ['i', 'l']
	{
	L1107: (icol[k]-,r) 
	L1108: (R[k]*,r) (x[j],r) 
	}
L1109: (b[i],r) 
L1110: (r[i]=,w) 
}
array table
-----------------------------------------------
x -> [('[j]', 'r', 'not normalized', ['i', 'l'], 1108)]
LDEs formed:0

r -> [('[i]', 'w', 'normalized', ['i', 'l'], 1110)]
LDEs formed:1

R -> [('[k]', 'r', 'not normalized', ['i', 'l'], 1108)]
LDEs formed:0

b -> [('[i]', 'r', 'normalized', ['i', 'l'], 1109)]
LDEs formed:0

icol -> [('[k]', 'r', 'not normalized', ['i', 'l'], 1107)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < A->m   i++ 
induction variable: ['i']
{
L1108: (wk[i]=,w) (b[i],r) 
}
array table
-----------------------------------------------
b -> [('[i]', 'r', 'normalized', ['i'], 1108)]
LDEs formed:0

wk -> [('[i]', 'w', 'normalized', ['i'], 1108)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < A->m   i++ 
induction variable: ['i']
{
	loop info:  l = 0   l < A->mnel[i]   l++ 
	induction variable: ['i', 'l']
	{
	L1109: (icol[k]-,r) 
	L1110: (wk[i]+=,w) (R[k]*,r) (x[j],r) 
	L1111: (wk[j]+=,w) (R[k]*,r) (x[i],r) 
	}
 }
array table
-----------------------------------------------
x -> [('[j]', 'r', 'not normalized', ['i', 'l'], 1110), ('[i]', 'r', 'normalized', ['i', 'l'], 1111)]
LDEs formed:0

R -> [('[k]', 'r', 'not normalized', ['i', 'l'], 1110), ('[k]', 'r', 'not normalized', ['i', 'l'], 1111)]
LDEs formed:0

wk -> [('[i]', 'w', 'normalized', ['i', 'l'], 1110), ('[j]', 'w', 'not normalized', ['i', 'l'], 1111)]
LDEs formed:3

icol -> [('[k]', 'r', 'not normalized', ['i', 'l'], 1109)]
LDEs formed:0

distinct LDEs:
j=j
i1=j
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < A->m   i++ 
induction variable: ['i']
{
L1110: (r[i]=,w) (wk[i],r) 
L1111: (wk[i]*,r) (wk[i],r) 
}
array table
-----------------------------------------------
r -> [('[i]', 'w', 'normalized', ['i'], 1110)]
LDEs formed:1

wk -> [('[i]', 'r', 'normalized', ['i'], 1110), ('[i]', 'r', 'normalized', ['i'], 1111), ('[i]', 'r', 'normalized', ['i'], 1111)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < A->m   i++ 
induction variable: ['i']
{
	loop info:  l = 0   l < A->mnel[i]   l++ 
	induction variable: ['i', 'l']
	{
	L1112: (icol[k]-,r) 
	L1113: (R[k]*,r) (xr[j],r) 
	L1114: (I[k]*,r) (xi[j],r) 
	L1115: (I[k]*,r) (xr[j],r) 
	L1116: (R[k]*,r) (xi[j],r) 
	}
L1117: (br[i],r) 
L1118: (bi[i],r) 
L1119: (rr[i]=,w) 
L1120: (ri[i]=,w) 
}
array table
-----------------------------------------------
xi -> [('[j]', 'r', 'not normalized', ['i', 'l'], 1114), ('[j]', 'r', 'not normalized', ['i', 'l'], 1116)]
LDEs formed:0

rr -> [('[i]', 'w', 'normalized', ['i', 'l'], 1119)]
LDEs formed:1

I -> [('[k]', 'r', 'not normalized', ['i', 'l'], 1114), ('[k]', 'r', 'not normalized', ['i', 'l'], 1115)]
LDEs formed:0

bi -> [('[i]', 'r', 'normalized', ['i', 'l'], 1118)]
LDEs formed:0

ri -> [('[i]', 'w', 'normalized', ['i', 'l'], 1120)]
LDEs formed:1

R -> [('[k]', 'r', 'not normalized', ['i', 'l'], 1113), ('[k]', 'r', 'not normalized', ['i', 'l'], 1116)]
LDEs formed:0

br -> [('[i]', 'r', 'normalized', ['i', 'l'], 1117)]
LDEs formed:0

xr -> [('[j]', 'r', 'not normalized', ['i', 'l'], 1113), ('[j]', 'r', 'not normalized', ['i', 'l'], 1115)]
LDEs formed:0

icol -> [('[k]', 'r', 'not normalized', ['i', 'l'], 1112)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n_row   i++ 
induction variable: ['i']
{
L1113: (L_mnel[i]=,w) (L_ptrow[i+1]-,r) (L_ptrow[i],r) 
}
array table
-----------------------------------------------
L_mnel -> [('[i]', 'w', 'normalized', ['i'], 1113)]
LDEs formed:1

L_ptrow -> [('[i+1]', 'r', 'normalized', ['i'], 1113), ('[i]', 'r', 'normalized', ['i'], 1113)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++ 
induction variable: ['i']
{
L1114: (U_mnel[i]=,w) (U_ptrow[i+1]-,r) (U_ptrow[i],r) 
}
array table
-----------------------------------------------
U_mnel -> [('[i]', 'w', 'normalized', ['i'], 1114)]
LDEs formed:1

U_ptrow -> [('[i+1]', 'r', 'normalized', ['i'], 1114), ('[i]', 'r', 'normalized', ['i'], 1114)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j = 0  j < nb   j++ 
induction variable: ['j']
{
L1115: (xr[j * mb],r) (br[j * mb],r) 
}
array table
-----------------------------------------------
xr -> [('[j * mb]', 'r', 'not normalized', ['j'], 1115)]
LDEs formed:0

br -> [('[j * mb]', 'r', 'not normalized', ['j'], 1115)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j = 0  j < nb   j++ 
induction variable: ['j']
{
L1116: (xi[j * mb],r) (bi[j * mb],r) 
}
array table
-----------------------------------------------
xi -> [('[j * mb]', 'r', 'not normalized', ['j'], 1116)]
LDEs formed:0

bi -> [('[j * mb]', 'r', 'not normalized', ['j'], 1116)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j = 0  j < nb   j++ 
induction variable: ['j']
{
L1117: (xr[j * mb],r) (xi[j * mb],r) (br[j * mb],r) (bi[j * mb],r) 
}
array table
-----------------------------------------------
xr -> [('[j * mb]', 'r', 'not normalized', ['j'], 1117)]
LDEs formed:0

xi -> [('[j * mb]', 'r', 'not normalized', ['j'], 1117)]
LDEs formed:0

bi -> [('[j * mb]', 'r', 'not normalized', ['j'], 1117)]
LDEs formed:0

br -> [('[j * mb]', 'r', 'not normalized', ['j'], 1117)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < C->m   i++
induction variable: ['i']
{
L1118: (colptr[i]=,w) (colptr[i+1]-,r) (colptr[i],r) 
L1119: (colptr[i],r) 
}
array table
-----------------------------------------------
colptr -> [('[i]', 'w', 'normalized', ['i'], 1118), ('[i+1]', 'r', 'normalized', ['i'], 1118), ('[i]', 'r', 'normalized', ['i'], 1118), ('[i]', 'r', 'normalized', ['i'], 1119)]
LDEs formed:4

distinct LDEs:
i1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j = 0  j < nb   j++ 
induction variable: ['j']
{
L1120: (b[j * mb],r) (x[j * mb],r) 
L1121: (x[j * mb],r) 
L1122: (x[j * mb],r) 
L1123: (x[j * mb],r) (b[j * mb],r) 
	loop info:  i = 0   i < n   i++ 
	induction variable: ['j', 'i']
		}
L1124: (b[j * mb],r) 
	loop info:  i = 0   i < n   i++ 
	induction variable: ['j', 'i']
		}
 }
array table
-----------------------------------------------
x -> [('[j * mb]', 'r', 'not normalized', ['j', 'i'], 1120), ('[j * mb]', 'r', 'not normalized', ['j', 'i'], 1121), ('[j * mb]', 'r', 'not normalized', ['j', 'i'], 1122), ('[j * mb]', 'r', 'not normalized', ['j', 'i'], 1123)]
LDEs formed:0

b -> [('[j * mb]', 'r', 'not normalized', ['j', 'i'], 1120), ('[j * mb]', 'r', 'not normalized', ['j', 'i'], 1123), ('[j * mb]', 'r', 'not normalized', ['j', 'i'], 1124)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nb   i++ 
induction variable: ['i']
{
L1125: (xr[i*mb],r) (br[i*mb],r) 
}
array table
-----------------------------------------------
xr -> [('[i*mb]', 'r', 'not normalized', ['i'], 1125)]
LDEs formed:0

br -> [('[i*mb]', 'r', 'not normalized', ['i'], 1125)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nb   i++ 
induction variable: ['i']
{
L1126: (xi[i*mb],r) (bi[i*mb],r) 
}
array table
-----------------------------------------------
xi -> [('[i*mb]', 'r', 'not normalized', ['i'], 1126)]
LDEs formed:0

bi -> [('[i*mb]', 'r', 'not normalized', ['i'], 1126)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < nb   i++ 
induction variable: ['i']
{
L1127: (xr[i*mb],r) (xi[i*mb],r) 
L1128: (br[i*mb],r) (bi[i*mb],r) 
}
array table
-----------------------------------------------
xr -> [('[i*mb]', 'r', 'not normalized', ['i'], 1127)]
LDEs formed:0

xi -> [('[i*mb]', 'r', 'not normalized', ['i'], 1127)]
LDEs formed:0

bi -> [('[i*mb]', 'r', 'not normalized', ['i'], 1128)]
LDEs formed:0

br -> [('[i*mb]', 'r', 'not normalized', ['i'], 1128)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < mb   i++ 
induction variable: ['i']
{
L1129: (br[i*nb],r) (xr[i*nb],r) 
}
array table
-----------------------------------------------
xr -> [('[i*nb]', 'r', 'not normalized', ['i'], 1129)]
LDEs formed:0

br -> [('[i*nb]', 'r', 'not normalized', ['i'], 1129)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < mb   i++ 
induction variable: ['i']
{
L1130: (bi[i*nb],r) (xi[i*nb],r) 
}
array table
-----------------------------------------------
xi -> [('[i*nb]', 'r', 'not normalized', ['i'], 1130)]
LDEs formed:0

bi -> [('[i*nb]', 'r', 'not normalized', ['i'], 1130)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < mb   i++ 
induction variable: ['i']
{
L1131: (br[i*nb],r) (bi[i*nb],r) 
L1132: (xr[i*nb],r) (xi[i*nb],r) 
}
array table
-----------------------------------------------
xr -> [('[i*nb]', 'r', 'not normalized', ['i'], 1132)]
LDEs formed:0

xi -> [('[i*nb]', 'r', 'not normalized', ['i'], 1132)]
LDEs formed:0

bi -> [('[i*nb]', 'r', 'not normalized', ['i'], 1131)]
LDEs formed:0

br -> [('[i*nb]', 'r', 'not normalized', ['i'], 1131)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)wcslen(duplicate_path)  i++
induction variable: ['i']
{
L1132: (duplicate_path[i]==,r) (duplicate_path[i]=,w) 
L1133: (duplicate_path[i]==,r) (duplicate_path[i]=,w) 
}
array table
-----------------------------------------------
duplicate_path -> [('[i]', 'r', 'normalized', ['i'], 1132), ('[i]', 'w', 'normalized', ['i'], 1132), ('[i]', 'r', 'normalized', ['i'], 1133), ('[i]', 'w', 'normalized', ['i'], 1133)]
LDEs formed:7

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0  i< n  i++
induction variable: ['i']
{
L1134: (res[i],r) 
}
array table
-----------------------------------------------
res -> [('[i]', 'r', 'normalized', ['i'], 1134)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_ALIAS  i++
induction variable: ['i']
{
L1135: (VARIABLES_words[i].Alias,r) 
L1136: (VARIABLES_words[i].VariableName,r) 
L1137: (VARIABLES_words[i].Alias,r) 
L1138: (wcBegin[lenAlias]=,w) 
L1139: (VARIABLES_words[i].Alias,r) 
L1140: (wcstr[lenAlias]==,r) (wcstr[lenAlias]==,r) 
L1141: (VARIABLES_words[i].VariableName,r) 
L1142: (wcstr[lenAlias],r) 
L1143: (wcstr[lenAlias],r) 
}
array table
-----------------------------------------------
VARIABLES_words -> [('[i]', 'r', 'normalized', ['i'], 1135), ('[i]', 'r', 'normalized', ['i'], 1136), ('[i]', 'r', 'normalized', ['i'], 1137), ('[i]', 'r', 'normalized', ['i'], 1139), ('[i]', 'r', 'normalized', ['i'], 1141)]
LDEs formed:0

wcBegin -> [('[lenAlias]', 'w', 'not normalized', ['i'], 1138)]
LDEs formed:1

wcstr -> [('[lenAlias]', 'r', 'not normalized', ['i'], 1140), ('[lenAlias]', 'r', 'not normalized', ['i'], 1140), ('[lenAlias]', 'r', 'not normalized', ['i'], 1142), ('[lenAlias]', 'r', 'not normalized', ['i'], 1143)]
LDEs formed:0

distinct LDEs:
lenAlias=lenAlias
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < len  i++
induction variable: ['i']
{
L1144: (_inString[i],r) 
L1145: (_inString[i],r) 
L1146: (_inString[i],r) 
L1147: (outUtfChar[0]=,w) 
L1148: (outUtfChar[1]=,w) 
L1149: (outUtfChar[0]=,w) 
L1150: (outUtfChar[1]=,w) 
L1151: (outUtfChar[2]=,w) 
}
array table
-----------------------------------------------
outUtfChar -> [('[0]', 'w', 'normalized', ['i'], 1147), ('[1]', 'w', 'normalized', ['i'], 1148), ('[0]', 'w', 'normalized', ['i'], 1149), ('[1]', 'w', 'normalized', ['i'], 1150), ('[2]', 'w', 'normalized', ['i'], 1151)]
LDEs formed:15

_inString -> [('[i]', 'r', 'normalized', ['i'], 1144), ('[i]', 'r', 'normalized', ['i'], 1145), ('[i]', 'r', 'normalized', ['i'], 1146)]
LDEs formed:0

distinct LDEs:
2=2
0=0
0=1
0=2
1=1
1=2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizeTextAdded  i++
induction variable: ['i']
{
L1147: (textAdded[i],r) 
L1148: (textAdded[i],r) 
}
array table
-----------------------------------------------
textAdded -> [('[i]', 'r', 'normalized', ['i'], 1147), ('[i]', 'r', 'normalized', ['i'], 1148)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < m   i++ 
induction variable: ['i']
{
	loop info:  j = 0   j < n   j++
	induction variable: ['i', 'j']
	{
	L1149: (MatrixValues[i + m*j],r) 
	L1150: (MatrixValues[i + m*j],r) 
	L1151: (MatrixValues[i + m*j],r) 
	L1152: (MatrixValues[i + m*j],r) 
	L1153: (MatrixValues[i + m*j],r) 
	L1154: (MatrixValues[i + m*j],r) 
	L1155: (MatrixValues[i + m*j],r) 
	}
 }
array table
-----------------------------------------------
MatrixValues -> [('[i + m*j]', 'r', 'not normalized', ['i', 'j'], 1149), ('[i + m*j]', 'r', 'not normalized', ['i', 'j'], 1150), ('[i + m*j]', 'r', 'not normalized', ['i', 'j'], 1151), ('[i + m*j]', 'r', 'not normalized', ['i', 'j'], 1152), ('[i + m*j]', 'r', 'not normalized', ['i', 'j'], 1153), ('[i + m*j]', 'r', 'not normalized', ['i', 'j'], 1154), ('[i + m*j]', 'r', 'not normalized', ['i', 'j'], 1155)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_FORMAT_SUPPORTED  i++
induction variable: ['i']
{
L1156: (supportedFormat[i],r) 
L1157: (cleanedFormat[nbcharacters]=,w) 
L1158: (cleanedFormat[nbcharacters-1],r) 
L1159: (cleanedFormat[nbcharacters-1],r) 
L1160: (cleanedFormat[nbcharacters-1],r) 
L1161: (supportedFormat[i],r) 
}
array table
-----------------------------------------------
supportedFormat -> [('[i]', 'r', 'normalized', ['i'], 1156), ('[i]', 'r', 'normalized', ['i'], 1161)]
LDEs formed:0

cleanedFormat -> [('[nbcharacters]', 'w', 'not normalized', ['i'], 1157), ('[nbcharacters-1]', 'r', 'not normalized', ['i'], 1158), ('[nbcharacters-1]', 'r', 'not normalized', ['i'], 1159), ('[nbcharacters-1]', 'r', 'not normalized', ['i'], 1160)]
LDEs formed:4

distinct LDEs:
nbcharacters=nbcharacters-1
nbcharacters=nbcharacters
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *nargs  i++
induction variable: ['i']
{
L1161: (type[i - 1]==,r) 
L1162: (ptrtab[i - 1],r) 
L1163: (nc[i - 1],r) 
}
array table
-----------------------------------------------
nc -> [('[i - 1]', 'r', 'normalized', ['i'], 1163)]
LDEs formed:0

type -> [('[i - 1]', 'r', 'normalized', ['i'], 1161)]
LDEs formed:0

ptrtab -> [('[i - 1]', 'r', 'normalized', ['i'], 1162)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < _len   i++
induction variable: ['i']
{
L1163: (_out[i]=,w) (_in[(_len - 1) - i],r) 
}
array table
-----------------------------------------------
_out -> [('[i]', 'w', 'normalized', ['i'], 1163)]
LDEs formed:1

_in -> [('[(_len - 1) - i]', 'r', 'not normalized', ['i'], 1163)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < dim_filenames  i++
induction variable: ['i']
{
L1164: (filenames[i],r) 
L1165: (FILEINFO_ARRAY[FILEINFO_TOTAL_SIZE_INDICE]=,w) 
L1166: (FILEINFO_ARRAY[FILEINFO_MODE_INDICE]=,w) 
L1167: (FILEINFO_ARRAY[FILEINFO_UID_INDICE]=,w) 
L1168: (FILEINFO_ARRAY[FILEINFO_GID_INDICE]=,w) 
L1169: (FILEINFO_ARRAY[FILEINFO_DEV_INDICE]=,w) 
L1170: (FILEINFO_ARRAY[FILEINFO_MTIME_INDICE]=,w) 
L1171: (FILEINFO_ARRAY[FILEINFO_CTIME_INDICE]=,w) 
L1172: (FILEINFO_ARRAY[FILEINFO_ATIME_INDICE]=,w) 
L1173: (FILEINFO_ARRAY[FILEINFO_RDEV_INDICE]=,w) 
L1174: (FILEINFO_ARRAY[FILEINFO_BLKSIZE_INDICE]=,w) 
L1175: (FILEINFO_ARRAY[FILEINFO_BLOCKS_INDICE]=,w) 
L1176: (FILEINFO_ARRAY[FILEINFO_INO_INDICE]=,w) 
L1177: (FILEINFO_ARRAY[FILEINFO_NLINK_INDICE]=,w) 
	loop info: k = 0 k < FILEINFO_ARRAY_SIZE  k++
	induction variable: ['i', 'k']
	{
	L1178: (FILES_INFO_ARRAY[j+k]=,w) (FILEINFO_ARRAY[k],r) 
	}
L1179: (ierrs[i]=,w) 
}
array table
-----------------------------------------------
ierrs -> [('[i]', 'w', 'normalized', ['i', 'k'], 1179)]
LDEs formed:1

FILES_INFO_ARRAY -> [('[j+k]', 'w', 'not normalized', ['i', 'k'], 1178)]
LDEs formed:1

FILEINFO_ARRAY -> [('[FILEINFO_TOTAL_SIZE_INDICE]', 'w', 'not normalized', ['i', 'k'], 1165), ('[FILEINFO_MODE_INDICE]', 'w', 'not normalized', ['i', 'k'], 1166), ('[FILEINFO_UID_INDICE]', 'w', 'not normalized', ['i', 'k'], 1167), ('[FILEINFO_GID_INDICE]', 'w', 'not normalized', ['i', 'k'], 1168), ('[FILEINFO_DEV_INDICE]', 'w', 'not normalized', ['i', 'k'], 1169), ('[FILEINFO_MTIME_INDICE]', 'w', 'not normalized', ['i', 'k'], 1170), ('[FILEINFO_CTIME_INDICE]', 'w', 'not normalized', ['i', 'k'], 1171), ('[FILEINFO_ATIME_INDICE]', 'w', 'not normalized', ['i', 'k'], 1172), ('[FILEINFO_RDEV_INDICE]', 'w', 'not normalized', ['i', 'k'], 1173), ('[FILEINFO_BLKSIZE_INDICE]', 'w', 'not normalized', ['i', 'k'], 1174), ('[FILEINFO_BLOCKS_INDICE]', 'w', 'not normalized', ['i', 'k'], 1175), ('[FILEINFO_INO_INDICE]', 'w', 'not normalized', ['i', 'k'], 1176), ('[FILEINFO_NLINK_INDICE]', 'w', 'not normalized', ['i', 'k'], 1177), ('[k]', 'r', 'normalized', ['i', 'k'], 1178)]
LDEs formed:104

filenames -> [('[i]', 'r', 'normalized', ['i', 'k'], 1164)]
LDEs formed:0

distinct LDEs:
FILEINFO_MODE_INDICE=k2
FILEINFO_UID_INDICE=k2
FILEINFO_MODE_INDICE=FILEINFO_UID_INDICE
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_TOTAL_SIZE_INDICE
FILEINFO_DEV_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_UID_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_ATIME_INDICE=FILEINFO_RDEV_INDICE
FILEINFO_BLOCKS_INDICE=FILEINFO_INO_INDICE
FILEINFO_ATIME_INDICE=k2
FILEINFO_DEV_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_MODE_INDICE=FILEINFO_RDEV_INDICE
i1=i2
FILEINFO_GID_INDICE=FILEINFO_INO_INDICE
FILEINFO_UID_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_TOTAL_SIZE_INDICE=k2
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_GID_INDICE
FILEINFO_BLOCKS_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_RDEV_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_DEV_INDICE=FILEINFO_INO_INDICE
FILEINFO_BLKSIZE_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_UID_INDICE=FILEINFO_ATIME_INDICE
FILEINFO_CTIME_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_RDEV_INDICE=k2
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_GID_INDICE=FILEINFO_DEV_INDICE
FILEINFO_GID_INDICE=k2
FILEINFO_GID_INDICE=FILEINFO_GID_INDICE
FILEINFO_MODE_INDICE=FILEINFO_MTIME_INDICE
FILEINFO_MODE_INDICE=FILEINFO_MODE_INDICE
FILEINFO_ATIME_INDICE=FILEINFO_ATIME_INDICE
FILEINFO_GID_INDICE=FILEINFO_CTIME_INDICE
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_BLKSIZE_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_UID_INDICE=FILEINFO_DEV_INDICE
FILEINFO_NLINK_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_RDEV_INDICE=FILEINFO_INO_INDICE
FILEINFO_MTIME_INDICE=k2
FILEINFO_UID_INDICE=FILEINFO_CTIME_INDICE
FILEINFO_INO_INDICE=FILEINFO_INO_INDICE
FILEINFO_MODE_INDICE=FILEINFO_CTIME_INDICE
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_MODE_INDICE
FILEINFO_CTIME_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_GID_INDICE=FILEINFO_MTIME_INDICE
FILEINFO_RDEV_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_GID_INDICE=FILEINFO_ATIME_INDICE
FILEINFO_UID_INDICE=FILEINFO_UID_INDICE
FILEINFO_GID_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_ATIME_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_BLOCKS_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_RDEV_INDICE=FILEINFO_RDEV_INDICE
FILEINFO_MTIME_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_MTIME_INDICE=FILEINFO_INO_INDICE
FILEINFO_MTIME_INDICE=FILEINFO_ATIME_INDICE
FILEINFO_ATIME_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_UID_INDICE
FILEINFO_UID_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_MODE_INDICE=FILEINFO_ATIME_INDICE
FILEINFO_DEV_INDICE=FILEINFO_CTIME_INDICE
FILEINFO_MODE_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_MTIME_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_MTIME_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_MODE_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_INO_INDICE
FILEINFO_BLKSIZE_INDICE=k2
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_CTIME_INDICE
FILEINFO_MODE_INDICE=FILEINFO_BLKSIZE_INDICE
FILEINFO_CTIME_INDICE=FILEINFO_CTIME_INDICE
FILEINFO_BLOCKS_INDICE=k2
FILEINFO_MODE_INDICE=FILEINFO_INO_INDICE
FILEINFO_MODE_INDICE=FILEINFO_GID_INDICE
FILEINFO_GID_INDICE=FILEINFO_RDEV_INDICE
FILEINFO_ATIME_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_MTIME_INDICE=FILEINFO_CTIME_INDICE
FILEINFO_DEV_INDICE=FILEINFO_RDEV_INDICE
FILEINFO_CTIME_INDICE=FILEINFO_RDEV_INDICE
FILEINFO_NLINK_INDICE=k2
FILEINFO_UID_INDICE=FILEINFO_INO_INDICE
FILEINFO_CTIME_INDICE=k2
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_MTIME_INDICE
FILEINFO_GID_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_RDEV_INDICE
FILEINFO_CTIME_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_UID_INDICE=FILEINFO_MTIME_INDICE
FILEINFO_RDEV_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_INO_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_ATIME_INDICE
FILEINFO_DEV_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_MODE_INDICE=FILEINFO_DEV_INDICE
FILEINFO_BLKSIZE_INDICE=FILEINFO_BLOCKS_INDICE
FILEINFO_MTIME_INDICE=FILEINFO_RDEV_INDICE
FILEINFO_UID_INDICE=FILEINFO_GID_INDICE
FILEINFO_MTIME_INDICE=FILEINFO_MTIME_INDICE
j+k1=j+k2
FILEINFO_DEV_INDICE=FILEINFO_DEV_INDICE
FILEINFO_CTIME_INDICE=FILEINFO_ATIME_INDICE
FILEINFO_DEV_INDICE=k2
FILEINFO_TOTAL_SIZE_INDICE=FILEINFO_DEV_INDICE
FILEINFO_INO_INDICE=k2
FILEINFO_DEV_INDICE=FILEINFO_MTIME_INDICE
FILEINFO_CTIME_INDICE=FILEINFO_INO_INDICE
FILEINFO_UID_INDICE=FILEINFO_RDEV_INDICE
FILEINFO_DEV_INDICE=FILEINFO_ATIME_INDICE
FILEINFO_GID_INDICE=FILEINFO_NLINK_INDICE
FILEINFO_ATIME_INDICE=FILEINFO_INO_INDICE
FILEINFO_BLKSIZE_INDICE=FILEINFO_INO_INDICE
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizeStrings  i++
induction variable: ['i']
{
L1165: (pStrings[i],r) 
L1166: (pStrings[i],r) 
}
array table
-----------------------------------------------
pStrings -> [('[i]', 'r', 'normalized', ['i'], 1165), ('[i]', 'r', 'normalized', ['i'], 1166)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < ncol   i++
induction variable: ['i']
{
L1167: (type[i]==,r) (type[i]==,r) 
	loop info: j=0 j<nrow j++
	induction variable: ['i', 'j']
		}
	loop info:  j=0   j < nrow   j++
	induction variable: ['i', 'j']
		}
 }
array table
-----------------------------------------------
type -> [('[i]', 'r', 'normalized', ['i', 'j'], 1167), ('[i]', 'r', 'normalized', ['i', 'j'], 1167)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < nc   i++
induction variable: ['i']
{
L1168: (type_s[i],r) 
L1169: (Data[i+nc*rowcount].s=,w) (buf[i].c,r) 
L1170: (Data[i+nc*rowcount].d=,w) (buf[i].lui,r) 
L1171: (Data[i+nc*rowcount].d=,w) (buf[i].sui,r) 
L1172: (Data[i+nc*rowcount].d=,w) (buf[i].ui,r) 
L1173: (Data[i+nc*rowcount].d=,w) (buf[i].li,r) 
L1174: (Data[i+nc*rowcount].d=,w) (buf[i].si,r) 
L1175: (Data[i+nc*rowcount].d=,w) (buf[i].i,r) 
L1176: (Data[i+nc*rowcount].d=,w) (buf[i].lf,r) 
L1177: (Data[i+nc*rowcount].d=,w) (buf[i].f,r) 
}
array table
-----------------------------------------------
type_s -> [('[i]', 'r', 'normalized', ['i'], 1168)]
LDEs formed:0

buf -> [('[i]', 'r', 'normalized', ['i'], 1169), ('[i]', 'r', 'normalized', ['i'], 1170), ('[i]', 'r', 'normalized', ['i'], 1171), ('[i]', 'r', 'normalized', ['i'], 1172), ('[i]', 'r', 'normalized', ['i'], 1173), ('[i]', 'r', 'normalized', ['i'], 1174), ('[i]', 'r', 'normalized', ['i'], 1175), ('[i]', 'r', 'normalized', ['i'], 1176), ('[i]', 'r', 'normalized', ['i'], 1177)]
LDEs formed:0

Data -> [('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1169), ('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1170), ('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1171), ('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1172), ('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1173), ('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1174), ('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1175), ('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1176), ('[i+nc*rowcount]', 'w', 'not normalized', ['i'], 1177)]
LDEs formed:45

distinct LDEs:
i1+nc*rowcount=i2+nc*rowcount
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j=0   j < ncol   j++
induction variable: ['j']
{
L1178: (Data[j+ncol*i].s,r) 
}
array table
-----------------------------------------------
Data -> [('[j+ncol*i]', 'r', 'not normalized', ['j'], 1178)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < lenPath  i++
induction variable: ['i']
{
L1179: (wcPath[i]==,r) (wcPath[i]=,w) 
L1180: (wcPath[i]==,r) (wcPath[i]=,w) 
}
array table
-----------------------------------------------
wcPath -> [('[i]', 'r', 'normalized', ['i'], 1179), ('[i]', 'w', 'normalized', ['i'], 1179), ('[i]', 'r', 'normalized', ['i'], 1180), ('[i]', 'w', 'normalized', ['i'], 1180)]
LDEs formed:7

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < CurrentMaxFiles  i++
induction variable: ['i']
{
L1181: (ScilabFileList[i],r) 
}
array table
-----------------------------------------------
ScilabFileList -> [('[i]', 'r', 'normalized', ['i'], 1181)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=CurrentMaxFiles i<NewSize i++
induction variable: ['i']
{
L1182: (ScilabFileList[i].ftformat=,w) 
L1183: (ScilabFileList[i].ftmode=,w) 
L1184: (ScilabFileList[i].ftname=,w) 
L1185: (ScilabFileList[i].ftswap=,w) 
L1186: (ScilabFileList[i].fttype=,w) 
}
array table
-----------------------------------------------
ScilabFileList -> [('[i]', 'w', 'normalized', ['i'], 1182), ('[i]', 'w', 'normalized', ['i'], 1183), ('[i]', 'w', 'normalized', ['i'], 1184), ('[i]', 'w', 'normalized', ['i'], 1185), ('[i]', 'w', 'normalized', ['i'], 1186)]
LDEs formed:15

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<CurrentMaxFiles i++
induction variable: ['i']
{
L1187: (ScilabFileList[i].ftformat,r) (ScilabFileList[i].ftname,r) 
L1188: (ScilabFileList[i].ftname,r) 
}
array table
-----------------------------------------------
ScilabFileList -> [('[i]', 'r', 'normalized', ['i'], 1187), ('[i]', 'r', 'normalized', ['i'], 1187), ('[i]', 'r', 'normalized', ['i'], 1188)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < CurrentMaxFiles  i++
induction variable: ['i']
{
L1189: (ScilabFileList[i].ftformat,r) (ScilabFileList[i].ftname,r) 
L1190: (ScilabFileList[i].ftname,r) 
}
array table
-----------------------------------------------
ScilabFileList -> [('[i]', 'r', 'normalized', ['i'], 1189), ('[i]', 'r', 'normalized', ['i'], 1189), ('[i]', 'r', 'normalized', ['i'], 1190)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < GetMaximumFileOpenedInScilab()  i++
induction variable: ['i']
{
L1191: (ArrayIdUsed[j]=,w) 
}
array table
-----------------------------------------------
ArrayIdUsed -> [('[j]', 'w', 'not normalized', ['i'], 1191)]
LDEs formed:1

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < GetMaximumFileOpenedInScilab()  i++
induction variable: ['i']
{
L1192: (ArraySwapUsed[j]=,w) 
}
array table
-----------------------------------------------
ArraySwapUsed -> [('[j]', 'w', 'not normalized', ['i'], 1192)]
LDEs formed:1

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < GetMaximumFileOpenedInScilab()  i++
induction variable: ['i']
{
L1193: (ArrayModeUsed[j]=,w) 
}
array table
-----------------------------------------------
ArrayModeUsed -> [('[j]', 'w', 'not normalized', ['i'], 1193)]
LDEs formed:1

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < GetMaximumFileOpenedInScilab()  i++
induction variable: ['i']
{
L1194: (ArrayTypeUsed[j]=,w) 
}
array table
-----------------------------------------------
ArrayTypeUsed -> [('[j]', 'w', 'not normalized', ['i'], 1194)]
LDEs formed:1

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < GetMaximumFileOpenedInScilab()  i++
induction variable: ['i']
{
L1195: (ArrayTypeUsedAsString[j]=,w) 
}
array table
-----------------------------------------------
ArrayTypeUsedAsString -> [('[j]', 'w', 'not normalized', ['i'], 1195)]
LDEs formed:1

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < GetMaximumFileOpenedInScilab()  i++
induction variable: ['i']
{
L1196: (FilenamesArray[j]=,w) 
L1197: (FilenamesArray[j]=,w) 
}
array table
-----------------------------------------------
FilenamesArray -> [('[j]', 'w', 'not normalized', ['i'], 1196), ('[j]', 'w', 'not normalized', ['i'], 1197)]
LDEs formed:3

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = items-1   i >=0   i--
induction variable: ['i']
{
L1198: (status[k]==,r) 
L1199: (status[k]==,r) 
L1200: (status[k]==,r) 
L1201: (status[k]==,r) 
L1202: (status[k]==,r) 
}
array table
-----------------------------------------------
status -> [('[k]', 'r', 'not normalized', ['i'], 1198), ('[k]', 'r', 'not normalized', ['i'], 1199), ('[k]', 'r', 'not normalized', ['i'], 1200), ('[k]', 'r', 'not normalized', ['i'], 1201), ('[k]', 'r', 'not normalized', ['i'], 1202)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < levels  i++
induction variable: ['i']
{
L1203: (relativeFilename[rfMarker++]=,w) 
L1204: (relativeFilename[rfMarker++]=,w) 
L1205: (relativeFilename[rfMarker++]=,w) (DIR_SEPARATOR[0],r) 
}
array table
-----------------------------------------------
DIR_SEPARATOR -> [('[0]', 'r', 'normalized', ['i'], 1205)]
LDEs formed:0

relativeFilename -> [('[rfMarker++]', 'w', 'not normalized', ['i'], 1203), ('[rfMarker++]', 'w', 'not normalized', ['i'], 1204), ('[rfMarker++]', 'w', 'not normalized', ['i'], 1205)]
LDEs formed:6

distinct LDEs:
rfMarker++=rfMarker++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)wcslen(convertedPath)  i++
induction variable: ['i']
{
L1206: (convertedPath[i]==,r) (convertedPath[i]=,w) 
L1207: (convertedPath[i]==,r) (convertedPath[i]=,w) 
}
array table
-----------------------------------------------
convertedPath -> [('[i]', 'r', 'normalized', ['i'], 1206), ('[i]', 'w', 'normalized', ['i'], 1206), ('[i]', 'r', 'normalized', ['i'], 1207), ('[i]', 'w', 'normalized', ['i'], 1207)]
LDEs formed:7

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = nbLinesTextDetected  i < nblines  i++
induction variable: ['i']
{
L1208: (lines[i],r) 
L1209: (lines[i],r) 
L1210: (lines[i]=,w) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1208), ('[i]', 'r', 'normalized', ['i'], 1209), ('[i]', 'w', 'normalized', ['i'], 1210)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizelines  i++
induction variable: ['i']
{
L1211: (lines[i],r) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1211)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = firstLinesMatrix  i < sizelines  i++
induction variable: ['i']
{
L1212: (lines[i],r) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1212)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbTokens  i++
induction variable: ['i']
{
L1213: (splittedStr[i],r) 
L1214: (splittedStr[i],r) 
L1215: (splittedStr[i],r) 
}
array table
-----------------------------------------------
splittedStr -> [('[i]', 'r', 'normalized', ['i'], 1213), ('[i]', 'r', 'normalized', ['i'], 1214), ('[i]', 'r', 'normalized', ['i'], 1215)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = firstLinesMatrix  i < sizelines  i++
induction variable: ['i']
{
L1216: (lines[i],r) 
	loop info: j = 0  j < m  j++
	induction variable: ['i', 'j']
		{
		L1217: (dValues[(i - firstLinesMatrix) + n * j]=,w) (dValsTmp[j],r) 
		}
 }
array table
-----------------------------------------------
dValues -> [('[(i - firstLinesMatrix) + n * j]', 'w', 'not normalized', ['i', 'j'], 1217)]
LDEs formed:1

dValsTmp -> [('[j]', 'r', 'normalized', ['i', 'j'], 1217)]
LDEs formed:0

lines -> [('[i]', 'r', 'normalized', ['i', 'j'], 1216)]
LDEs formed:0

distinct LDEs:
(i1 - firstLinesMatrix) + n * j1=(i2 - firstLinesMatrix) + n * j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbColumnsMax  i++
induction variable: ['i']
{
L1217: (splittedStr[i],r) 
L1218: (dValues[i]=,w) 
L1219: (splittedStr[i],r) 
L1220: (dValues[i]=,w) 
L1221: (dValues[i]=,w) 
L1222: (dValues[i]=,w) 
}
array table
-----------------------------------------------
dValues -> [('[i]', 'w', 'normalized', ['i'], 1218), ('[i]', 'w', 'normalized', ['i'], 1220), ('[i]', 'w', 'normalized', ['i'], 1221), ('[i]', 'w', 'normalized', ['i'], 1222)]
LDEs formed:10

splittedStr -> [('[i]', 'r', 'normalized', ['i'], 1217), ('[i]', 'r', 'normalized', ['i'], 1219)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_FORMAT_SUPPORTED  i++
induction variable: ['i']
{
L1220: (supportedFormat[i],r) 
L1221: (cleanedFormat[nbcharacters]=,w) 
L1222: (cleanedFormat[nbcharacters - 1],r) 
L1223: (cleanedFormat[nbcharacters - 1],r) 
L1224: (cleanedFormat[nbcharacters - 1],r) 
L1225: (supportedFormat[i],r) 
}
array table
-----------------------------------------------
supportedFormat -> [('[i]', 'r', 'normalized', ['i'], 1220), ('[i]', 'r', 'normalized', ['i'], 1225)]
LDEs formed:0

cleanedFormat -> [('[nbcharacters]', 'w', 'not normalized', ['i'], 1221), ('[nbcharacters - 1]', 'r', 'not normalized', ['i'], 1222), ('[nbcharacters - 1]', 'r', 'not normalized', ['i'], 1223), ('[nbcharacters - 1]', 'r', 'not normalized', ['i'], 1224)]
LDEs formed:4

distinct LDEs:
nbcharacters=nbcharacters - 1
nbcharacters=nbcharacters
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = *sizelines - 1  i >= 0  i--
induction variable: ['i']
{
L1225: (lines[i],r) 
L1226: (lines[i],r) (lines[i],r) 
L1227: (lines[i],r) 
L1228: (lines[i]=,w) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1225), ('[i]', 'r', 'normalized', ['i'], 1226), ('[i]', 'r', 'normalized', ['i'], 1226), ('[i]', 'r', 'normalized', ['i'], 1227), ('[i]', 'w', 'normalized', ['i'], 1228)]
LDEs formed:5

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int) strlen(line)  i++
induction variable: ['i']
{
L1229: (line[i],r) 
}
array table
-----------------------------------------------
line -> [('[i]', 'r', 'normalized', ['i'], 1229)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = *sizelines - 1  i > 0  i--
induction variable: ['i']
{
L1230: (lines[i],r) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1230)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L1231: (pStVarOne[i]=,w) (lenStVarOne[i]+,r) 
L1232: (pStVarOne[i]==,r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'w', 'normalized', ['i'], 1231), ('[i]', 'r', 'normalized', ['i'], 1232)]
LDEs formed:2

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1231)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L1232: (results[i]=,w) (pStVarOne[i],r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1232)]
LDEs formed:0

results -> [('[i]', 'w', 'normalized', ['i'], 1232)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L1233: (pStVarOne[i]=,w) (lenStVarOne[i]+,r) 
L1234: (pStVarOne[i]==,r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'w', 'normalized', ['i'], 1233), ('[i]', 'r', 'normalized', ['i'], 1234)]
LDEs formed:2

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1233)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L1234: (pStVarOne[i],r) 
L1235: (results[i]=,w) 
L1236: (results[i]=,w) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1234)]
LDEs formed:0

results -> [('[i]', 'w', 'normalized', ['i'], 1235), ('[i]', 'w', 'normalized', ['i'], 1236)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mnOne  i++
induction variable: ['i']
{
L1237: (fullpathtmp[PATH_MAX*4],r) 
L1238: (pStVarOne[i],r) 
L1239: (pStFullPath[i]=,w) 
L1240: (pStVarOne[i],r) 
}
array table
-----------------------------------------------
pStFullPath -> [('[i]', 'w', 'normalized', ['i'], 1239)]
LDEs formed:1

pStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1238), ('[i]', 'r', 'normalized', ['i'], 1240)]
LDEs formed:0

fullpathtmp -> [('[PATH_MAX*4]', 'r', 'not normalized', ['i'], 1237)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1*n1  i++
induction variable: ['i']
{
L1238: (Input_filenames[i],r) 
L1239: (Output_extensions[i]=,w) (Input_filenames[i],r) 
L1240: (Output_extensions[i]=,w) 
L1241: (Output_extensions[i]==,r) 
L1242: (Output_extensions[i]=,w) 
}
array table
-----------------------------------------------
Input_filenames -> [('[i]', 'r', 'normalized', ['i'], 1238), ('[i]', 'r', 'normalized', ['i'], 1239)]
LDEs formed:0

Output_extensions -> [('[i]', 'w', 'normalized', ['i'], 1239), ('[i]', 'w', 'normalized', ['i'], 1240), ('[i]', 'r', 'normalized', ['i'], 1241), ('[i]', 'w', 'normalized', ['i'], 1242)]
LDEs formed:9

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=fdmax-1 i>=0 i--
induction variable: ['i']
{
L1243: (fileNameFormList[posBeginFileName],r) 
L1244: (absolute_file_path[posBeginFileName]=,w) 
}
array table
-----------------------------------------------
absolute_file_path -> [('[posBeginFileName]', 'w', 'not normalized', ['i'], 1244)]
LDEs formed:1

fileNameFormList -> [('[posBeginFileName]', 'r', 'not normalized', ['i'], 1243)]
LDEs formed:0

distinct LDEs:
posBeginFileName=posBeginFileName
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L1244: (pStVarOne[i]=,w) (lenStVarOne[i]+,r) 
L1245: (pStVarOne[i]==,r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'w', 'normalized', ['i'], 1244), ('[i]', 'r', 'normalized', ['i'], 1245)]
LDEs formed:2

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1244)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L1245: (pStVarOne[i],r) 
L1246: (results[i]=,w) 
L1247: (results[i]=,w) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1245)]
LDEs formed:0

results -> [('[i]', 'w', 'normalized', ['i'], 1246), ('[i]', 'w', 'normalized', ['i'], 1247)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mn  i++
induction variable: ['i']
{
L1248: (results[i],r) 
}
array table
-----------------------------------------------
results -> [('[i]', 'r', 'normalized', ['i'], 1248)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < m1n1  i++
induction variable: ['i']
{
L1249: (LongNames[i]=,w) (ShortNames[i],r) (bOK[i],r) 
}
array table
-----------------------------------------------
ShortNames -> [('[i]', 'r', 'normalized', ['i'], 1249)]
LDEs formed:0

bOK -> [('[i]', 'r', 'normalized', ['i'], 1249)]
LDEs formed:0

LongNames -> [('[i]', 'w', 'normalized', ['i'], 1249)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_DEFAULT_SUPPORTED_SEPARATORS  i++
induction variable: ['i']
{
L1250: (supportedSeparators[i],r) 
}
array table
-----------------------------------------------
supportedSeparators -> [('[i]', 'r', 'normalized', ['i'], 1250)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (m1 * n1)  i++
induction variable: ['i']
{
L1251: (pStVarOne[i]=,w) (lenStVarOne[i]+,r) 
L1252: (pStVarOne[i]==,r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'w', 'normalized', ['i'], 1251), ('[i]', 'r', 'normalized', ['i'], 1252)]
LDEs formed:2

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1251)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i< m1 * n1  i++
induction variable: ['i']
{
L1252: (pStResult[i]=,w) (pStVarOne[i],r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1252)]
LDEs formed:0

pStResult -> [('[i]', 'w', 'normalized', ['i'], 1252)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (m4 * n4)  i++
induction variable: ['i']
{
L1253: (textAdded[i]=,w) (lengthStrings[i]+,r) 
L1254: (textAdded[i]==,r) 
}
array table
-----------------------------------------------
textAdded -> [('[i]', 'w', 'normalized', ['i'], 1253), ('[i]', 'r', 'normalized', ['i'], 1254)]
LDEs formed:2

lengthStrings -> [('[i]', 'r', 'normalized', ['i'], 1253)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < m1n1  i++
induction variable: ['i']
{
L1254: (ShortNames[i]=,w) (LongNames[i],r) (bOK[i],r) 
}
array table
-----------------------------------------------
ShortNames -> [('[i]', 'w', 'normalized', ['i'], 1254)]
LDEs formed:1

bOK -> [('[i]', 'r', 'normalized', ['i'], 1254)]
LDEs formed:0

LongNames -> [('[i]', 'r', 'normalized', ['i'], 1254)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mnOne  i++
induction variable: ['i']
{
L1255: (pStVarOne[i]=,w) (lenStVarOne[i]+,r) 
L1256: (pStVarOne[i]==,r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'w', 'normalized', ['i'], 1255), ('[i]', 'r', 'normalized', ['i'], 1256)]
LDEs formed:2

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1255)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)strlen(ptrFormat)  i++
induction variable: ['i']
{
L1256: (ptrFormat[i]==,r) 
L1257: (ptrFormat[i+1]==,r) 
}
array table
-----------------------------------------------
ptrFormat -> [('[i]', 'r', 'normalized', ['i'], 1256), ('[i+1]', 'r', 'normalized', ['i'], 1257)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= RhsBackup  i++
induction variable: ['i']
{
L1258: (Str[i - 1]=,w) 
}
array table
-----------------------------------------------
Str -> [('[i - 1]', 'w', 'normalized', ['i'], 1258)]
LDEs formed:1

distinct LDEs:
i1 - 1=i2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numberelemnts   i++
induction variable: ['i']
{
L1259: (ListFilename[i],r) 
L1260: (FileName[strlen(FileName) - 1]==,r) (FileName[strlen(FileName) - 1]==,r) 
L1261: (FileName[strlen(FileName) - 1]=,w) 
}
array table
-----------------------------------------------
ListFilename -> [('[i]', 'r', 'normalized', ['i'], 1259)]
LDEs formed:0

FileName -> [('[strlen(FileName) - 1]', 'r', 'not normalized', ['i'], 1260), ('[strlen(FileName) - 1]', 'r', 'not normalized', ['i'], 1260), ('[strlen(FileName) - 1]', 'w', 'not normalized', ['i'], 1261)]
LDEs formed:3

distinct LDEs:
strlen(FileName) - 1=strlen(FileName) - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < inarg   i++ 
induction variable: ['i']
{
L1262: (m[i],r) (n[i],r) (l[i],r) 
}
array table
-----------------------------------------------
m -> [('[i]', 'r', 'normalized', ['i'], 1262)]
LDEs formed:0

l -> [('[i]', 'r', 'normalized', ['i'], 1262)]
LDEs formed:0

n -> [('[i]', 'r', 'normalized', ['i'], 1262)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i < inarg   i++
induction variable: ['i']
{
L1263: (m[i],r) (m[i-1]|,r) (n[i],r) (n[i-1],r) 
}
array table
-----------------------------------------------
m -> [('[i]', 'r', 'normalized', ['i'], 1263), ('[i-1]', 'r', 'normalized', ['i'], 1263)]
LDEs formed:0

n -> [('[i]', 'r', 'normalized', ['i'], 1263), ('[i-1]', 'r', 'normalized', ['i'], 1263)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < oarg   i++
induction variable: ['i']
{
L1264: (m[0],r) (n[0],r) (l[i+inarg],r) 
}
array table
-----------------------------------------------
m -> [('[0]', 'r', 'normalized', ['i'], 1264)]
LDEs formed:0

l -> [('[i+inarg]', 'r', 'not normalized', ['i'], 1264)]
LDEs formed:0

n -> [('[0]', 'r', 'normalized', ['i'], 1264)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < m[0]*n[0]  i++
induction variable: ['i']
{
L1265: (callpos[0],r) (callpos[1],r) 
L1266: (callpos[2],r) (callpos[3],r) 
L1267: (callpos[4],r) 
}
array table
-----------------------------------------------
callpos -> [('[0]', 'r', 'normalized', ['i'], 1265), ('[1]', 'r', 'normalized', ['i'], 1265), ('[2]', 'r', 'normalized', ['i'], 1266), ('[3]', 'r', 'normalized', ['i'], 1266), ('[4]', 'r', 'normalized', ['i'], 1267)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < m[0]*n[0]  i++
induction variable: ['i']
{
L1268: (callpos[0],r) (callpos[1],r) 
L1269: (callpos[2],r) (callpos[3],r) 
L1270: (callpos[4],r) (callpos[5],r) 
}
array table
-----------------------------------------------
callpos -> [('[0]', 'r', 'normalized', ['i'], 1268), ('[1]', 'r', 'normalized', ['i'], 1268), ('[2]', 'r', 'normalized', ['i'], 1269), ('[3]', 'r', 'normalized', ['i'], 1269), ('[4]', 'r', 'normalized', ['i'], 1270), ('[5]', 'r', 'normalized', ['i'], 1270)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < m[0]*n[0]  i++
induction variable: ['i']
{
L1271: (callpos[0],r) (callpos[1],r) 
L1272: (callpos[2],r) (callpos[3],r) 
}
array table
-----------------------------------------------
callpos -> [('[0]', 'r', 'normalized', ['i'], 1271), ('[1]', 'r', 'normalized', ['i'], 1271), ('[2]', 'r', 'normalized', ['i'], 1272), ('[3]', 'r', 'normalized', ['i'], 1272)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizelines  i++
induction variable: ['i']
{
L1273: (lines[i],r) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1273)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizelines  i++
induction variable: ['i']
{
L1274: (lines[i],r) 
L1275: (lineStrings[0]=,w) (lines[i],r) 
	loop info: j = 0  j < m  j++
	induction variable: ['i', 'j']
	{
	L1276: (results[i + n * j]=,w) (lineStrings[j],r) 
	L1277: (results[i + n * j]=,w) (lineStrings[j],r) 
	L1278: (lineStrings[j],r) 
	L1279: (lineStrings[j],r) 
	L1280: (lineStrings[j]=,w) 
	}
 }
array table
-----------------------------------------------
lineStrings -> [('[0]', 'w', 'normalized', ['i', 'j'], 1275), ('[j]', 'r', 'normalized', ['i', 'j'], 1276), ('[j]', 'r', 'normalized', ['i', 'j'], 1277), ('[j]', 'r', 'normalized', ['i', 'j'], 1278), ('[j]', 'r', 'normalized', ['i', 'j'], 1279), ('[j]', 'w', 'normalized', ['i', 'j'], 1280)]
LDEs formed:11

lines -> [('[i]', 'r', 'normalized', ['i', 'j'], 1274), ('[i]', 'r', 'normalized', ['i', 'j'], 1275)]
LDEs formed:0

results -> [('[i + n * j]', 'w', 'not normalized', ['i', 'j'], 1276), ('[i + n * j]', 'w', 'not normalized', ['i', 'j'], 1277)]
LDEs formed:3

distinct LDEs:
0=j2
0=0
i1 + n * j1=i2 + n * j2
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = *sizelines - 1  i >= 0  i--
induction variable: ['i']
{
L1278: (lines[i],r) 
L1279: (lines[i],r) 
L1280: (lines[i]=,w) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1278), ('[i]', 'r', 'normalized', ['i'], 1279), ('[i]', 'w', 'normalized', ['i'], 1280)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *sizelines  i++
induction variable: ['i']
{
L1281: (returnedLines[i]=,w) (lines[i],r) 
}
array table
-----------------------------------------------
returnedLines -> [('[i]', 'w', 'normalized', ['i'], 1281)]
LDEs formed:1

lines -> [('[i]', 'r', 'normalized', ['i'], 1281)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *sizelines  i++
induction variable: ['i']
{
L1282: (lines[i],r) 
L1283: (returnedLines[nbLines - 1]=,w) (lines[i],r) 
}
array table
-----------------------------------------------
returnedLines -> [('[nbLines - 1]', 'w', 'not normalized', ['i'], 1283)]
LDEs formed:1

lines -> [('[i]', 'r', 'normalized', ['i'], 1282), ('[i]', 'r', 'normalized', ['i'], 1283)]
LDEs formed:0

distinct LDEs:
nbLines - 1=nbLines - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nbLines  j++
induction variable: ['j']
{
L1284: (replacedStrings[j]=,w) (lines[j],r) 
}
array table
-----------------------------------------------
replacedStrings -> [('[j]', 'w', 'normalized', ['j'], 1284)]
LDEs formed:1

lines -> [('[j]', 'r', 'normalized', ['j'], 1284)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nr  i = i++
induction variable: ['i', 'i']
{
	loop info: j = 0  j < nbLines  j++
	induction variable: ['i', 'i', 'j']
	{
	L1285: (replacedStrings[j]=,w) (replacedStrings[j],r) (toreplace[i],r) (toreplace[nr + i],r) 
	}
 }
array table
-----------------------------------------------
replacedStrings -> [('[j]', 'w', 'normalized', ['i', 'i', 'j'], 1285), ('[j]', 'r', 'normalized', ['i', 'i', 'j'], 1285)]
LDEs formed:2

toreplace -> [('[i]', 'r', 'normalized', ['i', 'i', 'j'], 1285), ('[nr + i]', 'r', 'not normalized', ['i', 'i', 'j'], 1285)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbLines  i++
induction variable: ['i']
{
L1286: (lines[i],r) 
L1287: (pComments[(*nbcomments) - 1]=,w) (lines[i],r) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1286), ('[i]', 'r', 'normalized', ['i'], 1287)]
LDEs formed:0

pComments -> [('[(*nbcomments) - 1]', 'w', 'not normalized', ['i'], 1287)]
LDEs formed:1

distinct LDEs:
(*nbcomments) - 1=(*nbcomments) - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbLines  i++
induction variable: ['i']
{
L1288: (lines[i],r) 
L1289: (lines[i],r) 
L1290: (lines[i]=,w) 
L1291: (pLinesCleaned[(*newNbLines) - 1]=,w) (lines[i],r) 
}
array table
-----------------------------------------------
lines -> [('[i]', 'r', 'normalized', ['i'], 1288), ('[i]', 'r', 'normalized', ['i'], 1289), ('[i]', 'w', 'normalized', ['i'], 1290), ('[i]', 'r', 'normalized', ['i'], 1291)]
LDEs formed:4

pLinesCleaned -> [('[(*newNbLines) - 1]', 'w', 'not normalized', ['i'], 1291)]
LDEs formed:1

distinct LDEs:
(*newNbLines) - 1=(*newNbLines) - 1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbSize  i++
induction variable: ['i']
{
L1292: (imagpart[i],r) 
}
array table
-----------------------------------------------
imagpart -> [('[i]', 'r', 'normalized', ['i'], 1292)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < pCsvComplexArray->nbElements  i++
induction variable: ['i']
{
L1293: (imagPart[i],r) 
}
array table
-----------------------------------------------
imagPart -> [('[i]', 'r', 'normalized', ['i'], 1293)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ncol  i++
induction variable: ['i']
{
L1294: (valeur[row + (colFirst + i)*hauteur]=,w) 
}
array table
-----------------------------------------------
valeur -> [('[row + (colFirst + i)*hauteur]', 'w', 'not normalized', ['i'], 1294)]
LDEs formed:1

distinct LDEs:
row + (colFirst + i1)*hauteur=row + (colFirst + i2)*hauteur
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i <= capacite  i++
induction variable: ['i']
{
L1295: (valeur[i]=,w) 
}
array table
-----------------------------------------------
valeur -> [('[i]', 'w', 'normalized', ['i'], 1295)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < bytesRead  j++
induction variable: ['j']
{
L1296: (str1[j],r) 
}
array table
-----------------------------------------------
str1 -> [('[j]', 'r', 'normalized', ['j'], 1296)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < h->fat_sector_count  i++
induction variable: ['i']
{
L1297: (FAT[i]=,w) 
}
array table
-----------------------------------------------
FAT -> [('[i]', 'w', 'normalized', ['i'], 1297)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < h->fat_sector_count  i++
induction variable: ['i']
{
L1298: (FAT[%d]=,w) (FAT[i],r) 
}
array table
-----------------------------------------------
FAT -> [('[%d]', 'w', 'not normalized', ['i'], 1298), ('[i]', 'r', 'normalized', ['i'], 1298)]
LDEs formed:2

distinct LDEs:
%d=i2
%d=%d
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sector_count  i++
induction variable: ['i']
{
L1299: (header.FAT[i],r) 
}
array table
-----------------------------------------------
header.FAT -> [('[i]', 'r', 'normalized', ['i'], 1299)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ole->header.dif_sector_count  i++
induction variable: ['i']
{
L1300: (data[%d],r) 
L1301: (data[%d],r) 
}
array table
-----------------------------------------------
data -> [('[%d]', 'r', 'not normalized', ['i'], 1300), ('[%d]', 'r', 'not normalized', ['i'], 1301)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbElements  i++
induction variable: ['i']
{
L1302: (pSTRs[i],r) 
L1303: (realPart[i]=,w) 
L1304: (imagPart[i]=,w) 
}
array table
-----------------------------------------------
pSTRs -> [('[i]', 'r', 'normalized', ['i'], 1302)]
LDEs formed:0

realPart -> [('[i]', 'w', 'normalized', ['i'], 1303)]
LDEs formed:1

imagPart -> [('[i]', 'w', 'normalized', ['i'], 1304)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_FORMAT_SUPPORTED  i++
induction variable: ['i']
{
L1305: (supportedFormat[i],r) 
L1306: (cleanedFormat[nbcharacters]=,w) 
L1307: (cleanedFormat[nbcharacters - 1],r) 
L1308: (cleanedFormat[nbcharacters - 1],r) 
L1309: (cleanedFormat[nbcharacters - 1],r) 
L1310: (supportedFormat[i],r) 
}
array table
-----------------------------------------------
supportedFormat -> [('[i]', 'r', 'normalized', ['i'], 1305), ('[i]', 'r', 'normalized', ['i'], 1310)]
LDEs formed:0

cleanedFormat -> [('[nbcharacters]', 'w', 'not normalized', ['i'], 1306), ('[nbcharacters - 1]', 'r', 'not normalized', ['i'], 1307), ('[nbcharacters - 1]', 'r', 'not normalized', ['i'], 1308), ('[nbcharacters - 1]', 'r', 'not normalized', ['i'], 1309)]
LDEs formed:4

distinct LDEs:
nbcharacters=nbcharacters - 1
nbcharacters=nbcharacters
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = C1 - 1   j < C2   j++
induction variable: ['j']
{
	loop info: i = R1 - 1   i < R2   i++ 
	induction variable: ['j', 'i']
	{
	L1310: (newStrArray[k]=,w) (pStrsValues[i + nbRows * j],r) 
	}
 }
array table
-----------------------------------------------
newStrArray -> [('[k]', 'w', 'not normalized', ['j', 'i'], 1310)]
LDEs formed:1

pStrsValues -> [('[i + nbRows * j]', 'r', 'not normalized', ['j', 'i'], 1310)]
LDEs formed:0

distinct LDEs:
k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = C1 - 1   j < C2   j++
induction variable: ['j']
{
	loop info: i = R1 - 1   i < R2   i++
	induction variable: ['j', 'i']
	{
	L1311: (realPart[k]=,w) (realPart[i + (nbRows * j)],r) 
	L1312: (imagPart[k]=,w) (imagPart[i + (nbRows * j)],r) 
	}
 }
array table
-----------------------------------------------
imagPart -> [('[k]', 'w', 'not normalized', ['j', 'i'], 1312), ('[i + (nbRows * j)]', 'r', 'not normalized', ['j', 'i'], 1312)]
LDEs formed:2

realPart -> [('[k]', 'w', 'not normalized', ['j', 'i'], 1311), ('[i + (nbRows * j)]', 'r', 'not normalized', ['j', 'i'], 1311)]
LDEs formed:2

distinct LDEs:
k=i2 + (nbRows * j2)
k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbHeadersLines  i++
induction variable: ['i']
{
L1312: (headersLines[i],r) 
L1313: (headersLines[i],r) 
L1314: (headersLines[i],r) 
}
array table
-----------------------------------------------
headersLines -> [('[i]', 'r', 'normalized', ['i'], 1312), ('[i]', 'r', 'normalized', ['i'], 1313), ('[i]', 'r', 'normalized', ['i'], 1314)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m  i++
induction variable: ['i']
{
	loop info: j = 0  j < n  j++
	induction variable: ['i', 'j']
	{
	L1315: (pdValues[i + m * j],r) 
	L1316: (pdValues[i + m * j],r) 
	L1317: (buffer[65535],r) 
	L1318: (pdValues[i + m * j],r) 
	L1319: (pdValues[i + m * j],r) 
	L1320: (pdValues[i + m * j],r) 
	}
 }
array table
-----------------------------------------------
buffer -> [('[65535]', 'r', 'normalized', ['i', 'j'], 1317)]
LDEs formed:0

pdValues -> [('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1315), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1316), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1318), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1319), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1320)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbHeadersLines  i++
induction variable: ['i']
{
L1321: (headersLines[i],r) 
L1322: (headersLines[i],r) 
L1323: (headersLines[i],r) 
}
array table
-----------------------------------------------
headersLines -> [('[i]', 'r', 'normalized', ['i'], 1321), ('[i]', 'r', 'normalized', ['i'], 1322), ('[i]', 'r', 'normalized', ['i'], 1323)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m  i++
induction variable: ['i']
{
	loop info: j = 0  j < n  j++
	induction variable: ['i', 'j']
	{
	L1324: (StringValue[65535],r) 
	L1325: (pdValuesReal[i + m * j],r) 
	L1326: (pdValuesImag[i + m * j],r) 
	L1327: (buffer[65535],r) 
	L1328: (pdValuesReal[i + m * j],r) 
	L1329: (pdValuesReal[i + m * j],r) 
	L1330: (buffer[65535],r) 
	}
 }
array table
-----------------------------------------------
buffer -> [('[65535]', 'r', 'normalized', ['i', 'j'], 1327), ('[65535]', 'r', 'normalized', ['i', 'j'], 1330)]
LDEs formed:0

StringValue -> [('[65535]', 'r', 'normalized', ['i', 'j'], 1324)]
LDEs formed:0

pdValuesReal -> [('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1325), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1328), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1329)]
LDEs formed:0

pdValuesImag -> [('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1326)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbHeadersLines  i++
induction variable: ['i']
{
L1327: (headersLines[i],r) 
L1328: (headersLines[i],r) 
L1329: (headersLines[i],r) 
}
array table
-----------------------------------------------
headersLines -> [('[i]', 'r', 'normalized', ['i'], 1327), ('[i]', 'r', 'normalized', ['i'], 1328), ('[i]', 'r', 'normalized', ['i'], 1329)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < m   i++ 
induction variable: ['i']
{
	loop info:  j = 0   j < n   j++
	induction variable: ['i', 'j']
	{
	L1330: (pStrValues[i + m * j],r) 
	L1331: (pStrValues[i + m * j],r) 
	L1332: (pStrValues[i + m * j],r) 
	L1333: (pStrValues[i + m * j],r) 
	L1334: (pStrValues[i + m * j],r) 
	}
 }
array table
-----------------------------------------------
pStrValues -> [('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1330), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1331), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1332), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1333), ('[i + m * j]', 'r', 'not normalized', ['i', 'j'], 1334)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbRows * nbCols  i++
induction variable: ['i']
{
L1335: (pResults[i]=,w) (pStrs[i],r) 
}
array table
-----------------------------------------------
pStrs -> [('[i]', 'r', 'normalized', ['i'], 1335)]
LDEs formed:0

pResults -> [('[i]', 'w', 'normalized', ['i'], 1335)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = len - 1  i >= 0  i--
induction variable: ['i']
{
L1336: (filename_IN[i]==,r) 
L1337: (filename_IN[i]=,w) 
}
array table
-----------------------------------------------
filename_IN -> [('[i]', 'r', 'normalized', ['i'], 1336), ('[i]', 'w', 'normalized', ['i'], 1337)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m_ * n_  j++
induction variable: ['j']
{
L1338: (dArray[j],r) 
L1339: (dArray[j],r) 
}
array table
-----------------------------------------------
dArray -> [('[j]', 'r', 'normalized', ['j'], 1338), ('[j]', 'r', 'normalized', ['j'], 1339)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m_ * n_  j++
induction variable: ['j']
{
L1340: (iReturnedArray[j]=,w) (dArray[j],r) 
}
array table
-----------------------------------------------
iReturnedArray -> [('[j]', 'w', 'normalized', ['j'], 1340)]
LDEs formed:1

dArray -> [('[j]', 'r', 'normalized', ['j'], 1340)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < m * n  k++
induction variable: ['k']
{
L1341: (v[k],r) 
L1342: (r[0]=,w) 
}
array table
-----------------------------------------------
r -> [('[0]', 'w', 'normalized', ['k'], 1342)]
LDEs formed:1

v -> [('[k]', 'r', 'normalized', ['k'], 1341)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l = 0  l < m  l++
induction variable: ['l']
{
L1342: (r[l]=,w) 
	loop info: k = 0  k < n  k++
	induction variable: ['l', 'k']
	{
	L1343: (v[i],r) 
	L1344: (r[l]=,w) 
	}
 }
array table
-----------------------------------------------
r -> [('[l]', 'w', 'normalized', ['l', 'k'], 1342), ('[l]', 'w', 'normalized', ['l', 'k'], 1344)]
LDEs formed:3

v -> [('[i]', 'r', 'not normalized', ['l', 'k'], 1343)]
LDEs formed:0

distinct LDEs:
l1=l2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < n  k++
induction variable: ['k']
{
L1344: (r[k]=,w) 
	loop info: l = 0  l < m  l++
	induction variable: ['k', 'l']
	{
	L1345: (v[i++],r) 
	L1346: (r[k]=,w) 
	}
 }
array table
-----------------------------------------------
r -> [('[k]', 'w', 'normalized', ['k', 'l'], 1344), ('[k]', 'w', 'normalized', ['k', 'l'], 1346)]
LDEs formed:3

v -> [('[i++]', 'r', 'not normalized', ['k', 'l'], 1345)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j <= mn1 - 1  ++j
induction variable: ['j']
{
L1346: (matBool[j]=,w) 
L1347: (matBool[j]=,w) 
}
array table
-----------------------------------------------
matBool -> [('[j]', 'w', 'normalized', ['j'], 1346), ('[j]', 'w', 'normalized', ['j'], 1347)]
LDEs formed:3

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j <= mn1 - 1  ++j
induction variable: ['j']
{
L1348: (matBool[j]=,w) 
L1349: (matBool[j]=,w) 
}
array table
-----------------------------------------------
matBool -> [('[j]', 'w', 'normalized', ['j'], 1348), ('[j]', 'w', 'normalized', ['j'], 1349)]
LDEs formed:3

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j <= mn1 - 1  ++j
induction variable: ['j']
{
L1350: (matBool[j],r) 
}
array table
-----------------------------------------------
matBool -> [('[j]', 'r', 'normalized', ['j'], 1350)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < m * n  k++
induction variable: ['k']
{
L1351: (v[k],r) 
L1352: (r[0]=,w) 
}
array table
-----------------------------------------------
r -> [('[0]', 'w', 'normalized', ['k'], 1352)]
LDEs formed:1

v -> [('[k]', 'r', 'normalized', ['k'], 1351)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < n  k++
induction variable: ['k']
{
L1352: (r[k]=,w) 
	loop info: l = 0  l < m  l++
	induction variable: ['k', 'l']
	{
	L1353: (v[i++],r) 
	L1354: (r[k]=,w) 
	}
 }
array table
-----------------------------------------------
r -> [('[k]', 'w', 'normalized', ['k', 'l'], 1352), ('[k]', 'w', 'normalized', ['k', 'l'], 1354)]
LDEs formed:3

v -> [('[i++]', 'r', 'not normalized', ['k', 'l'], 1353)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l = 0  l < m  l++
induction variable: ['l']
{
L1354: (r[l]=,w) 
	loop info: k = 0  k < n  k++
	induction variable: ['l', 'k']
	{
	L1355: (v[i],r) 
	L1356: (r[l]=,w) 
	}
 }
array table
-----------------------------------------------
r -> [('[l]', 'w', 'normalized', ['l', 'k'], 1354), ('[l]', 'w', 'normalized', ['l', 'k'], 1356)]
LDEs formed:3

v -> [('[i]', 'r', 'not normalized', ['l', 'k'], 1355)]
LDEs formed:0

distinct LDEs:
l1=l2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *n  ++i
induction variable: ['i']
{
L1356: (yt[i]=,w) (y[i]+,r) (dym[i],r) 
L1357: (dym[i]=,w) (dyt[i]+,r) (dym[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 1356)]
LDEs formed:0

dym -> [('[i]', 'r', 'normalized', ['i'], 1356), ('[i]', 'w', 'normalized', ['i'], 1357), ('[i]', 'r', 'normalized', ['i'], 1357)]
LDEs formed:3

dyt -> [('[i]', 'r', 'normalized', ['i'], 1357)]
LDEs formed:0

yt -> [('[i]', 'w', 'normalized', ['i'], 1356)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(int)strlen(line) i++
induction variable: ['i']
{
L1357: (line[i]==,r) (line[i]=,w) 
}
array table
-----------------------------------------------
line -> [('[i]', 'r', 'normalized', ['i'], 1357), ('[i]', 'w', 'normalized', ['i'], 1357)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(int)strlen(line) i++
induction variable: ['i']
{
L1358: (line[i]==,r) (line[i]=,w) 
}
array table
-----------------------------------------------
line -> [('[i]', 'r', 'normalized', ['i'], 1358), ('[i]', 'w', 'normalized', ['i'], 1358)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<len i++
induction variable: ['i']
{
L1359: (localbuf[i]==,r) 
L1360: (localbuf[i]=,w) 
}
array table
-----------------------------------------------
localbuf -> [('[i]', 'r', 'normalized', ['i'], 1359), ('[i]', 'w', 'normalized', ['i'], 1360)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbLines  i++
induction variable: ['i']
{
L1361: (multilines[i],r) 
}
array table
-----------------------------------------------
multilines -> [('[i]', 'r', 'normalized', ['i'], 1361)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbcharacters - 1  i++
induction variable: ['i']
{
L1362: (string[i]==,r) (string[i]=,w) 
}
array table
-----------------------------------------------
string -> [('[i]', 'r', 'normalized', ['i'], 1362), ('[i]', 'w', 'normalized', ['i'], 1362)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = len  i >= 0  i--
induction variable: ['i']
{
L1363: (string[i]==,r) (string[i]=,w) 
}
array table
-----------------------------------------------
string -> [('[i]', 'r', 'normalized', ['i'], 1363), ('[i]', 'w', 'normalized', ['i'], 1363)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNbLines  i++
induction variable: ['i']
{
L1364: (strErrorMessage[i],r) 
}
array table
-----------------------------------------------
strErrorMessage -> [('[i]', 'r', 'normalized', ['i'], 1364)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0  i<(int)strlen(ptrFormat)  i++
induction variable: ['i']
{
L1365: (ptrFormat[i]==,r) 
L1366: (ptrFormat[i+1]==,r) 
}
array table
-----------------------------------------------
ptrFormat -> [('[i]', 'r', 'normalized', ['i'], 1365), ('[i+1]', 'r', 'normalized', ['i'], 1366)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < lengthFormat  i++
induction variable: ['i']
{
L1367: (ptrFormat[i]==,r) 
L1368: (ptrFormat[i + 1]==,r) 
}
array table
-----------------------------------------------
ptrFormat -> [('[i]', 'r', 'normalized', ['i'], 1367), ('[i + 1]', 'r', 'normalized', ['i'], 1368)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < bt->size  i++
induction variable: ['i']
{
L1369: (buffer[32],r) 
L1370: (tr_array[i],r) 
L1371: (s_file[i]=,w) 
L1372: (s_func[i]=,w) 
L1373: (s_addr[i]=,w) 
L1374: (s_func[i]=,w) 
L1375: (s_file[i]=,w) 
L1376: (s_addr[i]=,w) 
}
array table
-----------------------------------------------
buffer -> [('[32]', 'r', 'normalized', ['i'], 1369)]
LDEs formed:0

s_file -> [('[i]', 'w', 'normalized', ['i'], 1371), ('[i]', 'w', 'normalized', ['i'], 1375)]
LDEs formed:3

tr_array -> [('[i]', 'r', 'normalized', ['i'], 1370)]
LDEs formed:0

s_func -> [('[i]', 'w', 'normalized', ['i'], 1372), ('[i]', 'w', 'normalized', ['i'], 1374)]
LDEs formed:3

s_addr -> [('[i]', 'w', 'normalized', ['i'], 1373), ('[i]', 'w', 'normalized', ['i'], 1376)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < bt->size  i++
induction variable: ['i']
{
L1377: (s_file[i],r) 
L1378: (s_file[i],r) 
L1379: (s_func[i],r) 
L1380: (s_func[i],r) 
L1381: (s_addr[i],r) 
L1382: (s_addr[i],r) 
}
array table
-----------------------------------------------
s_file -> [('[i]', 'r', 'normalized', ['i'], 1377), ('[i]', 'r', 'normalized', ['i'], 1378)]
LDEs formed:0

s_func -> [('[i]', 'r', 'normalized', ['i'], 1379), ('[i]', 'r', 'normalized', ['i'], 1380)]
LDEs formed:0

s_addr -> [('[i]', 'r', 'normalized', ['i'], 1381), ('[i]', 'r', 'normalized', ['i'], 1382)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < bt->size  i++
induction variable: ['i']
{
L1383: (s_func[i]==,r) 
L1384: (s_func[i],r) 
L1385: (s_cplus_func[l]=,w) 
L1386: (s_func[i],r) 
L1387: (s_func[i]=,w) 
}
array table
-----------------------------------------------
s_func -> [('[i]', 'r', 'normalized', ['i'], 1383), ('[i]', 'r', 'normalized', ['i'], 1384), ('[i]', 'r', 'normalized', ['i'], 1386), ('[i]', 'w', 'normalized', ['i'], 1387)]
LDEs formed:4

s_cplus_func -> [('[l]', 'w', 'not normalized', ['i'], 1385)]
LDEs formed:1

distinct LDEs:
l=l
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ScilabModules->numberofModules i++
induction variable: ['i']
{
L1386: (ModuleList[i],r) 
L1387: (ModuleList[i],r) 
L1388: (ModuleList[i]=,w) 
}
array table
-----------------------------------------------
ModuleList -> [('[i]', 'r', 'normalized', ['i'], 1386), ('[i]', 'r', 'normalized', ['i'], 1387), ('[i]', 'w', 'normalized', ['i'], 1388)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < xpathObj->nodesetval->nodeNr  i++
induction variable: ['i']
{
L1389: (nodeTab[i]-,r) 
L1390: (ModuleList[indice]=,w) 
}
array table
-----------------------------------------------
ModuleList -> [('[indice]', 'w', 'not normalized', ['i'], 1390)]
LDEs formed:1

nodeTab -> [('[i]', 'r', 'normalized', ['i'], 1389)]
LDEs formed:0

distinct LDEs:
indice=indice
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nrow i++
induction variable: ['i']
{
L1390: (ModuleList[i],r) 
}
array table
-----------------------------------------------
ModuleList -> [('[i]', 'r', 'normalized', ['i'], 1390)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: p = Pt  p >= C2F(errgst).errpt  p--
induction variable: ['p']
{
L1391: (Rstk[p],r) (Rstk[p],r) 
L1392: (Lpt[1]-,r) 
L1393: (Lpt[1]=,w) (Lin[k + 1],r) 
L1394: (Lpt[2]=,w) (Lin[k + 2],r) 
L1395: (Lpt[3]=,w) (Lin[k + 3],r) 
L1396: (Lpt[4]=,w) (Lin[k + 4],r) 
L1397: (Lpt[6]=,w) 
L1398: (Rstk[p - 1]==,r) 
}
array table
-----------------------------------------------
Lin -> [('[k + 1]', 'r', 'not normalized', ['p'], 1393), ('[k + 2]', 'r', 'not normalized', ['p'], 1394), ('[k + 3]', 'r', 'not normalized', ['p'], 1395), ('[k + 4]', 'r', 'not normalized', ['p'], 1396)]
LDEs formed:0

Lpt -> [('[1]', 'r', 'normalized', ['p'], 1392), ('[1]', 'w', 'normalized', ['p'], 1393), ('[2]', 'w', 'normalized', ['p'], 1394), ('[3]', 'w', 'normalized', ['p'], 1395), ('[4]', 'w', 'normalized', ['p'], 1396), ('[6]', 'w', 'normalized', ['p'], 1397)]
LDEs formed:20

Rstk -> [('[p]', 'r', 'normalized', ['p'], 1391), ('[p]', 'r', 'normalized', ['p'], 1391), ('[p - 1]', 'r', 'normalized', ['p'], 1398)]
LDEs formed:0

distinct LDEs:
3=4
4=6
4=4
6=6
2=2
2=3
2=6
2=4
1=1
3=6
1=3
1=2
3=3
1=4
1=6
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kmac = 0  kmac < C2F(dbg).nmacs  kmac++
induction variable: ['kmac']
{
L1399: (idstk[kfin * nsiz],r) (macnms[kmac * nsiz],r) 
L1400: (lgptrs[kmac + 1]-,r) 
	loop info: ibpt = C2F(dbg).lgptrs[kmac]  ibpt <= i2  ++ibpt
	induction variable: ['kmac', 'ibpt']
		{
		L1401: (Lct[8]==,r) (bptlg[ibpt - 1],r) 
		L1402: (macnms[kmac * nsiz],r) 
		L1403: (Lct[8],r) 
		}
 }
array table
-----------------------------------------------
lgptrs -> [('[kmac + 1]', 'r', 'normalized', ['kmac', 'ibpt'], 1400)]
LDEs formed:0

bptlg -> [('[ibpt - 1]', 'r', 'normalized', ['kmac', 'ibpt'], 1401)]
LDEs formed:0

Lct -> [('[8]', 'r', 'normalized', ['kmac', 'ibpt'], 1401), ('[8]', 'r', 'normalized', ['kmac', 'ibpt'], 1403)]
LDEs formed:0

macnms -> [('[kmac * nsiz]', 'r', 'not normalized', ['kmac', 'ibpt'], 1399), ('[kmac * nsiz]', 'r', 'not normalized', ['kmac', 'ibpt'], 1402)]
LDEs formed:0

idstk -> [('[kfin * nsiz]', 'r', 'not normalized', ['kmac', 'ibpt'], 1399)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NB_DEBUG_ELEMENT  i++
induction variable: ['i']
{
L1400: (staticDebug[i],r) 
L1401: (outputStaticList[i]=,w) 
L1402: (outputStaticList[i],r) 
}
array table
-----------------------------------------------
staticDebug -> [('[i]', 'r', 'normalized', ['i'], 1400)]
LDEs formed:0

outputStaticList -> [('[i]', 'w', 'normalized', ['i'], 1401), ('[i]', 'r', 'normalized', ['i'], 1402)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ndgrec  ++i
induction variable: ['i']
{
L1403: (digit[i],r) 
}
array table
-----------------------------------------------
digit -> [('[i]', 'r', 'normalized', ['i'], 1403)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L1404: (digit[i - 1],r) 
}
array table
-----------------------------------------------
digit -> [('[i - 1]', 'r', 'normalized', ['i'], 1404)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L1405: (digit[i - 1],r) 
}
array table
-----------------------------------------------
digit -> [('[i - 1]', 'r', 'normalized', ['i'], 1405)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L1406: (string[i - 1]=,w) (digit[i - 1]+,r) 
}
array table
-----------------------------------------------
digit -> [('[i - 1]', 'r', 'normalized', ['i'], 1406)]
LDEs formed:0

string -> [('[i - 1]', 'w', 'normalized', ['i'], 1406)]
LDEs formed:1

distinct LDEs:
i1 - 1=i2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ix = 0  ix < mn  ++ix
induction variable: ['ix']
{
L1407: (nchar[ix],r) 
}
array table
-----------------------------------------------
nchar -> [('[ix]', 'r', 'normalized', ['ix'], 1407)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kij = ilp + 1  kij <= ix1  ++kij
induction variable: ['kij']
{
L1408: (nchar[0],r) 
}
array table
-----------------------------------------------
nchar -> [('[0]', 'r', 'normalized', ['kij'], 1408)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kij = ilp + 1  kij <= ix1  ++kij
induction variable: ['kij']
{
L1409: (nchar[ix],r) 
}
array table
-----------------------------------------------
nchar -> [('[ix]', 'r', 'not normalized', ['kij'], 1409)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ix = 0  ix < (*m) * (*n)  ++ix
induction variable: ['ix']
{
L1410: (Str[ix],r) 
}
array table
-----------------------------------------------
Str -> [('[ix]', 'r', 'normalized', ['ix'], 1410)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kij = ilp + 1  kij <= ix1  ++kij
induction variable: ['kij']
{
L1411: (Str[ix],r) 
}
array table
-----------------------------------------------
Str -> [('[ix]', 'r', 'not normalized', ['kij'], 1411)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ix = 0  ix < (*m) * (*n)  ix++
induction variable: ['ix']
{
L1412: (Str[ix],r) 
L1413: (Str[ix],r) 
}
array table
-----------------------------------------------
Str -> [('[ix]', 'r', 'normalized', ['ix'], 1412), ('[ix]', 'r', 'normalized', ['ix'], 1413)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)minlength  i++
induction variable: ['i']
{
L1414: (Fname[i]=,w) 
}
array table
-----------------------------------------------
Fname -> [('[i]', 'w', 'normalized', ['i'], 1414)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)name_len  i++
induction variable: ['i']
{
L1415: (namex[i]=,w) 
}
array table
-----------------------------------------------
namex -> [('[i]', 'w', 'normalized', ['i'], 1415)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<C  i++
induction variable: ['i']
{
L1416: (buffer[ i*L+j ]=,w) (MatrixDouble[ j*C+i ],r) 
}
array table
-----------------------------------------------
buffer -> [('[ i*L+j ]', 'w', 'not normalized', ['i'], 1416)]
LDEs formed:1

MatrixDouble -> [('[ j*C+i ]', 'r', 'not normalized', ['i'], 1416)]
LDEs formed:0

distinct LDEs:
 i1*L+j = i2*L+j 
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < C  i++
induction variable: ['i']
{
L1417: (buffer[ i*L+j ]=,w) (MatrixInt[ j*C+i ],r) 
}
array table
-----------------------------------------------
buffer -> [('[ i*L+j ]', 'w', 'not normalized', ['i'], 1417)]
LDEs formed:1

MatrixInt -> [('[ j*C+i ]', 'r', 'not normalized', ['i'], 1417)]
LDEs formed:0

distinct LDEs:
 i1*L+j = i2*L+j 
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < C  i++
induction variable: ['i']
{
L1418: (buffer[ i*L+j ]=,w) (MatrixStr[ j*C+i ],r) 
}
array table
-----------------------------------------------
buffer -> [('[ i*L+j ]', 'w', 'not normalized', ['i'], 1418)]
LDEs formed:1

MatrixStr -> [('[ j*C+i ]', 'r', 'not normalized', ['i'], 1418)]
LDEs formed:0

distinct LDEs:
 i1*L+j = i2*L+j 
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nsiz  i++
induction variable: ['i']
{
L1419: (id[i]=,w) 
}
array table
-----------------------------------------------
id -> [('[i]', 'w', 'normalized', ['i'], 1419)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = _iStart >= 0 ? _iStart : 0  iIndex < _iEnd   iIndex++
induction variable: ['iIndex']
{
L1420: (_piArray[iIndex],r) 
}
array table
-----------------------------------------------
_piArray -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1420)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iRows * _iCols   iIndex++
induction variable: ['iIndex']
{
L1421: (_piPow[iIndex]+,r) 
}
array table
-----------------------------------------------
_piPow -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1421)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < iArraySum(_piPow, 0, _iRows * _iCols)   iIndex++
induction variable: ['iIndex']
{
L1422: (_pdblRealData[iIndex],r) 
}
array table
-----------------------------------------------
_pdblRealData -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1422)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < iArraySum(_piPow, 0, _iRows * _iCols)   iIndex++
induction variable: ['iIndex']
{
L1423: (_pdblImgData[iIndex],r) 
}
array table
-----------------------------------------------
_pdblImgData -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1423)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iRows   iIndex++
induction variable: ['iIndex']
{
L1424: (_piElemByRow[iIndex],r) 
}
array table
-----------------------------------------------
_piElemByRow -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1424)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iTotalElem   iIndex++
induction variable: ['iIndex']
{
L1425: (_piColByRow[iIndex],r) 
L1426: (_pdblRealData[iIndex],r) 
}
array table
-----------------------------------------------
_piColByRow -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1425)]
LDEs formed:0

_pdblRealData -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1426)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iTotalElem   iIndex++
induction variable: ['iIndex']
{
L1427: (_pdblImgData[iIndex],r) 
}
array table
-----------------------------------------------
_pdblImgData -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1427)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iRows   iIndex++
induction variable: ['iIndex']
{
L1428: (_piElemByRow[iIndex],r) 
}
array table
-----------------------------------------------
_piElemByRow -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1428)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iTotalElem   iIndex++
induction variable: ['iIndex']
{
L1429: (_piColByRow[iIndex],r) 
L1430: (_piRealData[iIndex],r) 
}
array table
-----------------------------------------------
_piColByRow -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1429)]
LDEs formed:0

_piRealData -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1430)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iRows * _iCols   iIndex++
induction variable: ['iIndex']
{
L1431: (_piBoolData[iIndex],r) 
}
array table
-----------------------------------------------
_piBoolData -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1431)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iRows * _iCols   iIndex++
induction variable: ['iIndex']
{
L1432: (_piPow[iIndex]+,r) 
}
array table
-----------------------------------------------
_piPow -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1432)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iRows * _iCols   iIndex++
induction variable: ['iIndex']
{
L1433: (_piLen[iIndex]+,r) 
}
array table
-----------------------------------------------
_piLen -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1433)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < *_piItemNumber   iIndex++
induction variable: ['iIndex']
{
L1434: (_pElemType[iIndex]=,w) (piOffset[iIndex]-,r) 
}
array table
-----------------------------------------------
piOffset -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1434)]
LDEs formed:0

_pElemType -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1434)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < *_piRows * *_piCols  iIndex++
induction variable: ['iIndex']
{
L1435: (_piPow[iIndex]=,w) 
}
array table
-----------------------------------------------
_piPow -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1435)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < *_piRows   iIndex++
induction variable: ['iIndex']
{
L1436: (_piElemByRow[iIndex]=,w) 
}
array table
-----------------------------------------------
_piElemByRow -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1436)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < *_piTotalElem   iIndex++
induction variable: ['iIndex']
{
L1437: (_piColByRow[iIndex]=,w) 
}
array table
-----------------------------------------------
_piColByRow -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1437)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < *_piRows   iIndex++
induction variable: ['iIndex']
{
L1438: (_piElemByRow[iIndex]=,w) 
}
array table
-----------------------------------------------
_piElemByRow -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1438)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < *_piTotalElem   iIndex++
induction variable: ['iIndex']
{
L1439: (_piColByRow[iIndex]=,w) 
}
array table
-----------------------------------------------
_piColByRow -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1439)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < *_piRows * *_piCols  iIndex++
induction variable: ['iIndex']
{
L1440: (_piLen[iIndex]=,w) 
}
array table
-----------------------------------------------
_piLen -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1440)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < *_piRows * *_piCols  iIndex++
induction variable: ['iIndex']
{
L1441: (_piLen[iIndex]=,w) (piOffset[iIndex + 1]-,r) (piOffset[iIndex],r) 
}
array table
-----------------------------------------------
piOffset -> [('[iIndex + 1]', 'r', 'normalized', ['iIndex'], 1441), ('[iIndex]', 'r', 'normalized', ['iIndex'], 1441)]
LDEs formed:0

_piLen -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1441)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 1   iIndex <= _iItemNumber   iIndex++
induction variable: ['iIndex']
{
L1442: (piItemPos[iIndex]=,w) 
}
array table
-----------------------------------------------
piItemPos -> [('[iIndex]', 'w', 'normalized', ['iIndex'], 1442)]
LDEs formed:1

distinct LDEs:
iIndex1=iIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iItemPos   iIndex++
induction variable: ['iIndex']
{
L1443: (piItemPos[iIndex]==,r) 
}
array table
-----------------------------------------------
piItemPos -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1443)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iItemPos   iIndex++
induction variable: ['iIndex']
{
L1444: (piItemPos[iIndex]==,r) 
}
array table
-----------------------------------------------
piItemPos -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1444)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iIndex = 0   iIndex < _iItemPos   iIndex++
induction variable: ['iIndex']
{
L1445: (piItemPos[iIndex]==,r) 
}
array table
-----------------------------------------------
piItemPos -> [('[iIndex]', 'r', 'normalized', ['iIndex'], 1445)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: x = 1  x <= *m  x++
induction variable: ['x']
{
	loop info: y = 1  y <= *n  y++
	induction variable: ['x', 'y']
	{
	L1446: (lengthMatrix[j]=,w) 
	}
 }
array table
-----------------------------------------------
lengthMatrix -> [('[j]', 'w', 'not normalized', ['x', 'y'], 1446)]
LDEs formed:1

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbPredefined  i++
induction variable: ['i']
{
L1447: (variablesName[i]=,w) 
}
array table
-----------------------------------------------
variablesName -> [('[i]', 'w', 'normalized', ['i'], 1447)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < MAX_SCILAB_DEFINED_TYPE  i++
induction variable: ['i']
{
L1448: (tp[i]=,w) 
L1449: (ln[i]=,w) 
L1450: (ptr[i]=,w) 
}
array table
-----------------------------------------------
ln -> [('[i]', 'w', 'normalized', ['i'], 1449)]
LDEs formed:1

ptr -> [('[i]', 'w', 'normalized', ['i'], 1450)]
LDEs formed:1

tp -> [('[i]', 'w', 'normalized', ['i'], 1448)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<data[ils] i++
induction variable: ['i']
{
L1449: (data[ils+1+i*nsiz],r) (name[0],r) 
L1450: (name[0],r) 
}
array table
-----------------------------------------------
data -> [('[ils+1+i*nsiz]', 'r', 'not normalized', ['i'], 1449)]
LDEs formed:0

name -> [('[0]', 'r', 'normalized', ['i'], 1449), ('[0]', 'r', 'normalized', ['i'], 1450)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<data[ile] i++
induction variable: ['i']
{
L1451: (data[ile+1+i*nsiz],r) (name[0],r) 
L1452: (name[0],r) 
}
array table
-----------------------------------------------
data -> [('[ile+1+i*nsiz]', 'r', 'not normalized', ['i'], 1451)]
LDEs formed:0

name -> [('[0]', 'r', 'normalized', ['i'], 1451), ('[0]', 'r', 'normalized', ['i'], 1452)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1 k<=nbstat k++
induction variable: ['k']
{
L1453: (data[cod_ind],r) 
L1454: (data[cod_ind+1]==,r) (data[cod_ind+1]==,r) (data[cod_ind+3+nsiz],r) 
}
array table
-----------------------------------------------
data -> [('[cod_ind]', 'r', 'not normalized', ['k'], 1453), ('[cod_ind+1]', 'r', 'not normalized', ['k'], 1454), ('[cod_ind+1]', 'r', 'not normalized', ['k'], 1454), ('[cod_ind+3+nsiz]', 'r', 'not normalized', ['k'], 1454)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<isizt k++
induction variable: ['k']
{
L1455: (varnames[k],r) 
L1456: (varnames[k],r) 
L1457: (varnames[k][0]==,r) 
L1458: (varnames[k],r) 
}
array table
-----------------------------------------------
varnames -> [('[k]', 'r', 'normalized', ['k'], 1455), ('[k]', 'r', 'normalized', ['k'], 1456), ('[k][0]', 'r', 'normalized', ['k'], 1457), ('[k]', 'r', 'normalized', ['k'], 1458)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<strlgth i++
induction variable: ['i']
{
L1459: (int_str[i]=,w) (data[*index2],r) 
}
array table
-----------------------------------------------
int_str -> [('[i]', 'w', 'normalized', ['i'], 1459)]
LDEs formed:1

data -> [('[*index2]', 'r', 'not normalized', ['i'], 1459)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<strlgth i++
induction variable: ['i']
{
L1460: (int_str[i]=,w) (data[*index2],r) 
}
array table
-----------------------------------------------
int_str -> [('[i]', 'w', 'normalized', ['i'], 1460)]
LDEs formed:1

data -> [('[*index2]', 'r', 'not normalized', ['i'], 1460)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0  k<nCols*nRows  k++
induction variable: ['k']
{
L1461: (lengths[k]=,w) (data[*index2 + 1]-,r) (data[*index2],r) 
L1462: (lengths[k],r) 
L1463: (lengths[k],r) 
}
array table
-----------------------------------------------
lengths -> [('[k]', 'w', 'normalized', ['k'], 1461), ('[k]', 'r', 'normalized', ['k'], 1462), ('[k]', 'r', 'normalized', ['k'], 1463)]
LDEs formed:3

data -> [('[*index2 + 1]', 'r', 'not normalized', ['k'], 1461), ('[*index2]', 'r', 'not normalized', ['k'], 1461)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0  k< nCols*nRows  k++
induction variable: ['k']
{
L1462: (str[k]=,w) (lengths[k]+,r) 
}
array table
-----------------------------------------------
lengths -> [('[k]', 'r', 'normalized', ['k'], 1462)]
LDEs formed:0

str -> [('[k]', 'w', 'normalized', ['k'], 1462)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<nCols*nRows k++
induction variable: ['k']
{
	loop info: i=0 i<lengths[k] i++
	induction variable: ['k', 'i']
	{
	L1463: (int_str[i]=,w) (data[*index2],r) 
	}
L1464: (lengths[k],r) (str[k],r) (lengths[k],r) 
L1465: (str[k],r) (lengths[k],r) 
}
array table
-----------------------------------------------
int_str -> [('[i]', 'w', 'normalized', ['k', 'i'], 1463)]
LDEs formed:1

lengths -> [('[k]', 'r', 'normalized', ['k', 'i'], 1464), ('[k]', 'r', 'normalized', ['k', 'i'], 1464), ('[k]', 'r', 'normalized', ['k', 'i'], 1465)]
LDEs formed:0

data -> [('[*index2]', 'r', 'not normalized', ['k', 'i'], 1463)]
LDEs formed:0

str -> [('[k]', 'r', 'normalized', ['k', 'i'], 1464), ('[k]', 'r', 'normalized', ['k', 'i'], 1465)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<32 k++
induction variable: ['k']
{
L1466: (operators_num[k]==,r) 
}
array table
-----------------------------------------------
operators_num -> [('[k]', 'r', 'normalized', ['k'], 1466)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<nblhs k++
induction variable: ['k']
{
L1467: (data[*index2],r) (name[0],r) 
L1468: (name[0],r) 
L1469: (data[*index2],r) 
	loop info: l=0 l<nbrhs l++
	induction variable: ['k', 'l']
		{
		}
 }
array table
-----------------------------------------------
data -> [('[*index2]', 'r', 'not normalized', ['k', 'l'], 1467), ('[*index2]', 'r', 'not normalized', ['k', 'l'], 1469)]
LDEs formed:0

name -> [('[0]', 'r', 'normalized', ['k', 'l'], 1467), ('[0]', 'r', 'normalized', ['k', 'l'], 1468)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nbValues   i++
induction variable: ['i']
{
L1469: (values[i],r) 
}
array table
-----------------------------------------------
values -> [('[i]', 'r', 'normalized', ['i'], 1469)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nbValues   i++
induction variable: ['i']
{
L1470: (values[i],r) 
}
array table
-----------------------------------------------
values -> [('[i]', 'r', 'normalized', ['i'], 1470)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nbValues   i++
induction variable: ['i']
{
L1471: (values[i],r) 
}
array table
-----------------------------------------------
values -> [('[i]', 'r', 'normalized', ['i'], 1471)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nbValues   i++
induction variable: ['i']
{
L1472: (handles[i],r) 
}
array table
-----------------------------------------------
handles -> [('[i]', 'r', 'normalized', ['i'], 1472)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nbValues   i++
induction variable: ['i']
{
L1473: (handles[i],r) 
}
array table
-----------------------------------------------
handles -> [('[i]', 'r', 'normalized', ['i'], 1473)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbRow * nbCol  i++
induction variable: ['i']
{
L1474: (values[i],r) 
}
array table
-----------------------------------------------
values -> [('[i]', 'r', 'normalized', ['i'], 1474)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < scilab_nbargs i++
induction variable: ['i']
{
L1475: (argv[i]=,w) (scilab_argv[i],r) 
}
array table
-----------------------------------------------
scilab_argv -> [('[i]', 'r', 'normalized', ['i'], 1475)]
LDEs formed:0

argv -> [('[i]', 'w', 'normalized', ['i'], 1475)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nbargs i++
induction variable: ['i']
{
L1476: (scilab_argv[i]=,w) (argv[i],r) 
}
array table
-----------------------------------------------
argv -> [('[i]', 'r', 'normalized', ['i'], 1476)]
LDEs formed:0

scilab_argv -> [('[i]', 'w', 'normalized', ['i'], 1476)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: pindex = 0  pindex < prime_table_length  pindex++
induction variable: ['pindex']
{
L1477: (primes[pindex],r) 
L1478: (primes[pindex],r) 
}
array table
-----------------------------------------------
primes -> [('[pindex]', 'r', 'normalized', ['pindex'], 1477), ('[pindex]', 'r', 'normalized', ['pindex'], 1478)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < h->tablelength  i++
induction variable: ['i']
{
L1479: (table[i],r) 
L1480: (table[i]=,w) 
L1481: (newtable[index_],r) 
L1482: (newtable[index_]=,w) 
}
array table
-----------------------------------------------
table -> [('[i]', 'r', 'normalized', ['i'], 1479), ('[i]', 'w', 'normalized', ['i'], 1480)]
LDEs formed:2

newtable -> [('[index_]', 'r', 'not normalized', ['i'], 1481), ('[index_]', 'w', 'not normalized', ['i'], 1482)]
LDEs formed:2

distinct LDEs:
index_=index_
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < h->tablelength  i++
induction variable: ['i']
{
	loop info: pE = &(newtable[i]), e = *pE  e != NULL  e = *pE
	induction variable: ['i', 'e']
	{
	L1483: (newtable[index_],r) 
	L1484: (newtable[index_]=,w) 
	}
 }
array table
-----------------------------------------------
newtable -> [('[index_]', 'r', 'not normalized', ['i', 'e'], 1483), ('[index_]', 'w', 'not normalized', ['i', 'e'], 1484)]
LDEs formed:2

distinct LDEs:
index_=index_
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < h->tablelength  i++
induction variable: ['i']
{
L1485: (table[i],r) 
}
array table
-----------------------------------------------
table -> [('[i]', 'r', 'normalized', ['i'], 1485)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < h->tablelength  i++
induction variable: ['i']
{
L1486: (table[i],r) 
}
array table
-----------------------------------------------
table -> [('[i]', 'r', 'normalized', ['i'], 1486)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < tablelength  i++
induction variable: ['i']
{
L1487: (table[i],r) 
L1488: (table[i],r) 
}
array table
-----------------------------------------------
table -> [('[i]', 'r', 'normalized', ['i'], 1487), ('[i]', 'r', 'normalized', ['i'], 1488)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < xpathObj->nodesetval->nodeNr  i++
induction variable: ['i']
{
L1489: (nodeTab[i]-,r) 
L1490: (gatewayIdList[gateway->dimLists - 1]=,w) 
L1491: (primitivesList[gateway->dimLists - 1]=,w) 
L1492: (primiviteIdList[gateway->dimLists - 1]=,w) 
}
array table
-----------------------------------------------
primitivesList -> [('[gateway->dimLists - 1]', 'w', 'not normalized', ['i'], 1491)]
LDEs formed:1

gatewayIdList -> [('[gateway->dimLists - 1]', 'w', 'not normalized', ['i'], 1490)]
LDEs formed:1

nodeTab -> [('[i]', 'r', 'normalized', ['i'], 1489)]
LDEs formed:0

primiviteIdList -> [('[gateway->dimLists - 1]', 'w', 'not normalized', ['i'], 1492)]
LDEs formed:1

distinct LDEs:
gateway->dimLists - 1=gateway->dimLists - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbDevices  i++
induction variable: ['i']
{
L1493: (DevicesName[i],r) 
}
array table
-----------------------------------------------
DevicesName -> [('[i]', 'r', 'normalized', ['i'], 1493)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nsiz  i++
induction variable: ['i']
{
L1494: (x[i],r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 1494)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 1494)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < dim  i++
induction variable: ['i']
{
L1495: (pArray[i],r) 
L1496: (pArray[i],r) 
L1497: (pArray[i]=,w) 
}
array table
-----------------------------------------------
pArray -> [('[i]', 'r', 'normalized', ['i'], 1495), ('[i]', 'r', 'normalized', ['i'], 1496), ('[i]', 'w', 'normalized', ['i'], 1497)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kmac = 0  kmac < C2F(dbg).nmacs  kmac++
induction variable: ['kmac']
{
L1498: (idstk[kfin * nsiz],r) (macnms[kmac * nsiz],r) 
L1499: (Lpt[2]-,r) 
L1500: (Lpt[1],r) (Lpt[6],r) 
L1501: (lgptrs[kmac + 1]-,r) 
L1502: (Lct[8]-,r) 
	loop info: ibpt = C2F(dbg).lgptrs[kmac]  ibpt <= i__2  ++ibpt
	induction variable: ['kmac', 'ibpt']
		{
		L1503: (Lct[8]-,r) (Lct[8]-,r) (bptlg[ibpt - 1],r) 
		L1504: (bptlg[ibpt - 1],r) 
		L1505: (macnms[kmac * nsiz],r) 
		}
 }
array table
-----------------------------------------------
Lct -> [('[8]', 'r', 'normalized', ['kmac', 'ibpt'], 1502), ('[8]', 'r', 'normalized', ['kmac', 'ibpt'], 1503), ('[8]', 'r', 'normalized', ['kmac', 'ibpt'], 1503)]
LDEs formed:0

bptlg -> [('[ibpt - 1]', 'r', 'normalized', ['kmac', 'ibpt'], 1503), ('[ibpt - 1]', 'r', 'normalized', ['kmac', 'ibpt'], 1504)]
LDEs formed:0

Lpt -> [('[2]', 'r', 'normalized', ['kmac', 'ibpt'], 1499), ('[1]', 'r', 'normalized', ['kmac', 'ibpt'], 1500), ('[6]', 'r', 'normalized', ['kmac', 'ibpt'], 1500)]
LDEs formed:0

idstk -> [('[kfin * nsiz]', 'r', 'not normalized', ['kmac', 'ibpt'], 1498)]
LDEs formed:0

lgptrs -> [('[kmac + 1]', 'r', 'normalized', ['kmac', 'ibpt'], 1501)]
LDEs formed:0

macnms -> [('[kmac * nsiz]', 'r', 'not normalized', ['kmac', 'ibpt'], 1498), ('[kmac * nsiz]', 'r', 'not normalized', ['kmac', 'ibpt'], 1505)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= n*m  i++
induction variable: ['i']
{
L1506: (x[i-1],r) 
L1507: (x[i-1],r) 
}
array table
-----------------------------------------------
x -> [('[i-1]', 'r', 'normalized', ['i'], 1506), ('[i-1]', 'r', 'normalized', ['i'], 1507)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<NB_DEBUG_ELEMENT  i++
induction variable: ['i']
{
L1508: (dynamicDebug[i],r) 
L1509: (outputDynamicList[i]=,w) 
L1510: (outputDynamicList[i],r) 
}
array table
-----------------------------------------------
dynamicDebug -> [('[i]', 'r', 'normalized', ['i'], 1508)]
LDEs formed:0

outputDynamicList -> [('[i]', 'w', 'normalized', ['i'], 1509), ('[i]', 'r', 'normalized', ['i'], 1510)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: di = 0  di < 16  di++
induction variable: ['di']
{
L1511: (digest[di],r) 
}
array table
-----------------------------------------------
digest -> [('[di]', 'r', 'normalized', ['di'], 1511)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: di = 0  di < 16  di++
induction variable: ['di']
{
L1512: (digest[di],r) 
}
array table
-----------------------------------------------
digest -> [('[di]', 'r', 'normalized', ['di'], 1512)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numberOfTypes  i++
induction variable: ['i']
{
L1513: (TypeNames[i]=,w) 
L1514: (TypeNames[i]==,r) 
}
array table
-----------------------------------------------
TypeNames -> [('[i]', 'w', 'normalized', ['i'], 1513), ('[i]', 'r', 'normalized', ['i'], 1514)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < MAX_SCILAB_DEFINED_TYPE  i++
induction variable: ['i']
{
L1515: (ln[i],r) 
L1516: (ln[i],r) 
L1517: (ptr[i]-,r) (TypeNames[j],r) 
L1518: (TypeNames[j][lengthTypeName]=,w) 
}
array table
-----------------------------------------------
ln -> [('[i]', 'r', 'normalized', ['i'], 1515), ('[i]', 'r', 'normalized', ['i'], 1516)]
LDEs formed:0

TypeNames -> [('[j]', 'r', 'not normalized', ['i'], 1517), ('[j][lengthTypeName]', 'w', 'not normalized', ['i'], 1518)]
LDEs formed:4

ptr -> [('[i]', 'r', 'normalized', ['i'], 1517)]
LDEs formed:0

distinct LDEs:
j=j
j=j,lengthTypeName=lengthTypeName
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < MAX_SCILAB_DEFINED_TYPE  i++
induction variable: ['i']
{
L1518: (ln[i],r) 
L1519: (TypeNumbers[j]=,w) (tp[i],r) 
}
array table
-----------------------------------------------
ln -> [('[i]', 'r', 'normalized', ['i'], 1518)]
LDEs formed:0

TypeNumbers -> [('[j]', 'w', 'not normalized', ['i'], 1519)]
LDEs formed:1

tp -> [('[i]', 'r', 'normalized', ['i'], 1519)]
LDEs formed:0

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < MAX_SCILAB_DEFINED_TYPE  i++
induction variable: ['i']
{
L1520: (ln[i],r) 
}
array table
-----------------------------------------------
ln -> [('[i]', 'r', 'normalized', ['i'], 1520)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizeArray  i++
induction variable: ['i']
{
L1521: (TypeNames[i],r) 
}
array table
-----------------------------------------------
TypeNames -> [('[i]', 'r', 'normalized', ['i'], 1521)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i < nlgh i++
induction variable: ['i']
{
L1522: (fortanbuffer[i]==,r) 
L1523: (fortanbuffer[i]==,r) 
L1524: (fortanbuffer[i]=,w) 
}
array table
-----------------------------------------------
fortanbuffer -> [('[i]', 'r', 'normalized', ['i'], 1522), ('[i]', 'r', 'normalized', ['i'], 1523), ('[i]', 'w', 'normalized', ['i'], 1524)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)sizeof(stacktrace_hostname)  ++i
induction variable: ['i']
{
L1525: (stacktrace_hostname[i]==,r) 
L1526: (stacktrace_hostname[i]=,w) 
}
array table
-----------------------------------------------
stacktrace_hostname -> [('[i]', 'r', 'normalized', ['i'], 1525), ('[i]', 'w', 'normalized', ['i'], 1526)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  signals[j] != -1  ++j
induction variable: ['j']
{
L1527: (signals[j],r) 
L1528: (signals[j],r) 
}
array table
-----------------------------------------------
signals -> [('[j]', 'r', 'normalized', ['j'], 1527), ('[j]', 'r', 'normalized', ['j'], 1528)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < start   i++ 
induction variable: ['i']
{
L1529: (whites[i]=,w) 
}
array table
-----------------------------------------------
whites -> [('[i]', 'w', 'normalized', ['i'], 1529)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < nbrCommands  i++
induction variable: ['i']
{
L1530: (keywords[i]=,w) (CommandWords[i],r) 
}
array table
-----------------------------------------------
keywords -> [('[i]', 'w', 'normalized', ['i'], 1530)]
LDEs formed:1

CommandWords -> [('[i]', 'r', 'normalized', ['i'], 1530)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fin=SizeOfStrs-1 fin>0 fin--
induction variable: ['fin']
{
	loop info: i=0 i<fin i++
	induction variable: ['fin', 'i']
	{
	L1531: (Strs[i],r) (Strs[i+1],r) 
	}
 }
array table
-----------------------------------------------
Strs -> [('[i]', 'r', 'normalized', ['fin', 'i'], 1531), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1531)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = sizelocalvariables  i < sizelocalvariables + sizeglobalvariables  i++
induction variable: ['i']
{
L1532: (variables[i]=,w) (globalvariables[i - sizelocalvariables],r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'w', 'normalized', ['i'], 1532)]
LDEs formed:1

globalvariables -> [('[i - sizelocalvariables]', 'r', 'not normalized', ['i'], 1532)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fin=SizeStrings-1 fin>0 fin--
induction variable: ['fin']
{
	loop info: i=0 i<fin i++
	induction variable: ['fin', 'i']
	{
	L1533: (Strings[i],r) (Strings[i+1],r) 
	L1534: (Strings[i],r) 
	L1535: (Strings[i]=,w) (Strings[i+1],r) 
	L1536: (Strings[i+1]=,w) 
	}
 }
array table
-----------------------------------------------
Strings -> [('[i]', 'r', 'normalized', ['fin', 'i'], 1533), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1533), ('[i]', 'r', 'normalized', ['fin', 'i'], 1534), ('[i]', 'w', 'normalized', ['fin', 'i'], 1535), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1535), ('[i+1]', 'w', 'normalized', ['fin', 'i'], 1536)]
LDEs formed:11

distinct LDEs:
i1=i2+1
i1+1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fin=*SizeStrings-1 fin>0 fin--
induction variable: ['fin']
{
	loop info: i=0 i<fin i++
	induction variable: ['fin', 'i']
	{
	L1537: (Strings[i],r) 
	L1538: (Strings[i],r) (Strings[i+1],r) 
	L1539: (Strings[i+1],r) 
	L1540: (Strings[i+1]=,w) 
	L1541: (Strings[i]=,w) (Strings[i+1],r) 
	L1542: (Strings[i+1]=,w) 
	}
 }
array table
-----------------------------------------------
Strings -> [('[i]', 'r', 'normalized', ['fin', 'i'], 1537), ('[i]', 'r', 'normalized', ['fin', 'i'], 1538), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1538), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1539), ('[i+1]', 'w', 'normalized', ['fin', 'i'], 1540), ('[i]', 'w', 'normalized', ['fin', 'i'], 1541), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1541), ('[i+1]', 'w', 'normalized', ['fin', 'i'], 1542)]
LDEs formed:21

distinct LDEs:
i1=i2+1
i1+1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<Modules->numberofModules j++
induction variable: ['j']
{
L1543: (ModuleList[j],r) 
}
array table
-----------------------------------------------
ModuleList -> [('[j]', 'r', 'normalized', ['j'], 1543)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < currentGateway->dimLists  i++
induction variable: ['i']
{
L1544: (primitivesList[i],r) 
L1545: (gatewayIdList[i],r) 
L1546: (primiviteIdList[i],r) 
L1547: (primitivesList[i],r) 
}
array table
-----------------------------------------------
primitivesList -> [('[i]', 'r', 'normalized', ['i'], 1544), ('[i]', 'r', 'normalized', ['i'], 1547)]
LDEs formed:0

gatewayIdList -> [('[i]', 'r', 'normalized', ['i'], 1545)]
LDEs formed:0

primiviteIdList -> [('[i]', 'r', 'normalized', ['i'], 1546)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i1 = nlgh - 1  i1 >= 0  i1--
induction variable: ['i1']
{
L1547: (namex[i1],r) 
}
array table
-----------------------------------------------
namex -> [('[i1]', 'r', 'normalized', ['i1'], 1547)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = Rhs - nopt + 1  k <= Rhs  k++
induction variable: ['k']
{
L1548: (opts[isopt],r) 
L1549: (type[0],r) 
}
array table
-----------------------------------------------
type -> [('[0]', 'r', 'normalized', ['k'], 1549)]
LDEs formed:0

opts -> [('[isopt]', 'r', 'not normalized', ['k'], 1548)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ix = 1  ix <= ix1  ++ix
induction variable: ['ix']
{
L1549: (ntypes[lw - 1]=,w) 
}
array table
-----------------------------------------------
ntypes -> [('[lw - 1]', 'w', 'not normalized', ['ix'], 1549)]
LDEs formed:1

distinct LDEs:
lw - 1=lw - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ix = 0  ix < *mlhs  ++ix
induction variable: ['ix']
{
L1550: (ntypes[lw - 1]=,w) 
}
array table
-----------------------------------------------
ntypes -> [('[lw - 1]', 'w', 'not normalized', ['ix'], 1550)]
LDEs formed:1

distinct LDEs:
lw - 1=lw - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ix = 1  ix <= *mlhs  ++ix
induction variable: ['ix']
{
L1551: (ntypes[lw - 1]=,w) 
}
array table
-----------------------------------------------
ntypes -> [('[lw - 1]', 'w', 'not normalized', ['ix'], 1551)]
LDEs formed:1

distinct LDEs:
lw - 1=lw - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ix = 0  ix < 23  ++ix
induction variable: ['ix']
{
L1552: (iwork[ix],r) 
}
array table
-----------------------------------------------
iwork -> [('[ix]', 'r', 'normalized', ['ix'], 1552)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ivar = 1  ivar <= Rhs  ++ivar
induction variable: ['ivar']
{
L1553: (ntypes[ivar - 1],r) 
L1554: (lad[ivar - 1],r) 
L1555: (ntypes[ivar - 1]=,w) 
}
array table
-----------------------------------------------
lad -> [('[ivar - 1]', 'r', 'normalized', ['ivar'], 1554)]
LDEs formed:0

ntypes -> [('[ivar - 1]', 'r', 'normalized', ['ivar'], 1553), ('[ivar - 1]', 'w', 'normalized', ['ivar'], 1555)]
LDEs formed:2

distinct LDEs:
ivar1 - 1=ivar2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ivar = 1  ivar <= Lhs  ++ivar
induction variable: ['ivar']
{
L1556: (ntypes[nbvars1 + ivar - 1]=,w) 
}
array table
-----------------------------------------------
ntypes -> [('[nbvars1 + ivar - 1]', 'w', 'not normalized', ['ivar'], 1556)]
LDEs formed:1

distinct LDEs:
nbvars1 + ivar1 - 1=nbvars1 + ivar2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)strlen(str2)  i++
induction variable: ['i']
{
L1557: (str1[i]=,w) (str2[i],r) 
}
array table
-----------------------------------------------
str2 -> [('[i]', 'r', 'normalized', ['i'], 1557)]
LDEs formed:0

str1 -> [('[i]', 'w', 'normalized', ['i'], 1557)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = (int)strlen(str2)  i < len  i++
induction variable: ['i']
{
L1558: (str1[i]=,w) 
}
array table
-----------------------------------------------
str1 -> [('[i]', 'w', 'normalized', ['i'], 1558)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nlgh  i++
induction variable: ['i']
{
L1559: (Fname[i]=,w) 
}
array table
-----------------------------------------------
Fname -> [('[i]', 'w', 'normalized', ['i'], 1559)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Nbvars  i++
induction variable: ['i']
{
L1560: (state[i].iwhere=,w) (iwhere[i],r) 
L1561: (state[i].ntypes=,w) (ntypes[i],r) 
L1562: (state[i].lad=,w) (lad[i],r) 
L1563: (state[i].lhsvar=,w) (lhsvar[i],r) 
}
array table
-----------------------------------------------
iwhere -> [('[i]', 'r', 'normalized', ['i'], 1560)]
LDEs formed:0

lad -> [('[i]', 'r', 'normalized', ['i'], 1562)]
LDEs formed:0

state -> [('[i]', 'w', 'normalized', ['i'], 1560), ('[i]', 'w', 'normalized', ['i'], 1561), ('[i]', 'w', 'normalized', ['i'], 1562), ('[i]', 'w', 'normalized', ['i'], 1563)]
LDEs formed:10

lhsvar -> [('[i]', 'r', 'normalized', ['i'], 1563)]
LDEs formed:0

ntypes -> [('[i]', 'r', 'normalized', ['i'], 1561)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Nbvars  i++
induction variable: ['i']
{
L1562: (iwhere[i]=,w) (state[i].iwhere,r) 
L1563: (ntypes[i]=,w) (state[i].ntypes,r) 
L1564: (lad[i]=,w) (state[i].lad,r) 
L1565: (lhsvar[i]=,w) (state[i].lhsvar,r) 
}
array table
-----------------------------------------------
iwhere -> [('[i]', 'w', 'normalized', ['i'], 1562)]
LDEs formed:1

lad -> [('[i]', 'w', 'normalized', ['i'], 1564)]
LDEs formed:1

state -> [('[i]', 'r', 'normalized', ['i'], 1562), ('[i]', 'r', 'normalized', ['i'], 1563), ('[i]', 'r', 'normalized', ['i'], 1564), ('[i]', 'r', 'normalized', ['i'], 1565)]
LDEs formed:0

lhsvar -> [('[i]', 'w', 'normalized', ['i'], 1565)]
LDEs formed:1

ntypes -> [('[i]', 'w', 'normalized', ['i'], 1563)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < size  ++i
induction variable: ['i']
{
L1564: (ptr[2 * i]=,w) (tab[i],r) 
L1565: (ptr[2 * i + 1]=,w) (ptr[lda + i],r) 
}
array table
-----------------------------------------------
ptr -> [('[2 * i]', 'w', 'normalized', ['i'], 1564), ('[2 * i + 1]', 'w', 'normalized', ['i'], 1565), ('[lda + i]', 'r', 'not normalized', ['i'], 1565)]
LDEs formed:5

tab -> [('[i]', 'r', 'normalized', ['i'], 1564)]
LDEs formed:0

distinct LDEs:
2 * i1 + 1=2 * i2 + 1
2 * i1=2 * i2 + 1
2 * i1=lda + i2
2 * i1 + 1=lda + i2
2 * i1=2 * i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < size  ++i
induction variable: ['i']
{
L1565: (tab[i]=,w) (ptr[2 * i + 1],r) 
L1566: (ptr[i]=,w) (ptr[2 * i],r) 
}
array table
-----------------------------------------------
ptr -> [('[2 * i + 1]', 'r', 'normalized', ['i'], 1565), ('[i]', 'w', 'normalized', ['i'], 1566), ('[2 * i]', 'r', 'normalized', ['i'], 1566)]
LDEs formed:3

tab -> [('[i]', 'w', 'normalized', ['i'], 1565)]
LDEs formed:1

distinct LDEs:
i1=2 * i2
2 * i1 + 1=i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < size  ++i
induction variable: ['i']
{
L1566: (ptr77z[2 * i]=,w) (tab[i],r) 
L1567: (ptr77z[2 * i + 1]=,w) (ptr[lda + i],r) 
}
array table
-----------------------------------------------
ptr77z -> [('[2 * i]', 'w', 'normalized', ['i'], 1566), ('[2 * i + 1]', 'w', 'normalized', ['i'], 1567)]
LDEs formed:3

ptr -> [('[lda + i]', 'r', 'not normalized', ['i'], 1567)]
LDEs formed:0

tab -> [('[i]', 'r', 'normalized', ['i'], 1566)]
LDEs formed:0

distinct LDEs:
2 * i1=2 * i2 + 1
2 * i1 + 1=2 * i2 + 1
2 * i1=2 * i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < size  ++i
induction variable: ['i']
{
L1567: (tab[i]=,w) (ptrz[2 * i + 1],r) 
L1568: (ptrsci[i]=,w) (ptrz[2 * i],r) 
}
array table
-----------------------------------------------
ptrz -> [('[2 * i + 1]', 'r', 'normalized', ['i'], 1567), ('[2 * i]', 'r', 'normalized', ['i'], 1568)]
LDEs formed:0

tab -> [('[i]', 'w', 'normalized', ['i'], 1567)]
LDEs formed:1

ptrsci -> [('[i]', 'w', 'normalized', ['i'], 1568)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fin=SizeStruct-1 fin>0 fin--
induction variable: ['fin']
{
	loop info: i=0 i<fin i++
	induction variable: ['fin', 'i']
	{
	L1569: (Vstruct[i].NameVariable,r) (Vstruct[i+1].NameVariable,r) 
	L1570: (Vstruct[i].NameVariable,r) 
	L1571: (Vstruct[i].SizeVariable,r) 
	L1572: (Vstruct[i].NameVariable=,w) (Vstruct[i+1].NameVariable,r) 
	L1573: (Vstruct[i].SizeVariable=,w) (Vstruct[i+1].SizeVariable,r) 
	L1574: (Vstruct[i+1].NameVariable=,w) 
	L1575: (Vstruct[i+1].SizeVariable=,w) 
	}
 }
array table
-----------------------------------------------
Vstruct -> [('[i]', 'r', 'normalized', ['fin', 'i'], 1569), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1569), ('[i]', 'r', 'normalized', ['fin', 'i'], 1570), ('[i]', 'r', 'normalized', ['fin', 'i'], 1571), ('[i]', 'w', 'normalized', ['fin', 'i'], 1572), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1572), ('[i]', 'w', 'normalized', ['fin', 'i'], 1573), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 1573), ('[i+1]', 'w', 'normalized', ['fin', 'i'], 1574), ('[i+1]', 'w', 'normalized', ['fin', 'i'], 1575)]
LDEs formed:34

distinct LDEs:
i1=i2+1
i1+1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=1 i<lenStructArray+1 i++
induction variable: ['i']
{
L1576: (Vstruct[i-1].NameVariable,r) 
}
array table
-----------------------------------------------
Vstruct -> [('[i-1]', 'r', 'normalized', ['i'], 1576)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<lenStructArray i++
induction variable: ['i']
{
L1577: (Vstruct[i].NameVariable,r) (Vstruct[i].NameVariable,r) (Vstruct[i].NameVariable=,w) 
L1578: (Vstruct[i].SizeVariable=,w) 
}
array table
-----------------------------------------------
Vstruct -> [('[i]', 'r', 'normalized', ['i'], 1577), ('[i]', 'r', 'normalized', ['i'], 1577), ('[i]', 'w', 'normalized', ['i'], 1577), ('[i]', 'w', 'normalized', ['i'], 1578)]
LDEs formed:7

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<lenStructArray i++
induction variable: ['i']
{
L1579: (Tab[i]=,w) (Vstruct[i].NameVariable,r) 
L1580: (Size[i]=,w) (Vstruct[i].SizeVariable,r) 
}
array table
-----------------------------------------------
Vstruct -> [('[i]', 'r', 'normalized', ['i'], 1579), ('[i]', 'r', 'normalized', ['i'], 1580)]
LDEs formed:0

Tab -> [('[i]', 'w', 'normalized', ['i'], 1579)]
LDEs formed:1

Size -> [('[i]', 'w', 'normalized', ['i'], 1580)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<lenStructArray i++
induction variable: ['i']
{
L1581: (Vstruct[i].NameVariable,r) 
L1582: (LocalTab[i]=,w) (Vstruct[i].NameVariable,r) 
}
array table
-----------------------------------------------
Vstruct -> [('[i]', 'r', 'normalized', ['i'], 1581), ('[i]', 'r', 'normalized', ['i'], 1582)]
LDEs formed:0

LocalTab -> [('[i]', 'w', 'normalized', ['i'], 1582)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < nbVariables  k++
induction variable: ['k']
{
L1583: (VariableNameToClear[i]=,w) 
}
array table
-----------------------------------------------
VariableNameToClear -> [('[i]', 'w', 'not normalized', ['k'], 1583)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < nbVariables  k++
induction variable: ['k']
{
L1584: (VariableNameToClear[k],r) 
}
array table
-----------------------------------------------
VariableNameToClear -> [('[k]', 'r', 'normalized', ['k'], 1584)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<SizeLocalFunctionsTab i++
induction variable: ['i']
{
L1585: (LocalFunctionsTab[i],r) 
}
array table
-----------------------------------------------
LocalFunctionsTab -> [('[i]', 'r', 'normalized', ['i'], 1585)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i <sizecommandwords i++
induction variable: ['i']
{
L1586: (commandwords[i],r) 
}
array table
-----------------------------------------------
commandwords -> [('[i]', 'r', 'normalized', ['i'], 1586)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<sizecommandwords  i++
induction variable: ['i']
{
L1587: (commandwords[i],r) 
}
array table
-----------------------------------------------
commandwords -> [('[i]', 'r', 'normalized', ['i'], 1587)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<SizeTab i++
induction variable: ['i']
{
L1588: (LocalFunctionsTabTmp[i],r) 
}
array table
-----------------------------------------------
LocalFunctionsTabTmp -> [('[i]', 'r', 'normalized', ['i'], 1588)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<SizeTab i++
induction variable: ['i']
{
L1589: (LocalFunctionsTabTmp[i],r) 
L1590: (LocalFunctionsTab[j]=,w) (LocalFunctionsTabTmp[i],r) 
}
array table
-----------------------------------------------
LocalFunctionsTabTmp -> [('[i]', 'r', 'normalized', ['i'], 1589), ('[i]', 'r', 'normalized', ['i'], 1590)]
LDEs formed:0

LocalFunctionsTab -> [('[j]', 'w', 'not normalized', ['i'], 1590)]
LDEs formed:1

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mn  i++
induction variable: ['i']
{
L1591: (Input_Matrix[i],r) 
L1592: (Input_Matrix[i],r) 
L1593: (Output_Matrix[i]=,w) 
L1594: (Input_Matrix[i],r) 
}
array table
-----------------------------------------------
Output_Matrix -> [('[i]', 'w', 'normalized', ['i'], 1593)]
LDEs formed:1

Input_Matrix -> [('[i]', 'r', 'normalized', ['i'], 1591), ('[i]', 'r', 'normalized', ['i'], 1592), ('[i]', 'r', 'normalized', ['i'], 1594)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mn  i++
induction variable: ['i']
{
L1595: (Input_Matrix[i],r) 
L1596: (Output_Matrix[i]=,w) 
L1597: (Output_Matrix[i]==,r) 
}
array table
-----------------------------------------------
Output_Matrix -> [('[i]', 'w', 'normalized', ['i'], 1596), ('[i]', 'r', 'normalized', ['i'], 1597)]
LDEs formed:2

Input_Matrix -> [('[i]', 'r', 'normalized', ['i'], 1595)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbElements  i++
induction variable: ['i']
{
L1596: (pStrs[i],r) 
}
array table
-----------------------------------------------
pStrs -> [('[i]', 'r', 'normalized', ['i'], 1596)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbElements  i++
induction variable: ['i']
{
L1597: (pStrs[i],r) 
L1598: (pStrs[i],r) 
}
array table
-----------------------------------------------
pStrs -> [('[i]', 'r', 'normalized', ['i'], 1597), ('[i]', 'r', 'normalized', ['i'], 1598)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=1 i<(int)strlen(functionname) i++
induction variable: ['i']
{
L1599: (functionname[i],r) (functionname[i],r) (functionname[i],r) 
L1600: (functionname[i],r) 
}
array table
-----------------------------------------------
functionname -> [('[i]', 'r', 'normalized', ['i'], 1599), ('[i]', 'r', 'normalized', ['i'], 1599), ('[i]', 'r', 'normalized', ['i'], 1599), ('[i]', 'r', 'normalized', ['i'], 1600)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < m1*n1 i++
induction variable: ['i']
{
L1601: (Input_Strings[i],r) 
L1602: (Input_Strings[i],r) (Input_Strings[i],r) 
L1603: (Input_Strings[i],r) 
L1604: (Input_Strings[i],r) 
}
array table
-----------------------------------------------
Input_Strings -> [('[i]', 'r', 'normalized', ['i'], 1601), ('[i]', 'r', 'normalized', ['i'], 1602), ('[i]', 'r', 'normalized', ['i'], 1602), ('[i]', 'r', 'normalized', ['i'], 1603), ('[i]', 'r', 'normalized', ['i'], 1604)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < versionSize  i++
induction variable: ['i']
{
L1605: (versionAsDouble[i]=,w) (version[i],r) 
}
array table
-----------------------------------------------
version -> [('[i]', 'r', 'normalized', ['i'], 1605)]
LDEs formed:0

versionAsDouble -> [('[i]', 'w', 'normalized', ['i'], 1605)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L1606: (result[i],r) 
L1607: (result[i],r) 
L1608: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 1606), ('[i]', 'r', 'normalized', ['i'], 1607), ('[i]', 'w', 'normalized', ['i'], 1608)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L1609: (result[i],r) 
L1610: (result[i],r) 
L1611: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 1609), ('[i]', 'r', 'normalized', ['i'], 1610), ('[i]', 'w', 'normalized', ['i'], 1611)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L1612: (result[i],r) 
L1613: (result[i],r) 
L1614: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 1612), ('[i]', 'r', 'normalized', ['i'], 1613), ('[i]', 'w', 'normalized', ['i'], 1614)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L1615: (result[i],r) 
L1616: (result[i],r) 
L1617: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 1615), ('[i]', 'r', 'normalized', ['i'], 1616), ('[i]', 'w', 'normalized', ['i'], 1617)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L1618: (result[i],r) 
L1619: (result[i],r) 
L1620: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 1618), ('[i]', 'r', 'normalized', ['i'], 1619), ('[i]', 'w', 'normalized', ['i'], 1620)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L1621: (result[i],r) 
L1622: (result[i],r) 
L1623: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 1621), ('[i]', 'r', 'normalized', ['i'], 1622), ('[i]', 'w', 'normalized', ['i'], 1623)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L1624: (result[i],r) 
L1625: (result[i],r) 
L1626: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 1624), ('[i]', 'r', 'normalized', ['i'], 1625), ('[i]', 'w', 'normalized', ['i'], 1626)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L1627: (result[i],r) 
L1628: (result[i],r) 
L1629: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 1627), ('[i]', 'r', 'normalized', ['i'], 1628), ('[i]', 'w', 'normalized', ['i'], 1629)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<size1  i++
induction variable: ['i']
{
L1630: (arg1[i]=,w) 
L1631: (arg1[i],r) 
}
array table
-----------------------------------------------
arg1 -> [('[i]', 'w', 'normalized', ['i'], 1630), ('[i]', 'r', 'normalized', ['i'], 1631)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<size1-1  i++
induction variable: ['i']
{
L1632: (arg1[i],r) 
L1633: (arg1[i]=,w) 
}
array table
-----------------------------------------------
arg1 -> [('[i]', 'r', 'normalized', ['i'], 1632), ('[i]', 'w', 'normalized', ['i'], 1633)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < sizedictionaryVariables  i++
induction variable: ['i']
{
	loop info:  j = 0  j < sizedictionaryMacros  j++
	induction variable: ['i', 'j']
	{
	L1634: (dictionaryVariables[i],r) (dictionaryMacros[j],r) 
	}
 }
array table
-----------------------------------------------
dictionaryMacros -> [('[j]', 'r', 'normalized', ['i', 'j'], 1634)]
LDEs formed:0

dictionaryVariables -> [('[i]', 'r', 'normalized', ['i', 'j'], 1634)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < sizedictionaryVariables  i++
induction variable: ['i']
{
L1635: (ListWordsTmp[i]=,w) (dictionaryVariables[i],r) 
}
array table
-----------------------------------------------
ListWordsTmp -> [('[i]', 'w', 'normalized', ['i'], 1635)]
LDEs formed:1

dictionaryVariables -> [('[i]', 'r', 'normalized', ['i'], 1635)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < sizedictionaryVariables  i++
induction variable: ['i']
{
	loop info:  j = 0  j < sizedictionaryMacros  j++
	induction variable: ['i', 'j']
	{
	L1636: (dictionaryVariables[i],r) (dictionaryMacros[j],r) 
	L1637: (ListWordsTmp[i],r) 
	L1638: (ListWordsTmp[i]=,w) 
	}
 }
array table
-----------------------------------------------
ListWordsTmp -> [('[i]', 'r', 'normalized', ['i', 'j'], 1637), ('[i]', 'w', 'normalized', ['i', 'j'], 1638)]
LDEs formed:2

dictionaryMacros -> [('[j]', 'r', 'normalized', ['i', 'j'], 1636)]
LDEs formed:0

dictionaryVariables -> [('[i]', 'r', 'normalized', ['i', 'j'], 1636)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < sizedictionaryVariables  i++
induction variable: ['i']
{
L1637: (ListWordsTmp[i],r) 
L1638: (ListWords[k]=,w) (ListWordsTmp[i],r) 
}
array table
-----------------------------------------------
ListWordsTmp -> [('[i]', 'r', 'normalized', ['i'], 1637), ('[i]', 'r', 'normalized', ['i'], 1638)]
LDEs formed:0

ListWords -> [('[k]', 'w', 'not normalized', ['i'], 1638)]
LDEs formed:1

distinct LDEs:
k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < sizearray2  j++
induction variable: ['j']
{
L1639: (array1[pos]=,w) (array2[j],r) 
}
array table
-----------------------------------------------
array2 -> [('[j]', 'r', 'normalized', ['j'], 1639)]
LDEs formed:0

array1 -> [('[pos]', 'w', 'not normalized', ['j'], 1639)]
LDEs formed:1

distinct LDEs:
pos=pos
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = j = 0  i < *SizeStrings - 1  i++
induction variable: ['i']
{
L1640: (Strings[i],r) (Strings[i + 1],r) 
L1641: (Strings[j++]=,w) (Strings[i],r) 
L1642: (Strings[i],r) 
L1643: (Strings[i]=,w) 
}
array table
-----------------------------------------------
Strings -> [('[i]', 'r', 'normalized', ['i'], 1640), ('[i + 1]', 'r', 'normalized', ['i'], 1640), ('[j++]', 'w', 'not normalized', ['i'], 1641), ('[i]', 'r', 'normalized', ['i'], 1641), ('[i]', 'r', 'normalized', ['i'], 1642), ('[i]', 'w', 'normalized', ['i'], 1643)]
LDEs formed:11

distinct LDEs:
i1 + 1=i2
i1=j++
j++=j++
i1 + 1=j++
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < lenstr1  i++
induction variable: ['i']
{
L1644: (s1[i],r) (s2[i],r) 
}
array table
-----------------------------------------------
s2 -> [('[i]', 'r', 'normalized', ['i'], 1644)]
LDEs formed:0

s1 -> [('[i]', 'r', 'normalized', ['i'], 1644)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < sizeDictionary - 1  i++
induction variable: ['i']
{
L1645: (dictionary[i+1],r) 
L1646: (dictionary[i+1],r) 
}
array table
-----------------------------------------------
dictionary -> [('[i+1]', 'r', 'normalized', ['i'], 1645), ('[i+1]', 'r', 'normalized', ['i'], 1646)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizearray i++
induction variable: ['i']
{
L1647: (dictionary[i],r) 
L1648: (dictionary[i],r) 
L1649: (dictionary[i],r) 
L1650: (dictionary[i]=,w) 
}
array table
-----------------------------------------------
dictionary -> [('[i]', 'r', 'normalized', ['i'], 1647), ('[i]', 'r', 'normalized', ['i'], 1648), ('[i]', 'r', 'normalized', ['i'], 1649), ('[i]', 'w', 'normalized', ['i'], 1650)]
LDEs formed:4

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizearray i++
induction variable: ['i']
{
L1651: (fullpath[PATH_MAX * 2],r) 
L1652: (dictionary[i],r) 
L1653: (dictionary[i],r) 
L1654: (dictionary[i],r) (dictionary[i],r) (DIR_SEPARATOR[0],r) 
L1655: (dictionary[i],r) 
L1656: (dictionary[i],r) 
L1657: (dictionary[i],r) 
L1658: (dictionary[i]=,w) 
}
array table
-----------------------------------------------
DIR_SEPARATOR -> [('[0]', 'r', 'normalized', ['i'], 1654)]
LDEs formed:0

fullpath -> [('[PATH_MAX * 2]', 'r', 'not normalized', ['i'], 1651)]
LDEs formed:0

dictionary -> [('[i]', 'r', 'normalized', ['i'], 1652), ('[i]', 'r', 'normalized', ['i'], 1653), ('[i]', 'r', 'normalized', ['i'], 1654), ('[i]', 'r', 'normalized', ['i'], 1654), ('[i]', 'r', 'normalized', ['i'], 1655), ('[i]', 'r', 'normalized', ['i'], 1656), ('[i]', 'r', 'normalized', ['i'], 1657), ('[i]', 'w', 'normalized', ['i'], 1658)]
LDEs formed:8

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < rc   i++
induction variable: ['i']
{
L1659: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 1659)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 1659)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < rc   i++
induction variable: ['i']
{
L1660: (pstData[i],r) (pstData[i],r) 
L1661: (pstData[i],r) 
L1662: (pstData[i]=,w) 
L1663: (pstData[last]=,w) (pstData[i],r) 
L1664: (pstData[i]=,w) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'r', 'normalized', ['i'], 1660), ('[i]', 'r', 'normalized', ['i'], 1660), ('[i]', 'r', 'normalized', ['i'], 1661), ('[i]', 'w', 'normalized', ['i'], 1662), ('[last]', 'w', 'not normalized', ['i'], 1663), ('[i]', 'r', 'normalized', ['i'], 1663), ('[i]', 'w', 'normalized', ['i'], 1664)]
LDEs formed:18

distinct LDEs:
i1=last
last=last
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < MAX_SYMBS  i++
induction variable: ['i']
{
L1665: (symbs[i],r) 
}
array table
-----------------------------------------------
symbs -> [('[i]', 'r', 'normalized', ['i'], 1665)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < MAX_SYMBS_F  i++
induction variable: ['i']
{
L1666: (symbs[i],r) 
}
array table
-----------------------------------------------
symbs -> [('[i]', 'r', 'normalized', ['i'], 1666)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < l  i++
induction variable: ['i']
{
L1667: (line[i]==,r) 
}
array table
-----------------------------------------------
line -> [('[i]', 'r', 'normalized', ['i'], 1667)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizedictionary i++
induction variable: ['i']
{
L1668: (dictionary[i],r) 
L1669: (dictionary[i],r) 
L1670: (results[nbElements]=,w) 
L1671: (results[nbElements-1]=,w) (dictionary[i],r) 
}
array table
-----------------------------------------------
results -> [('[nbElements]', 'w', 'not normalized', ['i'], 1670), ('[nbElements-1]', 'w', 'not normalized', ['i'], 1671)]
LDEs formed:3

dictionary -> [('[i]', 'r', 'normalized', ['i'], 1668), ('[i]', 'r', 'normalized', ['i'], 1669), ('[i]', 'r', 'normalized', ['i'], 1671)]
LDEs formed:0

distinct LDEs:
nbElements=nbElements
nbElements-1=nbElements-1
nbElements=nbElements-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < xpathObj->nodesetval->nodeNr  i++
induction variable: ['i']
{
L1672: (nodeTab[i]-,r) 
L1673: (classpath[strlen(KEYWORDSCILAB)],r) 
}
array table
-----------------------------------------------
classpath -> [('[strlen(KEYWORDSCILAB)]', 'r', 'not normalized', ['i'], 1673)]
LDEs formed:0

nodeTab -> [('[i]', 'r', 'normalized', ['i'], 1672)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < xpathObj->nodesetval->nodeNr  i++
induction variable: ['i']
{
L1673: (nodeTab[i]-,r) 
L1674: (libraryPath[strlen(KEYWORDSCILAB)],r) 
}
array table
-----------------------------------------------
nodeTab -> [('[i]', 'r', 'normalized', ['i'], 1673)]
LDEs formed:0

libraryPath -> [('[strlen(KEYWORDSCILAB)]', 'r', 'not normalized', ['i'], 1674)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<*sizeClasspathArray i++
induction variable: ['i']
{
L1675: (str[0]==,r) (str[1],r) 
L1676: (ClasspathArray[i]=,w) 
}
array table
-----------------------------------------------
ClasspathArray -> [('[i]', 'w', 'normalized', ['i'], 1676)]
LDEs formed:1

str -> [('[0]', 'r', 'normalized', ['i'], 1675), ('[1]', 'r', 'normalized', ['i'], 1675)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nOptions  j++
induction variable: ['j']
{
L1676: (jvm_options[j].optionString,r) 
L1677: (jvm_options[j].optionString,r) 
L1678: (jvm_options[j].optionString=,w) 
}
array table
-----------------------------------------------
jvm_options -> [('[j]', 'r', 'normalized', ['j'], 1676), ('[j]', 'r', 'normalized', ['j'], 1677), ('[j]', 'w', 'normalized', ['j'], 1678)]
LDEs formed:3

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < vm_args.nOptions  j++
induction variable: ['j']
{
L1679: (vm_args.options[j],r) 
}
array table
-----------------------------------------------
vm_args.options -> [('[j]', 'r', 'normalized', ['j'], 1679)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < xpathObj->nodesetval->nodeNr  i++
induction variable: ['i']
{
L1680: (nodeTab[i]-,r) 
L1681: (classpath[strlen(KEYWORDSCILAB)],r) 
}
array table
-----------------------------------------------
classpath -> [('[strlen(KEYWORDSCILAB)]', 'r', 'not normalized', ['i'], 1681)]
LDEs formed:0

nodeTab -> [('[i]', 'r', 'normalized', ['i'], 1680)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < xpathObj->nodesetval->nodeNr  i++
induction variable: ['i']
{
L1681: (nodeTab[i]-,r) 
L1682: (jvm_options[indice].optionString=,w) 
}
array table
-----------------------------------------------
jvm_options -> [('[indice]', 'w', 'not normalized', ['i'], 1682)]
LDEs formed:1

nodeTab -> [('[i]', 'r', 'normalized', ['i'], 1681)]
LDEs formed:0

distinct LDEs:
indice=indice
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<*sizeLibrarypathArray i++
induction variable: ['i']
{
L1682: (LibrarypathArray[i]=,w) 
}
array table
-----------------------------------------------
LibrarypathArray -> [('[i]', 'w', 'normalized', ['i'], 1682)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1 * n1  i++
induction variable: ['i']
{
L1683: (pStVarOne[i]=,w) (lenStVarOne[i]+,r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'w', 'normalized', ['i'], 1683)]
LDEs formed:1

lenStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1683)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<m1*n1  i++
induction variable: ['i']
{
L1684: (pStVarOne[i],r) 
L1685: (pStVarOne[i],r) 
}
array table
-----------------------------------------------
pStVarOne -> [('[i]', 'r', 'normalized', ['i'], 1684), ('[i]', 'r', 'normalized', ['i'], 1685)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<m1*n1  i++
induction variable: ['i']
{
L1686: (libraryPaths[i],r) 
L1687: (libraryPaths[i],r) 
}
array table
-----------------------------------------------
libraryPaths -> [('[i]', 'r', 'normalized', ['i'], 1686), ('[i]', 'r', 'normalized', ['i'], 1687)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < NumberOfCharsets  i++
induction variable: ['i']
{
L1688: (CHARSETS[i],r) 
L1689: (CHARSETS[i],r) 
}
array table
-----------------------------------------------
CHARSETS -> [('[i]', 'r', 'normalized', ['i'], 1688), ('[i]', 'r', 'normalized', ['i'], 1689)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NumberLanguages  i++
induction variable: ['i']
{
L1690: (LANGUAGE_COUNTRY_TAB[i].code==,r) 
L1691: (LANGUAGE_COUNTRY_TAB[i].alphacode,r) 
}
array table
-----------------------------------------------
LANGUAGE_COUNTRY_TAB -> [('[i]', 'r', 'normalized', ['i'], 1690), ('[i]', 'r', 'normalized', ['i'], 1691)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NumberLanguages  i++
induction variable: ['i']
{
L1692: (LANGUAGE_COUNTRY_TAB[i].alphacode,r) 
}
array table
-----------------------------------------------
LANGUAGE_COUNTRY_TAB -> [('[i]', 'r', 'normalized', ['i'], 1692)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NumberLanguages  i++
induction variable: ['i']
{
L1693: (LANGUAGE_COUNTRY_TAB[i].alphacode,r) 
L1694: (LANGUAGE_COUNTRY_TAB[i].code,r) 
}
array table
-----------------------------------------------
LANGUAGE_COUNTRY_TAB -> [('[i]', 'r', 'normalized', ['i'], 1693), ('[i]', 'r', 'normalized', ['i'], 1694)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NumberLanguagesAlias  i++
induction variable: ['i']
{
L1695: (LANGUAGE_LOCALE_ALIAS[i].alphacode,r) 
L1696: (LANGUAGE_LOCALE_ALIAS[i].alias,r) 
}
array table
-----------------------------------------------
LANGUAGE_LOCALE_ALIAS -> [('[i]', 'r', 'normalized', ['i'], 1695), ('[i]', 'r', 'normalized', ['i'], 1696)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NumberLanguagesAlias  i++
induction variable: ['i']
{
L1697: (LANGUAGE_LOCALE_ALIAS[i].alias,r) 
L1698: (LANGUAGE_LOCALE_ALIAS[i].alphacode,r) 
}
array table
-----------------------------------------------
LANGUAGE_LOCALE_ALIAS -> [('[i]', 'r', 'normalized', ['i'], 1697), ('[i]', 'r', 'normalized', ['i'], 1698)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < tableIN->tablelength  i++
induction variable: ['i']
{
L1699: (table[i],r) 
L1700: (return_entries[j]=,w) 
L1701: (return_entries[j],r) (return_entries[j],r) 
}
array table
-----------------------------------------------
table -> [('[i]', 'r', 'normalized', ['i'], 1699)]
LDEs formed:0

return_entries -> [('[j]', 'w', 'not normalized', ['i'], 1700), ('[j]', 'r', 'not normalized', ['i'], 1701), ('[j]', 'r', 'not normalized', ['i'], 1701)]
LDEs formed:3

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < tableIN->tablelength  i++
induction variable: ['i']
{
L1702: (table[i],r) 
L1703: (return_entries[j]=,w) 
L1704: (return_entries[j],r) (return_entries[j],r) 
}
array table
-----------------------------------------------
table -> [('[i]', 'r', 'normalized', ['i'], 1702)]
LDEs formed:0

return_entries -> [('[j]', 'w', 'not normalized', ['i'], 1703), ('[j]', 'r', 'not normalized', ['i'], 1704), ('[j]', 'r', 'not normalized', ['i'], 1704)]
LDEs formed:3

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < tableIN->tablelength  i++
induction variable: ['i']
{
L1705: (table[i],r) 
L1706: (return_entries[j]=,w) 
L1707: (return_entries[j],r) (return_entries[j],r) 
}
array table
-----------------------------------------------
table -> [('[i]', 'r', 'normalized', ['i'], 1705)]
LDEs formed:0

return_entries -> [('[j]', 'w', 'not normalized', ['i'], 1706), ('[j]', 'r', 'not normalized', ['i'], 1707), ('[j]', 'r', 'not normalized', ['i'], 1707)]
LDEs formed:3

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m * n  i++
induction variable: ['i']
{
L1708: (StringsToTranslate[i],r) 
L1709: (TranslatedStrings[i]=,w) 
L1710: (TranslatedStrings[i]=,w) (StringsToTranslate[i],r) 
}
array table
-----------------------------------------------
StringsToTranslate -> [('[i]', 'r', 'normalized', ['i'], 1708), ('[i]', 'r', 'normalized', ['i'], 1710)]
LDEs formed:0

TranslatedStrings -> [('[i]', 'w', 'normalized', ['i'], 1709), ('[i]', 'w', 'normalized', ['i'], 1710)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m * n  i++
induction variable: ['i']
{
L1711: (stringsToTranslate[i],r) 
L1712: (TranslatedStrings[i]=,w) 
L1713: (TranslatedStrings[i]=,w) (stringsToTranslate[i],r) 
}
array table
-----------------------------------------------
stringsToTranslate -> [('[i]', 'r', 'normalized', ['i'], 1711), ('[i]', 'r', 'normalized', ['i'], 1713)]
LDEs formed:0

TranslatedStrings -> [('[i]', 'w', 'normalized', ['i'], 1712), ('[i]', 'w', 'normalized', ['i'], 1713)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<NumberLanguages i++
induction variable: ['i']
{
L1714: (LANGUAGE_COUNTRY_TAB[i].alphacode,r) 
L1715: (LANGUAGE_COUNTRY_TAB[i].alphacode,r) 
L1716: (LANGUAGE_COUNTRY_TAB[i].languagedescription,r) 
L1717: (LANGUAGE_COUNTRY_TAB[i].languagedescription,r) 
L1718: (Output[i]=,w) 
L1719: (Output[NumberLanguages+i]=,w) 
}
array table
-----------------------------------------------
LANGUAGE_COUNTRY_TAB -> [('[i]', 'r', 'normalized', ['i'], 1714), ('[i]', 'r', 'normalized', ['i'], 1715), ('[i]', 'r', 'normalized', ['i'], 1716), ('[i]', 'r', 'normalized', ['i'], 1717)]
LDEs formed:0

Output -> [('[i]', 'w', 'normalized', ['i'], 1718), ('[NumberLanguages+i]', 'w', 'not normalized', ['i'], 1719)]
LDEs formed:3

distinct LDEs:
i1=NumberLanguages+i2
NumberLanguages+i1=NumberLanguages+i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<NumberLanguages i++
induction variable: ['i']
{
L1720: (Output[i],r) 
L1721: (Output[i]=,w) 
L1722: (Output[NumberLanguages+i],r) 
L1723: (Output[NumberLanguages+i]=,w) 
}
array table
-----------------------------------------------
Output -> [('[i]', 'r', 'normalized', ['i'], 1720), ('[i]', 'w', 'normalized', ['i'], 1721), ('[NumberLanguages+i]', 'r', 'not normalized', ['i'], 1722), ('[NumberLanguages+i]', 'w', 'not normalized', ['i'], 1723)]
LDEs formed:7

distinct LDEs:
i1=NumberLanguages+i2
NumberLanguages+i1=NumberLanguages+i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= nblk  ++i
induction variable: ['i']
{
L1724: (funtyp[i],r) 
L1725: (funtyp[i]%=,w) 
L1726: (funtyp[i]=,w) (funtyp[i]%,r) 
L1727: (inpptr[i + 1]-,r) (inpptr[i],r) 
L1728: (outptr[i + 1]-,r) (outptr[i],r) 
L1729: (funtyp[i]==,r) 
L1730: (funtyp[i]==,r) (funtyp[i]==,r) 
L1731: (funtyp[i]==,r) 
	loop info: j = 1  j <= ni  ++j
	induction variable: ['i', 'j']
			{
			L1732: (inpptr[i]-,r) 
			L1733: (outtbsz[k - 1]*,r) (outtbsz[(k - 1) + nlnk],r) 
			}
	loop info: j = 1  j <= no  ++j
	induction variable: ['i', 'j']
			{
			L1734: (outptr[i]-,r) 
			L1735: (outtbsz[k - 1]*,r) (outtbsz[(k - 1) + nlnk],r) 
			}
 }
array table
-----------------------------------------------
outptr -> [('[i + 1]', 'r', 'normalized', ['i', 'j'], 1728), ('[i]', 'r', 'normalized', ['i', 'j'], 1728), ('[i]', 'r', 'normalized', ['i', 'j'], 1734)]
LDEs formed:0

outtbsz -> [('[k - 1]', 'r', 'not normalized', ['i', 'j'], 1733), ('[(k - 1) + nlnk]', 'r', 'not normalized', ['i', 'j'], 1733), ('[k - 1]', 'r', 'not normalized', ['i', 'j'], 1735), ('[(k - 1) + nlnk]', 'r', 'not normalized', ['i', 'j'], 1735)]
LDEs formed:0

funtyp -> [('[i]', 'r', 'normalized', ['i', 'j'], 1724), ('[i]', 'w', 'normalized', ['i', 'j'], 1725), ('[i]', 'w', 'normalized', ['i', 'j'], 1726), ('[i]', 'r', 'normalized', ['i', 'j'], 1726), ('[i]', 'r', 'normalized', ['i', 'j'], 1729), ('[i]', 'r', 'normalized', ['i', 'j'], 1730), ('[i]', 'r', 'normalized', ['i', 'j'], 1730), ('[i]', 'r', 'normalized', ['i', 'j'], 1731)]
LDEs formed:15

inpptr -> [('[i + 1]', 'r', 'normalized', ['i', 'j'], 1727), ('[i]', 'r', 'normalized', ['i', 'j'], 1727), ('[i]', 'r', 'normalized', ['i', 'j'], 1732)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nx  i++
induction variable: ['i']
{
L1733: (xprop[i]=,w) 
}
array table
-----------------------------------------------
xprop -> [('[i]', 'w', 'normalized', ['i'], 1733)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kf = 0  kf < nblk  ++kf
induction variable: ['kf']
{
L1734: (funptr[kf],r) 
L1735: (Blocks[kf].type=,w) (funtyp[kf + 1],r) 
L1736: (funtyp[kf + 1],r) 
L1737: (Blocks[kf].funpt=,w) 
L1738: (Blocks[kf].funpt=,w) 
L1739: (Blocks[kf].type=,w) 
L1740: (Blocks[kf].funpt=,w) 
L1741: (Blocks[kf].type=,w) 
L1742: (Blocks[kf].funpt=,w) 
L1743: (Blocks[kf].funpt=,w) 
L1744: (Blocks[kf].type=,w) 
L1745: (Blocks[kf].scsptr=,w) 
L1746: (Blocks[kf].funpt=,w) (tabsim[i - 1].fonc,r) 
L1747: (Blocks[kf].scsptr=,w) 
L1748: (Blocks[kf].funpt,r) 
L1749: (Blocks[kf].funpt==,r) 
L1750: (Blocks[kf].scsptr=,w) 
L1751: (Blocks[kf].ztyp=,w) (ztyp[kf + 1],r) 
L1752: (Blocks[kf].nx=,w) (xptr[kf + 2]-,r) (xptr[kf + 1],r) 
L1753: (Blocks[kf].ng=,w) (zcptr[kf + 2]-,r) (zcptr[kf + 1],r) 
L1754: (Blocks[kf].nz=,w) (zptr[kf + 2]-,r) (zptr[kf + 1],r) 
L1755: (Blocks[kf].noz=,w) (ozptr[kf + 2]-,r) (ozptr[kf + 1],r) 
L1756: (Blocks[kf].nrpar=,w) (rpptr[kf + 2]-,r) (rpptr[kf + 1],r) 
L1757: (Blocks[kf].nipar=,w) (ipptr[kf + 2]-,r) (ipptr[kf + 1],r) 
L1758: (Blocks[kf].nopar=,w) (opptr[kf + 2]-,r) (opptr[kf + 1],r) 
L1759: (Blocks[kf].nin=,w) (inpptr[kf + 2]-,r) (inpptr[kf + 1],r) 
L1760: (Blocks[kf].nout=,w) (outptr[kf + 2]-,r) (outptr[kf + 1],r) 
L1761: (Blocks[kf].insz=,w) 
L1762: (Blocks[kf].inptr=,w) 
L1763: (Blocks[kf].nin,r) 
L1764: (Blocks[kf].insz=,w) (Blocks[kf].nin*,r) 
L1765: (Blocks[kf].inptr=,w) (Blocks[kf].nin*,r) 
	loop info: in = 0  in < Blocks[kf].nin  in++
	induction variable: ['kf', 'in']
	{
	L1766: (inpptr[kf + 1]+,r) 
	L1767: (Blocks[kf].inptr,r) (outtbptr[lprt - 1],r) 
	L1768: (Blocks[kf].insz,r) (outtbsz[lprt - 1],r) 
	L1769: (Blocks[kf].insz,r) (Blocks[kf].nin+,r) (outtbsz[(lprt - 1) + nlnk],r) 
	L1770: (Blocks[kf].insz,r) (Blocks[kf].nin+,r) (outtbtyp[lprt - 1],r) 
	}
L1771: (Blocks[kf].outsz=,w) 
L1772: (Blocks[kf].outptr=,w) 
L1773: (Blocks[kf].nout,r) 
L1774: (Blocks[kf].outsz=,w) (Blocks[kf].nout*,r) 
L1775: (Blocks[kf].outptr=,w) (Blocks[kf].nout*,r) 
	loop info: out = 0  out < Blocks[kf].nout  out++
	induction variable: ['kf', 'in', 'out']
	{
	L1776: (outptr[kf + 1]+,r) 
	L1777: (Blocks[kf].outptr,r) (outtbptr[lprt - 1],r) 
	L1778: (Blocks[kf].outsz,r) (outtbsz[lprt - 1],r) 
	L1779: (Blocks[kf].outsz,r) (Blocks[kf].nout+,r) (outtbsz[(lprt - 1) + nlnk],r) 
	L1780: (Blocks[kf].outsz,r) (Blocks[kf].nout+,r) (outtbtyp[lprt - 1],r) 
	}
L1781: (Blocks[kf].evout=,w) 
L1782: (Blocks[kf].nevout=,w) (clkptr[kf + 2]-,r) (clkptr[kf + 1],r) 
L1783: (Blocks[kf].nevout,r) 
L1784: (Blocks[kf].evout=,w) (Blocks[kf].nevout,r) 
L1785: (Blocks[kf].z=,w) (zptr[kf + 1]-,r) 
L1786: (Blocks[kf].ozsz=,w) 
L1787: (Blocks[kf].noz==,r) 
L1788: (Blocks[kf].ozptr=,w) 
L1789: (Blocks[kf].oztyp=,w) 
L1790: (Blocks[kf].ozptr=,w) (ozptr[kf + 1]-,r) 
L1791: (Blocks[kf].ozsz=,w) (Blocks[kf].noz*,r) 
	loop info: i = 0  i < Blocks[kf].noz  i++
	induction variable: ['kf', 'in', 'out', 'i']
		{
		L1792: (Blocks[kf].ozsz,r) (ozptr[kf + 1]-,r) 
		L1793: (Blocks[kf].ozsz,r) (Blocks[kf].noz,r) (ozptr[kf + 1]-,r) 
		}
L1794: (Blocks[kf].oztyp=,w) (ozptr[kf + 1]-,r) 
L1795: (Blocks[kf].rpar=,w) (rpptr[kf + 1]-,r) 
L1796: (Blocks[kf].ipar=,w) (ipptr[kf + 1]-,r) 
L1797: (Blocks[kf].oparsz=,w) 
L1798: (Blocks[kf].nopar==,r) 
L1799: (Blocks[kf].oparptr=,w) 
L1800: (Blocks[kf].opartyp=,w) 
L1801: (Blocks[kf].oparptr=,w) (opptr[kf + 1]-,r) 
L1802: (Blocks[kf].oparsz=,w) (Blocks[kf].nopar*,r) 
	loop info: i = 0  i < Blocks[kf].nopar  i++
	induction variable: ['kf', 'in', 'out', 'i']
		{
		L1803: (Blocks[kf].oparsz,r) (opptr[kf + 1]-,r) 
		L1804: (Blocks[kf].oparsz,r) (Blocks[kf].nopar,r) (opptr[kf + 1]-,r) 
		}
L1805: (Blocks[kf].opartyp=,w) (opptr[kf + 1]-,r) 
L1806: (Blocks[kf].res=,w) 
L1807: (Blocks[kf].nx,r) 
L1808: (Blocks[kf].res=,w) (Blocks[kf].nx*,r) 
L1809: (izptr[kf + 2]-,r) (izptr[kf + 1],r) 
L1810: (Blocks[kf].label=,w) 
L1811: (Blocks[kf].label,r) 
L1812: (izptr[kf + 1]-,r) (Blocks[kf].label,r) 
L1813: (Blocks[kf].jroot=,w) 
L1814: (Blocks[kf].ng,r) 
L1815: (Blocks[kf].jroot=,w) (Blocks[kf].ng,r) 
L1816: (Blocks[kf].work=,w) 
L1817: (Blocks[kf].nmode=,w) (modptr[kf + 2]-,r) (modptr[kf + 1],r) 
L1818: (Blocks[kf].nmode,r) 
L1819: (Blocks[kf].mode=,w) (modptr[kf + 1]-,r) 
L1820: (Blocks[kf].xprop=,w) 
L1821: (Blocks[kf].nx,r) 
L1822: (Blocks[kf].xprop=,w) (xptr[kf + 1]-,r) 
L1823: (Blocks[kf].g=,w) 
L1824: (Blocks[kf].ng,r) 
L1825: (Blocks[kf].g=,w) (zcptr[kf + 1]-,r) 
}
array table
-----------------------------------------------
rpptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1756), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1756), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1795)]
LDEs formed:0

xptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1752), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1752), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1822)]
LDEs formed:0

Blocks -> [('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1735), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1737), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1738), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1739), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1740), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1741), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1742), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1743), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1744), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1745), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1746), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1747), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1748), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1749), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1750), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1751), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1752), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1753), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1754), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1755), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1756), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1757), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1758), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1759), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1760), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1761), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1762), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1763), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1764), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1764), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1765), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1765), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1767), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1768), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1769), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1769), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1770), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1770), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1771), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1772), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1773), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1774), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1774), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1775), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1775), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1777), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1778), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1779), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1779), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1780), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1780), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1781), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1782), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1783), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1784), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1784), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1785), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1786), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1787), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1788), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1789), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1790), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1791), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1791), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1792), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1793), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1793), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1794), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1795), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1796), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1797), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1798), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1799), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1800), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1801), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1802), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1802), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1803), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1804), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1804), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1805), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1806), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1807), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1808), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1808), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1810), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1811), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1812), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1813), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1814), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1815), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1815), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1816), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1817), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1818), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1819), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1820), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1821), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1822), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1823), ('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1824), ('[kf]', 'w', 'normalized', ['kf', 'in', 'out', 'i'], 1825)]
LDEs formed:4392

ztyp -> [('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1751)]
LDEs formed:0

outptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1760), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1760), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1776)]
LDEs formed:0

modptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1817), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1817), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1819)]
LDEs formed:0

tabsim -> [('[i - 1]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1746)]
LDEs formed:0

ipptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1757), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1757), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1796)]
LDEs formed:0

izptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1809), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1809), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1812)]
LDEs formed:0

funptr -> [('[kf]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1734)]
LDEs formed:0

opptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1758), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1758), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1801), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1803), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1804), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1805)]
LDEs formed:0

funtyp -> [('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1735), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1736)]
LDEs formed:0

outtbtyp -> [('[lprt - 1]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1770), ('[lprt - 1]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1780)]
LDEs formed:0

ozptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1755), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1755), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1790), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1792), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1793), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1794)]
LDEs formed:0

outtbptr -> [('[lprt - 1]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1767), ('[lprt - 1]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1777)]
LDEs formed:0

zcptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1753), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1753), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1825)]
LDEs formed:0

zptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1754), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1754), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1785)]
LDEs formed:0

inpptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1759), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1759), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1766)]
LDEs formed:0

clkptr -> [('[kf + 2]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1782), ('[kf + 1]', 'r', 'normalized', ['kf', 'in', 'out', 'i'], 1782)]
LDEs formed:0

outtbsz -> [('[lprt - 1]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1768), ('[(lprt - 1) + nlnk]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1769), ('[lprt - 1]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1778), ('[(lprt - 1) + nlnk]', 'r', 'not normalized', ['kf', 'in', 'out', 'i'], 1779)]
LDEs formed:0

distinct LDEs:
kf1=kf2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kf = 0  kf < nblk  ++kf
induction variable: ['kf']
{
L1780: (Blocks[kf].work,r) 
}
array table
-----------------------------------------------
Blocks -> [('[kf]', 'r', 'normalized', ['kf'], 1780)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nx  ++i
induction variable: ['i']
{
L1781: (x[i]=,w) (W[i],r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'w', 'normalized', ['i'], 1781)]
LDEs formed:1

W -> [('[i]', 'r', 'normalized', ['i'], 1781)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ii = 0  ii < nlnk  ii++
induction variable: ['ii']
{
L1782: (outtbtyp[ii],r) 
L1783: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
L1784: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
L1785: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
L1786: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
L1787: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
L1788: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
L1789: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
L1790: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
}
array table
-----------------------------------------------
outtbsz -> [('[ii]', 'r', 'normalized', ['ii'], 1783), ('[ii + nlnk]', 'r', 'not normalized', ['ii'], 1783), ('[ii]', 'r', 'normalized', ['ii'], 1784), ('[ii + nlnk]', 'r', 'not normalized', ['ii'], 1784), ('[ii]', 'r', 'normalized', ['ii'], 1785), ('[ii + nlnk]', 'r', 'not normalized', ['ii'], 1785), ('[ii]', 'r', 'normalized', ['ii'], 1786), ('[ii + nlnk]', 'r', 'not normalized', ['ii'], 1786), ('[ii]', 'r', 'normalized', ['ii'], 1787), ('[ii + nlnk]', 'r', 'not normalized', ['ii'], 1787), ('[ii]', 'r', 'normalized', ['ii'], 1788), ('[ii + nlnk]', 'r', 'not normalized', ['ii'], 1788), ('[ii]', 'r', 'normalized', ['ii'], 1789), ('[ii + nlnk]', 'r', 'not normalized', ['ii'], 1789), ('[ii]', 'r', 'normalized', ['ii'], 1790), ('[ii + nlnk]', 'r', 'not normalized', ['ii'], 1790)]
LDEs formed:0

outtbtyp -> [('[ii]', 'r', 'normalized', ['ii'], 1782)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: C2F(curblk).kfun = 1  C2F(curblk).kfun <= nblk  ++C2F(curblk
induction variable: ['C2F']
{
L1783: (Blocks[C2F(curblk).kfun - 1].nx,r) 
L1784: (Blocks[C2F(curblk).kfun - 1].x=,w) (xptr[C2F(curblk).kfun]-,r) 
L1785: (Blocks[C2F(curblk).kfun - 1].xd=,w) (xptr[C2F(curblk).kfun]-,r) 
L1786: (Blocks[C2F(curblk).kfun - 1].nevprt=,w) 
L1787: (funtyp[C2F(curblk).kfun],r) 
L1788: (Blocks[C2F(curblk).kfun - 1],r) 
}
array table
-----------------------------------------------
funtyp -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['C2F'], 1787)]
LDEs formed:0

xptr -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['C2F'], 1784), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['C2F'], 1785)]
LDEs formed:0

Blocks -> [('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['C2F'], 1783), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['C2F'], 1784), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['C2F'], 1785), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['C2F'], 1786), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['C2F'], 1788)]
LDEs formed:12

distinct LDEs:
C2F1(curblk).kfun - 1=C2F2(curblk).kfun - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 1  jj <= ncord  ++jj
induction variable: ['jj']
{
L1789: (cord[jj],r) 
L1790: (Blocks[C2F(curblk).kfun - 1].nevprt=,w) 
L1791: (funtyp[C2F(curblk).kfun],r) 
L1792: (Blocks[C2F(curblk).kfun - 1],r) 
}
array table
-----------------------------------------------
cord -> [('[jj]', 'r', 'normalized', ['jj'], 1789)]
LDEs formed:0

funtyp -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj'], 1791)]
LDEs formed:0

Blocks -> [('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj'], 1790), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj'], 1792)]
LDEs formed:2

distinct LDEs:
C2F(curblk).kfun - 1=C2F(curblk).kfun - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= nblk + 1  ++i
induction variable: ['i']
{
	loop info: C2F(curblk).kfun = 1  C2F(curblk).kfun <= nblk  ++C2F(curblk
	induction variable: ['i', 'C2F']
	{
	L1793: (Blocks[C2F(curblk).kfun - 1].nevprt=,w) 
	L1794: (funtyp[C2F(curblk).kfun],r) 
	L1795: (Blocks[C2F(curblk).kfun - 1],r) 
	}
	loop info: jj = 1  jj <= ncord  ++jj
	induction variable: ['i', 'C2F', 'jj']
	{
	L1796: (cord[jj],r) 
	L1797: (funtyp[C2F(curblk).kfun],r) 
	L1798: (Blocks[C2F(curblk).kfun - 1],r) 
	}
	loop info: jj = 0  jj < nlnk  jj++
	induction variable: ['i', 'C2F', 'jj']
	{
	L1799: (outtbtyp[jj],r) 
	L1800: (outtbptr[jj],r) 
	L1801: (outtbsz[jj]*,r) (outtbsz[jj + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk']
			{
			L1802: (outtbdptr[kk],r) (outtbd[curouttbd + kk],r) 
			}
	L1803: (outtbptr[jj],r) 
	L1804: (outtbsz[jj]*,r) (outtbsz[jj + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk']
			{
			L1805: (outtbdptr[kk],r) (outtbd[curouttbd + kk],r) 
			}
	L1806: (outtbptr[jj],r) 
	L1807: (outtbsz[jj]*,r) (outtbsz[jj + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk']
			{
			L1808: (outtbcptr[kk],r) (outtbc[curouttbc + kk],r) 
			}
	L1809: (outtbptr[jj],r) 
	L1810: (outtbsz[jj]*,r) (outtbsz[jj + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk']
			{
			L1811: (outtbsptr[kk],r) (outtbs[curouttbs + kk],r) 
			}
	L1812: (outtbptr[jj],r) 
	L1813: (outtbsz[jj]*,r) (outtbsz[jj + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk']
			{
			L1814: (outtblptr[kk],r) (outtbl[curouttbl + kk],r) 
			}
	L1815: (outtbptr[jj],r) 
	L1816: (outtbsz[jj]*,r) (outtbsz[jj + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk']
			{
			L1817: (outtbucptr[kk],r) (outtbuc[curouttbuc + kk],r) 
			}
	L1818: (outtbptr[jj],r) 
	L1819: (outtbsz[jj]*,r) (outtbsz[jj + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk']
			{
			L1820: (outtbusptr[kk],r) (outtbus[curouttbus + kk],r) 
			}
	L1821: (outtbptr[jj],r) 
	L1822: (outtbsz[jj]*,r) (outtbsz[jj + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk']
			{
			L1823: (outtbulptr[kk],r) (outtbul[curouttbul + kk],r) 
			}
 	}
	loop info: ii = 0  ii < nlnk  ii++
	induction variable: ['i', 'C2F', 'jj', 'kk', 'ii']
	{
	L1824: (outtbtyp[ii],r) 
	L1825: (outtbptr[ii],r) 
	L1826: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
	L1827: (outtbd[curouttbd],r) 
	L1828: (outtbptr[ii],r) 
	L1829: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
	L1830: (outtbd[curouttbd],r) 
	L1831: (outtbptr[ii],r) 
	L1832: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk', 'ii']
			}
	L1833: (outtbptr[ii],r) 
	L1834: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk', 'ii']
			}
	L1835: (outtbptr[ii],r) 
	L1836: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk', 'ii']
			}
	L1837: (outtbptr[ii],r) 
	L1838: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk', 'ii']
			}
	L1839: (outtbptr[ii],r) 
	L1840: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk', 'ii']
			}
	L1841: (outtbptr[ii],r) 
	L1842: (outtbsz[ii]*,r) (outtbsz[ii + nlnk],r) 
		loop info: kk = 0  kk < sszz  kk++
		induction variable: ['i', 'C2F', 'jj', 'kk', 'ii']
			}
 	}
 }
array table
-----------------------------------------------
cord -> [('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1796)]
LDEs formed:0

outtbcptr -> [('[kk]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1808)]
LDEs formed:0

outtbsz -> [('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1801), ('[jj + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1801), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1804), ('[jj + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1804), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1807), ('[jj + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1807), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1810), ('[jj + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1810), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1813), ('[jj + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1813), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1816), ('[jj + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1816), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1819), ('[jj + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1819), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1822), ('[jj + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1822), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1826), ('[ii + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1826), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1829), ('[ii + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1829), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1832), ('[ii + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1832), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1834), ('[ii + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1834), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1836), ('[ii + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1836), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1838), ('[ii + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1838), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1840), ('[ii + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1840), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1842), ('[ii + nlnk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1842)]
LDEs formed:0

outtbc -> [('[curouttbc + kk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1808)]
LDEs formed:0

Blocks -> [('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1793), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1795), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1798)]
LDEs formed:3

outtblptr -> [('[kk]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1814)]
LDEs formed:0

outtbul -> [('[curouttbul + kk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1823)]
LDEs formed:0

outtbl -> [('[curouttbl + kk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1814)]
LDEs formed:0

outtbd -> [('[curouttbd + kk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1802), ('[curouttbd + kk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1805), ('[curouttbd]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1827), ('[curouttbd]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1830)]
LDEs formed:0

outtbusptr -> [('[kk]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1820)]
LDEs formed:0

outtbus -> [('[curouttbus + kk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1820)]
LDEs formed:0

outtbsptr -> [('[kk]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1811)]
LDEs formed:0

outtbucptr -> [('[kk]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1817)]
LDEs formed:0

outtbs -> [('[curouttbs + kk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1811)]
LDEs formed:0

funtyp -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1794), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1797)]
LDEs formed:0

outtbtyp -> [('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1799), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1824)]
LDEs formed:0

outtbptr -> [('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1800), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1803), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1806), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1809), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1812), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1815), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1818), ('[jj]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1821), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1825), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1828), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1831), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1833), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1835), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1837), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1839), ('[ii]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1841)]
LDEs formed:0

outtbdptr -> [('[kk]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1802), ('[kk]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1805)]
LDEs formed:0

outtbulptr -> [('[kk]', 'r', 'normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1823)]
LDEs formed:0

outtbuc -> [('[curouttbuc + kk]', 'r', 'not normalized', ['i', 'C2F', 'jj', 'kk', 'ii'], 1817)]
LDEs formed:0

distinct LDEs:
C2F1(curblk).kfun - 1=C2F2(curblk).kfun - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: C2F(curblk).kfun = 1  C2F(curblk).kfun <= nblk  ++C2F(curblk
induction variable: ['C2F']
{
L1818: (Blocks[C2F(curblk).kfun - 1].ng,r) 
L1819: (zcros[jj]=,w) 
}
array table
-----------------------------------------------
Blocks -> [('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['C2F'], 1818)]
LDEs formed:0

zcros -> [('[jj]', 'w', 'not normalized', ['C2F'], 1819)]
LDEs formed:1

distinct LDEs:
jj=jj
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < ng  ++jj
induction variable: ['jj']
{
L1820: (g[jj],r) (jroot[jj]==,r) 
L1821: (jroot[jj]=,w) 
L1822: (g[jj],r) (jroot[jj]==,r) 
L1823: (jroot[jj]=,w) 
L1824: (jroot[jj]=,w) 
}
array table
-----------------------------------------------
jroot -> [('[jj]', 'r', 'normalized', ['jj'], 1820), ('[jj]', 'w', 'normalized', ['jj'], 1821), ('[jj]', 'r', 'normalized', ['jj'], 1822), ('[jj]', 'w', 'normalized', ['jj'], 1823), ('[jj]', 'w', 'normalized', ['jj'], 1824)]
LDEs formed:12

g -> [('[jj]', 'r', 'normalized', ['jj'], 1820), ('[jj]', 'r', 'normalized', ['jj'], 1822)]
LDEs formed:0

distinct LDEs:
jj1=jj2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < ng  ++jj
induction variable: ['jj']
{
L1823: (zcros[ jj],r) 
L1824: (zcptr[C2F(curblk).kfun]-,r) 
L1825: (zcptr[C2F(curblk).kfun + 1]-,r) 
L1826: (jroot[j],r) 
L1827: (Blocks[C2F(curblk).kfun - 1].jroot=,w) (zcptr[C2F(curblk).kfun]-,r) 
L1828: (funtyp[C2F(curblk).kfun],r) 
L1829: (Blocks[C2F(curblk).kfun - 1].nevout,r) 
L1830: (Blocks[C2F(curblk).kfun - 1].nx,r) 
L1831: (Blocks[C2F(curblk).kfun - 1].x=,w) (xptr[C2F(curblk).kfun]-,r) 
L1832: (Blocks[C2F(curblk).kfun - 1].xd=,w) (xptr[C2F(curblk).kfun]-,r) 
L1833: (Blocks[C2F(curblk).kfun - 1].nevprt=,w) 
L1834: (Blocks[C2F(curblk).kfun - 1],r) 
	loop info: k = 0  k < Blocks[C2F(curblk).kfun - 1].nevout  ++k
	induction variable: ['jj', 'k']
				{
				L1835: (Blocks[C2F(curblk).kfun - 1].evout,r) 
				L1836: (clkptr[C2F(curblk).kfun],r) 
				L1837: (Blocks[C2F(curblk).kfun - 1].evout,r) 
				}
L1838: (Blocks[C2F(curblk).kfun - 1].nx,r) 
L1839: (Blocks[C2F(curblk).kfun - 1].x=,w) (xptr[C2F(curblk).kfun]-,r) 
L1840: (Blocks[C2F(curblk).kfun - 1].xd=,w) (xptr[C2F(curblk).kfun]-,r) 
L1841: (Blocks[C2F(curblk).kfun - 1].nevprt=,w) 
L1842: (Blocks[C2F(curblk).kfun - 1],r) 
}
array table
-----------------------------------------------
xptr -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k'], 1831), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k'], 1832), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k'], 1839), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k'], 1840)]
LDEs formed:0

Blocks -> [('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k'], 1827), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k'], 1829), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k'], 1830), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k'], 1831), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k'], 1832), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k'], 1833), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k'], 1834), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k'], 1835), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k'], 1837), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k'], 1838), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k'], 1839), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k'], 1840), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k'], 1841), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k'], 1842)]
LDEs formed:77

zcros -> [('[ jj]', 'r', 'normalized', ['jj', 'k'], 1823)]
LDEs formed:0

funtyp -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k'], 1828)]
LDEs formed:0

zcptr -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k'], 1824), ('[C2F(curblk).kfun + 1]', 'r', 'not normalized', ['jj', 'k'], 1825), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k'], 1827)]
LDEs formed:0

jroot -> [('[j]', 'r', 'not normalized', ['jj', 'k'], 1826)]
LDEs formed:0

clkptr -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k'], 1836)]
LDEs formed:0

distinct LDEs:
C2F(curblk).kfun - 1=C2F(curblk).kfun - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < ng  ++jj
induction variable: ['jj']
{
L1837: (g[jj],r) 
L1838: (jroot[jj]=,w) 
L1839: (jroot[jj]=,w) 
}
array table
-----------------------------------------------
jroot -> [('[jj]', 'w', 'normalized', ['jj'], 1838), ('[jj]', 'w', 'normalized', ['jj'], 1839)]
LDEs formed:3

g -> [('[jj]', 'r', 'normalized', ['jj'], 1837)]
LDEs formed:0

distinct LDEs:
jj1=jj2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kev = 0  kev < nblk  kev++
induction variable: ['kev']
{
L1838: (Blocks[kev].nmode,r) 
L1839: (Blocks[kev].mode,r) 
}
array table
-----------------------------------------------
Blocks -> [('[kev]', 'r', 'normalized', ['kev'], 1838), ('[kev]', 'r', 'normalized', ['kev'], 1839)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: C2F(curblk).kfun = 1  C2F(curblk).kfun <= nblk  ++C2F(curblk
induction variable: ['C2F']
{
L1840: (Blocks[C2F(curblk).kfun - 1].ng,r) 
L1841: (zcros[jj]=,w) 
}
array table
-----------------------------------------------
Blocks -> [('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['C2F'], 1840)]
LDEs formed:0

zcros -> [('[jj]', 'w', 'not normalized', ['C2F'], 1841)]
LDEs formed:1

distinct LDEs:
jj=jj
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < *neq  jj++
induction variable: ['jj']
{
L1842: (xprop[jj]==,r) (scicos_xproperty[jj]=,w) 
L1843: (xprop[jj]==,r) (scicos_xproperty[jj]=,w) 
}
array table
-----------------------------------------------
scicos_xproperty -> [('[jj]', 'w', 'normalized', ['jj'], 1842), ('[jj]', 'w', 'normalized', ['jj'], 1843)]
LDEs formed:3

xprop -> [('[jj]', 'r', 'normalized', ['jj'], 1842), ('[jj]', 'r', 'normalized', ['jj'], 1843)]
LDEs formed:0

distinct LDEs:
jj1=jj2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < nmod  ++jj
induction variable: ['jj']
{
L1844: (Mode_save[jj]=,w) (mod[jj],r) 
}
array table
-----------------------------------------------
Mode_save -> [('[jj]', 'w', 'normalized', ['jj'], 1844)]
LDEs formed:1

mod -> [('[jj]', 'r', 'normalized', ['jj'], 1844)]
LDEs formed:0

distinct LDEs:
jj1=jj2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < nmod  ++jj
induction variable: ['jj']
{
L1845: (Mode_save[jj],r) (mod[jj],r) 
}
array table
-----------------------------------------------
Mode_save -> [('[jj]', 'r', 'normalized', ['jj'], 1845)]
LDEs formed:0

mod -> [('[jj]', 'r', 'normalized', ['jj'], 1845)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < ng  ++jj
induction variable: ['jj']
{
L1846: (g[jj],r) (jroot[jj]==,r) 
L1847: (jroot[jj]=,w) 
L1848: (g[jj],r) (jroot[jj]==,r) 
L1849: (jroot[jj]=,w) 
L1850: (jroot[jj]=,w) 
}
array table
-----------------------------------------------
jroot -> [('[jj]', 'r', 'normalized', ['jj'], 1846), ('[jj]', 'w', 'normalized', ['jj'], 1847), ('[jj]', 'r', 'normalized', ['jj'], 1848), ('[jj]', 'w', 'normalized', ['jj'], 1849), ('[jj]', 'w', 'normalized', ['jj'], 1850)]
LDEs formed:12

g -> [('[jj]', 'r', 'normalized', ['jj'], 1846), ('[jj]', 'r', 'normalized', ['jj'], 1848)]
LDEs formed:0

distinct LDEs:
jj1=jj2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < ng  ++jj
induction variable: ['jj']
{
L1849: (zcros[jj],r) 
L1850: (zcptr[C2F(curblk).kfun]-,r) 
L1851: (zcptr[C2F(curblk).kfun + 1]-,r) 
L1852: (jroot[j],r) 
L1853: (Blocks[C2F(curblk).kfun - 1].jroot=,w) (zcptr[C2F(curblk).kfun]-,r) 
L1854: (funtyp[C2F(curblk).kfun],r) 
L1855: (Blocks[C2F(curblk).kfun - 1].nevout,r) 
L1856: (Blocks[C2F(curblk).kfun - 1].nx,r) 
L1857: (Blocks[C2F(curblk).kfun - 1].x=,w) (xptr[C2F(curblk).kfun]-,r) 
L1858: (Blocks[C2F(curblk).kfun - 1].xd=,w) (xptr[C2F(curblk).kfun]-,r) 
L1859: (Blocks[C2F(curblk).kfun - 1].nevprt=,w) 
L1860: (Blocks[C2F(curblk).kfun - 1],r) 
	loop info: k = 0  k < Blocks[C2F(curblk).kfun - 1].nevout  ++k
	induction variable: ['jj', 'k']
				{
				L1861: (Blocks[C2F(curblk).kfun - 1].evout,r) 
				L1862: (clkptr[C2F(curblk).kfun],r) 
				L1863: (Blocks[C2F(curblk).kfun - 1].evout,r) 
				}
L1864: (Blocks[C2F(curblk).kfun - 1].nx,r) (Blocks[C2F(curblk).kfun - 1].work,r) 
L1865: (Blocks[C2F(curblk).kfun - 1].nx,r) 
L1866: (Blocks[C2F(curblk).kfun - 1].x=,w) (xptr[C2F(curblk).kfun]-,r) 
L1867: (Blocks[C2F(curblk).kfun - 1].xd=,w) (xptr[C2F(curblk).kfun]-,r) 
L1868: (Blocks[C2F(curblk).kfun - 1].nevprt=,w) 
L1869: (Blocks[C2F(curblk).kfun - 1].xprop=,w) (xptr[C2F(curblk).kfun],r) 
L1870: (Blocks[C2F(curblk).kfun - 1],r) 
	loop info: j = 0  j < *neq  j++
	induction variable: ['jj', 'k', 'j']
				{
				L1871: (xprop[j]==,r) (scicos_xproperty[j]=,w) 
				L1872: (xprop[j]==,r) (scicos_xproperty[j]=,w) 
				}
 }
array table
-----------------------------------------------
xptr -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1857), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1858), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1866), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1867), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1869)]
LDEs formed:0

Blocks -> [('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k', 'j'], 1853), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1855), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1856), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k', 'j'], 1857), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k', 'j'], 1858), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k', 'j'], 1859), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1860), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1861), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1863), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1864), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1864), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1865), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k', 'j'], 1866), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k', 'j'], 1867), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k', 'j'], 1868), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['jj', 'k', 'j'], 1869), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1870)]
LDEs formed:108

zcros -> [('[jj]', 'r', 'normalized', ['jj', 'k', 'j'], 1849)]
LDEs formed:0

funtyp -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1854)]
LDEs formed:0

scicos_xproperty -> [('[j]', 'w', 'normalized', ['jj', 'k', 'j'], 1871), ('[j]', 'w', 'normalized', ['jj', 'k', 'j'], 1872)]
LDEs formed:3

xprop -> [('[j]', 'r', 'normalized', ['jj', 'k', 'j'], 1871), ('[j]', 'r', 'normalized', ['jj', 'k', 'j'], 1872)]
LDEs formed:0

zcptr -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1850), ('[C2F(curblk).kfun + 1]', 'r', 'not normalized', ['jj', 'k', 'j'], 1851), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1853)]
LDEs formed:0

jroot -> [('[j]', 'r', 'not normalized', ['jj', 'k', 'j'], 1852)]
LDEs formed:0

clkptr -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['jj', 'k', 'j'], 1862)]
LDEs formed:0

distinct LDEs:
j1=j2
C2F(curblk).kfun - 1=C2F(curblk).kfun - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < ng  ++jj
induction variable: ['jj']
{
L1863: (g[jj],r) 
L1864: (jroot[jj]=,w) 
L1865: (jroot[jj]=,w) 
}
array table
-----------------------------------------------
jroot -> [('[jj]', 'w', 'normalized', ['jj'], 1864), ('[jj]', 'w', 'normalized', ['jj'], 1865)]
LDEs formed:3

g -> [('[jj]', 'r', 'normalized', ['jj'], 1863)]
LDEs formed:0

distinct LDEs:
jj1=jj2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: C2F(curblk).kfun = 1  C2F(curblk).kfun <= nblk  ++C2F(curblk
induction variable: ['C2F']
{
L1864: (Blocks[C2F(curblk).kfun - 1].nevprt=,w) 
L1865: (funtyp[C2F(curblk).kfun],r) 
L1866: (Blocks[C2F(curblk).kfun - 1].nx,r) 
L1867: (Blocks[C2F(curblk).kfun - 1].x=,w) (xptr[C2F(curblk).kfun]-,r) 
L1868: (Blocks[C2F(curblk).kfun - 1].xd=,w) (xptr[C2F(curblk).kfun]-,r) 
L1869: (Blocks[C2F(curblk).kfun - 1],r) 
}
array table
-----------------------------------------------
funtyp -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['C2F'], 1865)]
LDEs formed:0

xptr -> [('[C2F(curblk).kfun]', 'r', 'not normalized', ['C2F'], 1867), ('[C2F(curblk).kfun]', 'r', 'not normalized', ['C2F'], 1868)]
LDEs formed:0

Blocks -> [('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['C2F'], 1864), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['C2F'], 1866), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['C2F'], 1867), ('[C2F(curblk).kfun - 1]', 'w', 'not normalized', ['C2F'], 1868), ('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['C2F'], 1869)]
LDEs formed:12

distinct LDEs:
C2F1(curblk).kfun - 1=C2F2(curblk).kfun - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < block->ng  ++j
induction variable: ['j']
{
L1870: (g[j]=,w) (jroot[j],r) 
}
array table
-----------------------------------------------
jroot -> [('[j]', 'r', 'normalized', ['j'], 1870)]
LDEs formed:0

g -> [('[j]', 'w', 'normalized', ['j'], 1870)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: in = 0  in < block->nin  in++
induction variable: ['in']
{
L1871: (insz[in]*,r) (insz[in + block->nin],r) 
	loop info: ii = 0  ii < szi  ii++
	induction variable: ['in', 'ii']
	{
	L1872: (intabl[ki++]=,w) (inptr[in],r) 
	}
 }
array table
-----------------------------------------------
inptr -> [('[in]', 'r', 'normalized', ['in', 'ii'], 1872)]
LDEs formed:0

insz -> [('[in]', 'r', 'normalized', ['in', 'ii'], 1871), ('[in + block->nin]', 'r', 'not normalized', ['in', 'ii'], 1871)]
LDEs formed:0

intabl -> [('[ki++]', 'w', 'not normalized', ['in', 'ii'], 1872)]
LDEs formed:1

distinct LDEs:
ki++=ki++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: out = 0  out < block->nout  out++
induction variable: ['out']
{
L1873: (outsz[out]*,r) (outsz[out + block->nout],r) 
	loop info: ii = 0  ii < szi  ii++
	induction variable: ['out', 'ii']
	{
	L1874: (outabl[ko++]=,w) (outptr[out],r) 
	}
 }
array table
-----------------------------------------------
outsz -> [('[out]', 'r', 'normalized', ['out', 'ii'], 1873), ('[out + block->nout]', 'r', 'not normalized', ['out', 'ii'], 1873)]
LDEs formed:0

outptr -> [('[out]', 'r', 'normalized', ['out', 'ii'], 1874)]
LDEs formed:0

outabl -> [('[ko++]', 'w', 'not normalized', ['out', 'ii'], 1874)]
LDEs formed:1

distinct LDEs:
ko++=ko++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: out = 0  out < block->nout  out++
induction variable: ['out']
{
L1875: (outsz[out]*,r) (outsz[out + block->nout],r) 
	loop info: ii = 0  ii < szi  ii++
	induction variable: ['out', 'ii']
	{
	L1876: (outptr[out],r) (outabl[ko++],r) 
	}
 }
array table
-----------------------------------------------
outsz -> [('[out]', 'r', 'normalized', ['out', 'ii'], 1875), ('[out + block->nout]', 'r', 'not normalized', ['out', 'ii'], 1875)]
LDEs formed:0

outptr -> [('[out]', 'r', 'normalized', ['out', 'ii'], 1876)]
LDEs formed:0

outabl -> [('[ko++]', 'r', 'not normalized', ['out', 'ii'], 1876)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: in = 0  in < block->nevout  ++in
induction variable: ['in']
{
L1877: (evout[in]=,w) (evout[in]-,r) 
}
array table
-----------------------------------------------
evout -> [('[in]', 'w', 'normalized', ['in'], 1877), ('[in]', 'r', 'normalized', ['in'], 1877)]
LDEs formed:2

distinct LDEs:
in1=in2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < block->ng  ++j
induction variable: ['j']
{
L1878: (g[j]=,w) (jroot[j],r) 
}
array table
-----------------------------------------------
jroot -> [('[j]', 'r', 'normalized', ['j'], 1878)]
LDEs formed:0

g -> [('[j]', 'w', 'normalized', ['j'], 1878)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: in = 0   in < block->nin   in++
induction variable: ['in']
{
L1879: (args[in]=,w) (inptr[in],r) 
L1880: (sz[in]=,w) (insz[in],r) 
}
array table
-----------------------------------------------
sz -> [('[in]', 'w', 'normalized', ['in'], 1880)]
LDEs formed:1

insz -> [('[in]', 'r', 'normalized', ['in'], 1880)]
LDEs formed:0

args -> [('[in]', 'w', 'normalized', ['in'], 1879)]
LDEs formed:1

inptr -> [('[in]', 'r', 'normalized', ['in'], 1879)]
LDEs formed:0

distinct LDEs:
in1=in2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: out = 0  out < block->nout  out++
induction variable: ['out']
{
L1880: (args[in + out]=,w) (outptr[out],r) 
L1881: (sz[in + out]=,w) (outsz[out],r) 
}
array table
-----------------------------------------------
sz -> [('[in + out]', 'w', 'not normalized', ['out'], 1881)]
LDEs formed:1

outsz -> [('[out]', 'r', 'normalized', ['out'], 1881)]
LDEs formed:0

args -> [('[in + out]', 'w', 'not normalized', ['out'], 1880)]
LDEs formed:1

outptr -> [('[out]', 'r', 'normalized', ['out'], 1880)]
LDEs formed:0

distinct LDEs:
in + out1=in + out2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: in = 0  in < block->nevout  ++in
induction variable: ['in']
{
L1881: (evout[in]=,w) (evout[in]-,r) 
}
array table
-----------------------------------------------
evout -> [('[in]', 'w', 'normalized', ['in'], 1881), ('[in]', 'r', 'normalized', ['in'], 1881)]
LDEs formed:2

distinct LDEs:
in1=in2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < block->ng  ++j
induction variable: ['j']
{
L1882: (g[j]=,w) (jroot[j],r) 
}
array table
-----------------------------------------------
jroot -> [('[j]', 'r', 'normalized', ['j'], 1882)]
LDEs formed:0

g -> [('[j]', 'w', 'normalized', ['j'], 1882)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: in = 0  in < block->nevout  ++in
induction variable: ['in']
{
L1883: (evout[in]=,w) (evout[in]-,r) 
}
array table
-----------------------------------------------
evout -> [('[in]', 'w', 'normalized', ['in'], 1883), ('[in]', 'r', 'normalized', ['in'], 1883)]
LDEs formed:2

distinct LDEs:
in1=in2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < block->ng  ++j
induction variable: ['j']
{
L1884: (g[j]=,w) (jroot[j],r) 
}
array table
-----------------------------------------------
jroot -> [('[j]', 'r', 'normalized', ['j'], 1884)]
LDEs formed:0

g -> [('[j]', 'w', 'normalized', ['j'], 1884)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: in = 0   in < block->nin   in++
induction variable: ['in']
{
L1885: (args[in]=,w) (inptr[in],r) 
L1886: (sz[in]=,w) (insz[in],r) 
}
array table
-----------------------------------------------
sz -> [('[in]', 'w', 'normalized', ['in'], 1886)]
LDEs formed:1

insz -> [('[in]', 'r', 'normalized', ['in'], 1886)]
LDEs formed:0

args -> [('[in]', 'w', 'normalized', ['in'], 1885)]
LDEs formed:1

inptr -> [('[in]', 'r', 'normalized', ['in'], 1885)]
LDEs formed:0

distinct LDEs:
in1=in2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: out = 0  out < block->nout  out++
induction variable: ['out']
{
L1886: (args[in + out]=,w) (outptr[out],r) 
L1887: (sz[in + out]=,w) (outsz[out],r) 
}
array table
-----------------------------------------------
sz -> [('[in + out]', 'w', 'not normalized', ['out'], 1887)]
LDEs formed:1

outsz -> [('[out]', 'r', 'normalized', ['out'], 1887)]
LDEs formed:0

args -> [('[in + out]', 'w', 'not normalized', ['out'], 1886)]
LDEs formed:1

outptr -> [('[out]', 'r', 'normalized', ['out'], 1886)]
LDEs formed:0

distinct LDEs:
in + out1=in + out2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: in = 0  in < block->nevout  ++in
induction variable: ['in']
{
L1887: (evout[in]=,w) (evout[in]-,r) 
}
array table
-----------------------------------------------
evout -> [('[in]', 'w', 'normalized', ['in'], 1887), ('[in]', 'r', 'normalized', ['in'], 1887)]
LDEs formed:2

distinct LDEs:
in1=in2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < block->ng  ++j
induction variable: ['j']
{
L1888: (g[j]=,w) (jroot[j],r) 
}
array table
-----------------------------------------------
jroot -> [('[j]', 'r', 'normalized', ['j'], 1888)]
LDEs formed:0

g -> [('[j]', 'w', 'normalized', ['j'], 1888)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: in = 0  in < block->nevout  ++in
induction variable: ['in']
{
L1889: (evout[in]=,w) (evout[in]-,r) 
}
array table
-----------------------------------------------
evout -> [('[in]', 'w', 'normalized', ['in'], 1889), ('[in]', 'r', 'normalized', ['in'], 1889)]
LDEs formed:2

distinct LDEs:
in1=in2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < block->nx  k++
induction variable: ['k']
{
L1890: (res[k]=,w) (res[k]-,r) (xd[k],r) 
}
array table
-----------------------------------------------
res -> [('[k]', 'w', 'normalized', ['k'], 1890), ('[k]', 'r', 'normalized', ['k'], 1890)]
LDEs formed:2

xd -> [('[k]', 'r', 'normalized', ['k'], 1890)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < block->nx  k++
induction variable: ['k']
{
L1891: (xd[k]=,w) (res[k],r) 
}
array table
-----------------------------------------------
res -> [('[k]', 'r', 'normalized', ['k'], 1891)]
LDEs formed:0

xd -> [('[k]', 'w', 'normalized', ['k'], 1891)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < block->nx  k++
induction variable: ['k']
{
L1892: (res[k]=,w) (res[k]-,r) (xd[k],r) 
}
array table
-----------------------------------------------
res -> [('[k]', 'w', 'normalized', ['k'], 1892), ('[k]', 'r', 'normalized', ['k'], 1892)]
LDEs formed:2

xd -> [('[k]', 'r', 'normalized', ['k'], 1892)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < block->nx  k++
induction variable: ['k']
{
L1893: (xd[k]=,w) (res[k],r) 
}
array table
-----------------------------------------------
res -> [('[k]', 'r', 'normalized', ['k'], 1893)]
LDEs formed:0

xd -> [('[k]', 'w', 'normalized', ['k'], 1893)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *neq  i++
induction variable: ['i']
{
L1894: (xd[i]-,r) (xd[i],r) 
}
array table
-----------------------------------------------
xd -> [('[i]', 'r', 'normalized', ['i'], 1894), ('[i]', 'r', 'normalized', ['i'], 1894)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *nequations  i++
induction variable: ['i']
{
L1895: (res[i]-,r) (res[i],r) 
}
array table
-----------------------------------------------
res -> [('[i]', 'r', 'normalized', ['i'], 1895), ('[i]', 'r', 'normalized', ['i'], 1895)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < ng  jj++
induction variable: ['jj']
{
L1896: (gout[jj]-,r) (gout[jj],r) 
}
array table
-----------------------------------------------
gout -> [('[jj]', 'r', 'normalized', ['jj'], 1896), ('[jj]', 'r', 'normalized', ['jj'], 1896)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < * (scs_imp->niord)  j++
induction variable: ['j']
{
L1897: (iord[j],r) 
L1898: (funtyp[*kf - 1],r) 
L1899: (blocks[*kf - 1].nx,r) 
L1900: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1901: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1902: (blocks[*kf - 1].nevprt=,w) (iord[j + * (scs_imp->niord)],r) 
L1903: (blocks[*kf - 1],r) 
L1904: (blocks[*kf - 1].nevout,r) 
L1905: (funtyp[*kf - 1],r) 
L1906: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
blocks -> [('[*kf - 1]', 'r', 'not normalized', ['j'], 1899), ('[*kf - 1]', 'w', 'not normalized', ['j'], 1900), ('[*kf - 1]', 'w', 'not normalized', ['j'], 1901), ('[*kf - 1]', 'w', 'not normalized', ['j'], 1902), ('[*kf - 1]', 'r', 'not normalized', ['j'], 1903), ('[*kf - 1]', 'r', 'not normalized', ['j'], 1904)]
LDEs formed:15

iord -> [('[j]', 'r', 'normalized', ['j'], 1897), ('[j + * (scs_imp->niord)]', 'r', 'not normalized', ['j'], 1902)]
LDEs formed:0

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['j'], 1898), ('[*kf - 1]', 'r', 'not normalized', ['j'], 1905)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['j'], 1900), ('[*kf - 1]', 'r', 'not normalized', ['j'], 1901)]
LDEs formed:0

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['j'], 1906)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ii = scs_imp->ordptr[kever - 1]  ii <= scs_imp->ordptr[kever] - 1   ii++
induction variable: ['ii']
{
L1907: (ordclk[ii - 1],r) 
L1908: (funtyp[*kf - 1],r) 
L1909: (blocks[*kf - 1].nx,r) 
L1910: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1911: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1912: (blocks[*kf - 1].nevprt=,w) (ordclk[ii + * (scs_imp->nordclk) - 1],r) 
L1913: (blocks[*kf - 1],r) 
L1914: (blocks[*kf - 1].nevout,r) 
L1915: (funtyp[*kf - 1],r) 
L1916: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
ordclk -> [('[ii - 1]', 'r', 'normalized', ['ii'], 1907), ('[ii + * (scs_imp->nordclk) - 1]', 'r', 'not normalized', ['ii'], 1912)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1910), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1911)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1909), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1910), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1911), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1912), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1913), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1914)]
LDEs formed:15

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1908), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1915)]
LDEs formed:0

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1916)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < * (scs_imp->ncord)  j++
induction variable: ['j']
{
L1917: (cord[j],r) 
L1918: (blocks[*kf - 1].nx,r) 
L1919: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1920: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1921: (blocks[*kf - 1].nevprt=,w) (cord[j + * (scs_imp->ncord)],r) 
L1922: (funtyp[*kf - 1],r) 
L1923: (blocks[*kf - 1],r) 
L1924: (blocks[*kf - 1].nevout,r) 
L1925: (funtyp[*kf - 1],r) 
L1926: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
cord -> [('[j]', 'r', 'normalized', ['j'], 1917), ('[j + * (scs_imp->ncord)]', 'r', 'not normalized', ['j'], 1921)]
LDEs formed:0

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['j'], 1922), ('[*kf - 1]', 'r', 'not normalized', ['j'], 1925)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['j'], 1919), ('[*kf - 1]', 'r', 'not normalized', ['j'], 1920)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['j'], 1918), ('[*kf - 1]', 'w', 'not normalized', ['j'], 1919), ('[*kf - 1]', 'w', 'not normalized', ['j'], 1920), ('[*kf - 1]', 'w', 'not normalized', ['j'], 1921), ('[*kf - 1]', 'r', 'not normalized', ['j'], 1923), ('[*kf - 1]', 'r', 'not normalized', ['j'], 1924)]
LDEs formed:15

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['j'], 1926)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < kiwa  i++
induction variable: ['i']
{
L1927: (iwa[i],r) 
L1928: (critev[keve],r) 
L1929: (ordptr[keve]-,r) 
	loop info: ii = scs_imp->ordptr[keve - 1]  ii <= i2  ii++
	induction variable: ['i', 'ii']
	{
	L1930: (ordclk[ii - 1],r) 
	L1931: (blocks[*kf - 1].nx,r) 
	L1932: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
	L1933: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
	L1934: (blocks[*kf - 1].nevprt=,w) (ordclk[ii + * (scs_imp->nordclk) - 1],r) 
	L1935: (blocks[*kf - 1].nevout,r) 
	L1936: (funtyp[*kf - 1],r) 
		loop info: j = 0  j < scs_imp->blocks[*kf - 1].nevout  j++
		induction variable: ['i', 'ii', 'j']
				{
				L1937: (blocks[*kf - 1].evout,r) 
				}
	L1938: (blocks[*kf - 1].nevprt,r) 
	L1939: (blocks[*kf - 1],r) 
		loop info: j = 0  j < scs_imp->blocks[*kf - 1].nevout  j++
		induction variable: ['i', 'ii', 'j']
				{
				L1940: (blocks[*kf - 1].evout,r) 
				L1941: (clkptr[*kf - 1],r) 
				L1942: (blocks[*kf - 1].evout,r) 
				}
	L1943: (blocks[*kf - 1].nevprt,r) 
	L1944: (blocks[*kf - 1].nx+,r) (blocks[*kf - 1].nz+,r) (blocks[*kf - 1].noz,r) 
	L1945: (blocks[*kf - 1].work,r) 
	L1946: (blocks[*kf - 1],r) 
	L1947: (blocks[*kf - 1].work,r) 
	L1948: (blocks[*kf - 1].nevprt=,w) 
	L1949: (blocks[*kf - 1],r) 
	}
 }
array table
-----------------------------------------------
xptr -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1932), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1933)]
LDEs formed:0

critev -> [('[keve]', 'r', 'not normalized', ['i', 'ii', 'j'], 1928)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1931), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii', 'j'], 1932), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii', 'j'], 1933), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii', 'j'], 1934), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1935), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1937), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1938), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1939), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1940), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1942), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1943), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1944), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1944), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1944), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1945), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1946), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1947), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii', 'j'], 1948), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1949)]
LDEs formed:70

iwa -> [('[i]', 'r', 'normalized', ['i', 'ii', 'j'], 1927)]
LDEs formed:0

ordclk -> [('[ii - 1]', 'r', 'normalized', ['i', 'ii', 'j'], 1930), ('[ii + * (scs_imp->nordclk) - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1934)]
LDEs formed:0

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1936)]
LDEs formed:0

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii', 'j'], 1941)]
LDEs formed:0

ordptr -> [('[keve]', 'r', 'not normalized', ['i', 'ii', 'j'], 1929)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ii = scs_imp->ordptr[kever - 1]  ii <= scs_imp->ordptr[kever] - 1  ii++
induction variable: ['ii']
{
L1930: (ordclk[ii - 1],r) 
L1931: (funtyp[*kf - 1],r) 
L1932: (blocks[*kf - 1].nx,r) 
L1933: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1934: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1935: (blocks[*kf - 1].nevprt=,w) (ordclk[ii + * (scs_imp->nordclk) - 1],r) 
L1936: (blocks[*kf - 1],r) 
L1937: (blocks[*kf - 1].nevout,r) 
L1938: (funtyp[*kf - 1],r) 
L1939: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
ordclk -> [('[ii - 1]', 'r', 'normalized', ['ii'], 1930), ('[ii + * (scs_imp->nordclk) - 1]', 'r', 'not normalized', ['ii'], 1935)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1933), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1934)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1932), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1933), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1934), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1935), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1936), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1937)]
LDEs formed:15

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1931), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1938)]
LDEs formed:0

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1939)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < * (scs_imp->noord)  jj++
induction variable: ['jj']
{
L1940: (oord[jj],r) 
L1941: (blocks[*kf - 1].nx,r) 
L1942: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1943: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1944: (blocks[*kf - 1].res=,w) (xptr[*kf - 1]-,r) 
L1945: (blocks[*kf - 1].nevprt=,w) (oord[jj + * (scs_imp->noord)],r) 
L1946: (funtyp[*kf - 1],r) 
L1947: (blocks[*kf - 1],r) 
L1948: (blocks[*kf - 1].nevout,r) 
L1949: (funtyp[*kf - 1],r) 
L1950: (blocks[*kf - 1].nmode,r) 
L1951: (blocks[*kf - 1].mode,r) (clkptr[*kf - 1]-,r) 
L1952: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
blocks -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1941), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1942), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1943), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1944), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1945), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1947), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1948), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1950), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1951)]
LDEs formed:30

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1942), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1943), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1944)]
LDEs formed:0

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1946), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1949)]
LDEs formed:0

oord -> [('[jj]', 'r', 'normalized', ['jj'], 1940), ('[jj + * (scs_imp->noord)]', 'r', 'not normalized', ['jj'], 1945)]
LDEs formed:0

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1951), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1952)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ii = 0  ii < * (scs_imp->noord)  ii++
induction variable: ['ii']
{
L1953: (oord[ii],r) 
L1954: (blocks[*kf - 1].nx,r) 
L1955: (blocks[*kf - 1].work,r) 
L1956: (blocks[*kf - 1].nx,r) 
L1957: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1958: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1959: (blocks[*kf - 1].res=,w) (xptr[*kf - 1]-,r) 
L1960: (blocks[*kf - 1].nevprt=,w) (oord[ii + * (scs_imp->noord)],r) 
L1961: (blocks[*kf - 1],r) 
}
array table
-----------------------------------------------
blocks -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1954), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1955), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1956), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1957), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1958), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1959), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1960), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1961)]
LDEs formed:26

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1957), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1958), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1959)]
LDEs formed:0

oord -> [('[ii]', 'r', 'normalized', ['ii'], 1953), ('[ii + * (scs_imp->noord)]', 'r', 'not normalized', ['ii'], 1960)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < kiwa  i++
induction variable: ['i']
{
L1961: (iwa[i],r) 
	loop info: ii = scs_imp->ordptr[keve - 1]  ii <= scs_imp->ordptr[keve] - 1  ii++
	induction variable: ['i', 'ii']
	{
	L1962: (ordclk[ii - 1],r) 
	L1963: (blocks[*kf - 1].nx,r) 
	L1964: (blocks[*kf - 1].work,r) 
	L1965: (blocks[*kf - 1].nx,r) 
	L1966: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
	L1967: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
	L1968: (blocks[*kf - 1].res=,w) (xptr[*kf - 1]-,r) 
	L1969: (blocks[*kf - 1].nevprt=,w) (ordclk[ii + * (scs_imp->nordclk) - 1],r) 
	L1970: (blocks[*kf - 1],r) 
	}
 }
array table
-----------------------------------------------
ordclk -> [('[ii - 1]', 'r', 'normalized', ['i', 'ii'], 1962), ('[ii + * (scs_imp->nordclk) - 1]', 'r', 'not normalized', ['i', 'ii'], 1969)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1966), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1967), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1968)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1963), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1964), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1965), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1966), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1967), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1968), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1969), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1970)]
LDEs formed:26

iwa -> [('[i]', 'r', 'normalized', ['i', 'ii'], 1961)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < * (scs_imp->noord)  jj++
induction variable: ['jj']
{
L1962: (oord[jj],r) 
L1963: (blocks[*kf - 1].nx,r) 
L1964: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1965: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1966: (blocks[*kf - 1].nevprt=,w) (oord[jj + * (scs_imp->noord)],r) 
L1967: (funtyp[*kf - 1],r) 
L1968: (blocks[*kf - 1],r) 
L1969: (blocks[*kf - 1].nevout,r) (funtyp[*kf - 1],r) 
L1970: (blocks[*kf - 1].nmode,r) 
L1971: (blocks[*kf - 1].mode,r) 
L1972: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
blocks -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1963), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1964), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1965), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1966), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1968), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1969), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1970), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1971)]
LDEs formed:21

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1964), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1965)]
LDEs formed:0

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1967), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1969)]
LDEs formed:0

oord -> [('[jj]', 'r', 'normalized', ['jj'], 1962), ('[jj + * (scs_imp->noord)]', 'r', 'not normalized', ['jj'], 1966)]
LDEs formed:0

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1972)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ii = 0  ii < * (scs_imp->noord)  ii++
induction variable: ['ii']
{
L1973: (oord[ii],r) 
L1974: (blocks[*kf - 1].nx,r) 
L1975: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1976: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1977: (blocks[*kf - 1].res=,w) (xptr[*kf - 1]-,r) 
L1978: (blocks[*kf - 1].nevprt=,w) (oord[ii + * (scs_imp->noord)],r) 
L1979: (blocks[*kf - 1].xprop=,w) (xptr[*kf - 1],r) 
L1980: (blocks[*kf - 1],r) 
}
array table
-----------------------------------------------
blocks -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1974), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1975), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1976), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1977), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1978), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1979), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1980)]
LDEs formed:25

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1975), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1976), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1977), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1979)]
LDEs formed:0

oord -> [('[ii]', 'r', 'normalized', ['ii'], 1973), ('[ii + * (scs_imp->noord)]', 'r', 'not normalized', ['ii'], 1978)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < kiwa  i++
induction variable: ['i']
{
L1979: (iwa[i],r) 
	loop info: ii = scs_imp->ordptr[keve - 1]  ii <= scs_imp->ordptr[keve] - 1  ii++
	induction variable: ['i', 'ii']
	{
	L1980: (ordclk[ii - 1],r) 
	L1981: (blocks[*kf - 1].nx,r) 
	L1982: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
	L1983: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
	L1984: (blocks[*kf - 1].res=,w) (xptr[*kf - 1]-,r) 
	L1985: (blocks[*kf - 1].nevprt=,w) (ordclk[ii + * (scs_imp->nordclk) - 1],r) 
	L1986: (blocks[*kf - 1].xprop=,w) (xptr[*kf - 1],r) 
	L1987: (blocks[*kf - 1],r) 
	}
 }
array table
-----------------------------------------------
ordclk -> [('[ii - 1]', 'r', 'normalized', ['i', 'ii'], 1980), ('[ii + * (scs_imp->nordclk) - 1]', 'r', 'not normalized', ['i', 'ii'], 1985)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1982), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1983), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1984), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1986)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1981), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1982), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1983), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1984), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1985), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 1986), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 1987)]
LDEs formed:25

iwa -> [('[i]', 'r', 'normalized', ['i', 'ii'], 1979)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ii = scs_imp->ordptr[kever - 1]  ii <= scs_imp->ordptr[kever] - 1  ii++
induction variable: ['ii']
{
L1980: (ordclk[ii - 1],r) 
L1981: (funtyp[*kf - 1],r) 
L1982: (blocks[*kf - 1].nx,r) 
L1983: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1984: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1985: (blocks[*kf - 1].nevprt=,w) (ordclk[ii + * (scs_imp->nordclk) - 1],r) 
L1986: (blocks[*kf - 1],r) 
L1987: (blocks[*kf - 1].nevout,r) 
L1988: (funtyp[*kf - 1],r) 
L1989: (blocks[*kf - 1].nmode==,r) 
L1990: (blocks[*kf - 1].mode,r) 
L1991: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
ordclk -> [('[ii - 1]', 'r', 'normalized', ['ii'], 1980), ('[ii + * (scs_imp->nordclk) - 1]', 'r', 'not normalized', ['ii'], 1985)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1983), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1984)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1982), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1983), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1984), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 1985), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1986), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1987), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1989), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1990)]
LDEs formed:21

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1981), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 1988)]
LDEs formed:0

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 1991)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < * (scs_imp->ng)  i++
induction variable: ['i']
{
L1992: (g[i]=,w) 
}
array table
-----------------------------------------------
g -> [('[i]', 'w', 'normalized', ['i'], 1992)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < * (scs_imp->nzord)  jj++
induction variable: ['jj']
{
L1993: (zord[jj],r) 
L1994: (blocks[*kf - 1].nx,r) 
L1995: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L1996: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L1997: (blocks[*kf - 1].nevprt=,w) (zord[jj + * (scs_imp->nzord)],r) 
L1998: (funtyp[*kf - 1],r) 
L1999: (blocks[*kf - 1],r) 
L2000: (blocks[*kf - 1].nevout,r) 
L2001: (funtyp[*kf - 1],r) 
L2002: (blocks[*kf - 1].nmode==,r) 
L2003: (blocks[*kf - 1].mode,r) 
L2004: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1998), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2001)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1995), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1996)]
LDEs formed:0

zord -> [('[jj]', 'r', 'normalized', ['jj'], 1993), ('[jj + * (scs_imp->nzord)]', 'r', 'not normalized', ['jj'], 1997)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 1994), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1995), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1996), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 1997), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 1999), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2000), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2002), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2003)]
LDEs formed:21

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 2004)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ii = 0  ii < * (scs_imp->nzord)  ii++
induction variable: ['ii']
{
L2005: (zord[ii],r) 
L2006: (blocks[*kf - 1].ng,r) 
L2007: (blocks[*kf - 1].g=,w) (zcptr[*kf - 1]-,r) 
L2008: (funtyp[*kf - 1],r) 
L2009: (blocks[*kf - 1].nx,r) 
L2010: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L2011: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L2012: (blocks[*kf - 1].nevprt=,w) (zord[ii + * (scs_imp->nzord)],r) 
L2013: (blocks[*kf - 1],r) 
L2014: (blocks[*kf - 1].nmode,r) 
L2015: (blocks[*kf - 1].mode,r) 
L2016: (blocks[*kf-1].g=,w) (zcptr[*kf]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 2007), ('[*kf]', 'r', 'not normalized', ['ii'], 2016)]
LDEs formed:0

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 2008)]
LDEs formed:0

zord -> [('[ii]', 'r', 'normalized', ['ii'], 2005), ('[ii + * (scs_imp->nzord)]', 'r', 'not normalized', ['ii'], 2012)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 2006), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 2007), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2009), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 2010), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 2011), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 2012), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2013), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2014), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2015), ('[*kf-1]', 'w', 'not normalized', ['ii'], 2016)]
LDEs formed:40

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 2010), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2011)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
*kf - 1=*kf-1
*kf-1=*kf-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < kiwa  i++
induction variable: ['i']
{
L2012: (iwa[i],r) 
	loop info: ii = scs_imp->ordptr[keve - 1]  ii <= scs_imp->ordptr[keve] - 1  ii++
	induction variable: ['i', 'ii']
	{
	L2013: (ordclk[ii - 1],r) 
	L2014: (blocks[*kf - 1].ng,r) 
	L2015: (blocks[*kf - 1].g=,w) (zcptr[*kf - 1]-,r) 
	L2016: (funtyp[*kf - 1],r) 
	L2017: (blocks[*kf - 1].nx,r) 
	L2018: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
	L2019: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
	L2020: (blocks[*kf - 1].nevprt=,w) (ordclk[ii + * (scs_imp->nordclk) - 1],r) 
	L2021: (blocks[*kf - 1],r) 
	L2022: (blocks[*kf - 1].nmode,r) 
	L2023: (blocks[*kf - 1].mode,r) 
	L2024: (blocks[*kf-1].g=,w) (zcptr[*kf]-,r) 
	}
 }
array table
-----------------------------------------------
xptr -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2018), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2019)]
LDEs formed:0

zcptr -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2015), ('[*kf]', 'r', 'not normalized', ['i', 'ii'], 2024)]
LDEs formed:0

iwa -> [('[i]', 'r', 'normalized', ['i', 'ii'], 2012)]
LDEs formed:0

ordclk -> [('[ii - 1]', 'r', 'normalized', ['i', 'ii'], 2013), ('[ii + * (scs_imp->nordclk) - 1]', 'r', 'not normalized', ['i', 'ii'], 2020)]
LDEs formed:0

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2016)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2014), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 2015), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2017), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 2018), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 2019), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 2020), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2021), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2022), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2023), ('[*kf-1]', 'w', 'not normalized', ['i', 'ii'], 2024)]
LDEs formed:40

distinct LDEs:
*kf - 1=*kf - 1
*kf - 1=*kf-1
*kf-1=*kf-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < * (scs_imp->noord)  jj++
induction variable: ['jj']
{
L2025: (oord[jj],r) 
L2026: (blocks[*kf - 1].nevprt=,w) (oord[jj + * (scs_imp->noord)],r) 
L2027: (funtyp[*kf - 1],r) 
L2028: (oord[jj]==,r) 
L2029: (blocks[*kf - 1].nx,r) 
L2030: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L2031: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L2032: (blocks[*kf - 1].res=,w) (xptr[*kf - 1]-,r) 
L2033: (blocks[*kf - 1],r) 
L2034: (blocks[*kf - 1].nevout,r) 
L2035: (funtyp[*kf - 1],r) 
L2036: (blocks[*kf - 1].nmode,r) 
L2037: (blocks[*kf - 1].mode,r) (clkptr[*kf - 1]-,r) 
L2038: (clkptr[*kf - 1]-,r) 
}
array table
-----------------------------------------------
blocks -> [('[*kf - 1]', 'w', 'not normalized', ['jj'], 2026), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2029), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 2030), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 2031), ('[*kf - 1]', 'w', 'not normalized', ['jj'], 2032), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2033), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2034), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2036), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2037)]
LDEs formed:30

funtyp -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 2027), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2035)]
LDEs formed:0

oord -> [('[jj]', 'r', 'normalized', ['jj'], 2025), ('[jj + * (scs_imp->noord)]', 'r', 'not normalized', ['jj'], 2026), ('[jj]', 'r', 'normalized', ['jj'], 2028)]
LDEs formed:0

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 2030), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2031), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2032)]
LDEs formed:0

clkptr -> [('[*kf - 1]', 'r', 'not normalized', ['jj'], 2037), ('[*kf - 1]', 'r', 'not normalized', ['jj'], 2038)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ii = 0  ii < * (scs_imp->noord)  ii++
induction variable: ['ii']
{
L2039: (oord[ii],r) 
L2040: (blocks[*kf - 1].nx,r) 
L2041: (blocks[*kf - 1].work,r) 
L2042: (oord[ii]==,r) 
L2043: (blocks[*kf - 1].nx,r) 
L2044: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
L2045: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
L2046: (blocks[*kf - 1].res=,w) (xptr[*kf - 1]-,r) 
L2047: (blocks[*kf - 1].nevprt=,w) (oord[ii + * (scs_imp->noord)],r) 
L2048: (blocks[*kf - 1],r) 
}
array table
-----------------------------------------------
blocks -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 2040), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2041), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2043), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 2044), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 2045), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 2046), ('[*kf - 1]', 'w', 'not normalized', ['ii'], 2047), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2048)]
LDEs formed:26

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['ii'], 2044), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2045), ('[*kf - 1]', 'r', 'not normalized', ['ii'], 2046)]
LDEs formed:0

oord -> [('[ii]', 'r', 'normalized', ['ii'], 2039), ('[ii]', 'r', 'normalized', ['ii'], 2042), ('[ii + * (scs_imp->noord)]', 'r', 'not normalized', ['ii'], 2047)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < kiwa  i++
induction variable: ['i']
{
L2048: (iwa[i],r) 
	loop info: ii = scs_imp->ordptr[keve - 1]  ii <= scs_imp->ordptr[keve] - 1   ii++
	induction variable: ['i', 'ii']
	{
	L2049: (ordclk[ii - 1],r) 
	L2050: (blocks[*kf - 1].nx,r) 
	L2051: (blocks[*kf - 1].work,r) 
	L2052: (oord[ii - 1]==,r) 
	L2053: (blocks[*kf - 1].nx,r) 
	L2054: (blocks[*kf - 1].x=,w) (xptr[*kf - 1]-,r) 
	L2055: (blocks[*kf - 1].xd=,w) (xptr[*kf - 1]-,r) 
	L2056: (blocks[*kf - 1].res=,w) (xptr[*kf - 1]-,r) 
	L2057: (blocks[*kf - 1].nevprt=,w) (ordclk[ii + * (scs_imp->nordclk) - 1],r) 
	L2058: (blocks[*kf - 1],r) 
	}
 }
array table
-----------------------------------------------
ordclk -> [('[ii - 1]', 'r', 'normalized', ['i', 'ii'], 2049), ('[ii + * (scs_imp->nordclk) - 1]', 'r', 'not normalized', ['i', 'ii'], 2057)]
LDEs formed:0

oord -> [('[ii - 1]', 'r', 'normalized', ['i', 'ii'], 2052)]
LDEs formed:0

blocks -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2050), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2051), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2053), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 2054), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 2055), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 2056), ('[*kf - 1]', 'w', 'not normalized', ['i', 'ii'], 2057), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2058)]
LDEs formed:26

xptr -> [('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2054), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2055), ('[*kf - 1]', 'r', 'not normalized', ['i', 'ii'], 2056)]
LDEs formed:0

iwa -> [('[i]', 'r', 'normalized', ['i', 'ii'], 2048)]
LDEs formed:0

distinct LDEs:
*kf - 1=*kf - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < scs_imp->blocks[kf - 1].nevout - 1  jj++
induction variable: ['jj']
{
L2049: (zcptr[kf - 1]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[kf - 1]', 'r', 'not normalized', ['jj'], 2049)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < scs_imp->blocks[kf - 1].nevout - 1  jj++
induction variable: ['jj']
{
L2050: (zcptr[kf - 1]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[kf - 1]', 'r', 'not normalized', ['jj'], 2050)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < scs_imp->blocks[kf - 1].nevout - 1  jj++
induction variable: ['jj']
{
L2051: (zcptr[kf - 1]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[kf - 1]', 'r', 'not normalized', ['jj'], 2051)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < scs_imp->blocks[kf - 1].nevout - 1  jj++
induction variable: ['jj']
{
L2052: (zcptr[kf - 1]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[kf - 1]', 'r', 'not normalized', ['jj'], 2052)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < scs_imp->blocks[kf - 1].nevout - 1  jj++
induction variable: ['jj']
{
L2053: (zcptr[kf - 1]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[kf - 1]', 'r', 'not normalized', ['jj'], 2053)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < scs_imp->blocks[kf - 1].nevout - 1  jj++
induction variable: ['jj']
{
L2054: (zcptr[kf - 1]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[kf - 1]', 'r', 'not normalized', ['jj'], 2054)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < scs_imp->blocks[kf - 1].nevout - 1  jj++
induction variable: ['jj']
{
L2055: (zcptr[kf - 1]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[kf - 1]', 'r', 'not normalized', ['jj'], 2055)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < scs_imp->blocks[kf - 1].nevout - 1  jj++
induction variable: ['jj']
{
L2056: (zcptr[kf - 1]-,r) 
}
array table
-----------------------------------------------
zcptr -> [('[kf - 1]', 'r', 'not normalized', ['jj'], 2056)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kf = 0  kf < nblk  ++kf
induction variable: ['kf']
{
L2057: (Blocks[kf].insz,r) 
L2058: (Blocks[kf].insz,r) 
L2059: (Blocks[kf].inptr,r) 
L2060: (Blocks[kf].inptr,r) 
L2061: (Blocks[kf].outsz,r) 
L2062: (Blocks[kf].outsz,r) 
L2063: (Blocks[kf].outptr,r) 
L2064: (Blocks[kf].outptr,r) 
L2065: (Blocks[kf].oparsz,r) 
L2066: (Blocks[kf].oparsz,r) 
L2067: (Blocks[kf].ozsz,r) 
L2068: (Blocks[kf].ozsz,r) 
L2069: (Blocks[kf].label,r) 
L2070: (Blocks[kf].label,r) 
L2071: (Blocks[kf].evout,r) 
L2072: (Blocks[kf].evout,r) 
}
array table
-----------------------------------------------
Blocks -> [('[kf]', 'r', 'normalized', ['kf'], 2057), ('[kf]', 'r', 'normalized', ['kf'], 2058), ('[kf]', 'r', 'normalized', ['kf'], 2059), ('[kf]', 'r', 'normalized', ['kf'], 2060), ('[kf]', 'r', 'normalized', ['kf'], 2061), ('[kf]', 'r', 'normalized', ['kf'], 2062), ('[kf]', 'r', 'normalized', ['kf'], 2063), ('[kf]', 'r', 'normalized', ['kf'], 2064), ('[kf]', 'r', 'normalized', ['kf'], 2065), ('[kf]', 'r', 'normalized', ['kf'], 2066), ('[kf]', 'r', 'normalized', ['kf'], 2067), ('[kf]', 'r', 'normalized', ['kf'], 2068), ('[kf]', 'r', 'normalized', ['kf'], 2069), ('[kf]', 'r', 'normalized', ['kf'], 2070), ('[kf]', 'r', 'normalized', ['kf'], 2071), ('[kf]', 'r', 'normalized', ['kf'], 2072)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Blocks[C2F(curblk).kfun - 1].nx  i++
induction variable: ['i']
{
L2073: (Blocks[C2F(curblk).kfun - 1].xprop,r) (pointer[i],r) 
}
array table
-----------------------------------------------
pointer -> [('[i]', 'r', 'normalized', ['i'], 2073)]
LDEs formed:0

Blocks -> [('[C2F(curblk).kfun - 1]', 'r', 'not normalized', ['i'], 2073)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m  i++
induction variable: ['i']
{
L2074: (xc[i],r) 
L2075: (xcdot[i],r) 
L2076: (ewt_data[i],r) 
L2077: (xc[i]+=,w) 
L2078: (xcdot[i]+=,w) 
L2079: (xc[i]+=,w) 
L2080: (xcdot[i]+=,w) 
	loop info: j = 0  j < m  j++
	induction variable: ['i', 'j']
	}
L2081: (Kx[j + i * ni]=,w) (u[j][0]-,r) (Kx[j + i * ni],r) 
L2082: (xc[i]=,w) 
L2083: (xcdot[i]=,w) 
}
array table
-----------------------------------------------
xc -> [('[i]', 'r', 'normalized', ['i', 'j'], 2074), ('[i]', 'w', 'normalized', ['i', 'j'], 2077), ('[i]', 'w', 'normalized', ['i', 'j'], 2079), ('[i]', 'w', 'normalized', ['i', 'j'], 2082)]
LDEs formed:9

Kx -> [('[j + i * ni]', 'w', 'not normalized', ['i', 'j'], 2081), ('[j + i * ni]', 'r', 'not normalized', ['i', 'j'], 2081)]
LDEs formed:2

ewt_data -> [('[i]', 'r', 'normalized', ['i', 'j'], 2076)]
LDEs formed:0

u -> [('[j][0]', 'r', 'normalized', ['i', 'j'], 2081)]
LDEs formed:0

xcdot -> [('[i]', 'r', 'normalized', ['i', 'j'], 2075), ('[i]', 'w', 'normalized', ['i', 'j'], 2078), ('[i]', 'w', 'normalized', ['i', 'j'], 2080), ('[i]', 'w', 'normalized', ['i', 'j'], 2083)]
LDEs formed:9

distinct LDEs:
j1 + i1 * ni=j2 + i2 * ni
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m  j++
induction variable: ['j']
{
	loop info: i = 0  i < m  i++
	induction variable: ['j', 'i']
	{
	L2084: (Jacque_col[i]=,w) (Hx[i + j * m],r) 
	}
 }
array table
-----------------------------------------------
Jacque_col -> [('[i]', 'w', 'normalized', ['j', 'i'], 2084)]
LDEs formed:1

Hx -> [('[i + j * m]', 'r', 'not normalized', ['j', 'i'], 2084)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < no  i++
induction variable: ['i']
{
L2085: (y[i][0],r) 
L2086: (y[i][0]+=,w) 
	loop info: j = 0  j < m  j++
	induction variable: ['i', 'j']
	}
L2087: (Ku[j + i * ni]=,w) (u[j][0]-,r) (Ku[j + i * ni],r) 
L2088: (y[i][0]=,w) 
}
array table
-----------------------------------------------
y -> [('[i][0]', 'r', 'normalized', ['i', 'j'], 2085), ('[i][0]', 'w', 'normalized', ['i', 'j'], 2086), ('[i][0]', 'w', 'normalized', ['i', 'j'], 2088)]
LDEs formed:10

u -> [('[j][0]', 'r', 'normalized', ['i', 'j'], 2087)]
LDEs formed:0

Ku -> [('[j + i * ni]', 'w', 'not normalized', ['i', 'j'], 2087), ('[j + i * ni]', 'r', 'not normalized', ['i', 'j'], 2087)]
LDEs formed:2

distinct LDEs:
j1 + i1 * ni=j2 + i2 * ni
i1=i2,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nx  j++
induction variable: ['j']
{
	loop info: i = 0  i < nx  i++
	induction variable: ['j', 'i']
	{
	L2088: (Jacque_col[i + m]=,w) (Fx[i + j * nx]+,r) (FuKuGx[i + j * nx],r) 
	}
 }
array table
-----------------------------------------------
Jacque_col -> [('[i + m]', 'w', 'not normalized', ['j', 'i'], 2088)]
LDEs formed:1

Fx -> [('[i + j * nx]', 'r', 'not normalized', ['j', 'i'], 2088)]
LDEs formed:0

FuKuGx -> [('[i + j * nx]', 'r', 'not normalized', ['j', 'i'], 2088)]
LDEs formed:0

distinct LDEs:
i1 + m=i2 + m
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nx  i++
induction variable: ['i']
{
	loop info: j = 0  j < m  j++
	induction variable: ['i', 'j']
	{
	L2089: (Jacque_col[j]=,w) (HuGx[j + i * m],r) 
	}
 }
array table
-----------------------------------------------
Jacque_col -> [('[j]', 'w', 'normalized', ['i', 'j'], 2089)]
LDEs formed:1

HuGx -> [('[j + i * m]', 'r', 'not normalized', ['i', 'j'], 2089)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m  i++
induction variable: ['i']
{
	loop info: j = 0  j < nx  j++
	induction variable: ['i', 'j']
	{
	L2090: (Jacque_col[j + m]=,w) (FuKx[j + i * nx],r) 
	}
 }
array table
-----------------------------------------------
Jacque_col -> [('[j + m]', 'w', 'not normalized', ['i', 'j'], 2090)]
LDEs formed:1

FuKx -> [('[j + i * nx]', 'r', 'not normalized', ['i', 'j'], 2090)]
LDEs formed:0

distinct LDEs:
j1 + m=j2 + m
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m  j++
induction variable: ['j']
{
	loop info: i = 0  i < m  i++
	induction variable: ['j', 'i']
	{
	L2091: (Jacque_col[i]=,w) (Hx[i + j * m]+,r) (HuGuKx[i + j * m],r) 
	}
 }
array table
-----------------------------------------------
Jacque_col -> [('[i]', 'w', 'normalized', ['j', 'i'], 2091)]
LDEs formed:1

Hx -> [('[i + j * m]', 'r', 'not normalized', ['j', 'i'], 2091)]
LDEs formed:0

HuGuKx -> [('[i + j * m]', 'r', 'not normalized', ['j', 'i'], 2091)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < ra  i++
induction variable: ['i']
{
L2092: (R[i + ra * j]=,w) 
	loop info: k = 0  k < ca  k++
	induction variable: ['i', 'k']
	}
 }
array table
-----------------------------------------------
R -> [('[i + ra * j]', 'w', 'not normalized', ['i', 'k'], 2092)]
LDEs formed:1

distinct LDEs:
i1 + ra * j=i2 + ra * j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nvar  i++
induction variable: ['i']
{
L2093: (ids[i],r) 
}
array table
-----------------------------------------------
ids -> [('[i]', 'r', 'normalized', ['i'], 2093)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nvar  i++
induction variable: ['i']
{
L2094: (ids[i],r) 
L2095: (svars[i]=,w) 
}
array table
-----------------------------------------------
svars -> [('[i]', 'w', 'normalized', ['i'], 2095)]
LDEs formed:1

ids -> [('[i]', 'r', 'normalized', ['i'], 2094)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nvar  i++
induction variable: ['i']
{
L2095: (ids[i],r) 
}
array table
-----------------------------------------------
ids -> [('[i]', 'r', 'normalized', ['i'], 2095)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nvar  i++
induction variable: ['i']
{
L2096: (xv[i]=,w) 
L2097: (xv[i],r) (x[i],r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'r', 'normalized', ['i'], 2097)]
LDEs formed:0

xv -> [('[i]', 'w', 'normalized', ['i'], 2096), ('[i]', 'r', 'normalized', ['i'], 2097)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nvar  i++
induction variable: ['i']
{
L2098: (xv[i],r) 
}
array table
-----------------------------------------------
xv -> [('[i]', 'r', 'normalized', ['i'], 2098)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nvar  i++
induction variable: ['i']
{
L2099: (ids[i],r) 
L2100: (ids[i],r) (xv[i],r) 
}
array table
-----------------------------------------------
xv -> [('[i]', 'r', 'normalized', ['i'], 2100)]
LDEs formed:0

ids -> [('[i]', 'r', 'normalized', ['i'], 2099), ('[i]', 'r', 'normalized', ['i'], 2100)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nvar  i++
induction variable: ['i']
{
L2101: (xv[i],r) 
}
array table
-----------------------------------------------
xv -> [('[i]', 'r', 'normalized', ['i'], 2101)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: jj = 0  jj < N  jj++
induction variable: ['jj']
{
L2102: (residual[jj]-,r) (residual[jj],r) 
}
array table
-----------------------------------------------
residual -> [('[jj]', 'r', 'normalized', ['jj'], 2102), ('[jj]', 'r', 'normalized', ['jj'], 2102)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j = 0  j < N  j++
induction variable: ['j']
{
L2103: (ysdata[j]=,w) 
L2104: (fsdata[j]=,w) 
}
array table
-----------------------------------------------
ysdata -> [('[j]', 'w', 'normalized', ['j'], 2103)]
LDEs formed:1

fsdata -> [('[j]', 'w', 'normalized', ['j'], 2104)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

		loop info:  j = 0  j < N  j++
		induction variable: ['k', 'i', 'j']
		{
		L2105: (x[j]==,r) (ysdata[j]+=,w) 
		L2106: (ysdata[j]+=,w) (x[j],r) 
		L2107: (fsdata[j]==,r) (fsdata[j]=,w) 
		L2108: (fsdata[j]=,w) (fsdata[j],r) 
		L2109: (ysdata[j]/=,w) 
		}
		loop info: j = 0  j < nmod  ++j
		induction variable: ['k', 'i', 'j']
			{
			L2110: (Mode_save[j]=,w) (mod[j],r) 
			}
		loop info: j = 0  j < nmod  ++j
		induction variable: ['k', 'i', 'j']
			{
			L2111: (Mode_save[j],r) (mod[j],r) 
			}
 	}
 }
array table
-----------------------------------------------
x -> [('[j]', 'r', 'normalized', ['k', 'i', 'j'], 2105), ('[j]', 'r', 'normalized', ['k', 'i', 'j'], 2106)]
LDEs formed:0

Mode_save -> [('[j]', 'w', 'normalized', ['k', 'i', 'j'], 2110), ('[j]', 'r', 'normalized', ['k', 'i', 'j'], 2111)]
LDEs formed:2

mod -> [('[j]', 'r', 'normalized', ['k', 'i', 'j'], 2110), ('[j]', 'r', 'normalized', ['k', 'i', 'j'], 2111)]
LDEs formed:0

ysdata -> [('[j]', 'w', 'normalized', ['k', 'i', 'j'], 2105), ('[j]', 'w', 'normalized', ['k', 'i', 'j'], 2106), ('[j]', 'w', 'normalized', ['k', 'i', 'j'], 2109)]
LDEs formed:6

fsdata -> [('[j]', 'r', 'normalized', ['k', 'i', 'j'], 2107), ('[j]', 'w', 'normalized', ['k', 'i', 'j'], 2107), ('[j]', 'w', 'normalized', ['k', 'i', 'j'], 2108), ('[j]', 'r', 'normalized', ['k', 'i', 'j'], 2108)]
LDEs formed:7

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<*nin k++
induction variable: ['k']
{
L2109: (inptr[k],r) 
L2110: (insz[k],r) 
L2111: (insz[*nin+k],r) 
}
array table
-----------------------------------------------
insz -> [('[k]', 'r', 'normalized', ['k'], 2110), ('[*nin+k]', 'r', 'not normalized', ['k'], 2111)]
LDEs formed:0

inptr -> [('[k]', 'r', 'normalized', ['k'], 2109)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=*nout-1 k>=0 k--
induction variable: ['k']
{
L2110: (outptr[k],r) 
L2111: (outsz[k],r) 
L2112: (outsz[*nout+k],r) 
}
array table
-----------------------------------------------
outsz -> [('[k]', 'r', 'normalized', ['k'], 2111), ('[*nout+k]', 'r', 'not normalized', ['k'], 2112)]
LDEs formed:0

outptr -> [('[k]', 'r', 'normalized', ['k'], 2110)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=*nout-1 k>=0 k--
induction variable: ['k']
{
L2111: (outptr[k],r) 
L2112: (outsz[k],r) 
}
array table
-----------------------------------------------
outsz -> [('[k]', 'r', 'normalized', ['k'], 2112)]
LDEs formed:0

outptr -> [('[k]', 'r', 'normalized', ['k'], 2111)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nout j++
induction variable: ['j']
{
L2112: (Blocks[0].outptr,r) (Blocks[0].outsz,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['j'], 2112), ('[0]', 'r', 'normalized', ['j'], 2112)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<Blocks[0].noz j++
induction variable: ['j']
{
L2113: (Blocks[0].oztyp,r) 
L2114: (Blocks[0].ozsz,r) 
L2115: (Blocks[0].ozptr,r) 
L2116: (Blocks[0].ozptr,r) (Blocks[0].oztyp,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['j'], 2113), ('[0]', 'r', 'normalized', ['j'], 2114), ('[0]', 'r', 'normalized', ['j'], 2115), ('[0]', 'r', 'normalized', ['j'], 2116), ('[0]', 'r', 'normalized', ['j'], 2116)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<Blocks[0].noz j++
induction variable: ['j']
{
L2117: (Blocks[0].oztyp,r) 
L2118: (Blocks[0].ozsz,r) 
L2119: (Blocks[0].ozptr,r) 
L2120: (Blocks[0].ozptr,r) (Blocks[0].oztyp,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['j'], 2117), ('[0]', 'r', 'normalized', ['j'], 2118), ('[0]', 'r', 'normalized', ['j'], 2119), ('[0]', 'r', 'normalized', ['j'], 2120), ('[0]', 'r', 'normalized', ['j'], 2120)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<Blocks[0].noz j++
induction variable: ['j']
{
L2121: (Blocks[0].oztyp,r) 
L2122: (Blocks[0].ozsz,r) 
L2123: (Blocks[0].ozptr,r) 
L2124: (Blocks[0].ozptr,r) (Blocks[0].oztyp,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['j'], 2121), ('[0]', 'r', 'normalized', ['j'], 2122), ('[0]', 'r', 'normalized', ['j'], 2123), ('[0]', 'r', 'normalized', ['j'], 2124), ('[0]', 'r', 'normalized', ['j'], 2124)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<Blocks[0].noz j++
induction variable: ['j']
{
L2125: (Blocks[0].oztyp,r) 
L2126: (Blocks[0].ozsz,r) 
L2127: (Blocks[0].ozptr,r) 
L2128: (Blocks[0].ozptr,r) (Blocks[0].oztyp,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['j'], 2125), ('[0]', 'r', 'normalized', ['j'], 2126), ('[0]', 'r', 'normalized', ['j'], 2127), ('[0]', 'r', 'normalized', ['j'], 2128), ('[0]', 'r', 'normalized', ['j'], 2128)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nout j++
induction variable: ['j']
{
L2129: (Blocks[0].outptr,r) (Blocks[0].outsz,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['j'], 2129), ('[0]', 'r', 'normalized', ['j'], 2129)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: nv=0 nv<Blocks[0].nx nv++
induction variable: ['nv']
{
L2130: (Blocks[0].xprop,r) (l_xprop[nv],r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['nv'], 2130)]
LDEs formed:0

l_xprop -> [('[nv]', 'r', 'normalized', ['nv'], 2130)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: nv=0 nv<(il_mode[1]*il_mode[2]) nv++
induction variable: ['nv']
{
L2131: (Blocks[0].mode,r) (l_mode[nv],r) 
}
array table
-----------------------------------------------
l_mode -> [('[nv]', 'r', 'normalized', ['nv'], 2131)]
LDEs formed:0

Blocks -> [('[0]', 'r', 'normalized', ['nv'], 2131)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<nblk k++
induction variable: ['k']
{
L2132: (scicos_imp.izptr[k]-,r) (scicos_imp.izptr[k-1],r) 
L2133: (scicos_imp.izptr[k-1]-,r) 
L2134: (lab[i]==,r) (scicos_imp.iz[i0+i],r) 
}
array table
-----------------------------------------------
scicos_imp.izptr -> [('[k]', 'r', 'normalized', ['k'], 2132), ('[k-1]', 'r', 'normalized', ['k'], 2132), ('[k-1]', 'r', 'normalized', ['k'], 2133)]
LDEs formed:0

lab -> [('[i]', 'r', 'not normalized', ['k'], 2134)]
LDEs formed:0

scicos_imp.iz -> [('[i0+i]', 'r', 'not normalized', ['k'], 2134)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<nblk k++
induction variable: ['k']
{
L2135: (scicos_imp.izptr[k]-,r) (scicos_imp.izptr[k-1],r) 
L2136: (scicos_imp.izptr[k-1]-,r) 
L2137: (label[i]==,r) (scicos_imp.iz[i0+i],r) 
}
array table
-----------------------------------------------
scicos_imp.izptr -> [('[k]', 'r', 'normalized', ['k'], 2135), ('[k-1]', 'r', 'normalized', ['k'], 2135), ('[k-1]', 'r', 'normalized', ['k'], 2136)]
LDEs formed:0

scicos_imp.iz -> [('[i0+i]', 'r', 'not normalized', ['k'], 2137)]
LDEs formed:0

label -> [('[i]', 'r', 'not normalized', ['k'], 2137)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: s = r    
induction variable: []
{
L2138: (s[2]==,r) 
	loop info: b = 0, d = c  d  d /= 2
	induction variable: ['d']
			}
L2139: (ent[b]&,r) (ent[b],r) (ent[b],r) 
L2140: (ent[b++],r) 
L2141: (ent[b],r) 
L2142: (ent[b],r) 
}
array table
-----------------------------------------------
s -> [('[2]', 'r', 'normalized', ['d'], 2138)]
LDEs formed:0

ent -> [('[b]', 'r', 'not normalized', ['d'], 2139), ('[b]', 'r', 'not normalized', ['d'], 2139), ('[b]', 'r', 'not normalized', ['d'], 2139), ('[b++]', 'r', 'not normalized', ['d'], 2140), ('[b]', 'r', 'not normalized', ['d'], 2141), ('[b]', 'r', 'not normalized', ['d'], 2142)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L2143: (ent[i]&,r) (ent[i + 1],r) 
}
array table
-----------------------------------------------
ent -> [('[i]', 'r', 'normalized', ['s', 'i'], 2143), ('[i + 1]', 'r', 'normalized', ['s', 'i'], 2143)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L2144: (ent[i + 1]=,w) 
L2145: (ent[i + 2]=,w) 
L2146: (ent[i + 1],r) 
L2147: (ent[i + 1],r) (ent[i + 1],r) 
L2148: (ent[i]=,w) 
	loop info: i = 0  root->attr[i] && strcmp(n, root->attr[i][0])  i++
	induction variable: ['i']
		}
L2149: (attr[i],r) 
L2150: (attr[i]=,w) 
L2151: (attr[i][0]=,w) 
L2152: (attr[i][1]=,w) (attr[i + 1]=,w) 
	loop info: j = 1  root->attr[i][j]  j += 3
	induction variable: ['i', 'j']
			}
L2153: (attr[i]=,w) (attr[i],r) 
L2154: (attr[i][j + 3]=,w) 
L2155: (attr[i][j + 2]=,w) 
L2156: (attr[i][j + 1]=,w) 
L2157: (attr[i][j]=,w) 
}
array table
-----------------------------------------------
ent -> [('[i + 1]', 'w', 'normalized', ['i', 'j'], 2144), ('[i + 2]', 'w', 'normalized', ['i', 'j'], 2145), ('[i + 1]', 'r', 'normalized', ['i', 'j'], 2146), ('[i + 1]', 'r', 'normalized', ['i', 'j'], 2147), ('[i + 1]', 'r', 'normalized', ['i', 'j'], 2147), ('[i]', 'w', 'normalized', ['i', 'j'], 2148)]
LDEs formed:15

attr -> [('[i]', 'r', 'normalized', ['i', 'j'], 2149), ('[i]', 'w', 'normalized', ['i', 'j'], 2150), ('[i][0]', 'w', 'normalized', ['i', 'j'], 2151), ('[i][1]', 'w', 'normalized', ['i', 'j'], 2152), ('[i + 1]', 'w', 'normalized', ['i', 'j'], 2152), ('[i]', 'w', 'normalized', ['i', 'j'], 2153), ('[i]', 'r', 'normalized', ['i', 'j'], 2153), ('[i][j + 3]', 'w', 'normalized', ['i', 'j'], 2154), ('[i][j + 2]', 'w', 'normalized', ['i', 'j'], 2155), ('[i][j + 1]', 'w', 'normalized', ['i', 'j'], 2156), ('[i][j]', 'w', 'normalized', ['i', 'j'], 2157)]
LDEs formed:126

distinct LDEs:
i1 + 2=i2 + 2
i1=i2,j1 + 1=j2 + 1
i1 + 1=i2 + 2
i1=i2,j1 + 2=j2
i1 + 1=i2 + 1
i1=i2,0=j2
i1=i2,1=j2
i1 + 1=i2
i1=i2,j1 + 3=j2 + 2
i1=i2,j1 + 3=j2 + 3
i1=i2,j1 + 3=j2 + 1
i1=i2,j1 + 1=j2
i1=i2
i1=i2,j1 + 2=j2 + 1
i1 + 2=i2
i1=i2,0=0
i1=i2,0=1
i1=i2,0=j2 + 2
i1=i2,j1 + 3=j2
i1=i2,1=j2 + 2
i1=i2,1=1
i1=i2,1=j2 + 1
i1=i2,1=j2 + 3
i1=i2,j1 + 2=j2 + 2
i1=i2,j1=j2
i1=i2,0=j2 + 3
i1=i2,0=j2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: sl = 2  sl < *len - 1  sl += 2
induction variable: ['sl']
{
L2158: (u[l++]=,w) 
	loop info: b = 0, d = c  d  d /= 2
	induction variable: ['sl', 'd']
		}
L2159: (u[l++]=,w) 
L2160: (u[l++]=,w) 
}
array table
-----------------------------------------------
u -> [('[l++]', 'w', 'not normalized', ['sl', 'd'], 2158), ('[l++]', 'w', 'not normalized', ['sl', 'd'], 2159), ('[l++]', 'w', 'not normalized', ['sl', 'd'], 2160)]
LDEs formed:6

distinct LDEs:
l++=l++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  m[i]  i++
induction variable: ['i']
{
L2161: (m[i]&,r) (attr[i * 2],r) 
L2162: (m[i]&,r) (attr[(i * 2) + 1],r) 
}
array table
-----------------------------------------------
m -> [('[i]', 'r', 'normalized', ['i'], 2161), ('[i]', 'r', 'normalized', ['i'], 2162)]
LDEs formed:0

attr -> [('[i * 2]', 'r', 'normalized', ['i'], 2161), ('[(i * 2) + 1]', 'r', 'normalized', ['i'], 2162)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	loop info: l = 0  *s && *s != '/' && *s != '>'  l += 2
	induction variable: ['i', 'l']
		{
		L2163: (attr[l + 3]=,w) (attr[l + 1],r) 
		L2164: (attr[l + 3]+,r) 
		L2165: (attr[l + 2]=,w) 
		L2166: (attr[l + 1]=,w) 
		L2167: (attr[l]=,w) 
		L2168: (attr[l + 1]=,w) 
			loop info: j = 1  a && a[j] && strcmp(a[j], attr[l])  j +=3
			induction variable: ['i', 'l', 'j']
					}
		L2169: (attr[l + 1]=,w) (attr[l + 1],r) 
		L2170: (a[j],r) (a[j + 2],r) 
		L2171: (attr[l + 1],r) (attr[l + 1],r) 
		L2172: (attr[l + 3][l / 2]=,w) 
		}
 }
array table
-----------------------------------------------
a -> [('[j]', 'r', 'normalized', ['i', 'l', 'j'], 2170), ('[j + 2]', 'r', 'normalized', ['i', 'l', 'j'], 2170)]
LDEs formed:0

attr -> [('[l + 3]', 'w', 'normalized', ['i', 'l', 'j'], 2163), ('[l + 1]', 'r', 'normalized', ['i', 'l', 'j'], 2163), ('[l + 3]', 'r', 'normalized', ['i', 'l', 'j'], 2164), ('[l + 2]', 'w', 'normalized', ['i', 'l', 'j'], 2165), ('[l + 1]', 'w', 'normalized', ['i', 'l', 'j'], 2166), ('[l]', 'w', 'normalized', ['i', 'l', 'j'], 2167), ('[l + 1]', 'w', 'normalized', ['i', 'l', 'j'], 2168), ('[l + 1]', 'w', 'normalized', ['i', 'l', 'j'], 2169), ('[l + 1]', 'r', 'normalized', ['i', 'l', 'j'], 2169), ('[l + 1]', 'r', 'normalized', ['i', 'l', 'j'], 2171), ('[l + 1]', 'r', 'normalized', ['i', 'l', 'j'], 2171), ('[l + 3][l / 2]', 'w', 'normalized', ['i', 'l', 'j'], 2172)]
LDEs formed:126

distinct LDEs:
l1 + 3=l2 + 2
l1 + 3=l2 + 3
l1 + 3=l2 + 1
l1 + 3=l2
l1=l2
l1 + 1=l2 + 1
l1 + 1=l2 + 2
l1 + 2=l2 + 2
l1 + 2=l2
l1 + 1=l2
l1 + 3=l2 + 3,l1 / 2=l2 / 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  xml->attr[i]  i += 2
induction variable: ['i']
{
L2173: (attr[i],r) (attr[i + 1],r) 
L2174: (attr[i],r) 
L2175: (attr[i],r) 
L2176: (attr[i + 1],r) 
}
array table
-----------------------------------------------
attr -> [('[i]', 'r', 'normalized', ['i'], 2173), ('[i + 1]', 'r', 'normalized', ['i'], 2173), ('[i]', 'r', 'normalized', ['i'], 2174), ('[i]', 'r', 'normalized', ['i'], 2175), ('[i + 1]', 'r', 'normalized', ['i'], 2176)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  attr[i] && attr[i][j]  j += 3
induction variable: ['j']
{
L2177: (attr[i][j + 1]|,r) (attr[i][j],r) (attr[i][j + 1],r) 
L2178: (attr[i][j],r) 
L2179: (attr[i][j],r) 
L2180: (attr[i][j + 1],r) 
}
array table
-----------------------------------------------
attr -> [('[i][j + 1]', 'r', 'not normalized', ['j'], 2177), ('[i][j]', 'r', 'not normalized', ['j'], 2177), ('[i][j + 1]', 'r', 'not normalized', ['j'], 2177), ('[i][j]', 'r', 'not normalized', ['j'], 2178), ('[i][j]', 'r', 'not normalized', ['j'], 2179), ('[i][j + 1]', 'r', 'not normalized', ['j'], 2180)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L2181: (pi[i][j],r) 
L2182: (pi[i][k][j - 1]==,r) 
L2183: (pi[i][0],r) 
}
array table
-----------------------------------------------
pi -> [('[i][j]', 'r', 'not normalized', ['i', 'k'], 2181), ('[i][k][j - 1]', 'r', 'not normalized', ['i', 'k'], 2182), ('[i][0]', 'r', 'normalized', ['i', 'k'], 2183)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L2184: (pi[i][j],r) 
L2185: (pi[i][k][j - 1]==,r) 
L2186: (pi[i][0],r) 
}
array table
-----------------------------------------------
pi -> [('[i][j]', 'r', 'not normalized', ['i', 'k'], 2184), ('[i][k][j - 1]', 'r', 'not normalized', ['i', 'k'], 2185), ('[i][0]', 'r', 'normalized', ['i', 'k'], 2186)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L2187: (pi[i][j + 1],r) 
L2188: (pi[i],r) 
}
array table
-----------------------------------------------
pi -> [('[i][j + 1]', 'r', 'normalized', ['i', 'j'], 2187), ('[i]', 'r', 'normalized', ['i', 'j'], 2188)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2189: (ptr_i[j]=,w) (x_i[j],r) 
}
array table
-----------------------------------------------
ptr_i -> [('[j]', 'w', 'normalized', ['j'], 2189)]
LDEs formed:1

x_i -> [('[j]', 'r', 'normalized', ['j'], 2189)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2190: (ptr_c[j]=,w) (x_c[j],r) 
}
array table
-----------------------------------------------
ptr_c -> [('[j]', 'w', 'normalized', ['j'], 2190)]
LDEs formed:1

x_c -> [('[j]', 'r', 'normalized', ['j'], 2190)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2191: (ptr_s[j]=,w) (x_s[j],r) 
}
array table
-----------------------------------------------
ptr_s -> [('[j]', 'w', 'normalized', ['j'], 2191)]
LDEs formed:1

x_s -> [('[j]', 'r', 'normalized', ['j'], 2191)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2192: (ptr_l[j]=,w) (x_l[j],r) 
}
array table
-----------------------------------------------
x_l -> [('[j]', 'r', 'normalized', ['j'], 2192)]
LDEs formed:0

ptr_l -> [('[j]', 'w', 'normalized', ['j'], 2192)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2193: (ptr_ui[j]=,w) (x_ui[j],r) 
}
array table
-----------------------------------------------
ptr_ui -> [('[j]', 'w', 'normalized', ['j'], 2193)]
LDEs formed:1

x_ui -> [('[j]', 'r', 'normalized', ['j'], 2193)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2194: (ptr_uc[j]=,w) (x_uc[j],r) 
}
array table
-----------------------------------------------
ptr_uc -> [('[j]', 'w', 'normalized', ['j'], 2194)]
LDEs formed:1

x_uc -> [('[j]', 'r', 'normalized', ['j'], 2194)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2195: (ptr_us[j]=,w) (x_us[j],r) 
}
array table
-----------------------------------------------
ptr_us -> [('[j]', 'w', 'normalized', ['j'], 2195)]
LDEs formed:1

x_us -> [('[j]', 'r', 'normalized', ['j'], 2195)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2196: (ptr_ul[j]=,w) (x_ul[j],r) 
}
array table
-----------------------------------------------
x_ul -> [('[j]', 'r', 'normalized', ['j'], 2196)]
LDEs formed:0

ptr_ul -> [('[j]', 'w', 'normalized', ['j'], 2196)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<m*n j++
induction variable: ['j']
{
L2197: (ptr_d[j]=,w) (x_d[j],r) 
}
array table
-----------------------------------------------
x_d -> [('[j]', 'r', 'normalized', ['j'], 2197)]
LDEs formed:0

ptr_d -> [('[j]', 'w', 'normalized', ['j'], 2197)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i <nb  i++
induction variable: ['i']
{
L2198: (vect[i]=,w) (vect[i],r) 
}
array table
-----------------------------------------------
vect -> [('[i]', 'w', 'normalized', ['i'], 2198), ('[i]', 'r', 'normalized', ['i'], 2198)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  (j <= nb+2) && (! fini)  j++
induction variable: ['j']
{
	loop info: i = 0  i < nb  i++
	induction variable: ['j', 'i']
	{
	L2199: (vect[i]==,r) 
	L2200: (outoinptr[i+ 1]-,r) (outoinptr[i],r) 
		loop info: k = outoinptr[i]  k <= outoinptr[i + 1] - 1  k++
		induction variable: ['j', 'i', 'k']
				{
				L2201: (outoin[k-1],r) 
				L2202: (vect[ii-1],r) (depuptr[ii-1]-,r) (outoinptr[nb]+,r) 
				L2203: (vect[ii-1]=,w) 
				}
 	}
 }
array table
-----------------------------------------------
outoin -> [('[k-1]', 'r', 'normalized', ['j', 'i', 'k'], 2201)]
LDEs formed:0

vect -> [('[i]', 'r', 'normalized', ['j', 'i', 'k'], 2199), ('[ii-1]', 'r', 'not normalized', ['j', 'i', 'k'], 2202), ('[ii-1]', 'w', 'not normalized', ['j', 'i', 'k'], 2203)]
LDEs formed:3

outoinptr -> [('[i+ 1]', 'r', 'normalized', ['j', 'i', 'k'], 2200), ('[i]', 'r', 'normalized', ['j', 'i', 'k'], 2200), ('[nb]', 'r', 'not normalized', ['j', 'i', 'k'], 2202)]
LDEs formed:0

depuptr -> [('[ii-1]', 'r', 'not normalized', ['j', 'i', 'k'], 2202)]
LDEs formed:0

distinct LDEs:
ii-1=ii-1
i1=ii-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: m=0   m < nb  m++
induction variable: ['m']
{
L2203: (vect[m],r) 
	loop info: i=0  i<*nord i++
	induction variable: ['m', 'i']
			}
 }
array table
-----------------------------------------------
vect -> [('[m]', 'r', 'normalized', ['m', 'i'], 2203)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i= 0  i < nb  i++
induction variable: ['i']
{
L2204: (vec[i]==,r) (typl[i]==,r) (vec[i]=,w) 
}
array table
-----------------------------------------------
vec -> [('[i]', 'r', 'normalized', ['i'], 2204), ('[i]', 'w', 'normalized', ['i'], 2204)]
LDEs formed:2

typl -> [('[i]', 'r', 'normalized', ['i'], 2204)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  (j <= nb+2) &&(! fini)  j++
induction variable: ['j']
{
	loop info: i = 0  i < nb  i++
	induction variable: ['j', 'i']
	{
	L2205: (vec[i],r) (typl[i],r) 
	L2206: (typl[i]==,r) 
	L2207: (boptr[i + 1]-,r) (boptr[i],r) 
		loop info: m = 0  m < nkk  m++
		induction variable: ['j', 'i', 'm']
					{
					L2208: (boptr[i]-,r) 
					L2209: (typl[kk-1]==,r) 
					L2210: (vec[kk-1],r) (vec[i]+,r) 
					L2211: (vec[kk-1]=,w) (vec[i]+,r) 
					L2212: (vec[kk-1],r) (vec[i]+,r) 
					L2213: (vec[kk-1]=,w) (vec[i]+,r) 
					}
	L2214: (blptr[i+1]-,r) (blptr[i],r) 
		loop info: m = 0  m < nkk  m++
		induction variable: ['j', 'i', 'm']
					{
					L2215: (blptr[i]-,r) 
					L2216: (vec[kk-1],r) (depuptr[kk-1]-,r) (blptr[nb]+,r) (blptr[i]-,r) (typl[kk-1]==,r) 
					L2217: (vec[kk-1],r) (vec[i],r) 
					L2218: (vec[kk-1]=,w) (vec[i],r) 
					}
 	}
 }
array table
-----------------------------------------------
boptr -> [('[i + 1]', 'r', 'normalized', ['j', 'i', 'm'], 2207), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2207), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2208)]
LDEs formed:0

depuptr -> [('[kk-1]', 'r', 'not normalized', ['j', 'i', 'm'], 2216)]
LDEs formed:0

blptr -> [('[i+1]', 'r', 'normalized', ['j', 'i', 'm'], 2214), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2214), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2215), ('[nb]', 'r', 'not normalized', ['j', 'i', 'm'], 2216), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2216)]
LDEs formed:0

vec -> [('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2205), ('[kk-1]', 'r', 'not normalized', ['j', 'i', 'm'], 2210), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2210), ('[kk-1]', 'w', 'not normalized', ['j', 'i', 'm'], 2211), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2211), ('[kk-1]', 'r', 'not normalized', ['j', 'i', 'm'], 2212), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2212), ('[kk-1]', 'w', 'not normalized', ['j', 'i', 'm'], 2213), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2213), ('[kk-1]', 'r', 'not normalized', ['j', 'i', 'm'], 2216), ('[kk-1]', 'r', 'not normalized', ['j', 'i', 'm'], 2217), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2217), ('[kk-1]', 'w', 'not normalized', ['j', 'i', 'm'], 2218), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2218)]
LDEs formed:39

typl -> [('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2205), ('[i]', 'r', 'normalized', ['j', 'i', 'm'], 2206), ('[kk-1]', 'r', 'not normalized', ['j', 'i', 'm'], 2209), ('[kk-1]', 'r', 'not normalized', ['j', 'i', 'm'], 2216)]
LDEs formed:0

distinct LDEs:
i1=kk-1
kk-1=kk-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: m=0   m < nb  m++
induction variable: ['m']
{
L2217: (vec[m],r) 
	loop info: i=0  i<*nord i++
	induction variable: ['m', 'i']
			}
 }
array table
-----------------------------------------------
vec -> [('[m]', 'r', 'normalized', ['m', 'i'], 2217)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1   (j < nb) &&  (! fini)  j++
induction variable: ['j']
{
	loop info: i=0 i<nb i++
	induction variable: ['j', 'i']
	{
	L2218: (vec[i],r) 
	L2219: (outoinptr[i+1]-,r) (outoinptr[i],r) 
		loop info: k=outoinptr[i] k<outoinptr[i+1] k++
		induction variable: ['j', 'i', 'k']
				{
				L2220: (outoin[k-1],r) 
				L2221: (typ_r[ii-1]==,r) 
				L2222: (outoinptr[nb]-,r) 
				L2223: (nd[nprt+(ii-1)*nnd]==,r) 
				L2224: (r1[*nr]=,w) 
				L2225: (r2[*nr]=,w) 
				L2226: (vec[ii-1]=,w) 
				L2227: (nd[nprt+(ii-1)*nnd]=,w) 
				L2228: (nr[0]++,w) 
				}
 	}
 }
array table
-----------------------------------------------
outoin -> [('[k-1]', 'r', 'normalized', ['j', 'i', 'k'], 2220)]
LDEs formed:0

r1 -> [('[*nr]', 'w', 'not normalized', ['j', 'i', 'k'], 2224)]
LDEs formed:1

r2 -> [('[*nr]', 'w', 'not normalized', ['j', 'i', 'k'], 2225)]
LDEs formed:1

nd -> [('[nprt+(ii-1)*nnd]', 'r', 'not normalized', ['j', 'i', 'k'], 2223), ('[nprt+(ii-1)*nnd]', 'w', 'not normalized', ['j', 'i', 'k'], 2227)]
LDEs formed:2

outoinptr -> [('[i+1]', 'r', 'normalized', ['j', 'i', 'k'], 2219), ('[i]', 'r', 'normalized', ['j', 'i', 'k'], 2219), ('[nb]', 'r', 'not normalized', ['j', 'i', 'k'], 2222)]
LDEs formed:0

typ_r -> [('[ii-1]', 'r', 'not normalized', ['j', 'i', 'k'], 2221)]
LDEs formed:0

vec -> [('[i]', 'r', 'normalized', ['j', 'i', 'k'], 2218), ('[ii-1]', 'w', 'not normalized', ['j', 'i', 'k'], 2226)]
LDEs formed:2

nr -> [('[0]', 'w', 'normalized', ['j', 'i', 'k'], 2228)]
LDEs formed:1

distinct LDEs:
*nr=*nr
nprt+(ii-1)*nnd=nprt+(ii-1)*nnd
ii-1=ii-1
i1=ii-1
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<Blocks[0].noz k++
induction variable: ['k']
{
L2229: (Blocks[0].ozsz,r) 
L2230: (Blocks[0].ozsz,r) (Blocks[0].noz+,r) 
L2231: (Blocks[0].oztyp,r) 
L2232: (Blocks[0].ozptr,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['k'], 2229), ('[0]', 'r', 'normalized', ['k'], 2230), ('[0]', 'r', 'normalized', ['k'], 2230), ('[0]', 'r', 'normalized', ['k'], 2231), ('[0]', 'r', 'normalized', ['k'], 2232)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<Blocks[0].nin k++
induction variable: ['k']
{
L2233: (Blocks[0].insz,r) 
L2234: (Blocks[0].insz,r) (Blocks[0].nin+,r) 
L2235: (Blocks[0].insz,r) (Blocks[0].nin+,r) 
L2236: (Blocks[0].inptr,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['k'], 2233), ('[0]', 'r', 'normalized', ['k'], 2234), ('[0]', 'r', 'normalized', ['k'], 2234), ('[0]', 'r', 'normalized', ['k'], 2235), ('[0]', 'r', 'normalized', ['k'], 2235), ('[0]', 'r', 'normalized', ['k'], 2236)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<Blocks[0].nout k++
induction variable: ['k']
{
L2237: (Blocks[0].outsz,r) 
L2238: (Blocks[0].outsz,r) (Blocks[0].nout+,r) 
L2239: (Blocks[0].outsz,r) (Blocks[0].nout+,r) 
L2240: (Blocks[0].outptr,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['k'], 2237), ('[0]', 'r', 'normalized', ['k'], 2238), ('[0]', 'r', 'normalized', ['k'], 2238), ('[0]', 'r', 'normalized', ['k'], 2239), ('[0]', 'r', 'normalized', ['k'], 2239), ('[0]', 'r', 'normalized', ['k'], 2240)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<Blocks[0].nopar k++
induction variable: ['k']
{
L2241: (Blocks[0].oparsz,r) 
L2242: (Blocks[0].oparsz,r) (Blocks[0].nopar+,r) 
L2243: (Blocks[0].opartyp,r) 
L2244: (Blocks[0].oparptr,r) 
}
array table
-----------------------------------------------
Blocks -> [('[0]', 'r', 'normalized', ['k'], 2241), ('[0]', 'r', 'normalized', ['k'], 2242), ('[0]', 'r', 'normalized', ['k'], 2242), ('[0]', 'r', 'normalized', ['k'], 2243), ('[0]', 'r', 'normalized', ['k'], 2244)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<Block->nz j++
induction variable: ['j']
{
L2245: (z[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
z -> [('[j]', 'w', 'normalized', ['j'], 2245)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2245)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<2*Block->noz j++
induction variable: ['j']
{
L2246: (ozsz[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
ozsz -> [('[j]', 'w', 'normalized', ['j'], 2246)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2246)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<Block->noz j++
induction variable: ['j']
{
L2247: (oztyp[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
oztyp -> [('[j]', 'w', 'normalized', ['j'], 2247)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2247)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<Block->noz i++
induction variable: ['i']
{
L2248: (ilh2[1],r) 
L2249: (ilh2[2],r) 
L2250: (ozptr[i]=,w) 
L2251: (oztyp[i],r) 
L2252: (ozptr[i]=,w) 
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2253: (ozptr[i],r) 
L2254: (ilh2[4],r) 
L2255: (ozptr[i]=,w) 
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2256: (ozptr[i],r) 
L2257: (ilh2[4],r) 
L2258: (ozptr[i]=,w) 
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2259: (ozptr[i],r) 
L2260: (ilh2[4],r) 
L2261: (ozptr[i]=,w) 
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2262: (ozptr[i],r) 
L2263: (ilh2[4],r) 
L2264: (ozptr[i]=,w) 
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2265: (ozptr[i],r) 
L2266: (ilh2[4],r) 
L2267: (ozptr[i]=,w) 
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2268: (ozptr[i],r) 
L2269: (ilh2[4],r) 
L2270: (ozptr[i]=,w) 
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2271: (ozptr[i],r) 
L2272: (ilh2[4],r) 
L2273: (ozptr[i]=,w) 
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2274: (ozptr[i],r) 
L2275: (ilh2[4],r) 
}
array table
-----------------------------------------------
ilh2 -> [('[1]', 'r', 'normalized', ['i', 'j'], 2248), ('[2]', 'r', 'normalized', ['i', 'j'], 2249), ('[4]', 'r', 'normalized', ['i', 'j'], 2254), ('[4]', 'r', 'normalized', ['i', 'j'], 2257), ('[4]', 'r', 'normalized', ['i', 'j'], 2260), ('[4]', 'r', 'normalized', ['i', 'j'], 2263), ('[4]', 'r', 'normalized', ['i', 'j'], 2266), ('[4]', 'r', 'normalized', ['i', 'j'], 2269), ('[4]', 'r', 'normalized', ['i', 'j'], 2272), ('[4]', 'r', 'normalized', ['i', 'j'], 2275)]
LDEs formed:0

oztyp -> [('[i]', 'r', 'normalized', ['i', 'j'], 2251)]
LDEs formed:0

ozptr -> [('[i]', 'w', 'normalized', ['i', 'j'], 2250), ('[i]', 'w', 'normalized', ['i', 'j'], 2252), ('[i]', 'r', 'normalized', ['i', 'j'], 2253), ('[i]', 'w', 'normalized', ['i', 'j'], 2255), ('[i]', 'r', 'normalized', ['i', 'j'], 2256), ('[i]', 'w', 'normalized', ['i', 'j'], 2258), ('[i]', 'r', 'normalized', ['i', 'j'], 2259), ('[i]', 'w', 'normalized', ['i', 'j'], 2261), ('[i]', 'r', 'normalized', ['i', 'j'], 2262), ('[i]', 'w', 'normalized', ['i', 'j'], 2264), ('[i]', 'r', 'normalized', ['i', 'j'], 2265), ('[i]', 'w', 'normalized', ['i', 'j'], 2267), ('[i]', 'r', 'normalized', ['i', 'j'], 2268), ('[i]', 'w', 'normalized', ['i', 'j'], 2270), ('[i]', 'r', 'normalized', ['i', 'j'], 2271), ('[i]', 'w', 'normalized', ['i', 'j'], 2273), ('[i]', 'r', 'normalized', ['i', 'j'], 2274)]
LDEs formed:117

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2275: (x[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
x -> [('[j]', 'w', 'normalized', ['j'], 2275)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2275)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2276: (xd[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['j'], 2276)]
LDEs formed:0

xd -> [('[j]', 'w', 'normalized', ['j'], 2276)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2277: (res[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
res -> [('[j]', 'w', 'normalized', ['j'], 2277)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2277)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<3*Block->nin j++
induction variable: ['j']
{
L2278: (insz[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
insz -> [('[j]', 'w', 'normalized', ['j'], 2278)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2278)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<Block->nin i++
induction variable: ['i']
{
L2279: (ilh2[1],r) 
L2280: (ilh2[2],r) 
L2281: (inptr[i]=,w) 
L2282: (insz[2*Block->nin+i],r) 
L2283: (inptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2284: (inptr[i],r) 
L2285: (ilh2[4],r) 
L2286: (inptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2287: (inptr[i],r) 
L2288: (ilh2[4],r) 
L2289: (inptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2290: (inptr[i],r) 
L2291: (ilh2[4],r) 
L2292: (inptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2293: (inptr[i],r) 
L2294: (ilh2[4],r) 
L2295: (inptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2296: (inptr[i],r) 
L2297: (ilh2[4],r) 
L2298: (inptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2299: (inptr[i],r) 
L2300: (ilh2[4],r) 
L2301: (inptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2302: (inptr[i],r) 
L2303: (ilh2[4],r) 
L2304: (inptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2305: (inptr[i],r) 
L2306: (ilh2[4],r) 
}
array table
-----------------------------------------------
ilh2 -> [('[1]', 'r', 'normalized', ['i', 'j'], 2279), ('[2]', 'r', 'normalized', ['i', 'j'], 2280), ('[4]', 'r', 'normalized', ['i', 'j'], 2285), ('[4]', 'r', 'normalized', ['i', 'j'], 2288), ('[4]', 'r', 'normalized', ['i', 'j'], 2291), ('[4]', 'r', 'normalized', ['i', 'j'], 2294), ('[4]', 'r', 'normalized', ['i', 'j'], 2297), ('[4]', 'r', 'normalized', ['i', 'j'], 2300), ('[4]', 'r', 'normalized', ['i', 'j'], 2303), ('[4]', 'r', 'normalized', ['i', 'j'], 2306)]
LDEs formed:0

insz -> [('[2*Block->nin+i]', 'r', 'not normalized', ['i', 'j'], 2282)]
LDEs formed:0

inptr -> [('[i]', 'w', 'normalized', ['i', 'j'], 2281), ('[i]', 'w', 'normalized', ['i', 'j'], 2283), ('[i]', 'r', 'normalized', ['i', 'j'], 2284), ('[i]', 'w', 'normalized', ['i', 'j'], 2286), ('[i]', 'r', 'normalized', ['i', 'j'], 2287), ('[i]', 'w', 'normalized', ['i', 'j'], 2289), ('[i]', 'r', 'normalized', ['i', 'j'], 2290), ('[i]', 'w', 'normalized', ['i', 'j'], 2292), ('[i]', 'r', 'normalized', ['i', 'j'], 2293), ('[i]', 'w', 'normalized', ['i', 'j'], 2295), ('[i]', 'r', 'normalized', ['i', 'j'], 2296), ('[i]', 'w', 'normalized', ['i', 'j'], 2298), ('[i]', 'r', 'normalized', ['i', 'j'], 2299), ('[i]', 'w', 'normalized', ['i', 'j'], 2301), ('[i]', 'r', 'normalized', ['i', 'j'], 2302), ('[i]', 'w', 'normalized', ['i', 'j'], 2304), ('[i]', 'r', 'normalized', ['i', 'j'], 2305)]
LDEs formed:117

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<3*Block->nout j++
induction variable: ['j']
{
L2306: (outsz[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
outsz -> [('[j]', 'w', 'normalized', ['j'], 2306)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2306)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<Block->nout i++
induction variable: ['i']
{
L2307: (ilh2[1],r) 
L2308: (ilh2[2],r) 
L2309: (outptr[i]=,w) 
L2310: (outsz[2*Block->nout+i],r) 
L2311: (outptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2312: (outptr[i],r) 
L2313: (ilh2[4],r) 
L2314: (outptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2315: (outptr[i],r) 
L2316: (ilh2[4],r) 
L2317: (outptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2318: (outptr[i],r) 
L2319: (ilh2[4],r) 
L2320: (outptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2321: (outptr[i],r) 
L2322: (ilh2[4],r) 
L2323: (outptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2324: (outptr[i],r) 
L2325: (ilh2[4],r) 
L2326: (outptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2327: (outptr[i],r) 
L2328: (ilh2[4],r) 
L2329: (outptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2330: (outptr[i],r) 
L2331: (ilh2[4],r) 
L2332: (outptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2333: (outptr[i],r) 
L2334: (ilh2[4],r) 
}
array table
-----------------------------------------------
ilh2 -> [('[1]', 'r', 'normalized', ['i', 'j'], 2307), ('[2]', 'r', 'normalized', ['i', 'j'], 2308), ('[4]', 'r', 'normalized', ['i', 'j'], 2313), ('[4]', 'r', 'normalized', ['i', 'j'], 2316), ('[4]', 'r', 'normalized', ['i', 'j'], 2319), ('[4]', 'r', 'normalized', ['i', 'j'], 2322), ('[4]', 'r', 'normalized', ['i', 'j'], 2325), ('[4]', 'r', 'normalized', ['i', 'j'], 2328), ('[4]', 'r', 'normalized', ['i', 'j'], 2331), ('[4]', 'r', 'normalized', ['i', 'j'], 2334)]
LDEs formed:0

outsz -> [('[2*Block->nout+i]', 'r', 'not normalized', ['i', 'j'], 2310)]
LDEs formed:0

outptr -> [('[i]', 'w', 'normalized', ['i', 'j'], 2309), ('[i]', 'w', 'normalized', ['i', 'j'], 2311), ('[i]', 'r', 'normalized', ['i', 'j'], 2312), ('[i]', 'w', 'normalized', ['i', 'j'], 2314), ('[i]', 'r', 'normalized', ['i', 'j'], 2315), ('[i]', 'w', 'normalized', ['i', 'j'], 2317), ('[i]', 'r', 'normalized', ['i', 'j'], 2318), ('[i]', 'w', 'normalized', ['i', 'j'], 2320), ('[i]', 'r', 'normalized', ['i', 'j'], 2321), ('[i]', 'w', 'normalized', ['i', 'j'], 2323), ('[i]', 'r', 'normalized', ['i', 'j'], 2324), ('[i]', 'w', 'normalized', ['i', 'j'], 2326), ('[i]', 'r', 'normalized', ['i', 'j'], 2327), ('[i]', 'w', 'normalized', ['i', 'j'], 2329), ('[i]', 'r', 'normalized', ['i', 'j'], 2330), ('[i]', 'w', 'normalized', ['i', 'j'], 2332), ('[i]', 'r', 'normalized', ['i', 'j'], 2333)]
LDEs formed:117

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2334: (evout[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
evout -> [('[j]', 'w', 'normalized', ['j'], 2334)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2334)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < (mh*nh) j++
induction variable: ['j']
{
L2335: (rpar[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['j'], 2335)]
LDEs formed:0

rpar -> [('[j]', 'w', 'normalized', ['j'], 2335)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2336: (ipar[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['j'], 2336)]
LDEs formed:0

ipar -> [('[j]', 'w', 'normalized', ['j'], 2336)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<2*Block->nopar j++
induction variable: ['j']
{
L2337: (oparsz[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
oparsz -> [('[j]', 'w', 'normalized', ['j'], 2337)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2337)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<Block->nopar j++
induction variable: ['j']
{
L2338: (opartyp[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
opartyp -> [('[j]', 'w', 'normalized', ['j'], 2338)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2338)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<Block->nopar i++
induction variable: ['i']
{
L2339: (ilh2[1],r) 
L2340: (ilh2[2],r) 
L2341: (oparptr[i]=,w) 
L2342: (opartyp[i],r) 
L2343: (oparptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nout j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2344: (oparptr[i],r) 
L2345: (ilh2[4],r) 
L2346: (oparptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nout j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2347: (oparptr[i],r) 
L2348: (ilh2[4],r) 
L2349: (oparptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nout j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2350: (oparptr[i],r) 
L2351: (ilh2[4],r) 
L2352: (oparptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nout j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2353: (oparptr[i],r) 
L2354: (ilh2[4],r) 
L2355: (oparptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nout j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2356: (oparptr[i],r) 
L2357: (ilh2[4],r) 
L2358: (oparptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nout j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2359: (oparptr[i],r) 
L2360: (ilh2[4],r) 
L2361: (oparptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nout j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2362: (oparptr[i],r) 
L2363: (ilh2[4],r) 
L2364: (oparptr[i]=,w) 
	loop info: j=0 j<Block->noz j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nin j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<Block->nout j++
	induction variable: ['i', 'j']
			}
	loop info: j=0 j<i j++
	induction variable: ['i', 'j']
			}
L2365: (oparptr[i],r) 
L2366: (ilh2[4],r) 
}
array table
-----------------------------------------------
opartyp -> [('[i]', 'r', 'normalized', ['i', 'j'], 2342)]
LDEs formed:0

ilh2 -> [('[1]', 'r', 'normalized', ['i', 'j'], 2339), ('[2]', 'r', 'normalized', ['i', 'j'], 2340), ('[4]', 'r', 'normalized', ['i', 'j'], 2345), ('[4]', 'r', 'normalized', ['i', 'j'], 2348), ('[4]', 'r', 'normalized', ['i', 'j'], 2351), ('[4]', 'r', 'normalized', ['i', 'j'], 2354), ('[4]', 'r', 'normalized', ['i', 'j'], 2357), ('[4]', 'r', 'normalized', ['i', 'j'], 2360), ('[4]', 'r', 'normalized', ['i', 'j'], 2363), ('[4]', 'r', 'normalized', ['i', 'j'], 2366)]
LDEs formed:0

oparptr -> [('[i]', 'w', 'normalized', ['i', 'j'], 2341), ('[i]', 'w', 'normalized', ['i', 'j'], 2343), ('[i]', 'r', 'normalized', ['i', 'j'], 2344), ('[i]', 'w', 'normalized', ['i', 'j'], 2346), ('[i]', 'r', 'normalized', ['i', 'j'], 2347), ('[i]', 'w', 'normalized', ['i', 'j'], 2349), ('[i]', 'r', 'normalized', ['i', 'j'], 2350), ('[i]', 'w', 'normalized', ['i', 'j'], 2352), ('[i]', 'r', 'normalized', ['i', 'j'], 2353), ('[i]', 'w', 'normalized', ['i', 'j'], 2355), ('[i]', 'r', 'normalized', ['i', 'j'], 2356), ('[i]', 'w', 'normalized', ['i', 'j'], 2358), ('[i]', 'r', 'normalized', ['i', 'j'], 2359), ('[i]', 'w', 'normalized', ['i', 'j'], 2361), ('[i]', 'r', 'normalized', ['i', 'j'], 2362), ('[i]', 'w', 'normalized', ['i', 'j'], 2364), ('[i]', 'r', 'normalized', ['i', 'j'], 2365)]
LDEs formed:117

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2366: (g[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['j'], 2366)]
LDEs formed:0

g -> [('[j]', 'w', 'normalized', ['j'], 2366)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2367: (jroot[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
jroot -> [('[j]', 'w', 'normalized', ['j'], 2367)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2367)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2368: (mode[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
mode -> [('[j]', 'w', 'normalized', ['j'], 2368)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2368)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<(mh*nh) j++
induction variable: ['j']
{
L2369: (xprop[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['j'], 2369)]
LDEs formed:0

xprop -> [('[j]', 'w', 'normalized', ['j'], 2369)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0  k<nf  k++
induction variable: ['k']
{
L2370: (headerstr[6+k]-,r) (headerstr[5+k],r) 
L2371: (headerstr[5+k],r) 
L2372: (headerstr[istart],r) 
L2373: (str[longueur]=,w) 
}
array table
-----------------------------------------------
headerstr -> [('[6+k]', 'r', 'normalized', ['k'], 2370), ('[5+k]', 'r', 'normalized', ['k'], 2370), ('[5+k]', 'r', 'normalized', ['k'], 2371), ('[istart]', 'r', 'not normalized', ['k'], 2372)]
LDEs formed:0

str -> [('[longueur]', 'w', 'not normalized', ['k'], 2373)]
LDEs formed:1

distinct LDEs:
longueur=longueur
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < count  j++
induction variable: ['j']
{
L2374: (vs[j]=,w) 
L2375: (vs[j]=,w) 
L2376: (vs[j]==,r) 
}
array table
-----------------------------------------------
vs -> [('[j]', 'w', 'normalized', ['j'], 2374), ('[j]', 'w', 'normalized', ['j'], 2375), ('[j]', 'r', 'normalized', ['j'], 2376)]
LDEs formed:5

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < count  j++
induction variable: ['j']
{
L2377: (vs[j]=,w) 
L2378: (vs[j]=,w) 
L2379: (vs[j]==,r) 
}
array table
-----------------------------------------------
vs -> [('[j]', 'w', 'normalized', ['j'], 2377), ('[j]', 'w', 'normalized', ['j'], 2378), ('[j]', 'r', 'normalized', ['j'], 2379)]
LDEs formed:5

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2380: (xd[i],r) 
L2381: (xd[i],r) 
L2382: (xd[i],r) 
}
array table
-----------------------------------------------
xd -> [('[i]', 'r', 'normalized', ['i'], 2380), ('[i]', 'r', 'normalized', ['i'], 2381), ('[i]', 'r', 'normalized', ['i'], 2382)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2383: (xd[i],r) (xd[i],r) 
}
array table
-----------------------------------------------
xd -> [('[i]', 'r', 'normalized', ['i'], 2383), ('[i]', 'r', 'normalized', ['i'], 2383)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2384: (xd[i]*,r) (wd[i],r) 
}
array table
-----------------------------------------------
wd -> [('[i]', 'r', 'normalized', ['i'], 2384)]
LDEs formed:0

xd -> [('[i]', 'r', 'normalized', ['i'], 2384)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2385: (idd[i],r) 
L2386: (xd[i]*,r) (wd[i],r) 
}
array table
-----------------------------------------------
idd -> [('[i]', 'r', 'normalized', ['i'], 2385)]
LDEs formed:0

wd -> [('[i]', 'r', 'normalized', ['i'], 2386)]
LDEs formed:0

xd -> [('[i]', 'r', 'normalized', ['i'], 2386)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < N  i++
induction variable: ['i']
{
L2387: (xd[i],r) (xd[i],r) 
}
array table
-----------------------------------------------
xd -> [('[i]', 'r', 'normalized', ['i'], 2387), ('[i]', 'r', 'normalized', ['i'], 2387)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2388: (xd[i]*,r) (wd[i],r) 
}
array table
-----------------------------------------------
wd -> [('[i]', 'r', 'normalized', ['i'], 2388)]
LDEs formed:0

xd -> [('[i]', 'r', 'normalized', ['i'], 2388)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2389: (zd[i]=,w) (xd[i],r) 
}
array table
-----------------------------------------------
zd -> [('[i]', 'w', 'normalized', ['i'], 2389)]
LDEs formed:1

xd -> [('[i]', 'r', 'normalized', ['i'], 2389)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2390: (xd[i]==,r) 
L2391: (zd[i]=,w) (xd[i],r) 
}
array table
-----------------------------------------------
zd -> [('[i]', 'w', 'normalized', ['i'], 2391)]
LDEs formed:1

xd -> [('[i]', 'r', 'normalized', ['i'], 2390), ('[i]', 'r', 'normalized', ['i'], 2391)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2392: (md[i]=,w) 
L2393: (cd[i]==,r) 
L2394: (cd[i],r) (cd[i],r) 
L2395: (xd[i]*,r) (cd[i],r) (md[i]=,w) 
L2396: (cd[i],r) (cd[i],r) 
L2397: (xd[i]*,r) (cd[i],r) (md[i]=,w) 
}
array table
-----------------------------------------------
md -> [('[i]', 'w', 'normalized', ['i'], 2392), ('[i]', 'w', 'normalized', ['i'], 2395), ('[i]', 'w', 'normalized', ['i'], 2397)]
LDEs formed:6

xd -> [('[i]', 'r', 'normalized', ['i'], 2395), ('[i]', 'r', 'normalized', ['i'], 2397)]
LDEs formed:0

cd -> [('[i]', 'r', 'normalized', ['i'], 2393), ('[i]', 'r', 'normalized', ['i'], 2394), ('[i]', 'r', 'normalized', ['i'], 2394), ('[i]', 'r', 'normalized', ['i'], 2395), ('[i]', 'r', 'normalized', ['i'], 2396), ('[i]', 'r', 'normalized', ['i'], 2396), ('[i]', 'r', 'normalized', ['i'], 2397)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
L2398: (dd[i]==,r) 
L2399: (nd[i]/,r) (dd[i],r) 
L2400: (nd[i]/,r) (dd[i],r) 
}
array table
-----------------------------------------------
dd -> [('[i]', 'r', 'normalized', ['i'], 2398), ('[i]', 'r', 'normalized', ['i'], 2399), ('[i]', 'r', 'normalized', ['i'], 2400)]
LDEs formed:0

nd -> [('[i]', 'r', 'normalized', ['i'], 2399), ('[i]', 'r', 'normalized', ['i'], 2400)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < N  j++
induction variable: ['j']
{
L2401: (y_data[j],r) 
L2402: (ewt_data[j],r) 
L2403: (y_data[j]+=,w) 
L2404: (y_data[j]=,w) 
}
array table
-----------------------------------------------
y_data -> [('[j]', 'r', 'normalized', ['j'], 2401), ('[j]', 'w', 'normalized', ['j'], 2403), ('[j]', 'w', 'normalized', ['j'], 2404)]
LDEs formed:5

ewt_data -> [('[j]', 'r', 'normalized', ['j'], 2402)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2403: (zn[0],r) 
L2404: (zn[0],r) 
L2405: (zn[0],r) 
L2406: (zn[0],r) 
L2407: (zn[0],r) 
L2408: (zn[0],r) 
L2409: (zn[0],r) 
}
array table
-----------------------------------------------
zn -> [('[0]', 'r', 'normalized', [], 2403), ('[0]', 'r', 'normalized', [], 2404), ('[0]', 'r', 'normalized', [], 2405), ('[0]', 'r', 'normalized', [], 2406), ('[0]', 'r', 'normalized', [], 2407), ('[0]', 'r', 'normalized', [], 2408), ('[0]', 'r', 'normalized', [], 2409)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L2410: (zn[q],r) 
L2411: (zn[j],r) 
}
array table
-----------------------------------------------
zn -> [('[q]', 'r', 'not normalized', ['j', 'i'], 2410), ('[j]', 'r', 'normalized', ['j', 'i'], 2411)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j <= qmax  j++
induction variable: ['j']
{
L2412: (zn[j]=,w) 
L2413: (zn[j]=,w) 
L2414: (zn[j]==,r) 
	loop info: i=0  i < j  i++
	induction variable: ['j', 'i']
		}
 }
array table
-----------------------------------------------
zn -> [('[j]', 'w', 'normalized', ['j', 'i'], 2412), ('[j]', 'w', 'normalized', ['j', 'i'], 2413), ('[j]', 'r', 'normalized', ['j', 'i'], 2414)]
LDEs formed:5

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1  j <= q-2  j++
induction variable: ['j']
{
L2415: (tau[j],r) 
	loop info: i=j+1  i >= 1  i--
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
tau -> [('[j]', 'r', 'normalized', ['j', 'i'], 2415)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1  j < q  j++
induction variable: ['j']
{
L2416: (tau[j+1],r) 
	loop info: i=j+2  i >= 2  i--
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
tau -> [('[j+1]', 'r', 'normalized', ['j', 'i'], 2416)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=2  j <= q  j++
induction variable: ['j']
{
L2417: (l[j],r) (zn[L],r) (zn[j],r) (zn[j],r) 
}
array table
-----------------------------------------------
zn -> [('[L]', 'r', 'not normalized', ['j'], 2417), ('[j]', 'r', 'normalized', ['j'], 2417), ('[j]', 'r', 'normalized', ['j'], 2417)]
LDEs formed:0

l -> [('[j]', 'r', 'normalized', ['j'], 2417)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1  j <= q-2  j++
induction variable: ['j']
{
L2418: (tau[j],r) 
	loop info: i=j+2  i >= 2  i--
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
tau -> [('[j]', 'r', 'normalized', ['j', 'i'], 2418)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1  j <= q  j++
induction variable: ['j']
{
L2419: (zn[j],r) (zn[j],r) 
}
array table
-----------------------------------------------
zn -> [('[j]', 'r', 'normalized', ['j'], 2419), ('[j]', 'r', 'normalized', ['j'], 2419)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1  j < q  j++
induction variable: ['j']
{
L2420: (tq[1]=,w) (m[q-2]/,r) 
	loop info: i=j  i >= 1  i--
	induction variable: ['j', 'i']
	}
L2421: (tau[j],r) 
}
array table
-----------------------------------------------
tau -> [('[j]', 'r', 'normalized', ['j', 'i'], 2421)]
LDEs formed:0

m -> [('[q-2]', 'r', 'not normalized', ['j', 'i'], 2420)]
LDEs formed:0

tq -> [('[1]', 'w', 'normalized', ['j', 'i'], 2420)]
LDEs formed:1

distinct LDEs:
1=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i <= iend  i++
induction variable: ['i']
{
L2421: (a[i]/,r) 
}
array table
-----------------------------------------------
a -> [('[i]', 'r', 'normalized', ['i'], 2421)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=2  j < q  j++
induction variable: ['j']
{
L2422: (tau[j-1],r) 
	loop info: i=j  i >= 1  i--
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
tau -> [('[j-1]', 'r', 'normalized', ['j', 'i'], 2422)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2423: (zn[1],r) 
L2424: (zn[0],r) 
L2425: (tq[4],r) 
}
array table
-----------------------------------------------
zn -> [('[1]', 'r', 'normalized', [], 2423), ('[0]', 'r', 'normalized', [], 2424)]
LDEs formed:0

tq -> [('[4]', 'r', 'normalized', [], 2425)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2426: (zn[0],r) 
L2427: (zn[0],r) 
L2428: (zn[0],r) 
}
array table
-----------------------------------------------
zn -> [('[0]', 'r', 'normalized', [], 2426), ('[0]', 'r', 'normalized', [], 2427), ('[0]', 'r', 'normalized', [], 2428)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2429: (zn[1],r) 
L2430: (zn[0],r) 
L2431: (tq[4],r) 
}
array table
-----------------------------------------------
zn -> [('[1]', 'r', 'normalized', [], 2429), ('[0]', 'r', 'normalized', [], 2430)]
LDEs formed:0

tq -> [('[4]', 'r', 'normalized', [], 2431)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1  k<=3  k++
induction variable: ['k']
{
L2432: (ssdat[1][k],r) 
	loop info: i=1  i<=5  i++
	induction variable: ['k', 'i']
	{
	L2433: (ssdat[i][k],r) 
	L2434: (ssdat[i][k],r) 
	}
L2435: (smax[k]=,w) 
L2436: (ssmax[k]=,w) 
	loop info: i=1  i<=4  i++
	induction variable: ['k', 'i']
	{
	L2437: (rat[i][k]=,w) (ssdat[i][k]/,r) (ssdat[i+1][k],r) 
	L2438: (rat[i][k],r) 
	L2439: (rat[i][k]*,r) (rat[i][k],r) 
	}
L2440: (rav[k]=,w) 
L2441: (vrat[k]=,w) (rav[k]*,r) (rav[k],r) 
L2442: (qc[5][k]=,w) (ssdat[1][k]*,r) (ssdat[3][k]-,r) (ssdat[2][k]*,r) (ssdat[2][k],r) 
L2443: (qc[4][k]=,w) (ssdat[2][k]*,r) (ssdat[3][k]-,r) (ssdat[1][k]*,r) (ssdat[4][k],r) 
L2444: (qc[3][k]=,w) 
L2445: (qc[2][k]=,w) (ssdat[2][k]*,r) (ssdat[5][k]-,r) (ssdat[3][k]*,r) (ssdat[4][k],r) 
L2446: (qc[1][k]=,w) (ssdat[4][k]*,r) (ssdat[4][k]-,r) (ssdat[3][k]*,r) (ssdat[5][k],r) 
	loop info: i=1  i<=5  i++
	induction variable: ['k', 'i']
	{
	L2447: (qco[i][k]=,w) (qc[i][k],r) 
	}
 }
array table
-----------------------------------------------
vrat -> [('[k]', 'w', 'normalized', ['k', 'i'], 2441)]
LDEs formed:1

qco -> [('[i][k]', 'w', 'normalized', ['k', 'i'], 2447)]
LDEs formed:2

smax -> [('[k]', 'w', 'normalized', ['k', 'i'], 2435)]
LDEs formed:1

qc -> [('[5][k]', 'w', 'normalized', ['k', 'i'], 2442), ('[4][k]', 'w', 'normalized', ['k', 'i'], 2443), ('[3][k]', 'w', 'normalized', ['k', 'i'], 2444), ('[2][k]', 'w', 'normalized', ['k', 'i'], 2445), ('[1][k]', 'w', 'normalized', ['k', 'i'], 2446), ('[i][k]', 'r', 'normalized', ['k', 'i'], 2447)]
LDEs formed:40

rav -> [('[k]', 'w', 'normalized', ['k', 'i'], 2440), ('[k]', 'r', 'normalized', ['k', 'i'], 2441), ('[k]', 'r', 'normalized', ['k', 'i'], 2441)]
LDEs formed:3

rat -> [('[i][k]', 'w', 'normalized', ['k', 'i'], 2437), ('[i][k]', 'r', 'normalized', ['k', 'i'], 2438), ('[i][k]', 'r', 'normalized', ['k', 'i'], 2439), ('[i][k]', 'r', 'normalized', ['k', 'i'], 2439)]
LDEs formed:8

ssmax -> [('[k]', 'w', 'normalized', ['k', 'i'], 2436)]
LDEs formed:1

ssdat -> [('[1][k]', 'r', 'normalized', ['k', 'i'], 2432), ('[i][k]', 'r', 'normalized', ['k', 'i'], 2433), ('[i][k]', 'r', 'normalized', ['k', 'i'], 2434), ('[i][k]', 'r', 'normalized', ['k', 'i'], 2437), ('[i+1][k]', 'r', 'normalized', ['k', 'i'], 2437), ('[1][k]', 'r', 'normalized', ['k', 'i'], 2442), ('[3][k]', 'r', 'normalized', ['k', 'i'], 2442), ('[2][k]', 'r', 'normalized', ['k', 'i'], 2442), ('[2][k]', 'r', 'normalized', ['k', 'i'], 2442), ('[2][k]', 'r', 'normalized', ['k', 'i'], 2443), ('[3][k]', 'r', 'normalized', ['k', 'i'], 2443), ('[1][k]', 'r', 'normalized', ['k', 'i'], 2443), ('[4][k]', 'r', 'normalized', ['k', 'i'], 2443), ('[2][k]', 'r', 'normalized', ['k', 'i'], 2445), ('[5][k]', 'r', 'normalized', ['k', 'i'], 2445), ('[3][k]', 'r', 'normalized', ['k', 'i'], 2445), ('[4][k]', 'r', 'normalized', ['k', 'i'], 2445), ('[4][k]', 'r', 'normalized', ['k', 'i'], 2446), ('[4][k]', 'r', 'normalized', ['k', 'i'], 2446), ('[3][k]', 'r', 'normalized', ['k', 'i'], 2446), ('[5][k]', 'r', 'normalized', ['k', 'i'], 2446)]
LDEs formed:0

distinct LDEs:
i1=i2,k1=k2
5=1,k1=k2
2=i2,k1=k2
1=1,k1=k2
4=2,k1=k2
5=5,k1=k2
3=3,k1=k2
5=i2,k1=k2
1=i2,k1=k2
4=4,k1=k2
k1=k2
4=i2,k1=k2
3=1,k1=k2
2=1,k1=k2
5=3,k1=k2
4=1,k1=k2
5=2,k1=k2
3=i2,k1=k2
4=3,k1=k2
3=2,k1=k2
5=4,k1=k2
2=2,k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1 k<=3 k++
induction variable: ['k']
{
L2447: (rav[k]-,r) 
}
array table
-----------------------------------------------
rav -> [('[k]', 'r', 'normalized', ['k'], 2447)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=2  i<=5  i++
induction variable: ['i']
{
L2448: (qco[i][2]=,w) (qco[i][2]-,r) (qco[i][1],r) 
}
array table
-----------------------------------------------
qco -> [('[i][2]', 'w', 'normalized', ['i'], 2448), ('[i][2]', 'r', 'normalized', ['i'], 2448), ('[i][1]', 'r', 'normalized', ['i'], 2448)]
LDEs formed:6

distinct LDEs:
i1=i2,2=2
i1=i2,2=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=2  i<=5  i++
induction variable: ['i']
{
L2449: (qco[i][3]=,w) (qco[i][3]-,r) (qco[i][1],r) 
}
array table
-----------------------------------------------
qco -> [('[i][3]', 'w', 'normalized', ['i'], 2449), ('[i][3]', 'r', 'normalized', ['i'], 2449), ('[i][1]', 'r', 'normalized', ['i'], 2449)]
LDEs formed:6

distinct LDEs:
i1=i2,3=3
i1=i2,3=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=3  i<=5  i++
induction variable: ['i']
{
L2450: (qco[i][3]=,w) (qco[i][3]-,r) (qco[i][2],r) 
}
array table
-----------------------------------------------
qco -> [('[i][3]', 'w', 'normalized', ['i'], 2450), ('[i][3]', 'r', 'normalized', ['i'], 2450), ('[i][2]', 'r', 'normalized', ['i'], 2450)]
LDEs formed:6

distinct LDEs:
i1=i2,3=3
i1=i2,3=2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1  k<=3  k++
induction variable: ['k']
{
L2451: (qkr[k]=,w) (qc[5][k]+,r) (qc[4][k]+,r) (qc[2][k]+,r) (qc[1][k],r) 
}
array table
-----------------------------------------------
qkr -> [('[k]', 'w', 'normalized', ['k'], 2451)]
LDEs formed:1

qc -> [('[5][k]', 'r', 'normalized', ['k'], 2451), ('[4][k]', 'r', 'normalized', ['k'], 2451), ('[2][k]', 'r', 'normalized', ['k'], 2451), ('[1][k]', 'r', 'normalized', ['k'], 2451)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1  k<=3  k++
induction variable: ['k']
{
L2452: (qkr[k],r) (ssmax[k],r) 
}
array table
-----------------------------------------------
qkr -> [('[k]', 'r', 'normalized', ['k'], 2452)]
LDEs formed:0

ssmax -> [('[k]', 'r', 'normalized', ['k'], 2452)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: it=1  it<=3  it++
induction variable: ['it']
{
	loop info: k=1  k<=3  k++
	induction variable: ['it', 'k']
	{
	L2453: (qc[4][k]+,r) (qc[2][k]+,r) (qc[1][k],r) 
	L2454: (drr[k]=,w) 
	L2455: (ssmax[k],r) (drr[k]=,w) (qkr[k]/,r) 
	L2456: (rrc[k]=,w) (drr[k],r) 
	}
	loop info: k=1  k<=3  k++
	induction variable: ['it', 'k']
	{
	L2457: (rrc[k],r) 
		loop info: j=1  j<=3  j++
		induction variable: ['it', 'k', 'j']
		{
		L2458: (qjk[j][k]=,w) (qc[5][j]+,r) (qc[4][j]+,r) 
		L2459: (qc[2][j]+,r) (qc[1][j],r) 
		L2460: (qjk[j][k],r) (ssmax[j],r) 
		}
	L2461: (sqmx[k]=,w) 
	}
L2462: (sqmx[1],r) 
	loop info: k=2  k<=3  k++
	induction variable: ['it', 'k', 'j']
	{
	L2463: (sqmx[k],r) 
	L2464: (sqmx[k],r) 
	}
L2465: (rrc[kmin],r) 
	loop info: j=1  j<=3  j++
	induction variable: ['it', 'k', 'j']
		{
		L2466: (qkr[j]=,w) (qjk[j][kmin],r) 
		}
 }
array table
-----------------------------------------------
qjk -> [('[j][k]', 'w', 'normalized', ['it', 'k', 'j'], 2458), ('[j][k]', 'r', 'normalized', ['it', 'k', 'j'], 2460), ('[j][kmin]', 'r', 'not normalized', ['it', 'k', 'j'], 2466)]
LDEs formed:6

drr -> [('[k]', 'w', 'normalized', ['it', 'k', 'j'], 2454), ('[k]', 'w', 'normalized', ['it', 'k', 'j'], 2455), ('[k]', 'r', 'normalized', ['it', 'k', 'j'], 2456)]
LDEs formed:5

rrc -> [('[k]', 'w', 'normalized', ['it', 'k', 'j'], 2456), ('[k]', 'r', 'normalized', ['it', 'k', 'j'], 2457), ('[kmin]', 'r', 'not normalized', ['it', 'k', 'j'], 2465)]
LDEs formed:3

qc -> [('[4][k]', 'r', 'normalized', ['it', 'k', 'j'], 2453), ('[2][k]', 'r', 'normalized', ['it', 'k', 'j'], 2453), ('[1][k]', 'r', 'normalized', ['it', 'k', 'j'], 2453), ('[5][j]', 'r', 'normalized', ['it', 'k', 'j'], 2458), ('[4][j]', 'r', 'normalized', ['it', 'k', 'j'], 2458), ('[2][j]', 'r', 'normalized', ['it', 'k', 'j'], 2459), ('[1][j]', 'r', 'normalized', ['it', 'k', 'j'], 2459)]
LDEs formed:0

sqmx -> [('[k]', 'w', 'normalized', ['it', 'k', 'j'], 2461), ('[1]', 'r', 'normalized', ['it', 'k', 'j'], 2462), ('[k]', 'r', 'normalized', ['it', 'k', 'j'], 2463), ('[k]', 'r', 'normalized', ['it', 'k', 'j'], 2464)]
LDEs formed:4

ssmax -> [('[k]', 'r', 'normalized', ['it', 'k', 'j'], 2455), ('[j]', 'r', 'normalized', ['it', 'k', 'j'], 2460)]
LDEs formed:0

qkr -> [('[k]', 'r', 'normalized', ['it', 'k', 'j'], 2455), ('[j]', 'w', 'normalized', ['it', 'k', 'j'], 2466)]
LDEs formed:2

distinct LDEs:
j1=j2,k1=k2
j1=j2,k1=kmin
k1=j2
k1=1
k1=k2
j1=j2
k1=kmin
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1  k<=3  k++
induction variable: ['k']
{
L2467: (ssdat[1][k],r) 
L2468: (ssdat[2][k]*,r) 
L2469: (ssdat[3][k]*,r) 
L2470: (ssdat[4][k]*,r) 
L2471: (smax[k],r) 
L2472: (sigsq[k]=,w) (ssdat[3][k]+,r) 
}
array table
-----------------------------------------------
smax -> [('[k]', 'r', 'normalized', ['k'], 2471)]
LDEs formed:0

ssdat -> [('[1][k]', 'r', 'normalized', ['k'], 2467), ('[2][k]', 'r', 'normalized', ['k'], 2468), ('[3][k]', 'r', 'normalized', ['k'], 2469), ('[4][k]', 'r', 'normalized', ['k'], 2470), ('[3][k]', 'r', 'normalized', ['k'], 2472)]
LDEs formed:0

sigsq -> [('[k]', 'w', 'normalized', ['k'], 2472)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2473: (glo[i],r) 
}
array table
-----------------------------------------------
glo -> [('[i]', 'r', 'normalized', ['i'], 2473)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2474: (glo[i],r) 
L2475: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2475)]
LDEs formed:1

glo -> [('[i]', 'r', 'normalized', ['i'], 2474)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2475: (glo[i],r) 
L2476: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2476)]
LDEs formed:1

glo -> [('[i]', 'r', 'normalized', ['i'], 2475)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2476: (glo[i],r) 
L2477: (iroots[i]==,r) 
L2478: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'r', 'normalized', ['i'], 2477), ('[i]', 'w', 'normalized', ['i'], 2478)]
LDEs formed:2

glo -> [('[i]', 'r', 'normalized', ['i'], 2476)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nrtfn  i++
induction variable: ['i']
{
L2477: (ghi[i],r) 
L2478: (glo[i]*,r) (ghi[i],r) 
L2479: (ghi[i]/,r) (ghi[i]-,r) (glo[i],r) 
}
array table
-----------------------------------------------
ghi -> [('[i]', 'r', 'normalized', ['i'], 2477), ('[i]', 'r', 'normalized', ['i'], 2478), ('[i]', 'r', 'normalized', ['i'], 2479), ('[i]', 'r', 'normalized', ['i'], 2479)]
LDEs formed:0

glo -> [('[i]', 'r', 'normalized', ['i'], 2478), ('[i]', 'r', 'normalized', ['i'], 2479)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2480: (iroots[i]=,w) 
L2481: (ghi[i],r) (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2480), ('[i]', 'w', 'normalized', ['i'], 2481)]
LDEs formed:3

ghi -> [('[i]', 'r', 'normalized', ['i'], 2481)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2482: (ghi[imax]/,r) (ghi[imax]-,r) (glo[imax],r) 
	loop info: i = 0   i < nrtfn  i++
	induction variable: ['i']
	{
	L2483: (grout[i],r) 
	L2484: (glo[i]*,r) (grout[i],r) 
	L2485: (grout[i]/,r) (grout[i]-,r) (glo[i],r) 
	}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
		}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
		}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
	}
 }
array table
-----------------------------------------------
grout -> [('[i]', 'r', 'normalized', ['i'], 2483), ('[i]', 'r', 'normalized', ['i'], 2484), ('[i]', 'r', 'normalized', ['i'], 2485), ('[i]', 'r', 'normalized', ['i'], 2485)]
LDEs formed:0

ghi -> [('[imax]', 'r', 'not normalized', ['i'], 2482), ('[imax]', 'r', 'not normalized', ['i'], 2482)]
LDEs formed:0

glo -> [('[imax]', 'r', 'not normalized', ['i'], 2482), ('[i]', 'r', 'normalized', ['i'], 2484), ('[i]', 'r', 'normalized', ['i'], 2485)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2486: (grout[i]=,w) (ghi[i],r) 
L2487: (iroots[i]=,w) 
L2488: (ghi[i],r) (iroots[i]=,w) 
L2489: (glo[i]*,r) (ghi[i],r) (iroots[i]=,w) 
}
array table
-----------------------------------------------
grout -> [('[i]', 'w', 'normalized', ['i'], 2486)]
LDEs formed:1

iroots -> [('[i]', 'w', 'normalized', ['i'], 2487), ('[i]', 'w', 'normalized', ['i'], 2488), ('[i]', 'w', 'normalized', ['i'], 2489)]
LDEs formed:6

ghi -> [('[i]', 'r', 'normalized', ['i'], 2486), ('[i]', 'r', 'normalized', ['i'], 2488), ('[i]', 'r', 'normalized', ['i'], 2489)]
LDEs formed:0

glo -> [('[i]', 'r', 'normalized', ['i'], 2489)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2490: (glo[i],r) 
L2491: (iroots[i]=,w) 
L2492: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2491), ('[i]', 'w', 'normalized', ['i'], 2492)]
LDEs formed:3

glo -> [('[i]', 'r', 'normalized', ['i'], 2490)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2491: (glo[i],r) 
L2492: (iroots[i]=,w) 
L2493: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2492), ('[i]', 'w', 'normalized', ['i'], 2493)]
LDEs formed:3

glo -> [('[i]', 'r', 'normalized', ['i'], 2491)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nrtfn  i++
induction variable: ['i']
{
L2492: (ghi[i],r) (iroots[i],r) 
L2493: (ghi[i],r) (iroots[i]==,r) 
L2494: (ghi[i],r) (glo[i]*,r) (ghi[i],r) 
L2495: (ghi[i]/,r) (ghi[i]-,r) (glo[i],r) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'r', 'normalized', ['i'], 2492), ('[i]', 'r', 'normalized', ['i'], 2493)]
LDEs formed:0

ghi -> [('[i]', 'r', 'normalized', ['i'], 2492), ('[i]', 'r', 'normalized', ['i'], 2493), ('[i]', 'r', 'normalized', ['i'], 2494), ('[i]', 'r', 'normalized', ['i'], 2494), ('[i]', 'r', 'normalized', ['i'], 2495), ('[i]', 'r', 'normalized', ['i'], 2495)]
LDEs formed:0

glo -> [('[i]', 'r', 'normalized', ['i'], 2494), ('[i]', 'r', 'normalized', ['i'], 2495)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2496: (ghi[imax],r) (glo[imax],r) 
L2497: (ghi[imax]/,r) (ghi[imax]-,r) (glo[imax],r) 
	loop info: i = 0   i < nrtfn  i++
	induction variable: ['i']
	{
	L2498: (grout[i],r) (iroots[i],r) 
	L2499: (grout[i],r) (iroots[i]==,r) 
	L2500: (grout[i],r) (glo[i]*,r) (grout[i],r) 
	L2501: (grout[i]/,r) (grout[i]-,r) (glo[i],r) 
	}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
		}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
	}
 }
array table
-----------------------------------------------
grout -> [('[i]', 'r', 'normalized', ['i'], 2498), ('[i]', 'r', 'normalized', ['i'], 2499), ('[i]', 'r', 'normalized', ['i'], 2500), ('[i]', 'r', 'normalized', ['i'], 2500), ('[i]', 'r', 'normalized', ['i'], 2501), ('[i]', 'r', 'normalized', ['i'], 2501)]
LDEs formed:0

iroots -> [('[i]', 'r', 'normalized', ['i'], 2498), ('[i]', 'r', 'normalized', ['i'], 2499)]
LDEs formed:0

ghi -> [('[imax]', 'r', 'not normalized', ['i'], 2496), ('[imax]', 'r', 'not normalized', ['i'], 2497), ('[imax]', 'r', 'not normalized', ['i'], 2497)]
LDEs formed:0

glo -> [('[imax]', 'r', 'not normalized', ['i'], 2496), ('[imax]', 'r', 'not normalized', ['i'], 2497), ('[i]', 'r', 'normalized', ['i'], 2500), ('[i]', 'r', 'normalized', ['i'], 2501)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2502: (grout[i]=,w) (ghi[i],r) 
L2503: (iroots[i]==,r) 
L2504: (ghi[i],r) 
L2505: (iroots[i]=,w) (ghi[i],r) 
L2506: (iroots[i]=,w) 
L2507: (ghi[i],r) 
L2508: (iroots[i]=,w) (glo[i],r) 
L2509: (glo[i]*,r) (ghi[i],r) 
L2510: (iroots[i]=,w) (ghi[i],r) (glo[i],r) 
L2511: (iroots[i]=,w) 
}
array table
-----------------------------------------------
grout -> [('[i]', 'w', 'normalized', ['i'], 2502)]
LDEs formed:1

iroots -> [('[i]', 'r', 'normalized', ['i'], 2503), ('[i]', 'w', 'normalized', ['i'], 2505), ('[i]', 'w', 'normalized', ['i'], 2506), ('[i]', 'w', 'normalized', ['i'], 2508), ('[i]', 'w', 'normalized', ['i'], 2510), ('[i]', 'w', 'normalized', ['i'], 2511)]
LDEs formed:20

ghi -> [('[i]', 'r', 'normalized', ['i'], 2502), ('[i]', 'r', 'normalized', ['i'], 2504), ('[i]', 'r', 'normalized', ['i'], 2505), ('[i]', 'r', 'normalized', ['i'], 2507), ('[i]', 'r', 'normalized', ['i'], 2509), ('[i]', 'r', 'normalized', ['i'], 2510)]
LDEs formed:0

glo -> [('[i]', 'r', 'normalized', ['i'], 2508), ('[i]', 'r', 'normalized', ['i'], 2509), ('[i]', 'r', 'normalized', ['i'], 2510)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2511: (iroots[i]==,r) (iroots[i]==,r) (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'r', 'normalized', ['i'], 2511), ('[i]', 'r', 'normalized', ['i'], 2511), ('[i]', 'w', 'normalized', ['i'], 2511)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: nwt = 1  nwt <= 2  nwt++
induction variable: ['nwt']
{
	loop info: nh = 1  nh <= mxnh  nh++
	induction variable: ['nwt', 'nh']
	{
	L2512: (phi[0],r) 
	L2513: (phi[1],r) 
	}
L2514: (phi[0],r) 
L2515: (phi[1],r) 
}
array table
-----------------------------------------------
phi -> [('[0]', 'r', 'normalized', ['nwt', 'nh'], 2512), ('[1]', 'r', 'normalized', ['nwt', 'nh'], 2513), ('[0]', 'r', 'normalized', ['nwt', 'nh'], 2514), ('[1]', 'r', 'normalized', ['nwt', 'nh'], 2515)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2516: (phi[0],r) 
L2517: (phi[0],r) 
}
array table
-----------------------------------------------
phi -> [('[0]', 'r', 'normalized', [], 2516), ('[0]', 'r', 'normalized', [], 2517)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1  j <= kord  j++
induction variable: ['j']
{
L2518: (psi[j-1],r) 
L2519: (psi[j-1],r) (psi[j],r) 
L2520: (phi[j],r) 
L2521: (phi[j],r) 
}
array table
-----------------------------------------------
phi -> [('[j]', 'r', 'normalized', ['j'], 2520), ('[j]', 'r', 'normalized', ['j'], 2521)]
LDEs formed:0

psi -> [('[j-1]', 'r', 'normalized', ['j'], 2518), ('[j-1]', 'r', 'normalized', ['j'], 2519), ('[j]', 'r', 'normalized', ['j'], 2519)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j <= maxcol  j++
induction variable: ['j']
{
L2520: (phi[j]=,w) 
L2521: (phi[j]=,w) 
L2522: (phi[j]==,r) 
	loop info: i=0  i < j  i++
	induction variable: ['j', 'i']
		}
 }
array table
-----------------------------------------------
phi -> [('[j]', 'w', 'normalized', ['j', 'i'], 2520), ('[j]', 'w', 'normalized', ['j', 'i'], 2521), ('[j]', 'r', 'normalized', ['j', 'i'], 2522)]
LDEs formed:5

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=1 i<=kk i++
induction variable: ['i']
{
L2523: (psi[i-1],r) 
L2524: (psi[i-1]=,w) 
L2525: (beta[i]=,w) (beta[i-1]*,r) (psi[i-1]/,r) 
L2526: (alpha[i]=,w) 
L2527: (sigma[i]=,w) (sigma[i-1]*,r) (alpha[i],r) 
L2528: (gamma[i]=,w) (gamma[i-1]+,r) (alpha[i-1]/,r) 
}
array table
-----------------------------------------------
alpha -> [('[i]', 'w', 'normalized', ['i'], 2526), ('[i]', 'r', 'normalized', ['i'], 2527), ('[i-1]', 'r', 'normalized', ['i'], 2528)]
LDEs formed:3

beta -> [('[i]', 'w', 'normalized', ['i'], 2525), ('[i-1]', 'r', 'normalized', ['i'], 2525)]
LDEs formed:2

psi -> [('[i-1]', 'r', 'normalized', ['i'], 2523), ('[i-1]', 'w', 'normalized', ['i'], 2524), ('[i-1]', 'r', 'normalized', ['i'], 2525)]
LDEs formed:3

sigma -> [('[i]', 'w', 'normalized', ['i'], 2527), ('[i-1]', 'r', 'normalized', ['i'], 2527)]
LDEs formed:2

gamma -> [('[i]', 'w', 'normalized', ['i'], 2528), ('[i-1]', 'r', 'normalized', ['i'], 2528)]
LDEs formed:2

distinct LDEs:
i1=i2-1
i1-1=i2-1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<kk i++
induction variable: ['i']
{
L2529: (alpha[i],r) 
}
array table
-----------------------------------------------
alpha -> [('[i]', 'r', 'normalized', ['i'], 2529)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1  j<=kk  j++
induction variable: ['j']
{
L2530: (phi[j],r) 
L2531: (gamma[j],r) (phi[j],r) 
}
array table
-----------------------------------------------
phi -> [('[j]', 'r', 'normalized', ['j'], 2530), ('[j]', 'r', 'normalized', ['j'], 2531)]
LDEs formed:0

gamma -> [('[j]', 'r', 'normalized', ['j'], 2531)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2532: (glo[i],r) 
}
array table
-----------------------------------------------
glo -> [('[i]', 'r', 'normalized', ['i'], 2532)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2533: (glo[i],r) 
L2534: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2534)]
LDEs formed:1

glo -> [('[i]', 'r', 'normalized', ['i'], 2533)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2534: (glo[i],r) 
L2535: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2535)]
LDEs formed:1

glo -> [('[i]', 'r', 'normalized', ['i'], 2534)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2535: (glo[i],r) 
L2536: (iroots[i]==,r) 
L2537: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'r', 'normalized', ['i'], 2536), ('[i]', 'w', 'normalized', ['i'], 2537)]
LDEs formed:2

glo -> [('[i]', 'r', 'normalized', ['i'], 2535)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nrtfn  i++
induction variable: ['i']
{
L2536: (ghi[i],r) 
L2537: (glo[i]*,r) (ghi[i],r) 
L2538: (ghi[i]/,r) (ghi[i]-,r) (glo[i],r) 
}
array table
-----------------------------------------------
ghi -> [('[i]', 'r', 'normalized', ['i'], 2536), ('[i]', 'r', 'normalized', ['i'], 2537), ('[i]', 'r', 'normalized', ['i'], 2538), ('[i]', 'r', 'normalized', ['i'], 2538)]
LDEs formed:0

glo -> [('[i]', 'r', 'normalized', ['i'], 2537), ('[i]', 'r', 'normalized', ['i'], 2538)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2539: (iroots[i]=,w) 
L2540: (ghi[i],r) (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2539), ('[i]', 'w', 'normalized', ['i'], 2540)]
LDEs formed:3

ghi -> [('[i]', 'r', 'normalized', ['i'], 2540)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2541: (ghi[imax]/,r) (ghi[imax]-,r) (glo[imax],r) 
	loop info: i = 0   i < nrtfn  i++
	induction variable: ['i']
	{
	L2542: (grout[i],r) 
	L2543: (glo[i]*,r) (grout[i],r) 
	L2544: (grout[i]/,r) (grout[i]-,r) (glo[i],r) 
	}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
		}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
		}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
	}
 }
array table
-----------------------------------------------
grout -> [('[i]', 'r', 'normalized', ['i'], 2542), ('[i]', 'r', 'normalized', ['i'], 2543), ('[i]', 'r', 'normalized', ['i'], 2544), ('[i]', 'r', 'normalized', ['i'], 2544)]
LDEs formed:0

ghi -> [('[imax]', 'r', 'not normalized', ['i'], 2541), ('[imax]', 'r', 'not normalized', ['i'], 2541)]
LDEs formed:0

glo -> [('[imax]', 'r', 'not normalized', ['i'], 2541), ('[i]', 'r', 'normalized', ['i'], 2543), ('[i]', 'r', 'normalized', ['i'], 2544)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2545: (grout[i]=,w) (ghi[i],r) 
L2546: (iroots[i]=,w) 
L2547: (ghi[i],r) (iroots[i]=,w) 
L2548: (glo[i]*,r) (ghi[i],r) (iroots[i]=,w) 
}
array table
-----------------------------------------------
grout -> [('[i]', 'w', 'normalized', ['i'], 2545)]
LDEs formed:1

iroots -> [('[i]', 'w', 'normalized', ['i'], 2546), ('[i]', 'w', 'normalized', ['i'], 2547), ('[i]', 'w', 'normalized', ['i'], 2548)]
LDEs formed:6

ghi -> [('[i]', 'r', 'normalized', ['i'], 2545), ('[i]', 'r', 'normalized', ['i'], 2547), ('[i]', 'r', 'normalized', ['i'], 2548)]
LDEs formed:0

glo -> [('[i]', 'r', 'normalized', ['i'], 2548)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2549: (glo[i],r) 
L2550: (iroots[i]=,w) 
L2551: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2550), ('[i]', 'w', 'normalized', ['i'], 2551)]
LDEs formed:3

glo -> [('[i]', 'r', 'normalized', ['i'], 2549)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2550: (glo[i],r) 
L2551: (iroots[i]=,w) 
L2552: (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'w', 'normalized', ['i'], 2551), ('[i]', 'w', 'normalized', ['i'], 2552)]
LDEs formed:3

glo -> [('[i]', 'r', 'normalized', ['i'], 2550)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nrtfn  i++
induction variable: ['i']
{
L2551: (ghi[i],r) (iroots[i],r) 
L2552: (ghi[i],r) (iroots[i]==,r) 
L2553: (ghi[i],r) (glo[i]*,r) (ghi[i],r) 
L2554: (ghi[i]/,r) (ghi[i]-,r) (glo[i],r) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'r', 'normalized', ['i'], 2551), ('[i]', 'r', 'normalized', ['i'], 2552)]
LDEs formed:0

ghi -> [('[i]', 'r', 'normalized', ['i'], 2551), ('[i]', 'r', 'normalized', ['i'], 2552), ('[i]', 'r', 'normalized', ['i'], 2553), ('[i]', 'r', 'normalized', ['i'], 2553), ('[i]', 'r', 'normalized', ['i'], 2554), ('[i]', 'r', 'normalized', ['i'], 2554)]
LDEs formed:0

glo -> [('[i]', 'r', 'normalized', ['i'], 2553), ('[i]', 'r', 'normalized', ['i'], 2554)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L2555: (ghi[imax],r) (glo[imax],r) 
L2556: (ghi[imax]/,r) (ghi[imax]-,r) (glo[imax],r) 
	loop info: i = 0   i < nrtfn  i++
	induction variable: ['i']
	{
	L2557: (grout[i],r) (iroots[i],r) 
	L2558: (grout[i],r) (iroots[i]==,r) 
	L2559: (grout[i],r) (glo[i]*,r) (grout[i],r) 
	L2560: (grout[i]/,r) (grout[i]-,r) (glo[i],r) 
	}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
		}
	loop info: i = 0  i < nrtfn  i++
	induction variable: ['i']
	}
 }
array table
-----------------------------------------------
grout -> [('[i]', 'r', 'normalized', ['i'], 2557), ('[i]', 'r', 'normalized', ['i'], 2558), ('[i]', 'r', 'normalized', ['i'], 2559), ('[i]', 'r', 'normalized', ['i'], 2559), ('[i]', 'r', 'normalized', ['i'], 2560), ('[i]', 'r', 'normalized', ['i'], 2560)]
LDEs formed:0

iroots -> [('[i]', 'r', 'normalized', ['i'], 2557), ('[i]', 'r', 'normalized', ['i'], 2558)]
LDEs formed:0

ghi -> [('[imax]', 'r', 'not normalized', ['i'], 2555), ('[imax]', 'r', 'not normalized', ['i'], 2556), ('[imax]', 'r', 'not normalized', ['i'], 2556)]
LDEs formed:0

glo -> [('[imax]', 'r', 'not normalized', ['i'], 2555), ('[imax]', 'r', 'not normalized', ['i'], 2556), ('[i]', 'r', 'normalized', ['i'], 2559), ('[i]', 'r', 'normalized', ['i'], 2560)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2561: (grout[i]=,w) (ghi[i],r) 
L2562: (iroots[i]==,r) 
L2563: (ghi[i],r) 
L2564: (iroots[i]=,w) (ghi[i],r) 
L2565: (iroots[i]=,w) 
L2566: (ghi[i],r) 
L2567: (iroots[i]=,w) (glo[i],r) 
L2568: (glo[i]*,r) (ghi[i],r) 
L2569: (iroots[i]=,w) (ghi[i],r) (glo[i],r) 
L2570: (iroots[i]=,w) 
}
array table
-----------------------------------------------
grout -> [('[i]', 'w', 'normalized', ['i'], 2561)]
LDEs formed:1

iroots -> [('[i]', 'r', 'normalized', ['i'], 2562), ('[i]', 'w', 'normalized', ['i'], 2564), ('[i]', 'w', 'normalized', ['i'], 2565), ('[i]', 'w', 'normalized', ['i'], 2567), ('[i]', 'w', 'normalized', ['i'], 2569), ('[i]', 'w', 'normalized', ['i'], 2570)]
LDEs formed:20

ghi -> [('[i]', 'r', 'normalized', ['i'], 2561), ('[i]', 'r', 'normalized', ['i'], 2563), ('[i]', 'r', 'normalized', ['i'], 2564), ('[i]', 'r', 'normalized', ['i'], 2566), ('[i]', 'r', 'normalized', ['i'], 2568), ('[i]', 'r', 'normalized', ['i'], 2569)]
LDEs formed:0

glo -> [('[i]', 'r', 'normalized', ['i'], 2567), ('[i]', 'r', 'normalized', ['i'], 2568), ('[i]', 'r', 'normalized', ['i'], 2569)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nrtfn  i++
induction variable: ['i']
{
L2570: (iroots[i]==,r) (iroots[i]==,r) (iroots[i]=,w) 
}
array table
-----------------------------------------------
iroots -> [('[i]', 'r', 'normalized', ['i'], 2570), ('[i]', 'r', 'normalized', ['i'], 2570), ('[i]', 'w', 'normalized', ['i'], 2570)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < Neq  j++
induction variable: ['j']
{
L2571: (y_data[j],r) 
L2572: (yp_data[j],r) 
L2573: (ewt_data[j],r) 
L2574: (cns_data[j],r) 
L2575: (y_data[j]+=,w) 
L2576: (yp_data[j]+=,w) 
L2577: (y_data[j]=,w) 
L2578: (yp_data[j]=,w) 
}
array table
-----------------------------------------------
yp_data -> [('[j]', 'r', 'normalized', ['j'], 2572), ('[j]', 'w', 'normalized', ['j'], 2576), ('[j]', 'w', 'normalized', ['j'], 2578)]
LDEs formed:5

y_data -> [('[j]', 'r', 'normalized', ['j'], 2571), ('[j]', 'w', 'normalized', ['j'], 2575), ('[j]', 'w', 'normalized', ['j'], 2577)]
LDEs formed:5

ewt_data -> [('[j]', 'r', 'normalized', ['j'], 2573)]
LDEs formed:0

cns_data -> [('[j]', 'r', 'normalized', ['j'], 2574)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0  k < n  k++
induction variable: ['k']
{
L2575: (a[k],r) 
	loop info: i=k+1  i < m  i++
	induction variable: ['k', 'i']
	}
L2576: (p[k]=,w) 
L2577: (col_k[l]==,r) 
	loop info: i=0  i<n  i++
	induction variable: ['k', 'i']
		{
		L2578: (a[i][l],r) 
		L2579: (a[i][l]=,w) (a[i][k],r) 
		L2580: (a[i][k]=,w) 
		}
L2581: (col_k[k],r) 
	loop info: i=k+1  i < m  i++
	induction variable: ['k', 'i']
	}
	loop info: j=k+1  j < n  j++
	induction variable: ['k', 'i', 'j']
	{
	L2582: (a[j],r) 
	L2583: (col_j[k],r) 
		loop info: i=k+1  i < m  i++
		induction variable: ['k', 'i', 'j']
			}
 	}
 }
array table
-----------------------------------------------
a -> [('[k]', 'r', 'normalized', ['k', 'i', 'j'], 2575), ('[i][l]', 'r', 'not normalized', ['k', 'i', 'j'], 2578), ('[i][l]', 'w', 'not normalized', ['k', 'i', 'j'], 2579), ('[i][k]', 'r', 'normalized', ['k', 'i', 'j'], 2579), ('[i][k]', 'w', 'normalized', ['k', 'i', 'j'], 2580), ('[j]', 'r', 'normalized', ['k', 'i', 'j'], 2582)]
LDEs formed:11

p -> [('[k]', 'w', 'normalized', ['k', 'i', 'j'], 2576)]
LDEs formed:1

col_j -> [('[k]', 'r', 'normalized', ['k', 'i', 'j'], 2583)]
LDEs formed:0

col_k -> [('[l]', 'r', 'not normalized', ['k', 'i', 'j'], 2577), ('[k]', 'r', 'normalized', ['k', 'i', 'j'], 2581)]
LDEs formed:0

distinct LDEs:
i1=i2,k1=k2
k1=k2
i1=i2,l=l
i1=i2,l=k2
k1=i2
i1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0  k<n  k++
induction variable: ['k']
{
L2582: (p[k],r) 
L2583: (b[k],r) 
L2584: (b[k]=,w) (b[pk],r) 
L2585: (b[pk]=,w) 
}
array table
-----------------------------------------------
p -> [('[k]', 'r', 'normalized', ['k'], 2582)]
LDEs formed:0

b -> [('[k]', 'r', 'normalized', ['k'], 2583), ('[k]', 'w', 'normalized', ['k'], 2584), ('[pk]', 'r', 'not normalized', ['k'], 2584), ('[pk]', 'w', 'not normalized', ['k'], 2585)]
LDEs formed:7

distinct LDEs:
pk=pk
k1=k2
k1=pk
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0  k<n-1  k++
induction variable: ['k']
{
L2586: (a[k],r) 
	loop info: i=k+1  i<n  i++
	induction variable: ['k', 'i']
	}
 }
array table
-----------------------------------------------
a -> [('[k]', 'r', 'normalized', ['k', 'i'], 2586)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = n-1  k > 0  k--
induction variable: ['k']
{
L2587: (a[k],r) 
L2588: (b[k]/=,w) (col_k[k],r) 
	loop info: i=0  i<k  i++
	induction variable: ['k', 'i']
	}
 }
array table
-----------------------------------------------
a -> [('[k]', 'r', 'normalized', ['k', 'i'], 2587)]
LDEs formed:0

col_k -> [('[k]', 'r', 'normalized', ['k', 'i'], 2588)]
LDEs formed:0

b -> [('[k]', 'w', 'normalized', ['k', 'i'], 2588)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < n  j++
induction variable: ['j']
{
L2589: (a[j],r) 
	loop info: i=0  i < m  i++
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
a -> [('[j]', 'r', 'normalized', ['j', 'i'], 2589)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < n  j++
induction variable: ['j']
{
L2590: (a[j],r) 
L2591: (b[j],r) 
	loop info: i=0  i < m  i++
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
a -> [('[j]', 'r', 'normalized', ['j', 'i'], 2590)]
LDEs formed:0

b -> [('[j]', 'r', 'normalized', ['j', 'i'], 2591)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < n  j++
induction variable: ['j']
{
L2592: (a[j],r) 
	loop info: i=0  i < m  i++
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
a -> [('[j]', 'r', 'normalized', ['j', 'i'], 2592)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < m  i++
induction variable: ['i']
{
	loop info: j=0  j < n  j++
	induction variable: ['i', 'j']
	{
	L2593: (a[j][i],r) 
	L2594: (a[j][i],r) 
	L2595: (a[j][i],r) 
	}
 }
array table
-----------------------------------------------
a -> [('[j][i]', 'r', 'normalized', ['i', 'j'], 2593), ('[j][i]', 'r', 'normalized', ['i', 'j'], 2594), ('[j][i]', 'r', 'normalized', ['i', 'j'], 2595)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < count  j++
induction variable: ['j']
{
L2596: (vs[j]=,w) 
L2597: (vs[j]=,w) 
L2598: (vs[j]==,r) 
}
array table
-----------------------------------------------
vs -> [('[j]', 'w', 'normalized', ['j'], 2596), ('[j]', 'w', 'normalized', ['j'], 2597), ('[j]', 'r', 'normalized', ['j'], 2598)]
LDEs formed:5

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < count  j++
induction variable: ['j']
{
L2599: (vs[j]=,w) 
L2600: (vs[j]=,w) 
L2601: (vs[j]==,r) 
}
array table
-----------------------------------------------
vs -> [('[j]', 'w', 'normalized', ['j'], 2599), ('[j]', 'w', 'normalized', ['j'], 2600), ('[j]', 'r', 'normalized', ['j'], 2601)]
LDEs formed:5

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < n  j++
induction variable: ['j']
{
L2602: (u_data[j],r) 
L2603: (uscale_data[j],r) 
L2604: (u_data[j]+=,w) 
L2605: (u_data[j]=,w) 
}
array table
-----------------------------------------------
uscale_data -> [('[j]', 'r', 'normalized', ['j'], 2603)]
LDEs formed:0

u_data -> [('[j]', 'r', 'normalized', ['j'], 2602), ('[j]', 'w', 'normalized', ['j'], 2604), ('[j]', 'w', 'normalized', ['j'], 2605)]
LDEs formed:5

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1) i++
induction variable: ['i']
{
L2606: (il1[4],r) 
}
array table
-----------------------------------------------
il1 -> [('[4]', 'r', 'normalized', ['i'], 2606)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(2*m1*n1) i++
induction variable: ['i']
{
L2607: (il1[4],r) 
}
array table
-----------------------------------------------
il1 -> [('[4]', 'r', 'normalized', ['i'], 2607)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1) i++
induction variable: ['i']
{
L2608: (il1[4],r) 
}
array table
-----------------------------------------------
il1 -> [('[4]', 'r', 'normalized', ['i'], 2608)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1) i++
induction variable: ['i']
{
L2609: (il1[4],r) 
}
array table
-----------------------------------------------
il1 -> [('[4]', 'r', 'normalized', ['i'], 2609)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1) i++
induction variable: ['i']
{
L2610: (il1[4],r) 
}
array table
-----------------------------------------------
il1 -> [('[4]', 'r', 'normalized', ['i'], 2610)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1) i++
induction variable: ['i']
{
L2611: (il1[4],r) 
}
array table
-----------------------------------------------
il1 -> [('[4]', 'r', 'normalized', ['i'], 2611)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1) i++
induction variable: ['i']
{
L2612: (il1[4],r) 
}
array table
-----------------------------------------------
il1 -> [('[4]', 'r', 'normalized', ['i'], 2612)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1) i++
induction variable: ['i']
{
L2613: (il1[4],r) 
}
array table
-----------------------------------------------
il1 -> [('[4]', 'r', 'normalized', ['i'], 2613)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(n2h) i++
induction variable: ['i']
{
L2614: (ilh2[4],r) 
}
array table
-----------------------------------------------
ilh2 -> [('[4]', 'r', 'normalized', ['i'], 2614)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1*p1) i++
induction variable: ['i']
{
L2615: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2615)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(2*m1*n1*p1) i++
induction variable: ['i']
{
L2616: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2616)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1*p1) i++
induction variable: ['i']
{
L2617: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2617)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1*p1) i++
induction variable: ['i']
{
L2618: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2618)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1*p1) i++
induction variable: ['i']
{
L2619: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2619)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1*p1) i++
induction variable: ['i']
{
L2620: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2620)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1*p1) i++
induction variable: ['i']
{
L2621: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2621)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(m1*n1*p1) i++
induction variable: ['i']
{
L2622: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2622)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Block.nin  i++
induction variable: ['i']
{
L2623: (ilh[4],r) 
L2624: (ilh[4],r) 
}
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['i'], 2623), ('[4]', 'r', 'normalized', ['i'], 2624)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (mh2 * nh2)  i++
induction variable: ['i']
{
L2625: (ilh2[4],r) 
L2626: (ilh2[4],r) 
}
array table
-----------------------------------------------
ilh2 -> [('[4]', 'r', 'normalized', ['i'], 2625), ('[4]', 'r', 'normalized', ['i'], 2626)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (mh3 * nh3)  i++
induction variable: ['i']
{
L2627: (ilh3[4],r) 
L2628: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2627), ('[4]', 'r', 'normalized', ['i'], 2628)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Block.nin  i++
induction variable: ['i']
{
L2629: (Block.insz[i]=,w) (ilh[4],r) 
L2630: (Block.insz[Block.nin + i]=,w) (ilh2[4],r) 
L2631: (ilh3[4],r) 
L2632: (Block.insz[2 * Block.nin + i]=,w) 
L2633: (Block.insz[2 * Block.nin + i]=,w) 
L2634: (Block.insz[2 * Block.nin + i]=,w) 
L2635: (Block.insz[2 * Block.nin + i]=,w) 
L2636: (Block.insz[2 * Block.nin + i]=,w) 
L2637: (Block.insz[2 * Block.nin + i]=,w) 
L2638: (Block.insz[2 * Block.nin + i]=,w) 
L2639: (Block.insz[2 * Block.nin + i]=,w) 
L2640: (Block.insz[2 * Block.nin + i]=,w) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2631)]
LDEs formed:0

ilh2 -> [('[4]', 'r', 'normalized', ['i'], 2630)]
LDEs formed:0

ilh -> [('[4]', 'r', 'normalized', ['i'], 2629)]
LDEs formed:0

Block.insz -> [('[i]', 'w', 'normalized', ['i'], 2629), ('[Block.nin + i]', 'w', 'not normalized', ['i'], 2630), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2632), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2633), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2634), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2635), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2636), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2637), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2638), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2639), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2640)]
LDEs formed:66

distinct LDEs:
Block.nin + i1=2 * Block.nin + i2
i1=2 * Block.nin + i2
2 * Block.nin + i1=2 * Block.nin + i2
Block.nin + i1=Block.nin + i2
i1=Block.nin + i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Block.nin  i++
induction variable: ['i']
{
L2641: (Block.insz[i]=,w) (ilh[4],r) 
L2642: (Block.insz[Block.nin + i]=,w) 
L2643: (Block.insz[2 * Block.nin + i]=,w) 
}
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['i'], 2641)]
LDEs formed:0

Block.insz -> [('[i]', 'w', 'normalized', ['i'], 2641), ('[Block.nin + i]', 'w', 'not normalized', ['i'], 2642), ('[2 * Block.nin + i]', 'w', 'not normalized', ['i'], 2643)]
LDEs formed:6

distinct LDEs:
Block.nin + i1=2 * Block.nin + i2
i1=2 * Block.nin + i2
2 * Block.nin + i1=2 * Block.nin + i2
Block.nin + i1=Block.nin + i2
i1=Block.nin + i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Block.nin  i++
induction variable: ['i']
{
L2644: (Block.insz[2 * Block.nin + i],r) 
L2645: (Block.inptr[i]=,w) (Block.insz[i]*,r) (Block.insz[Block.nin + i]*,r) 
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2646: (Block.inptr[i],r) 
	loop info: j = 0  j < Block.insz[i]*Block.insz[Block.nin + i]  j++
	induction variable: ['i', 'j']
		{
		L2647: (ptr_d[j]=,w) 
		}
L2648: (Block.inptr[i]=,w) 
L2649: (Block.insz[i]*,r) (Block.insz[Block.nin + i]*,r) 
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2650: (Block.inptr[i],r) 
	loop info: j = 0  j < 2 * Block.insz[i]*Block.insz[Block.nin + i]  j++
	induction variable: ['i', 'j']
		{
		L2651: (ptr_d[j]=,w) 
		}
L2652: (Block.inptr[i]=,w) 
L2653: (Block.insz[i]*,r) (Block.insz[Block.nin + i]*,r) 
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2654: (Block.inptr[i],r) 
	loop info: j = 0  j < Block.insz[i]*Block.insz[Block.nin + i]  j++
	induction variable: ['i', 'j']
		{
		L2655: (ptr_l[j]=,w) 
		}
L2656: (Block.inptr[i]=,w) 
L2657: (Block.insz[i]*,r) (Block.insz[Block.nin + i]*,r) 
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2658: (Block.inptr[i],r) 
	loop info: j = 0  j < Block.insz[i]*Block.insz[Block.nin + i]  j++
	induction variable: ['i', 'j']
		{
		L2659: (ptr_s[j]=,w) 
		}
L2660: (Block.inptr[i]=,w) 
L2661: (Block.insz[i]*,r) (Block.insz[Block.nin + i]*,r) 
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2662: (Block.inptr[i],r) 
	loop info: j = 0  j < Block.insz[i]*Block.insz[Block.nin + i]  j++
	induction variable: ['i', 'j']
		{
		L2663: (ptr_c[j]=,w) 
		}
L2664: (Block.inptr[i]=,w) 
L2665: (Block.insz[i]*,r) (Block.insz[Block.nin + i]*,r) 
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2666: (Block.inptr[i],r) 
	loop info: j = 0  j < Block.insz[i]*Block.insz[Block.nin + i]  j++
	induction variable: ['i', 'j']
		{
		L2667: (ptr_ul[j]=,w) 
		}
L2668: (Block.inptr[i]=,w) 
L2669: (Block.insz[i]*,r) (Block.insz[Block.nin + i]*,r) 
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2670: (Block.inptr[i],r) 
	loop info: j = 0  j < Block.insz[i]*Block.insz[Block.nin + i]  j++
	induction variable: ['i', 'j']
		{
		L2671: (ptr_us[j]=,w) 
		}
L2672: (Block.inptr[i]=,w) 
L2673: (Block.insz[i]*,r) (Block.insz[Block.nin + i]*,r) 
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2674: (Block.inptr[i],r) 
	loop info: j = 0  j < Block.insz[i]*Block.insz[Block.nin + i]  j++
	induction variable: ['i', 'j']
		{
		L2675: (ptr_uc[j]=,w) 
		}
 }
array table
-----------------------------------------------
ptr_uc -> [('[j]', 'w', 'normalized', ['i', 'j'], 2675)]
LDEs formed:1

ptr_ul -> [('[j]', 'w', 'normalized', ['i', 'j'], 2667)]
LDEs formed:1

ptr_l -> [('[j]', 'w', 'normalized', ['i', 'j'], 2655)]
LDEs formed:1

ptr_c -> [('[j]', 'w', 'normalized', ['i', 'j'], 2663)]
LDEs formed:1

Block.inptr -> [('[i]', 'w', 'normalized', ['i', 'j'], 2645), ('[i]', 'r', 'normalized', ['i', 'j'], 2646), ('[i]', 'w', 'normalized', ['i', 'j'], 2648), ('[i]', 'r', 'normalized', ['i', 'j'], 2650), ('[i]', 'w', 'normalized', ['i', 'j'], 2652), ('[i]', 'r', 'normalized', ['i', 'j'], 2654), ('[i]', 'w', 'normalized', ['i', 'j'], 2656), ('[i]', 'r', 'normalized', ['i', 'j'], 2658), ('[i]', 'w', 'normalized', ['i', 'j'], 2660), ('[i]', 'r', 'normalized', ['i', 'j'], 2662), ('[i]', 'w', 'normalized', ['i', 'j'], 2664), ('[i]', 'r', 'normalized', ['i', 'j'], 2666), ('[i]', 'w', 'normalized', ['i', 'j'], 2668), ('[i]', 'r', 'normalized', ['i', 'j'], 2670), ('[i]', 'w', 'normalized', ['i', 'j'], 2672), ('[i]', 'r', 'normalized', ['i', 'j'], 2674)]
LDEs formed:100

ptr_d -> [('[j]', 'w', 'normalized', ['i', 'j'], 2647), ('[j]', 'w', 'normalized', ['i', 'j'], 2651)]
LDEs formed:3

ptr_s -> [('[j]', 'w', 'normalized', ['i', 'j'], 2659)]
LDEs formed:1

ptr_us -> [('[j]', 'w', 'normalized', ['i', 'j'], 2671)]
LDEs formed:1

Block.insz -> [('[2 * Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2644), ('[i]', 'r', 'normalized', ['i', 'j'], 2645), ('[Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2645), ('[i]', 'r', 'normalized', ['i', 'j'], 2649), ('[Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2649), ('[i]', 'r', 'normalized', ['i', 'j'], 2653), ('[Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2653), ('[i]', 'r', 'normalized', ['i', 'j'], 2657), ('[Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2657), ('[i]', 'r', 'normalized', ['i', 'j'], 2661), ('[Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2661), ('[i]', 'r', 'normalized', ['i', 'j'], 2665), ('[Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2665), ('[i]', 'r', 'normalized', ['i', 'j'], 2669), ('[Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2669), ('[i]', 'r', 'normalized', ['i', 'j'], 2673), ('[Block.nin + i]', 'r', 'not normalized', ['i', 'j'], 2673)]
LDEs formed:0

distinct LDEs:
j1=j2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Block.nout  i++
induction variable: ['i']
{
L2674: (ilh[4],r) 
L2675: (ilh[4],r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
		}
 }
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['i', 'j'], 2674), ('[4]', 'r', 'normalized', ['i', 'j'], 2675)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (mh2 * nh2)  i++
induction variable: ['i']
{
L2676: (ilh2[4],r) 
L2677: (ilh2[4],r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
		}
 }
array table
-----------------------------------------------
ilh2 -> [('[4]', 'r', 'normalized', ['i', 'j'], 2676), ('[4]', 'r', 'normalized', ['i', 'j'], 2677)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (mh3 * nh3)  i++
induction variable: ['i']
{
L2678: (ilh3[4],r) 
L2679: (ilh3[4],r) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2678), ('[4]', 'r', 'normalized', ['i'], 2679)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Block.nout  i++
induction variable: ['i']
{
L2680: (Block.outsz[i]=,w) (ilh[4],r) 
L2681: (Block.outsz[Block.nout + i]=,w) (ilh2[4],r) 
L2682: (ilh3[4],r) 
L2683: (Block.outsz[2 * Block.nout + i]=,w) 
L2684: (Block.outsz[2 * Block.nout + i]=,w) 
L2685: (Block.outsz[2 * Block.nout + i]=,w) 
L2686: (Block.outsz[2 * Block.nout + i]=,w) 
L2687: (Block.outsz[2 * Block.nout + i]=,w) 
L2688: (Block.outsz[2 * Block.nout + i]=,w) 
L2689: (Block.outsz[2 * Block.nout + i]=,w) 
L2690: (Block.outsz[2 * Block.nout + i]=,w) 
L2691: (Block.outsz[2 * Block.nout + i]=,w) 
}
array table
-----------------------------------------------
ilh3 -> [('[4]', 'r', 'normalized', ['i'], 2682)]
LDEs formed:0

ilh2 -> [('[4]', 'r', 'normalized', ['i'], 2681)]
LDEs formed:0

Block.outsz -> [('[i]', 'w', 'normalized', ['i'], 2680), ('[Block.nout + i]', 'w', 'not normalized', ['i'], 2681), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2683), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2684), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2685), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2686), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2687), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2688), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2689), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2690), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2691)]
LDEs formed:66

ilh -> [('[4]', 'r', 'normalized', ['i'], 2680)]
LDEs formed:0

distinct LDEs:
i1=Block.nout + i2
2 * Block.nout + i1=2 * Block.nout + i2
Block.nout + i1=Block.nout + i2
i1=i2
i1=2 * Block.nout + i2
Block.nout + i1=2 * Block.nout + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Block.nout  i++
induction variable: ['i']
{
L2681: (Block.outsz[i]=,w) (ilh[4],r) 
L2682: (Block.outsz[Block.nout + i]=,w) 
L2683: (Block.outsz[2 * Block.nout + i]=,w) 
}
array table
-----------------------------------------------
Block.outsz -> [('[i]', 'w', 'normalized', ['i'], 2681), ('[Block.nout + i]', 'w', 'not normalized', ['i'], 2682), ('[2 * Block.nout + i]', 'w', 'not normalized', ['i'], 2683)]
LDEs formed:6

ilh -> [('[4]', 'r', 'normalized', ['i'], 2681)]
LDEs formed:0

distinct LDEs:
i1=Block.nout + i2
2 * Block.nout + i1=2 * Block.nout + i2
Block.nout + i1=Block.nout + i2
i1=i2
i1=2 * Block.nout + i2
Block.nout + i1=2 * Block.nout + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Block.nout  i++
induction variable: ['i']
{
L2682: (Block.outsz[2 * Block.nout + i],r) 
L2683: (Block.outptr[i]=,w) 
L2684: (Block.outsz[i]*,r) (Block.outsz[Block.nout + i]*,r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
			}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2685: (Block.outptr[i],r) 
	loop info: j = 0  j < Block.outsz[i]*Block.outsz[Block.nout + i]  j++
	induction variable: ['i', 'j']
		{
		L2686: (ptr_d[j]=,w) 
		}
L2687: (Block.outptr[i]=,w) 
L2688: (Block.outsz[i]*,r) (Block.outsz[Block.nout + i]*,r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
			}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2689: (Block.outptr[i],r) 
	loop info: j = 0  j < 2 * Block.outsz[i]*Block.outsz[Block.nout + i]  j++
	induction variable: ['i', 'j']
		{
		L2690: (ptr_d[j]=,w) 
		}
L2691: (Block.outptr[i]=,w) 
L2692: (Block.outsz[i]*,r) (Block.outsz[Block.nout + i]*,r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
			}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2693: (Block.outptr[i],r) 
	loop info: j = 0  j < Block.outsz[i]*Block.outsz[Block.nout + i]  j++
	induction variable: ['i', 'j']
		{
		L2694: (ptr_l[j]=,w) 
		}
L2695: (Block.outptr[i]=,w) 
L2696: (Block.outsz[i]*,r) (Block.outsz[Block.nout + i]*,r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
			}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2697: (Block.outptr[i],r) 
	loop info: j = 0  j < Block.outsz[i]*Block.outsz[Block.nout + i]  j++
	induction variable: ['i', 'j']
		{
		L2698: (ptr_s[j]=,w) 
		}
L2699: (Block.outptr[i]=,w) 
L2700: (Block.outsz[i]*,r) (Block.outsz[Block.nout + i]*,r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
			}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2701: (Block.outptr[i],r) 
	loop info: j = 0  j < Block.outsz[i]*Block.outsz[Block.nout + i]  j++
	induction variable: ['i', 'j']
		{
		L2702: (ptr_c[j]=,w) 
		}
L2703: (Block.outptr[i]=,w) 
L2704: (Block.outsz[i]*,r) (Block.outsz[Block.nout + i]*,r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
			}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2705: (Block.outptr[i],r) 
	loop info: j = 0  j < Block.outsz[i]*Block.outsz[Block.nout + i]  j++
	induction variable: ['i', 'j']
		{
		L2706: (ptr_ul[j]=,w) 
		}
L2707: (Block.outptr[i]=,w) 
L2708: (Block.outsz[i]*,r) (Block.outsz[Block.nout + i]*,r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
			}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2709: (Block.outptr[i],r) 
	loop info: j = 0  j < Block.outsz[i]*Block.outsz[Block.nout + i]  j++
	induction variable: ['i', 'j']
		{
		L2710: (ptr_us[j]=,w) 
		}
L2711: (Block.outptr[i]=,w) 
L2712: (Block.outsz[i]*,r) (Block.outsz[Block.nout + i]*,r) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
			}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
			}
L2713: (Block.outptr[i],r) 
	loop info: j = 0  j < Block.outsz[i]*Block.outsz[Block.nout + i]  j++
	induction variable: ['i', 'j']
		{
		L2714: (ptr_uc[j]=,w) 
		}
 }
array table
-----------------------------------------------
ptr_ul -> [('[j]', 'w', 'normalized', ['i', 'j'], 2706)]
LDEs formed:1

ptr_l -> [('[j]', 'w', 'normalized', ['i', 'j'], 2694)]
LDEs formed:1

ptr_c -> [('[j]', 'w', 'normalized', ['i', 'j'], 2702)]
LDEs formed:1

ptr_uc -> [('[j]', 'w', 'normalized', ['i', 'j'], 2714)]
LDEs formed:1

ptr_d -> [('[j]', 'w', 'normalized', ['i', 'j'], 2686), ('[j]', 'w', 'normalized', ['i', 'j'], 2690)]
LDEs formed:3

Block.outptr -> [('[i]', 'w', 'normalized', ['i', 'j'], 2683), ('[i]', 'r', 'normalized', ['i', 'j'], 2685), ('[i]', 'w', 'normalized', ['i', 'j'], 2687), ('[i]', 'r', 'normalized', ['i', 'j'], 2689), ('[i]', 'w', 'normalized', ['i', 'j'], 2691), ('[i]', 'r', 'normalized', ['i', 'j'], 2693), ('[i]', 'w', 'normalized', ['i', 'j'], 2695), ('[i]', 'r', 'normalized', ['i', 'j'], 2697), ('[i]', 'w', 'normalized', ['i', 'j'], 2699), ('[i]', 'r', 'normalized', ['i', 'j'], 2701), ('[i]', 'w', 'normalized', ['i', 'j'], 2703), ('[i]', 'r', 'normalized', ['i', 'j'], 2705), ('[i]', 'w', 'normalized', ['i', 'j'], 2707), ('[i]', 'r', 'normalized', ['i', 'j'], 2709), ('[i]', 'w', 'normalized', ['i', 'j'], 2711), ('[i]', 'r', 'normalized', ['i', 'j'], 2713)]
LDEs formed:100

ptr_s -> [('[j]', 'w', 'normalized', ['i', 'j'], 2698)]
LDEs formed:1

ptr_us -> [('[j]', 'w', 'normalized', ['i', 'j'], 2710)]
LDEs formed:1

Block.outsz -> [('[2 * Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2682), ('[i]', 'r', 'normalized', ['i', 'j'], 2684), ('[Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2684), ('[i]', 'r', 'normalized', ['i', 'j'], 2688), ('[Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2688), ('[i]', 'r', 'normalized', ['i', 'j'], 2692), ('[Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2692), ('[i]', 'r', 'normalized', ['i', 'j'], 2696), ('[Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2696), ('[i]', 'r', 'normalized', ['i', 'j'], 2700), ('[Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2700), ('[i]', 'r', 'normalized', ['i', 'j'], 2704), ('[Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2704), ('[i]', 'r', 'normalized', ['i', 'j'], 2708), ('[Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2708), ('[i]', 'r', 'normalized', ['i', 'j'], 2712), ('[Block.nout + i]', 'r', 'not normalized', ['i', 'j'], 2712)]
LDEs formed:0

distinct LDEs:
j1=j2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nevout  j++
induction variable: ['j']
{
L2713: (Block.evout[j]=,w) (ilh2[4],r) 
}
array table
-----------------------------------------------
Block.evout -> [('[j]', 'w', 'normalized', ['j'], 2713)]
LDEs formed:1

ilh2 -> [('[4]', 'r', 'normalized', ['j'], 2713)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nevout  j++
induction variable: ['j']
{
L2714: (Block.evout[j]=,w) 
}
array table
-----------------------------------------------
Block.evout -> [('[j]', 'w', 'normalized', ['j'], 2714)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nx  j++
induction variable: ['j']
{
L2715: (Block.x[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
Block.x -> [('[j]', 'w', 'normalized', ['j'], 2715)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2715)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nx  j++
induction variable: ['j']
{
L2716: (Block.xd[j]=,w) 
}
array table
-----------------------------------------------
Block.xd -> [('[j]', 'w', 'normalized', ['j'], 2716)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nx  j++
induction variable: ['j']
{
L2717: (Block.xprop[j]=,w) 
}
array table
-----------------------------------------------
Block.xprop -> [('[j]', 'w', 'normalized', ['j'], 2717)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nx  j++
induction variable: ['j']
{
L2718: (Block.res[j]=,w) 
}
array table
-----------------------------------------------
Block.res -> [('[j]', 'w', 'normalized', ['j'], 2718)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nz  j++
induction variable: ['j']
{
L2719: (Block.z[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
Block.z -> [('[j]', 'w', 'normalized', ['j'], 2719)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2719)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mh * nh  i++
induction variable: ['i']
{
L2720: (ilh2[1],r) 
L2721: (ilh2[2],r) 
L2722: (Block.ozsz[i]=,w) 
L2723: (Block.ozsz[Block.noz + i]=,w) 
L2724: (ilh2[0]==,r) 
L2725: (ilh2[3]==,r) 
L2726: (Block.oztyp[i]=,w) 
L2727: (Block.ozptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2728: (Block.ozptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2729: (ptr_d[j]=,w) (ilh2[4],r) 
			}
L2730: (ilh2[3]==,r) 
L2731: (Block.oztyp[i]=,w) 
L2732: (Block.ozptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2733: (Block.ozptr[i],r) 
	loop info: j = 0  j < 2 * mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2734: (ptr_d[j]=,w) (ilh2[4],r) 
			}
L2735: (ilh2[0]==,r) 
L2736: (ilh2[3]==,r) 
L2737: (Block.oztyp[i]=,w) 
L2738: (Block.ozptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2739: (Block.ozptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2740: (ptr_l[j]=,w) (ilh2[4],r) 
			}
L2741: (ilh2[3]==,r) 
L2742: (Block.oztyp[i]=,w) 
L2743: (Block.ozptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2744: (Block.ozptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2745: (ptr_s[j]=,w) (ilh2[4],r) 
			}
L2746: (ilh2[3]==,r) 
L2747: (Block.oztyp[i]=,w) 
L2748: (Block.ozptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2749: (Block.ozptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2750: (ptr_c[j]=,w) (ilh2[4],r) 
			}
L2751: (ilh2[3]==,r) 
L2752: (Block.oztyp[i]=,w) 
L2753: (Block.ozptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2754: (Block.ozptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2755: (ptr_ul[j]=,w) (ilh2[4],r) 
			}
L2756: (ilh2[3]==,r) 
L2757: (Block.oztyp[i]=,w) 
L2758: (Block.ozptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2759: (Block.ozptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2760: (ptr_us[j]=,w) (ilh2[4],r) 
			}
L2761: (ilh2[3]==,r) 
L2762: (Block.oztyp[i]=,w) 
L2763: (Block.ozptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2764: (Block.ozptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2765: (ptr_uc[j]=,w) (ilh2[4],r) 
			}
 }
array table
-----------------------------------------------
Block.oztyp -> [('[i]', 'w', 'normalized', ['i', 'j'], 2726), ('[i]', 'w', 'normalized', ['i', 'j'], 2731), ('[i]', 'w', 'normalized', ['i', 'j'], 2737), ('[i]', 'w', 'normalized', ['i', 'j'], 2742), ('[i]', 'w', 'normalized', ['i', 'j'], 2747), ('[i]', 'w', 'normalized', ['i', 'j'], 2752), ('[i]', 'w', 'normalized', ['i', 'j'], 2757), ('[i]', 'w', 'normalized', ['i', 'j'], 2762)]
LDEs formed:36

Block.ozptr -> [('[i]', 'w', 'normalized', ['i', 'j'], 2727), ('[i]', 'r', 'normalized', ['i', 'j'], 2728), ('[i]', 'w', 'normalized', ['i', 'j'], 2732), ('[i]', 'r', 'normalized', ['i', 'j'], 2733), ('[i]', 'w', 'normalized', ['i', 'j'], 2738), ('[i]', 'r', 'normalized', ['i', 'j'], 2739), ('[i]', 'w', 'normalized', ['i', 'j'], 2743), ('[i]', 'r', 'normalized', ['i', 'j'], 2744), ('[i]', 'w', 'normalized', ['i', 'j'], 2748), ('[i]', 'r', 'normalized', ['i', 'j'], 2749), ('[i]', 'w', 'normalized', ['i', 'j'], 2753), ('[i]', 'r', 'normalized', ['i', 'j'], 2754), ('[i]', 'w', 'normalized', ['i', 'j'], 2758), ('[i]', 'r', 'normalized', ['i', 'j'], 2759), ('[i]', 'w', 'normalized', ['i', 'j'], 2763), ('[i]', 'r', 'normalized', ['i', 'j'], 2764)]
LDEs formed:100

ptr_ul -> [('[j]', 'w', 'normalized', ['i', 'j'], 2755)]
LDEs formed:1

ptr_l -> [('[j]', 'w', 'normalized', ['i', 'j'], 2740)]
LDEs formed:1

ptr_c -> [('[j]', 'w', 'normalized', ['i', 'j'], 2750)]
LDEs formed:1

ptr_uc -> [('[j]', 'w', 'normalized', ['i', 'j'], 2765)]
LDEs formed:1

ptr_d -> [('[j]', 'w', 'normalized', ['i', 'j'], 2729), ('[j]', 'w', 'normalized', ['i', 'j'], 2734)]
LDEs formed:3

ilh2 -> [('[1]', 'r', 'normalized', ['i', 'j'], 2720), ('[2]', 'r', 'normalized', ['i', 'j'], 2721), ('[0]', 'r', 'normalized', ['i', 'j'], 2724), ('[3]', 'r', 'normalized', ['i', 'j'], 2725), ('[4]', 'r', 'normalized', ['i', 'j'], 2729), ('[3]', 'r', 'normalized', ['i', 'j'], 2730), ('[4]', 'r', 'normalized', ['i', 'j'], 2734), ('[0]', 'r', 'normalized', ['i', 'j'], 2735), ('[3]', 'r', 'normalized', ['i', 'j'], 2736), ('[4]', 'r', 'normalized', ['i', 'j'], 2740), ('[3]', 'r', 'normalized', ['i', 'j'], 2741), ('[4]', 'r', 'normalized', ['i', 'j'], 2745), ('[3]', 'r', 'normalized', ['i', 'j'], 2746), ('[4]', 'r', 'normalized', ['i', 'j'], 2750), ('[3]', 'r', 'normalized', ['i', 'j'], 2751), ('[4]', 'r', 'normalized', ['i', 'j'], 2755), ('[3]', 'r', 'normalized', ['i', 'j'], 2756), ('[4]', 'r', 'normalized', ['i', 'j'], 2760), ('[3]', 'r', 'normalized', ['i', 'j'], 2761), ('[4]', 'r', 'normalized', ['i', 'j'], 2765)]
LDEs formed:0

Block.ozsz -> [('[i]', 'w', 'normalized', ['i', 'j'], 2722), ('[Block.noz + i]', 'w', 'not normalized', ['i', 'j'], 2723)]
LDEs formed:3

ptr_s -> [('[j]', 'w', 'normalized', ['i', 'j'], 2745)]
LDEs formed:1

ptr_us -> [('[j]', 'w', 'normalized', ['i', 'j'], 2760)]
LDEs formed:1

distinct LDEs:
Block.noz + i1=Block.noz + i2
j1=j2
i1=Block.noz + i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nrpar  j++
induction variable: ['j']
{
L2761: (Block.rpar[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
Block.rpar -> [('[j]', 'w', 'normalized', ['j'], 2761)]
LDEs formed:1

ilh -> [('[4]', 'r', 'normalized', ['j'], 2761)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nipar  j++
induction variable: ['j']
{
L2762: (Block.ipar[j]=,w) (ilh[4],r) 
}
array table
-----------------------------------------------
ilh -> [('[4]', 'r', 'normalized', ['j'], 2762)]
LDEs formed:0

Block.ipar -> [('[j]', 'w', 'normalized', ['j'], 2762)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mh * nh  i++
induction variable: ['i']
{
L2763: (ilh2[1],r) 
L2764: (ilh2[2],r) 
L2765: (Block.oparsz[i]=,w) 
L2766: (Block.oparsz[Block.nopar + i]=,w) 
L2767: (ilh2[0]==,r) 
L2768: (ilh2[3]==,r) 
L2769: (Block.opartyp[i]=,w) 
L2770: (Block.oparptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.noz  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2771: (Block.oparptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2772: (ptr_d[j]=,w) (ilh2[4],r) 
			}
L2773: (ilh2[3]==,r) 
L2774: (Block.opartyp[i]=,w) 
L2775: (Block.oparptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.noz  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2776: (Block.oparptr[i],r) 
	loop info: j = 0  j < 2 * mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2777: (ptr_d[j]=,w) (ilh2[4],r) 
			}
L2778: (ilh2[0]==,r) 
L2779: (ilh2[3]==,r) 
L2780: (Block.opartyp[i]=,w) 
L2781: (Block.oparptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.noz  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2782: (Block.oparptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2783: (ptr_l[j]=,w) (ilh2[4],r) 
			}
L2784: (ilh2[3]==,r) 
L2785: (Block.opartyp[i]=,w) 
L2786: (Block.oparptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.noz  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2787: (Block.oparptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2788: (ptr_s[j]=,w) (ilh2[4],r) 
			}
L2789: (ilh2[3]==,r) 
L2790: (Block.opartyp[i]=,w) 
L2791: (Block.oparptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.noz  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2792: (Block.oparptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2793: (ptr_c[j]=,w) (ilh2[4],r) 
			}
L2794: (ilh2[3]==,r) 
L2795: (Block.opartyp[i]=,w) 
L2796: (Block.oparptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.noz  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2797: (Block.oparptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2798: (ptr_ul[j]=,w) (ilh2[4],r) 
			}
L2799: (ilh2[3]==,r) 
L2800: (Block.opartyp[i]=,w) 
L2801: (Block.oparptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.noz  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2802: (Block.oparptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2803: (ptr_us[j]=,w) (ilh2[4],r) 
			}
L2804: (ilh2[3]==,r) 
L2805: (Block.opartyp[i]=,w) 
L2806: (Block.oparptr[i]=,w) 
	loop info: j = 0  j < Block.nin  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.nout  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < Block.noz  j++
	induction variable: ['i', 'j']
				}
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
				}
L2807: (Block.oparptr[i],r) 
	loop info: j = 0  j < mh2 * nh2  j++
	induction variable: ['i', 'j']
			{
			L2808: (ptr_uc[j]=,w) (ilh2[4],r) 
			}
 }
array table
-----------------------------------------------
Block.oparsz -> [('[i]', 'w', 'normalized', ['i', 'j'], 2765), ('[Block.nopar + i]', 'w', 'not normalized', ['i', 'j'], 2766)]
LDEs formed:3

ptr_ul -> [('[j]', 'w', 'normalized', ['i', 'j'], 2798)]
LDEs formed:1

ptr_l -> [('[j]', 'w', 'normalized', ['i', 'j'], 2783)]
LDEs formed:1

ptr_c -> [('[j]', 'w', 'normalized', ['i', 'j'], 2793)]
LDEs formed:1

Block.oparptr -> [('[i]', 'w', 'normalized', ['i', 'j'], 2770), ('[i]', 'r', 'normalized', ['i', 'j'], 2771), ('[i]', 'w', 'normalized', ['i', 'j'], 2775), ('[i]', 'r', 'normalized', ['i', 'j'], 2776), ('[i]', 'w', 'normalized', ['i', 'j'], 2781), ('[i]', 'r', 'normalized', ['i', 'j'], 2782), ('[i]', 'w', 'normalized', ['i', 'j'], 2786), ('[i]', 'r', 'normalized', ['i', 'j'], 2787), ('[i]', 'w', 'normalized', ['i', 'j'], 2791), ('[i]', 'r', 'normalized', ['i', 'j'], 2792), ('[i]', 'w', 'normalized', ['i', 'j'], 2796), ('[i]', 'r', 'normalized', ['i', 'j'], 2797), ('[i]', 'w', 'normalized', ['i', 'j'], 2801), ('[i]', 'r', 'normalized', ['i', 'j'], 2802), ('[i]', 'w', 'normalized', ['i', 'j'], 2806), ('[i]', 'r', 'normalized', ['i', 'j'], 2807)]
LDEs formed:100

ptr_uc -> [('[j]', 'w', 'normalized', ['i', 'j'], 2808)]
LDEs formed:1

ptr_d -> [('[j]', 'w', 'normalized', ['i', 'j'], 2772), ('[j]', 'w', 'normalized', ['i', 'j'], 2777)]
LDEs formed:3

Block.opartyp -> [('[i]', 'w', 'normalized', ['i', 'j'], 2769), ('[i]', 'w', 'normalized', ['i', 'j'], 2774), ('[i]', 'w', 'normalized', ['i', 'j'], 2780), ('[i]', 'w', 'normalized', ['i', 'j'], 2785), ('[i]', 'w', 'normalized', ['i', 'j'], 2790), ('[i]', 'w', 'normalized', ['i', 'j'], 2795), ('[i]', 'w', 'normalized', ['i', 'j'], 2800), ('[i]', 'w', 'normalized', ['i', 'j'], 2805)]
LDEs formed:36

ilh2 -> [('[1]', 'r', 'normalized', ['i', 'j'], 2763), ('[2]', 'r', 'normalized', ['i', 'j'], 2764), ('[0]', 'r', 'normalized', ['i', 'j'], 2767), ('[3]', 'r', 'normalized', ['i', 'j'], 2768), ('[4]', 'r', 'normalized', ['i', 'j'], 2772), ('[3]', 'r', 'normalized', ['i', 'j'], 2773), ('[4]', 'r', 'normalized', ['i', 'j'], 2777), ('[0]', 'r', 'normalized', ['i', 'j'], 2778), ('[3]', 'r', 'normalized', ['i', 'j'], 2779), ('[4]', 'r', 'normalized', ['i', 'j'], 2783), ('[3]', 'r', 'normalized', ['i', 'j'], 2784), ('[4]', 'r', 'normalized', ['i', 'j'], 2788), ('[3]', 'r', 'normalized', ['i', 'j'], 2789), ('[4]', 'r', 'normalized', ['i', 'j'], 2793), ('[3]', 'r', 'normalized', ['i', 'j'], 2794), ('[4]', 'r', 'normalized', ['i', 'j'], 2798), ('[3]', 'r', 'normalized', ['i', 'j'], 2799), ('[4]', 'r', 'normalized', ['i', 'j'], 2803), ('[3]', 'r', 'normalized', ['i', 'j'], 2804), ('[4]', 'r', 'normalized', ['i', 'j'], 2808)]
LDEs formed:0

ptr_s -> [('[j]', 'w', 'normalized', ['i', 'j'], 2788)]
LDEs formed:1

ptr_us -> [('[j]', 'w', 'normalized', ['i', 'j'], 2803)]
LDEs formed:1

distinct LDEs:
j1=j2
Block.nopar + i1=Block.nopar + i2
i1=Block.nopar + i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.ng  j++
induction variable: ['j']
{
L2804: (Block.g[j]=,w) 
}
array table
-----------------------------------------------
Block.g -> [('[j]', 'w', 'normalized', ['j'], 2804)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.ng  j++
induction variable: ['j']
{
L2805: (Block.jroot[j]=,w) 
}
array table
-----------------------------------------------
Block.jroot -> [('[j]', 'w', 'normalized', ['j'], 2805)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < Block.nmode  j++
induction variable: ['j']
{
L2806: (Block.mode[j]=,w) 
}
array table
-----------------------------------------------
Block.mode -> [('[j]', 'w', 'normalized', ['j'], 2806)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<n_lnksz j++
induction variable: ['j']
{
L2807: (lnksz[j]=,w) 
L2808: (lnksz[n_lnksz+j]=,w) 
}
array table
-----------------------------------------------
lnksz -> [('[j]', 'w', 'normalized', ['j'], 2807), ('[n_lnksz+j]', 'w', 'not normalized', ['j'], 2808)]
LDEs formed:3

distinct LDEs:
n_lnksz+j1=n_lnksz+j2
j1=j2
j1=n_lnksz+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<n_lnksz j++
induction variable: ['j']
{
L2809: (lnksz[j]=,w) 
L2810: (lnksz[n_lnksz+j]=,w) 
}
array table
-----------------------------------------------
lnksz -> [('[j]', 'w', 'normalized', ['j'], 2809), ('[n_lnksz+j]', 'w', 'not normalized', ['j'], 2810)]
LDEs formed:3

distinct LDEs:
n_lnksz+j1=n_lnksz+j2
j1=j2
j1=n_lnksz+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<n_lnksz j++
induction variable: ['j']
{
L2811: (lnksz[j]=,w) 
L2812: (lnksz[n_lnksz+j]=,w) 
}
array table
-----------------------------------------------
lnksz -> [('[j]', 'w', 'normalized', ['j'], 2811), ('[n_lnksz+j]', 'w', 'not normalized', ['j'], 2812)]
LDEs formed:3

distinct LDEs:
n_lnksz+j1=n_lnksz+j2
j1=j2
j1=n_lnksz+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<n_lnksz j++
induction variable: ['j']
{
L2813: (lnksz[j]=,w) 
L2814: (lnksz[n_lnksz+j]=,w) 
}
array table
-----------------------------------------------
lnksz -> [('[j]', 'w', 'normalized', ['j'], 2813), ('[n_lnksz+j]', 'w', 'not normalized', ['j'], 2814)]
LDEs formed:3

distinct LDEs:
n_lnksz+j1=n_lnksz+j2
j1=j2
j1=n_lnksz+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<n_lnksz j++
induction variable: ['j']
{
L2815: (lnksz[j]=,w) 
L2816: (lnksz[n_lnksz+j]=,w) 
}
array table
-----------------------------------------------
lnksz -> [('[j]', 'w', 'normalized', ['j'], 2815), ('[n_lnksz+j]', 'w', 'not normalized', ['j'], 2816)]
LDEs formed:3

distinct LDEs:
n_lnksz+j1=n_lnksz+j2
j1=j2
j1=n_lnksz+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<n_lnksz j++
induction variable: ['j']
{
L2817: (lnksz[j]=,w) 
L2818: (lnksz[n_lnksz+j]=,w) 
}
array table
-----------------------------------------------
lnksz -> [('[j]', 'w', 'normalized', ['j'], 2817), ('[n_lnksz+j]', 'w', 'not normalized', ['j'], 2818)]
LDEs formed:3

distinct LDEs:
n_lnksz+j1=n_lnksz+j2
j1=j2
j1=n_lnksz+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<n_lnksz j++
induction variable: ['j']
{
L2819: (lnksz[j]=,w) 
L2820: (lnksz[n_lnksz+j]=,w) 
}
array table
-----------------------------------------------
lnksz -> [('[j]', 'w', 'normalized', ['j'], 2819), ('[n_lnksz+j]', 'w', 'not normalized', ['j'], 2820)]
LDEs formed:3

distinct LDEs:
n_lnksz+j1=n_lnksz+j2
j1=j2
j1=n_lnksz+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<n_lnktyp i++
induction variable: ['i']
{
L2821: (lnksz[i]*,r) (lnksz[i+n_lnktyp],r) 
L2822: (lnktyp[i],r) 
	loop info: j=0 j<nm j++
	induction variable: ['i', 'j']
		}
L2823: (lnksz[i],r) (lnksz[i+n_lnktyp],r) 
	loop info: j=0 j<2*nm j++
	induction variable: ['i', 'j']
		}
L2824: (ptr_d[nm],r) 
L2825: (lnksz[i],r) (lnksz[i+n_lnktyp],r) 
	loop info: j=0 j<nm j++
	induction variable: ['i', 'j']
		}
L2826: (lnksz[i],r) 
L2827: (lnksz[i+n_lnktyp],r) 
	loop info: j=0 j<nm j++
	induction variable: ['i', 'j']
		}
L2828: (lnksz[i],r) 
L2829: (lnksz[i+n_lnktyp],r) 
	loop info: j=0 j<nm j++
	induction variable: ['i', 'j']
		}
L2830: (lnksz[i],r) 
L2831: (lnksz[i+n_lnktyp],r) 
	loop info: j=0 j<nm j++
	induction variable: ['i', 'j']
		}
L2832: (lnksz[i],r) 
L2833: (lnksz[i+n_lnktyp],r) 
	loop info: j=0 j<nm j++
	induction variable: ['i', 'j']
		}
L2834: (lnksz[i],r) 
L2835: (lnksz[i+n_lnktyp],r) 
	loop info: j=0 j<nm j++
	induction variable: ['i', 'j']
		}
L2836: (lnksz[i],r) 
L2837: (lnksz[i+n_lnktyp],r) 
	loop info: j=0 j<nm j++
	induction variable: ['i', 'j']
		}
L2838: (lnksz[i],r) (lnksz[i+n_lnktyp],r) 
}
array table
-----------------------------------------------
lnksz -> [('[i]', 'r', 'normalized', ['i', 'j'], 2821), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2821), ('[i]', 'r', 'normalized', ['i', 'j'], 2823), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2823), ('[i]', 'r', 'normalized', ['i', 'j'], 2825), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2825), ('[i]', 'r', 'normalized', ['i', 'j'], 2826), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2827), ('[i]', 'r', 'normalized', ['i', 'j'], 2828), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2829), ('[i]', 'r', 'normalized', ['i', 'j'], 2830), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2831), ('[i]', 'r', 'normalized', ['i', 'j'], 2832), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2833), ('[i]', 'r', 'normalized', ['i', 'j'], 2834), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2835), ('[i]', 'r', 'normalized', ['i', 'j'], 2836), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2837), ('[i]', 'r', 'normalized', ['i', 'j'], 2838), ('[i+n_lnktyp]', 'r', 'not normalized', ['i', 'j'], 2838)]
LDEs formed:0

ptr_d -> [('[nm]', 'r', 'not normalized', ['i', 'j'], 2824)]
LDEs formed:0

lnktyp -> [('[i]', 'r', 'normalized', ['i', 'j'], 2822)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nblk i++
induction variable: ['i']
{
L2823: (subheader[0]==,r) (subheader[0]==,r) (lfunpt[i]=,w) 
L2824: (subheader[0]==,r) 
L2825: (subheader[5]-,r) 
L2826: (buf[0]=,w) 
L2827: (subheader[6],r) (buf[0],r) 
L2828: (buf[sz_str]=,w) 
L2829: (lfunpt[i]=,w) 
L2830: (subheader[6],r) 
L2831: (lfunpt[i]=,w) 
}
array table
-----------------------------------------------
subheader -> [('[0]', 'r', 'normalized', ['i'], 2823), ('[0]', 'r', 'normalized', ['i'], 2823), ('[0]', 'r', 'normalized', ['i'], 2824), ('[5]', 'r', 'normalized', ['i'], 2825), ('[6]', 'r', 'normalized', ['i'], 2827), ('[6]', 'r', 'normalized', ['i'], 2830)]
LDEs formed:0

buf -> [('[0]', 'w', 'normalized', ['i'], 2826), ('[0]', 'r', 'normalized', ['i'], 2827), ('[sz_str]', 'w', 'not normalized', ['i'], 2828)]
LDEs formed:5

lfunpt -> [('[i]', 'w', 'normalized', ['i'], 2823), ('[i]', 'w', 'normalized', ['i'], 2829), ('[i]', 'w', 'normalized', ['i'], 2831)]
LDEs formed:6

distinct LDEs:
0=sz_str
0=0
sz_str=sz_str
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<noz j++
induction variable: ['j']
{
L2832: (subheader[0],r) 
L2833: (subheader[3],r) 
L2834: (oztyp[j]=,w) 
L2835: (ozsz[j]=,w) (subheader[1],r) 
L2836: (ozsz[j+noz]=,w) (subheader[2],r) 
L2837: (oz[j]=,w) 
L2838: (oztyp[j]=,w) 
L2839: (ozsz[j]=,w) (subheader[1],r) 
L2840: (ozsz[j+noz]=,w) (subheader[2],r) 
L2841: (oz[j]=,w) 
L2842: (oztyp[j]=,w) 
L2843: (ozsz[j]=,w) (il_state_oz[3+j]-,r) (il_state_oz[2+j],r) 
L2844: (ozsz[j+noz]=,w) 
L2845: (oz[j]=,w) 
L2846: (subheader[3],r) 
L2847: (oztyp[j]=,w) 
L2848: (ozsz[j]=,w) (subheader[1],r) 
L2849: (ozsz[j+noz]=,w) (subheader[2],r) 
L2850: (oz[j]=,w) 
L2851: (oztyp[j]=,w) 
L2852: (ozsz[j]=,w) (subheader[1],r) 
L2853: (ozsz[j+noz]=,w) (subheader[2],r) 
L2854: (oz[j]=,w) 
L2855: (oztyp[j]=,w) 
L2856: (ozsz[j]=,w) (subheader[1],r) 
L2857: (ozsz[j+noz]=,w) (subheader[2],r) 
L2858: (oz[j]=,w) 
L2859: (oztyp[j]=,w) 
L2860: (ozsz[j]=,w) (subheader[1],r) 
L2861: (ozsz[j+noz]=,w) (subheader[2],r) 
L2862: (oz[j]=,w) 
L2863: (oztyp[j]=,w) 
L2864: (ozsz[j]=,w) (subheader[1],r) 
L2865: (ozsz[j+noz]=,w) (subheader[2],r) 
L2866: (oz[j]=,w) 
L2867: (oztyp[j]=,w) 
L2868: (ozsz[j]=,w) (subheader[1],r) 
L2869: (ozsz[j+noz]=,w) (subheader[2],r) 
L2870: (oz[j]=,w) 
L2871: (oztyp[j]=,w) 
L2872: (ozsz[j]=,w) (il_state_oz[3+j]-,r) (il_state_oz[2+j],r) 
L2873: (ozsz[j+noz]=,w) 
L2874: (oz[j]=,w) 
L2875: (oztyp[j]=,w) 
L2876: (ozsz[j]=,w) (il_state_oz[3+j]-,r) (il_state_oz[2+j],r) 
L2877: (ozsz[j+noz]=,w) 
L2878: (oz[j]=,w) 
}
array table
-----------------------------------------------
subheader -> [('[0]', 'r', 'normalized', ['j'], 2832), ('[3]', 'r', 'normalized', ['j'], 2833), ('[1]', 'r', 'normalized', ['j'], 2835), ('[2]', 'r', 'normalized', ['j'], 2836), ('[1]', 'r', 'normalized', ['j'], 2839), ('[2]', 'r', 'normalized', ['j'], 2840), ('[3]', 'r', 'normalized', ['j'], 2846), ('[1]', 'r', 'normalized', ['j'], 2848), ('[2]', 'r', 'normalized', ['j'], 2849), ('[1]', 'r', 'normalized', ['j'], 2852), ('[2]', 'r', 'normalized', ['j'], 2853), ('[1]', 'r', 'normalized', ['j'], 2856), ('[2]', 'r', 'normalized', ['j'], 2857), ('[1]', 'r', 'normalized', ['j'], 2860), ('[2]', 'r', 'normalized', ['j'], 2861), ('[1]', 'r', 'normalized', ['j'], 2864), ('[2]', 'r', 'normalized', ['j'], 2865), ('[1]', 'r', 'normalized', ['j'], 2868), ('[2]', 'r', 'normalized', ['j'], 2869)]
LDEs formed:0

il_state_oz -> [('[3+j]', 'r', 'normalized', ['j'], 2843), ('[2+j]', 'r', 'normalized', ['j'], 2843), ('[3+j]', 'r', 'normalized', ['j'], 2872), ('[2+j]', 'r', 'normalized', ['j'], 2872), ('[3+j]', 'r', 'normalized', ['j'], 2876), ('[2+j]', 'r', 'normalized', ['j'], 2876)]
LDEs formed:0

oztyp -> [('[j]', 'w', 'normalized', ['j'], 2834), ('[j]', 'w', 'normalized', ['j'], 2838), ('[j]', 'w', 'normalized', ['j'], 2842), ('[j]', 'w', 'normalized', ['j'], 2847), ('[j]', 'w', 'normalized', ['j'], 2851), ('[j]', 'w', 'normalized', ['j'], 2855), ('[j]', 'w', 'normalized', ['j'], 2859), ('[j]', 'w', 'normalized', ['j'], 2863), ('[j]', 'w', 'normalized', ['j'], 2867), ('[j]', 'w', 'normalized', ['j'], 2871), ('[j]', 'w', 'normalized', ['j'], 2875)]
LDEs formed:66

ozsz -> [('[j]', 'w', 'normalized', ['j'], 2835), ('[j+noz]', 'w', 'not normalized', ['j'], 2836), ('[j]', 'w', 'normalized', ['j'], 2839), ('[j+noz]', 'w', 'not normalized', ['j'], 2840), ('[j]', 'w', 'normalized', ['j'], 2843), ('[j+noz]', 'w', 'not normalized', ['j'], 2844), ('[j]', 'w', 'normalized', ['j'], 2848), ('[j+noz]', 'w', 'not normalized', ['j'], 2849), ('[j]', 'w', 'normalized', ['j'], 2852), ('[j+noz]', 'w', 'not normalized', ['j'], 2853), ('[j]', 'w', 'normalized', ['j'], 2856), ('[j+noz]', 'w', 'not normalized', ['j'], 2857), ('[j]', 'w', 'normalized', ['j'], 2860), ('[j+noz]', 'w', 'not normalized', ['j'], 2861), ('[j]', 'w', 'normalized', ['j'], 2864), ('[j+noz]', 'w', 'not normalized', ['j'], 2865), ('[j]', 'w', 'normalized', ['j'], 2868), ('[j+noz]', 'w', 'not normalized', ['j'], 2869), ('[j]', 'w', 'normalized', ['j'], 2872), ('[j+noz]', 'w', 'not normalized', ['j'], 2873), ('[j]', 'w', 'normalized', ['j'], 2876), ('[j+noz]', 'w', 'not normalized', ['j'], 2877)]
LDEs formed:253

oz -> [('[j]', 'w', 'normalized', ['j'], 2837), ('[j]', 'w', 'normalized', ['j'], 2841), ('[j]', 'w', 'normalized', ['j'], 2845), ('[j]', 'w', 'normalized', ['j'], 2850), ('[j]', 'w', 'normalized', ['j'], 2854), ('[j]', 'w', 'normalized', ['j'], 2858), ('[j]', 'w', 'normalized', ['j'], 2862), ('[j]', 'w', 'normalized', ['j'], 2866), ('[j]', 'w', 'normalized', ['j'], 2870), ('[j]', 'w', 'normalized', ['j'], 2874), ('[j]', 'w', 'normalized', ['j'], 2878)]
LDEs formed:66

distinct LDEs:
j1=j2
j1+noz=j2+noz
j1=j2+noz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nopar j++
induction variable: ['j']
{
L2879: (subheader[0],r) 
L2880: (subheader[3],r) 
L2881: (opartyp[j]=,w) 
L2882: (oparsz[j]=,w) (subheader[1],r) 
L2883: (oparsz[j+nopar]=,w) (subheader[2],r) 
L2884: (opar[j]=,w) 
L2885: (opartyp[j]=,w) 
L2886: (oparsz[j]=,w) (subheader[1],r) 
L2887: (oparsz[j+nopar]=,w) (subheader[2],r) 
L2888: (opar[j]=,w) 
L2889: (opartyp[j]=,w) 
L2890: (oparsz[j]=,w) (il_sim_opar[3+j]-,r) (il_sim_opar[2+j],r) 
L2891: (oparsz[j+nopar]=,w) 
L2892: (opar[j]=,w) 
L2893: (subheader[3],r) 
L2894: (opartyp[j]=,w) 
L2895: (oparsz[j]=,w) (subheader[1],r) 
L2896: (oparsz[j+nopar]=,w) (subheader[2],r) 
L2897: (opar[j]=,w) 
L2898: (opartyp[j]=,w) 
L2899: (oparsz[j]=,w) (subheader[1],r) 
L2900: (oparsz[j+nopar]=,w) (subheader[2],r) 
L2901: (opar[j]=,w) 
L2902: (opartyp[j]=,w) 
L2903: (oparsz[j]=,w) (subheader[1],r) 
L2904: (oparsz[j+nopar]=,w) (subheader[2],r) 
L2905: (opar[j]=,w) 
L2906: (opartyp[j]=,w) 
L2907: (oparsz[j]=,w) (subheader[1],r) 
L2908: (oparsz[j+nopar]=,w) (subheader[2],r) 
L2909: (opar[j]=,w) 
L2910: (opartyp[j]=,w) 
L2911: (oparsz[j]=,w) (subheader[1],r) 
L2912: (oparsz[j+nopar]=,w) (subheader[2],r) 
L2913: (opar[j]=,w) 
L2914: (opartyp[j]=,w) 
L2915: (oparsz[j]=,w) (subheader[1],r) 
L2916: (oparsz[j+nopar]=,w) (subheader[2],r) 
L2917: (opar[j]=,w) 
L2918: (opartyp[j]=,w) 
L2919: (oparsz[j]=,w) (il_sim_opar[3+j]-,r) (il_sim_opar[2+j],r) 
L2920: (oparsz[j+nopar]=,w) 
L2921: (opar[j]=,w) 
L2922: (opartyp[j]=,w) 
L2923: (oparsz[j]=,w) (il_sim_opar[3+j]-,r) (il_sim_opar[2+j],r) 
L2924: (oparsz[j+nopar]=,w) 
L2925: (opar[j]=,w) 
}
array table
-----------------------------------------------
subheader -> [('[0]', 'r', 'normalized', ['j'], 2879), ('[3]', 'r', 'normalized', ['j'], 2880), ('[1]', 'r', 'normalized', ['j'], 2882), ('[2]', 'r', 'normalized', ['j'], 2883), ('[1]', 'r', 'normalized', ['j'], 2886), ('[2]', 'r', 'normalized', ['j'], 2887), ('[3]', 'r', 'normalized', ['j'], 2893), ('[1]', 'r', 'normalized', ['j'], 2895), ('[2]', 'r', 'normalized', ['j'], 2896), ('[1]', 'r', 'normalized', ['j'], 2899), ('[2]', 'r', 'normalized', ['j'], 2900), ('[1]', 'r', 'normalized', ['j'], 2903), ('[2]', 'r', 'normalized', ['j'], 2904), ('[1]', 'r', 'normalized', ['j'], 2907), ('[2]', 'r', 'normalized', ['j'], 2908), ('[1]', 'r', 'normalized', ['j'], 2911), ('[2]', 'r', 'normalized', ['j'], 2912), ('[1]', 'r', 'normalized', ['j'], 2915), ('[2]', 'r', 'normalized', ['j'], 2916)]
LDEs formed:0

opartyp -> [('[j]', 'w', 'normalized', ['j'], 2881), ('[j]', 'w', 'normalized', ['j'], 2885), ('[j]', 'w', 'normalized', ['j'], 2889), ('[j]', 'w', 'normalized', ['j'], 2894), ('[j]', 'w', 'normalized', ['j'], 2898), ('[j]', 'w', 'normalized', ['j'], 2902), ('[j]', 'w', 'normalized', ['j'], 2906), ('[j]', 'w', 'normalized', ['j'], 2910), ('[j]', 'w', 'normalized', ['j'], 2914), ('[j]', 'w', 'normalized', ['j'], 2918), ('[j]', 'w', 'normalized', ['j'], 2922)]
LDEs formed:66

opar -> [('[j]', 'w', 'normalized', ['j'], 2884), ('[j]', 'w', 'normalized', ['j'], 2888), ('[j]', 'w', 'normalized', ['j'], 2892), ('[j]', 'w', 'normalized', ['j'], 2897), ('[j]', 'w', 'normalized', ['j'], 2901), ('[j]', 'w', 'normalized', ['j'], 2905), ('[j]', 'w', 'normalized', ['j'], 2909), ('[j]', 'w', 'normalized', ['j'], 2913), ('[j]', 'w', 'normalized', ['j'], 2917), ('[j]', 'w', 'normalized', ['j'], 2921), ('[j]', 'w', 'normalized', ['j'], 2925)]
LDEs formed:66

oparsz -> [('[j]', 'w', 'normalized', ['j'], 2882), ('[j+nopar]', 'w', 'not normalized', ['j'], 2883), ('[j]', 'w', 'normalized', ['j'], 2886), ('[j+nopar]', 'w', 'not normalized', ['j'], 2887), ('[j]', 'w', 'normalized', ['j'], 2890), ('[j+nopar]', 'w', 'not normalized', ['j'], 2891), ('[j]', 'w', 'normalized', ['j'], 2895), ('[j+nopar]', 'w', 'not normalized', ['j'], 2896), ('[j]', 'w', 'normalized', ['j'], 2899), ('[j+nopar]', 'w', 'not normalized', ['j'], 2900), ('[j]', 'w', 'normalized', ['j'], 2903), ('[j+nopar]', 'w', 'not normalized', ['j'], 2904), ('[j]', 'w', 'normalized', ['j'], 2907), ('[j+nopar]', 'w', 'not normalized', ['j'], 2908), ('[j]', 'w', 'normalized', ['j'], 2911), ('[j+nopar]', 'w', 'not normalized', ['j'], 2912), ('[j]', 'w', 'normalized', ['j'], 2915), ('[j+nopar]', 'w', 'not normalized', ['j'], 2916), ('[j]', 'w', 'normalized', ['j'], 2919), ('[j+nopar]', 'w', 'not normalized', ['j'], 2920), ('[j]', 'w', 'normalized', ['j'], 2923), ('[j+nopar]', 'w', 'not normalized', ['j'], 2924)]
LDEs formed:253

il_sim_opar -> [('[3+j]', 'r', 'normalized', ['j'], 2890), ('[2+j]', 'r', 'normalized', ['j'], 2890), ('[3+j]', 'r', 'normalized', ['j'], 2919), ('[2+j]', 'r', 'normalized', ['j'], 2919), ('[3+j]', 'r', 'normalized', ['j'], 2923), ('[2+j]', 'r', 'normalized', ['j'], 2923)]
LDEs formed:0

distinct LDEs:
j1=j2
j1=j2+nopar
j1+nopar=j2+nopar
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nlnk j++
induction variable: ['j']
{
L2924: (outtbsz[j]=,w) (subheader[1],r) 
L2925: (outtbsz[j+nlnk]=,w) (subheader[2],r) 
L2926: (subheader[0],r) 
L2927: (subheader[3],r) 
L2928: (outtbtyp[j]=,w) 
L2929: (outtbptr[j]=,w) 
L2930: (outtbtyp[j]=,w) 
L2931: (outtbptr[j]=,w) 
L2932: (subheader[3],r) 
L2933: (subheader[3],r) 
L2934: (outtbtyp[j]=,w) 
L2935: (outtbptr[j]=,w) 
L2936: (outtbtyp[j]=,w) 
L2937: (outtbptr[j]=,w) 
L2938: (outtbtyp[j]=,w) 
L2939: (outtbptr[j]=,w) 
L2940: (outtbtyp[j]=,w) 
L2941: (outtbptr[j]=,w) 
L2942: (outtbtyp[j]=,w) 
L2943: (outtbptr[j]=,w) 
L2944: (outtbtyp[j]=,w) 
L2945: (outtbptr[j]=,w) 
L2946: (subheader[3],r) 
L2947: (subheader[0],r) 
L2948: (outtbsz[j]*,r) (outtbsz[j+nlnk],r) 
	loop info: i=0 i<outtbsz[j]*outtbsz[j+nlnk] i++
	induction variable: ['j', 'i']
	{
	L2949: (outtb_elem[k+i].lnk=,w) 
	L2950: (outtb_elem[k+i].pos=,w) 
	}
 }
array table
-----------------------------------------------
subheader -> [('[1]', 'r', 'normalized', ['j', 'i'], 2924), ('[2]', 'r', 'normalized', ['j', 'i'], 2925), ('[0]', 'r', 'normalized', ['j', 'i'], 2926), ('[3]', 'r', 'normalized', ['j', 'i'], 2927), ('[3]', 'r', 'normalized', ['j', 'i'], 2932), ('[3]', 'r', 'normalized', ['j', 'i'], 2933), ('[3]', 'r', 'normalized', ['j', 'i'], 2946), ('[0]', 'r', 'normalized', ['j', 'i'], 2947)]
LDEs formed:0

outtbptr -> [('[j]', 'w', 'normalized', ['j', 'i'], 2929), ('[j]', 'w', 'normalized', ['j', 'i'], 2931), ('[j]', 'w', 'normalized', ['j', 'i'], 2935), ('[j]', 'w', 'normalized', ['j', 'i'], 2937), ('[j]', 'w', 'normalized', ['j', 'i'], 2939), ('[j]', 'w', 'normalized', ['j', 'i'], 2941), ('[j]', 'w', 'normalized', ['j', 'i'], 2943), ('[j]', 'w', 'normalized', ['j', 'i'], 2945)]
LDEs formed:36

outtbsz -> [('[j]', 'w', 'normalized', ['j', 'i'], 2924), ('[j+nlnk]', 'w', 'not normalized', ['j', 'i'], 2925), ('[j]', 'r', 'normalized', ['j', 'i'], 2948), ('[j+nlnk]', 'r', 'not normalized', ['j', 'i'], 2948)]
LDEs formed:7

outtb_elem -> [('[k+i]', 'w', 'not normalized', ['j', 'i'], 2949), ('[k+i]', 'w', 'not normalized', ['j', 'i'], 2950)]
LDEs formed:3

outtbtyp -> [('[j]', 'w', 'normalized', ['j', 'i'], 2928), ('[j]', 'w', 'normalized', ['j', 'i'], 2930), ('[j]', 'w', 'normalized', ['j', 'i'], 2934), ('[j]', 'w', 'normalized', ['j', 'i'], 2936), ('[j]', 'w', 'normalized', ['j', 'i'], 2938), ('[j]', 'w', 'normalized', ['j', 'i'], 2940), ('[j]', 'w', 'normalized', ['j', 'i'], 2942), ('[j]', 'w', 'normalized', ['j', 'i'], 2944)]
LDEs formed:36

distinct LDEs:
j1=j2
j1=j2+nlnk
k+i1=k+i2
j1+nlnk=j2+nlnk
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<Rhs i++
induction variable: ['i']
{
L2945: (state[i].iwhere=,w) (iwhere[i],r) 
L2946: (state[i].ntypes=,w) (ntypes[i],r) 
L2947: (state[i].lad=,w) (lad[i],r) 
L2948: (state[i].lhsvar=,w) (lhsvar[i],r) 
}
array table
-----------------------------------------------
iwhere -> [('[i]', 'r', 'normalized', ['i'], 2945)]
LDEs formed:0

lad -> [('[i]', 'r', 'normalized', ['i'], 2947)]
LDEs formed:0

state -> [('[i]', 'w', 'normalized', ['i'], 2945), ('[i]', 'w', 'normalized', ['i'], 2946), ('[i]', 'w', 'normalized', ['i'], 2947), ('[i]', 'w', 'normalized', ['i'], 2948)]
LDEs formed:10

lhsvar -> [('[i]', 'r', 'normalized', ['i'], 2948)]
LDEs formed:0

ntypes -> [('[i]', 'r', 'normalized', ['i'], 2946)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<Rhs i++
induction variable: ['i']
{
L2947: (iwhere[i]=,w) (state[i].iwhere,r) 
L2948: (ntypes[i]=,w) (state[i].ntypes,r) 
L2949: (lad[i]=,w) (state[i].lad,r) 
L2950: (lhsvar[i]=,w) (state[i].lhsvar,r) 
}
array table
-----------------------------------------------
iwhere -> [('[i]', 'w', 'normalized', ['i'], 2947)]
LDEs formed:1

lad -> [('[i]', 'w', 'normalized', ['i'], 2949)]
LDEs formed:1

state -> [('[i]', 'r', 'normalized', ['i'], 2947), ('[i]', 'r', 'normalized', ['i'], 2948), ('[i]', 'r', 'normalized', ['i'], 2949), ('[i]', 'r', 'normalized', ['i'], 2950)]
LDEs formed:0

lhsvar -> [('[i]', 'w', 'normalized', ['i'], 2950)]
LDEs formed:1

ntypes -> [('[i]', 'w', 'normalized', ['i'], 2948)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<*n i++
induction variable: ['i']
{
	loop info: j=0 j<(int) w[i] j++
	induction variable: ['i', 'j']
	{
	L2949: (ww[k]=,w) (v[i],r) 
	}
 }
array table
-----------------------------------------------
ww -> [('[k]', 'w', 'not normalized', ['i', 'j'], 2949)]
LDEs formed:1

v -> [('[i]', 'r', 'normalized', ['i', 'j'], 2949)]
LDEs formed:0

distinct LDEs:
k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<n i++
induction variable: ['i']
{
L2950: (v[i],r) (v[i],r) 
}
array table
-----------------------------------------------
v -> [('[i]', 'r', 'normalized', ['i'], 2950), ('[i]', 'r', 'normalized', ['i'], 2950)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nentries  j++
induction variable: ['j']
{
L2951: (entry[j],r) 
L2952: (entry[j],r) 
}
array table
-----------------------------------------------
entry -> [('[j]', 'r', 'normalized', ['j'], 2951), ('[j]', 'r', 'normalized', ['j'], 2952)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m1 * n1  j++
induction variable: ['j']
{
L2953: (il_str[5 + j]-,r) (il_str[4 + j],r) 
L2954: (il_str[5 + j - 1]-,r) (il_str[4 + j - 1],r) 
L2955: (il_str[ptr_pos],r) 
L2956: (buf[0]=,w) 
L2957: (l_str[0],r) (buf[0],r) 
L2958: (buf[sz_str]=,w) 
	loop info: i = 0  i < nentries  i++
	induction variable: ['j', 'i']
	{
	L2959: (entry[i],r) 
	L2960: (dyn_char[j + 1]=,w) (entry[i],r) 
	L2961: (dyn_char[j + 1],r) (entry[i],r) 
	}
 }
array table
-----------------------------------------------
dyn_char -> [('[j + 1]', 'w', 'normalized', ['j', 'i'], 2960), ('[j + 1]', 'r', 'normalized', ['j', 'i'], 2961)]
LDEs formed:2

l_str -> [('[0]', 'r', 'normalized', ['j', 'i'], 2957)]
LDEs formed:0

buf -> [('[0]', 'w', 'normalized', ['j', 'i'], 2956), ('[0]', 'r', 'normalized', ['j', 'i'], 2957), ('[sz_str]', 'w', 'not normalized', ['j', 'i'], 2958)]
LDEs formed:5

il_str -> [('[5 + j]', 'r', 'normalized', ['j', 'i'], 2953), ('[4 + j]', 'r', 'normalized', ['j', 'i'], 2953), ('[5 + j - 1]', 'r', 'normalized', ['j', 'i'], 2954), ('[4 + j - 1]', 'r', 'normalized', ['j', 'i'], 2954), ('[ptr_pos]', 'r', 'not normalized', ['j', 'i'], 2955)]
LDEs formed:0

entry -> [('[i]', 'r', 'normalized', ['j', 'i'], 2959), ('[i]', 'r', 'normalized', ['j', 'i'], 2960), ('[i]', 'r', 'normalized', ['j', 'i'], 2961)]
LDEs formed:0

distinct LDEs:
j1 + 1=j2 + 1
0=sz_str
0=0
sz_str=sz_str
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < m1 * n1  j++
induction variable: ['j']
{
L2962: (il_str[5 + j]-,r) (il_str[4 + j],r) 
L2963: (il_str[5 + j - 1]-,r) (il_str[4 + j - 1],r) 
L2964: (il_str[ptr_pos],r) 
L2965: (buf[0]=,w) 
L2966: (l_str[0],r) (buf[0],r) 
L2967: (buf[sz_str]=,w) 
	loop info: i = 0  i < nv * mv  i++
	induction variable: ['j', 'i']
			}
	loop info: i = 0  i < nv * mv  i++
	induction variable: ['j', 'i']
			}
L2968: (xptr[nblk]-,r) 
	loop info: k = 0  k < nblk  k++
	induction variable: ['j', 'i', 'k']
			{
			L2969: (ptr_scsblk[k].nx,r) 
			L2970: (ptr_scsblk[k].x,r) (xptr[k]-,r) 
			L2971: (ptr_scsblk[k].ng,r) 
			L2972: (ptr_scsblk[k].g,r) (zcptr[k]-,r) (ptr_scsblk[k].g,r) (xptr[k]-,r) 
			L2973: (ptr_scsblk[k],r) 
			}
	loop info: i = 0  i < nv  i++
	induction variable: ['j', 'i', 'k']
			{
			L2974: (il_tmp[i]=,w) (ptr_elem[i].lnk+,r) 
			L2975: (il_tmp[nv + i]=,w) (ptr_elem[i].pos+,r) 
			}
 }
array table
-----------------------------------------------
l_str -> [('[0]', 'r', 'normalized', ['j', 'i', 'k'], 2966)]
LDEs formed:0

xptr -> [('[nblk]', 'r', 'not normalized', ['j', 'i', 'k'], 2968), ('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2970), ('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2972)]
LDEs formed:0

zcptr -> [('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2972)]
LDEs formed:0

ptr_scsblk -> [('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2969), ('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2970), ('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2971), ('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2972), ('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2972), ('[k]', 'r', 'normalized', ['j', 'i', 'k'], 2973)]
LDEs formed:0

ptr_elem -> [('[i]', 'r', 'normalized', ['j', 'i', 'k'], 2974), ('[i]', 'r', 'normalized', ['j', 'i', 'k'], 2975)]
LDEs formed:0

buf -> [('[0]', 'w', 'normalized', ['j', 'i', 'k'], 2965), ('[0]', 'r', 'normalized', ['j', 'i', 'k'], 2966), ('[sz_str]', 'w', 'not normalized', ['j', 'i', 'k'], 2967)]
LDEs formed:5

il_str -> [('[5 + j]', 'r', 'normalized', ['j', 'i', 'k'], 2962), ('[4 + j]', 'r', 'normalized', ['j', 'i', 'k'], 2962), ('[5 + j - 1]', 'r', 'normalized', ['j', 'i', 'k'], 2963), ('[4 + j - 1]', 'r', 'normalized', ['j', 'i', 'k'], 2963), ('[ptr_pos]', 'r', 'not normalized', ['j', 'i', 'k'], 2964)]
LDEs formed:0

il_tmp -> [('[i]', 'w', 'normalized', ['j', 'i', 'k'], 2974), ('[nv + i]', 'w', 'not normalized', ['j', 'i', 'k'], 2975)]
LDEs formed:3

distinct LDEs:
0=sz_str
nv + i1=nv + i2
sz_str=sz_str
i1=nv + i2
0=0
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0  j < m1*n1  j++
induction variable: ['j']
{
L2976: (il_str[5+j]-,r) (il_str[4+j],r) 
L2977: (il_str[5+j-1]-,r) (il_str[4+j-1],r) 
L2978: (il_str[ptr_pos],r) 
L2979: (buf[0]=,w) 
L2980: (l_str[0],r) (buf[0],r) 
L2981: (buf[sz_str]=,w) 
}
array table
-----------------------------------------------
l_str -> [('[0]', 'r', 'normalized', ['j'], 2980)]
LDEs formed:0

buf -> [('[0]', 'w', 'normalized', ['j'], 2979), ('[0]', 'r', 'normalized', ['j'], 2980), ('[sz_str]', 'w', 'not normalized', ['j'], 2981)]
LDEs formed:5

il_str -> [('[5+j]', 'r', 'normalized', ['j'], 2976), ('[4+j]', 'r', 'normalized', ['j'], 2976), ('[5+j-1]', 'r', 'normalized', ['j'], 2977), ('[4+j-1]', 'r', 'normalized', ['j'], 2977), ('[ptr_pos]', 'r', 'not normalized', ['j'], 2978)]
LDEs formed:0

distinct LDEs:
0=sz_str
0=0
sz_str=sz_str
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0  k<size1  k++
induction variable: ['k']
{
L2979: (header1[k],r) (header2[k],r) 
}
array table
-----------------------------------------------
header2 -> [('[k]', 'r', 'normalized', ['k'], 2979)]
LDEs formed:0

header1 -> [('[k]', 'r', 'normalized', ['k'], 2979)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizelibraries  i++
induction variable: ['i']
{
L2980: (libraries[i],r) 
	loop info: j = 0  j < sizemacrosLib  j++
	induction variable: ['i', 'j']
		{
		L2981: (macrosLib[j],r) 
		L2982: (returnedArray[nbLibsWhereIsMacro - 1]=,w) (libraries[i],r) 
		}
 }
array table
-----------------------------------------------
libraries -> [('[i]', 'r', 'normalized', ['i', 'j'], 2980), ('[i]', 'r', 'normalized', ['i', 'j'], 2982)]
LDEs formed:0

returnedArray -> [('[nbLibsWhereIsMacro - 1]', 'w', 'not normalized', ['i', 'j'], 2982)]
LDEs formed:1

macrosLib -> [('[j]', 'r', 'normalized', ['i', 'j'], 2981)]
LDEs formed:0

distinct LDEs:
nbLibsWhereIsMacro - 1=nbLibsWhereIsMacro - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j<Lused+1 ++j
induction variable: ['j']
{
L2982: (header[0]==,r) 
L2983: (librarieslist[i]=,w) 
}
array table
-----------------------------------------------
header -> [('[0]', 'r', 'normalized', ['j'], 2982)]
LDEs formed:0

librarieslist -> [('[i]', 'w', 'not normalized', ['j'], 2983)]
LDEs formed:1

distinct LDEs:
i=i
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j<Lused+1 ++j
induction variable: ['j']
{
L2984: (header[0]==,r) 
}
array table
-----------------------------------------------
header -> [('[0]', 'r', 'normalized', ['j'], 2984)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = sizemacrosinlibraries  i < nbMacros  i++
induction variable: ['i']
{
L2985: (macroslist[i]=,w) (macrosonstack[j++],r) 
}
array table
-----------------------------------------------
macroslist -> [('[i]', 'w', 'normalized', ['i'], 2985)]
LDEs formed:1

macrosonstack -> [('[j++]', 'r', 'not normalized', ['i'], 2985)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizelocalvariables  i++
induction variable: ['i']
{
L2986: (localvariables[i],r) 
}
array table
-----------------------------------------------
localvariables -> [('[i]', 'r', 'normalized', ['i'], 2986)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizelocalvariables  i++
induction variable: ['i']
{
L2987: (localvariables[i],r) 
L2988: (macroslist[nbMacros++]=,w) (localvariables[i],r) 
}
array table
-----------------------------------------------
macroslist -> [('[nbMacros++]', 'w', 'not normalized', ['i'], 2988)]
LDEs formed:1

localvariables -> [('[i]', 'r', 'normalized', ['i'], 2987), ('[i]', 'r', 'normalized', ['i'], 2988)]
LDEs formed:0

distinct LDEs:
nbMacros++=nbMacros++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizelibraries  i++
induction variable: ['i']
{
L2989: (libraries[i],r) 
	loop info: j=0 j<sizemacros j++
	induction variable: ['i', 'j']
		{
		L2990: (dictionary[m]=,w) (macros[j],r) 
		}
 }
array table
-----------------------------------------------
libraries -> [('[i]', 'r', 'normalized', ['i', 'j'], 2989)]
LDEs formed:0

macros -> [('[j]', 'r', 'normalized', ['i', 'j'], 2990)]
LDEs formed:0

dictionary -> [('[m]', 'w', 'not normalized', ['i', 'j'], 2990)]
LDEs formed:1

distinct LDEs:
m=m
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizelibraries  i++
induction variable: ['i']
{
L2991: (libraries[i],r) 
L2992: (libraries[i],r) 
L2993: (libraries[i],r) 
L2994: (libraries[i]=,w) 
}
array table
-----------------------------------------------
libraries -> [('[i]', 'r', 'normalized', ['i'], 2991), ('[i]', 'r', 'normalized', ['i'], 2992), ('[i]', 'r', 'normalized', ['i'], 2993), ('[i]', 'w', 'normalized', ['i'], 2994)]
LDEs formed:4

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fin = *SizeStrings - 1  fin > 0  fin--
induction variable: ['fin']
{
	loop info: i = 0  i < fin  i++
	induction variable: ['fin', 'i']
	{
	L2995: (Strings[i],r) 
	L2996: (Strings[i],r) (Strings[i+1],r) 
	L2997: (Strings[i + 1],r) 
	L2998: (Strings[i + 1]=,w) 
	L2999: (Strings[i]=,w) (Strings[i+1],r) 
	L3000: (Strings[i+1]=,w) 
	}
 }
array table
-----------------------------------------------
Strings -> [('[i]', 'r', 'normalized', ['fin', 'i'], 2995), ('[i]', 'r', 'normalized', ['fin', 'i'], 2996), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 2996), ('[i + 1]', 'r', 'normalized', ['fin', 'i'], 2997), ('[i + 1]', 'w', 'normalized', ['fin', 'i'], 2998), ('[i]', 'w', 'normalized', ['fin', 'i'], 2999), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 2999), ('[i+1]', 'w', 'normalized', ['fin', 'i'], 3000)]
LDEs formed:21

distinct LDEs:
i1=i2+1
i1+1=i2+1
i1=i2 + 1
i1+1=i2 + 1
i1=i2
i1 + 1=i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < rows * cols  i++
induction variable: ['i']
{
L3001: (mlist_type[i]=,w) (lengths[i]+,r) 
}
array table
-----------------------------------------------
lengths -> [('[i]', 'r', 'normalized', ['i'], 3001)]
LDEs formed:0

mlist_type -> [('[i]', 'w', 'normalized', ['i'], 3001)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nb && !cmp  i++
induction variable: ['i']
{
L3002: (mlist_type[0],r) (str[i],r) 
}
array table
-----------------------------------------------
mlist_type -> [('[0]', 'r', 'normalized', ['i'], 3002)]
LDEs formed:0

str -> [('[i]', 'r', 'normalized', ['i'], 3002)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n*(*m)  ++k
induction variable: ['k']
{
L3003: (br[k]=,w) (ai[k],r) 
L3004: (br[k]=,w) 
L3005: (bi[k]=,w) (ar[k],r) 
}
array table
-----------------------------------------------
ai -> [('[k]', 'r', 'normalized', ['k'], 3003)]
LDEs formed:0

ar -> [('[k]', 'r', 'normalized', ['k'], 3005)]
LDEs formed:0

bi -> [('[k]', 'w', 'normalized', ['k'], 3005)]
LDEs formed:1

br -> [('[k]', 'w', 'normalized', ['k'], 3003), ('[k]', 'w', 'normalized', ['k'], 3004)]
LDEs formed:3

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < *m   i++
induction variable: ['i']
{
L3005: (mnel[i],r) 
	loop info:  j = 0  j < mnel[i]  j++
	induction variable: ['i', 'j']
	{
	L3006: (icol[iof+j],r) 
	L3007: (ar[iof+j],r) (ai[iof+j],r) 
	L3008: (icol[iof+j],r) 
	L3009: (ar[iof+j],r) 
	}
L3010: (mnel[i],r) 
}
array table
-----------------------------------------------
ai -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3007)]
LDEs formed:0

mnel -> [('[i]', 'r', 'normalized', ['i', 'j'], 3005), ('[i]', 'r', 'normalized', ['i', 'j'], 3010)]
LDEs formed:0

ar -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3007), ('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3009)]
LDEs formed:0

icol -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3006), ('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3008)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < *m1   i++
induction variable: ['i']
{
	loop info:  j = 0  j < mnel1[i]  j++
	induction variable: ['i', 'j']
	{
	L3009: (ai2[iof+j]=,w) (ai1[iof+j],r) 
	L3010: (ar2[iof+j]=,w) (ar1[iof+j],r) 
	}
L3011: (mnel1[i],r) 
}
array table
-----------------------------------------------
ar1 -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3010)]
LDEs formed:0

ar2 -> [('[iof+j]', 'w', 'not normalized', ['i', 'j'], 3010)]
LDEs formed:1

ai1 -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3009)]
LDEs formed:0

mnel1 -> [('[i]', 'r', 'normalized', ['i', 'j'], 3011)]
LDEs formed:0

ai2 -> [('[iof+j]', 'w', 'not normalized', ['i', 'j'], 3009)]
LDEs formed:1

distinct LDEs:
iof+j1=iof+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < *m   i++
induction variable: ['i']
{
L3010: (mnel[i],r) 
	loop info:  j = 0  j < mnel[i]  j++
	induction variable: ['i', 'j']
	{
	L3011: (icol[iof+j],r) 
	L3012: (ar[iof+j],r) (ai[iof+j],r) 
	L3013: (icol[iof+j],r) 
	L3014: (ar[iof+j],r) 
	}
L3015: (mnel[i],r) 
}
array table
-----------------------------------------------
ai -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3012)]
LDEs formed:0

mnel -> [('[i]', 'r', 'normalized', ['i', 'j'], 3010), ('[i]', 'r', 'normalized', ['i', 'j'], 3015)]
LDEs formed:0

ar -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3012), ('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3014)]
LDEs formed:0

icol -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3011), ('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3013)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < *m1   i++
induction variable: ['i']
{
	loop info:  j = 0  j < mnel1[i]  j++
	induction variable: ['i', 'j']
	{
	L3014: (ai2[iof+j]=,w) (ai1[iof+j],r) 
	L3015: (ar2[iof+j]=,w) (ar1[iof+j],r) 
	}
L3016: (mnel1[i],r) 
}
array table
-----------------------------------------------
ar1 -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3015)]
LDEs formed:0

ar2 -> [('[iof+j]', 'w', 'not normalized', ['i', 'j'], 3015)]
LDEs formed:1

ai1 -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3014)]
LDEs formed:0

mnel1 -> [('[i]', 'r', 'normalized', ['i', 'j'], 3016)]
LDEs formed:0

ai2 -> [('[iof+j]', 'w', 'not normalized', ['i', 'j'], 3014)]
LDEs formed:1

distinct LDEs:
iof+j1=iof+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < *m   i++
induction variable: ['i']
{
	loop info:  j = 0  j < mnel[i]  j++
	induction variable: ['i', 'j']
	{
	L3015: (I[iof+j]=,w) (ai[iof+j],r) 
	L3016: (R[iof+j]=,w) (ar[iof+j],r) 
	}
L3017: (mnel[i],r) 
}
array table
-----------------------------------------------
I -> [('[iof+j]', 'w', 'not normalized', ['i', 'j'], 3015)]
LDEs formed:1

ai -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3015)]
LDEs formed:0

mnel -> [('[i]', 'r', 'normalized', ['i', 'j'], 3017)]
LDEs formed:0

R -> [('[iof+j]', 'w', 'not normalized', ['i', 'j'], 3016)]
LDEs formed:1

ar -> [('[iof+j]', 'r', 'not normalized', ['i', 'j'], 3016)]
LDEs formed:0

distinct LDEs:
iof+j1=iof+j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  j++
induction variable: ['j']
{
	loop info: i = 0  i < *m  i++
	induction variable: ['j', 'i']
	{
	L3017: (sciptr[ie+5]=,w) (sciptr[ie+4]+,r) 
	L3018: (sciptr[ie+5],r) 
	L3019: (sciptr[ie+4]-,r) 
	}
 }
array table
-----------------------------------------------
sciptr -> [('[ie+5]', 'w', 'not normalized', ['j', 'i'], 3017), ('[ie+4]', 'r', 'not normalized', ['j', 'i'], 3017), ('[ie+5]', 'r', 'not normalized', ['j', 'i'], 3018), ('[ie+4]', 'r', 'not normalized', ['j', 'i'], 3019)]
LDEs formed:4

distinct LDEs:
ie+5=ie+5
ie+5=ie+4
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=1   i<nstring+1   i++
induction variable: ['i']
{
L3020: (ptrstrings[i]-,r) 
L3021: (ptrstrings[i],r) 
L3022: (strings[i-1]=,w) 
}
array table
-----------------------------------------------
ptrstrings -> [('[i]', 'r', 'normalized', ['i'], 3020), ('[i]', 'r', 'normalized', ['i'], 3021)]
LDEs formed:0

strings -> [('[i-1]', 'w', 'normalized', ['i'], 3022)]
LDEs formed:1

distinct LDEs:
i1-1=i2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < (*x)->nel   i++
induction variable: ['i']
{
L3023: (icol[i]=,w) (icol[i],r) 
L3024: (R[i]=,w) (R[i],r) 
L3025: (I[i]=,w) (I[i],r) 
}
array table
-----------------------------------------------
I -> [('[i]', 'w', 'normalized', ['i'], 3025), ('[i]', 'r', 'normalized', ['i'], 3025)]
LDEs formed:2

R -> [('[i]', 'w', 'normalized', ['i'], 3024), ('[i]', 'r', 'normalized', ['i'], 3024)]
LDEs formed:2

icol -> [('[i]', 'w', 'normalized', ['i'], 3023), ('[i]', 'r', 'normalized', ['i'], 3023)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < nVariable   k++
induction variable: ['k']
{
L3024: (variables[k],r) 
}
array table
-----------------------------------------------
variables -> [('[k]', 'r', 'normalized', ['k'], 3024)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < basfun->nin   i++
induction variable: ['i']
{
L3025: (words[i + 1][0]==,r) 
L3026: (words[i + 1]+,r) 
L3027: (optwords[0],r) 
L3028: (in[i]=,w) 
L3029: (variables[ivar - 1]-,r) 
L3030: (variables[ivar - 1]-,r) 
L3031: (optwords[1],r) 
L3032: (variables[ivar - 1]-,r) 
L3033: (variables[ivar - 1]-,r) (optwords[1],r) 
L3034: (variables[ivar - 1]-,r) 
L3035: (words[i + 1][0]==,r) 
L3036: (words[i + 1]+,r) 
L3037: (optwords[0],r) 
L3038: (in[i]=,w) 
L3039: (variables[ivar - 1]-,r) 
L3040: (variables[ivar - 1]-,r) 
L3041: (optwords[1],r) 
L3042: (variables[ivar - 1]-,r) (optwords[1],r) 
L3043: (variables[ivar - 1]-,r) 
L3044: (variables[ivar - 1]-,r) 
L3045: (in[i]=,w) (words[i + 1],r) 
L3046: (in[i]-,r) 
L3047: (in[i]-,r) 
}
array table
-----------------------------------------------
optwords -> [('[0]', 'r', 'normalized', ['i'], 3027), ('[1]', 'r', 'normalized', ['i'], 3031), ('[1]', 'r', 'normalized', ['i'], 3033), ('[0]', 'r', 'normalized', ['i'], 3037), ('[1]', 'r', 'normalized', ['i'], 3041), ('[1]', 'r', 'normalized', ['i'], 3042)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3029), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3030), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3032), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3033), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3034), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3039), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3040), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3042), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3043), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3044)]
LDEs formed:0

words -> [('[i + 1][0]', 'r', 'normalized', ['i'], 3025), ('[i + 1]', 'r', 'normalized', ['i'], 3026), ('[i + 1][0]', 'r', 'normalized', ['i'], 3035), ('[i + 1]', 'r', 'normalized', ['i'], 3036), ('[i + 1]', 'r', 'normalized', ['i'], 3045)]
LDEs formed:0

in -> [('[i]', 'w', 'normalized', ['i'], 3028), ('[i]', 'w', 'normalized', ['i'], 3038), ('[i]', 'w', 'normalized', ['i'], 3045), ('[i]', 'r', 'normalized', ['i'], 3046), ('[i]', 'r', 'normalized', ['i'], 3047)]
LDEs formed:12

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nwords - 1  i++
induction variable: ['i']
{
L3048: (arg[i]=,w) (words[i + 1],r) 
}
array table
-----------------------------------------------
words -> [('[i + 1]', 'r', 'normalized', ['i'], 3048)]
LDEs formed:0

arg -> [('[i]', 'w', 'normalized', ['i'], 3048)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < l  j++
induction variable: ['j']
{
L3049: (words[j + 2],r) 
L3050: (variables[i]-,r) (el[j]=,w) 
L3051: (variables[k - 1]-,r) 
}
array table
-----------------------------------------------
el -> [('[j]', 'w', 'normalized', ['j'], 3050)]
LDEs formed:1

variables -> [('[i]', 'r', 'not normalized', ['j'], 3050), ('[k - 1]', 'r', 'not normalized', ['j'], 3051)]
LDEs formed:0

words -> [('[j + 2]', 'r', 'normalized', ['j'], 3049)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < (int) strlen(optvar)   i++ 
induction variable: ['i']
{
L3050: (optvar[i]==,r) 
L3051: (lsize[j++]=,w) 
L3052: (lsize[j++]=,w) (optvar[i],r) 
L3053: (optvar[i]==,r) 
}
array table
-----------------------------------------------
optvar -> [('[i]', 'r', 'normalized', ['i'], 3050), ('[i]', 'r', 'normalized', ['i'], 3052), ('[i]', 'r', 'normalized', ['i'], 3053)]
LDEs formed:0

lsize -> [('[j++]', 'w', 'not normalized', ['i'], 3051), ('[j++]', 'w', 'not normalized', ['i'], 3052)]
LDEs formed:3

distinct LDEs:
j++=j++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < (int) strlen(ldata)   i++ 
induction variable: ['i']
{
L3053: (ldata[i]=,w) 
L3054: (ldata[i]=,w) 
}
array table
-----------------------------------------------
ldata -> [('[i]', 'w', 'normalized', ['i'], 3053), ('[i]', 'w', 'normalized', ['i'], 3054)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nFun  i++
induction variable: ['i']
{
L3055: (funNames[i],r) (funNames[i],r) 
}
array table
-----------------------------------------------
funNames -> [('[i]', 'r', 'normalized', ['i'], 3055), ('[i]', 'r', 'normalized', ['i'], 3055)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < basfun->nin - basfun->NewMaxOpt  i++
induction variable: ['i']
{
L3056: (variables[i]-,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3056)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = basfun->nin - basfun->NewMaxOpt  i < basfun->nin  i++
induction variable: ['i']
{
L3057: (variables[i]-,r) (variables[i],r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3057), ('[i]', 'r', 'normalized', ['i'], 3057)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < vout->length  i++
induction variable: ['i']
{
L3058: (el[i],r) 
L3059: (variables[ivar - 1],r) 
}
array table
-----------------------------------------------
el -> [('[i]', 'r', 'normalized', ['i'], 3058)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3059)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < vout->length  i++
induction variable: ['i']
{
L3060: (el[i],r) 
L3061: (variables[ivar - 1],r) 
}
array table
-----------------------------------------------
el -> [('[i]', 'r', 'normalized', ['i'], 3060)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3061)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < basfun->nin  i++
induction variable: ['i']
{
L3062: (variables[i]-,r) (variables[i]-,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3062), ('[i]', 'r', 'normalized', ['i'], 3062)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3063: (variables[i],r) 
	loop info: j = 1  j < var->nfor_name  j++
	induction variable: ['i', 'j']
			{
			L3064: (for_name_orig[j],r) (for_name_orig[j - 1],r) (for_name[j - 1][1],r) (for_name[j][1],r) 
			L3065: (for_name_orig[j - 1],r) (for_name_orig[j],r) (for_name[j - 1],r) (for_name[j],r) 
			}
	loop info: j = 1  j < var->nfor_name  j++
	induction variable: ['i', 'j']
			{
			L3066: (for_name[j][0]==,r) 
			L3067: (for_name[j][1],r) 
			L3068: (for_name[0],r) 
			L3069: (for_name_orig[j],r) (for_name[j],r) (for_name[0],r) 
			L3070: (for_name_orig[j],r) (for_name[j],r) (for_name[0],r) 
			}
 }
array table
-----------------------------------------------
for_name -> [('[j - 1][1]', 'r', 'normalized', ['i', 'j'], 3064), ('[j][1]', 'r', 'normalized', ['i', 'j'], 3064), ('[j - 1]', 'r', 'normalized', ['i', 'j'], 3065), ('[j]', 'r', 'normalized', ['i', 'j'], 3065), ('[j][0]', 'r', 'normalized', ['i', 'j'], 3066), ('[j][1]', 'r', 'normalized', ['i', 'j'], 3067), ('[0]', 'r', 'normalized', ['i', 'j'], 3068), ('[j]', 'r', 'normalized', ['i', 'j'], 3069), ('[0]', 'r', 'normalized', ['i', 'j'], 3069), ('[j]', 'r', 'normalized', ['i', 'j'], 3070), ('[0]', 'r', 'normalized', ['i', 'j'], 3070)]
LDEs formed:0

variables -> [('[i]', 'r', 'normalized', ['i', 'j'], 3063)]
LDEs formed:0

for_name_orig -> [('[j]', 'r', 'normalized', ['i', 'j'], 3064), ('[j - 1]', 'r', 'normalized', ['i', 'j'], 3064), ('[j - 1]', 'r', 'normalized', ['i', 'j'], 3065), ('[j]', 'r', 'normalized', ['i', 'j'], 3065), ('[j]', 'r', 'normalized', ['i', 'j'], 3069), ('[j]', 'r', 'normalized', ['i', 'j'], 3070)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < nVariable  k++
induction variable: ['k']
{
L3071: (variables[k],r) 
L3072: (variables[i]-,r) 
L3073: (RHSTAB[var->type].type,r) 
L3074: (RHSTAB[var->type].fonc,r) 
}
array table
-----------------------------------------------
RHSTAB -> [('[var->type]', 'r', 'not normalized', ['k'], 3073), ('[var->type]', 'r', 'not normalized', ['k'], 3074)]
LDEs formed:0

variables -> [('[k]', 'r', 'normalized', ['k'], 3071), ('[i]', 'r', 'not normalized', ['k'], 3072)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < forsub->narg  i++
induction variable: ['i']
{
L3073: (arg[i],r) 
L3074: (variables[ivar - 1]-,r) 
L3075: (variables[ivar - 1]-,r) (variables[ivar - 1]-,r) (variables[ivar - 1]-,r) 
L3076: (variables[ivar - 1]-,r) (variables[ivar - 1]-,r) 
L3077: (variables[ivar - 1]-,r) 
L3078: (variables[ivar - 1]-,r) 
L3079: (variables[ivar - 1]-,r) 
}
array table
-----------------------------------------------
variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3074), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3075), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3075), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3075), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3076), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3076), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3077), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3078), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3079)]
LDEs formed:0

arg -> [('[i]', 'r', 'normalized', ['i'], 3073)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < forsub->narg  i++
induction variable: ['i']
{
L3074: (arg[i],r) 
L3075: (variables[ivar - 1]-,r) 
L3076: (variables[ivar - 1]-,r) 
L3077: (variables[iivar - 1]-,r) 
L3078: (variables[ivar - 1]-,r) 
L3079: (variables[ivar - 1]-,r) (for_name[0],r) 
L3080: (variables[ivar - 1]-,r) 
L3081: (variables[ivar - 1]-,r) (variables[ivar - 1],r) 
L3082: (variables[ivar - 1]-,r) (C_name[0],r) 
L3083: (variables[ivar - 1]-,r) (C_name[0],r) 
L3084: (variables[ivar - 1]-,r) (C_name[0],r) 
L3085: (variables[ivar - 1]-,r) (C_name[0],r) 
L3086: (variables[ivar - 1]-,r) (for_name[0],r) 
}
array table
-----------------------------------------------
for_name -> [('[0]', 'r', 'normalized', ['i'], 3079), ('[0]', 'r', 'normalized', ['i'], 3086)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3075), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3076), ('[iivar - 1]', 'r', 'not normalized', ['i'], 3077), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3078), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3079), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3080), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3081), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3081), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3082), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3083), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3084), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3085), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3086)]
LDEs formed:0

C_name -> [('[0]', 'r', 'normalized', ['i'], 3082), ('[0]', 'r', 'normalized', ['i'], 3083), ('[0]', 'r', 'normalized', ['i'], 3084), ('[0]', 'r', 'normalized', ['i'], 3085)]
LDEs formed:0

arg -> [('[i]', 'r', 'normalized', ['i'], 3074)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3075: (variables[i]-,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3075)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < vout->length  i++
induction variable: ['i']
{
L3076: (el[i],r) 
L3077: (variables[ivar - 1],r) 
}
array table
-----------------------------------------------
el -> [('[i]', 'r', 'normalized', ['i'], 3076)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3077)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < vout->length  i++
induction variable: ['i']
{
L3078: (el[i],r) 
L3079: (variables[ivar - 1],r) 
}
array table
-----------------------------------------------
el -> [('[i]', 'r', 'normalized', ['i'], 3078)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3079)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < basfun->nin  j++
induction variable: ['j']
{
L3080: (in[j],r) 
}
array table
-----------------------------------------------
in -> [('[j]', 'r', 'normalized', ['j'], 3080)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < forsub->narg  j++
induction variable: ['j']
{
L3081: (arg[j],r) 
}
array table
-----------------------------------------------
arg -> [('[j]', 'r', 'normalized', ['j'], 3081)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < basfun->nin  j++
induction variable: ['j']
{
L3082: (in[j],r) 
}
array table
-----------------------------------------------
in -> [('[j]', 'r', 'normalized', ['j'], 3082)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < forsub->narg  j++
induction variable: ['j']
{
L3083: (arg[j],r) 
}
array table
-----------------------------------------------
arg -> [('[j]', 'r', 'normalized', ['j'], 3083)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nFun  i++
induction variable: ['i']
{
L3084: (funNames[i],r) 
	loop info: j = 0  j < 25 - (int)strlen(funNames[i])  j++
	induction variable: ['i', 'j']
		}
 }
array table
-----------------------------------------------
funNames -> [('[i]', 'r', 'normalized', ['i', 'j'], 3084)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < nFun - 1  i++
induction variable: ['i']
{
L3085: (funNames[i],r) (funNames[i],r) 
}
array table
-----------------------------------------------
funNames -> [('[i]', 'r', 'normalized', ['i'], 3085), ('[i]', 'r', 'normalized', ['i'], 3085)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)strlen(sbuf)  i++
induction variable: ['i']
{
L3086: (sbuf[i],r) (sbuf[i]==,r) (sbuf[i]==,r) (sbuf[i]==,r) (sbuf[i]==,r) 
L3087: (sbuf[i]==,r) 
L3088: (sbuf[i],r) 
}
array table
-----------------------------------------------
sbuf -> [('[i]', 'r', 'normalized', ['i'], 3086), ('[i]', 'r', 'normalized', ['i'], 3086), ('[i]', 'r', 'normalized', ['i'], 3086), ('[i]', 'r', 'normalized', ['i'], 3086), ('[i]', 'r', 'normalized', ['i'], 3086), ('[i]', 'r', 'normalized', ['i'], 3087), ('[i]', 'r', 'normalized', ['i'], 3088)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nFun  i++
induction variable: ['i']
{
L3089: (funNames[i],r) (funNames[i],r) 
}
array table
-----------------------------------------------
funNames -> [('[i]', 'r', 'normalized', ['i'], 3089), ('[i]', 'r', 'normalized', ['i'], 3089)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nwords - 1  i++
induction variable: ['i']
{
L3090: (words[i + 1][0]==,r) 
L3091: (words[i + 1]+,r) 
L3092: (optwords[0],r) 
L3093: (in[i]=,w) 
L3094: (variables[ivar - 1]-,r) 
L3095: (variables[ivar - 1]-,r) (optwords[1],r) 
L3096: (variables[ivar - 1]-,r) (optwords[1],r) 
L3097: (words[i + 1][0]==,r) 
L3098: (words[i + 1]+,r) 
L3099: (optwords[0],r) 
L3100: (in[i]=,w) 
L3101: (variables[ivar - 1]-,r) 
L3102: (variables[ivar - 1]-,r) (optwords[1],r) 
L3103: (variables[ivar - 1]-,r) (optwords[1],r) 
L3104: (in[i]=,w) (words[i + 1],r) 
}
array table
-----------------------------------------------
optwords -> [('[0]', 'r', 'normalized', ['i'], 3092), ('[1]', 'r', 'normalized', ['i'], 3095), ('[1]', 'r', 'normalized', ['i'], 3096), ('[0]', 'r', 'normalized', ['i'], 3099), ('[1]', 'r', 'normalized', ['i'], 3102), ('[1]', 'r', 'normalized', ['i'], 3103)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3094), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3095), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3096), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3101), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3102), ('[ivar - 1]', 'r', 'not normalized', ['i'], 3103)]
LDEs formed:0

words -> [('[i + 1][0]', 'r', 'normalized', ['i'], 3090), ('[i + 1]', 'r', 'normalized', ['i'], 3091), ('[i + 1][0]', 'r', 'normalized', ['i'], 3097), ('[i + 1]', 'r', 'normalized', ['i'], 3098), ('[i + 1]', 'r', 'normalized', ['i'], 3104)]
LDEs formed:0

in -> [('[i]', 'w', 'normalized', ['i'], 3093), ('[i]', 'w', 'normalized', ['i'], 3100), ('[i]', 'w', 'normalized', ['i'], 3104)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nwords - 1  i++
induction variable: ['i']
{
L3105: (arg[i]=,w) (words[i + 1],r) 
}
array table
-----------------------------------------------
words -> [('[i + 1]', 'r', 'normalized', ['i'], 3105)]
LDEs formed:0

arg -> [('[i]', 'w', 'normalized', ['i'], 3105)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3106: (variables[i],r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3106)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3107: (variables[i],r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3107)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3108: (variables[i]-,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3108)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3109: (variables[i],r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3109)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < forsub->narg  i++
induction variable: ['i']
{
L3110: (arg[i]-,r) 
}
array table
-----------------------------------------------
arg -> [('[i]', 'r', 'normalized', ['i'], 3110)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < basfun->nin  i++
induction variable: ['i']
{
L3111: (variables[i]-,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3111)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < vout->length  i++
induction variable: ['i']
{
L3112: (el[i],r) 
L3113: (variables[ivar - 1],r) 
}
array table
-----------------------------------------------
el -> [('[i]', 'r', 'normalized', ['i'], 3112)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3113)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < vout->length  i++
induction variable: ['i']
{
L3114: (el[i],r) 
L3115: (variables[ivar - 1],r) 
}
array table
-----------------------------------------------
el -> [('[i]', 'r', 'normalized', ['i'], 3114)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3115)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < basfun->nin  i++
induction variable: ['i']
{
L3116: (variables[i]-,r) (variables[i]-,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3116), ('[i]', 'r', 'normalized', ['i'], 3116)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)strlen(optvar)  i++
induction variable: ['i']
{
L3117: (optvar[i]==,r) 
L3118: (size[j++]=,w) 
L3119: (size[j++]=,w) (optvar[i],r) 
L3120: (optvar[i]==,r) 
}
array table
-----------------------------------------------
optvar -> [('[i]', 'r', 'normalized', ['i'], 3117), ('[i]', 'r', 'normalized', ['i'], 3119), ('[i]', 'r', 'normalized', ['i'], 3120)]
LDEs formed:0

size -> [('[j++]', 'w', 'not normalized', ['i'], 3118), ('[j++]', 'w', 'not normalized', ['i'], 3119)]
LDEs formed:3

distinct LDEs:
j++=j++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3120: (variables[i],r) 
L3121: (for_name[0],r) (for_name[0],r) 
L3122: (for_name[0],r) 
	loop info: j = 1  j < var->nfor_name  j++
	induction variable: ['i', 'j']
			{
			L3123: (for_name[j],r) 
			}
 }
array table
-----------------------------------------------
for_name -> [('[0]', 'r', 'normalized', ['i', 'j'], 3121), ('[0]', 'r', 'normalized', ['i', 'j'], 3121), ('[0]', 'r', 'normalized', ['i', 'j'], 3122), ('[j]', 'r', 'normalized', ['i', 'j'], 3123)]
LDEs formed:0

variables -> [('[i]', 'r', 'normalized', ['i', 'j'], 3120)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < forsub->narg  i++
induction variable: ['i']
{
L3121: (arg[i],r) 
L3122: (variables[ivar - 1]-,r) 
L3123: (variables[ivar - 1]-,r) 
	loop info: j = 0  j < basfun->nin  j++
	induction variable: ['i', 'j']
		{
		L3124: (in[j],r) 
		L3125: (variables[ivar - 1]-,r) 
		L3126: (variables[ivar - 1]-,r) 
		}
L3127: (variables[ivar - 1]-,r) 
	loop info: j = 0  j < basfun->nin  j++
	induction variable: ['i', 'j']
		{
		L3128: (in[j],r) 
		}
 }
array table
-----------------------------------------------
variables -> [('[ivar - 1]', 'r', 'not normalized', ['i', 'j'], 3122), ('[ivar - 1]', 'r', 'not normalized', ['i', 'j'], 3123), ('[ivar - 1]', 'r', 'not normalized', ['i', 'j'], 3125), ('[ivar - 1]', 'r', 'not normalized', ['i', 'j'], 3126), ('[ivar - 1]', 'r', 'not normalized', ['i', 'j'], 3127)]
LDEs formed:0

in -> [('[j]', 'r', 'normalized', ['i', 'j'], 3124), ('[j]', 'r', 'normalized', ['i', 'j'], 3128)]
LDEs formed:0

arg -> [('[i]', 'r', 'normalized', ['i', 'j'], 3121)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < basfun->nin  j++
induction variable: ['j']
{
L3122: (el[iel]-,r) (in[j]-,r) 
L3123: (el[iel],r) 
}
array table
-----------------------------------------------
el -> [('[iel]', 'r', 'not normalized', ['j'], 3122), ('[iel]', 'r', 'not normalized', ['j'], 3123)]
LDEs formed:0

in -> [('[j]', 'r', 'normalized', ['j'], 3122)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < vout->length  i++
induction variable: ['i']
{
L3123: (el[i],r) 
L3124: (variables[ivar - 1],r) 
}
array table
-----------------------------------------------
el -> [('[i]', 'r', 'normalized', ['i'], 3123)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3124)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < vout->length  i++
induction variable: ['i']
{
L3125: (el[i],r) 
L3126: (variables[ivar - 1],r) 
}
array table
-----------------------------------------------
el -> [('[i]', 'r', 'normalized', ['i'], 3125)]
LDEs formed:0

variables -> [('[ivar - 1]', 'r', 'not normalized', ['i'], 3126)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < nVariable  k++
induction variable: ['k']
{
L3127: (variables[k],r) 
L3128: (variables[i]-,r) 
L3129: (el[0]==,r) (el[1],r) 
L3130: (el[0],r) 
L3131: (el[1],r) 
L3132: (el[2],r) 
L3133: (el[3],r) 
L3134: (el[0]==,r) (el[1],r) 
L3135: (el[0],r) 
L3136: (el[1],r) 
L3137: (el[2],r) 
L3138: (el[0]==,r) (el[1],r) 
L3139: (el[0],r) 
L3140: (el[1],r) 
L3141: (el[0]==,r) (el[1],r) 
L3142: (el[0],r) 
L3143: (el[1],r) 
L3144: (el[0]==,r) (el[1],r) 
L3145: (el[0],r) 
L3146: (el[1],r) 
L3147: (el[0],r) 
L3148: (el[0],r) 
L3149: (el[0],r) 
L3150: (el[0]-,r) 
L3151: (el[0],r) 
}
array table
-----------------------------------------------
el -> [('[0]', 'r', 'normalized', ['k'], 3129), ('[1]', 'r', 'normalized', ['k'], 3129), ('[0]', 'r', 'normalized', ['k'], 3130), ('[1]', 'r', 'normalized', ['k'], 3131), ('[2]', 'r', 'normalized', ['k'], 3132), ('[3]', 'r', 'normalized', ['k'], 3133), ('[0]', 'r', 'normalized', ['k'], 3134), ('[1]', 'r', 'normalized', ['k'], 3134), ('[0]', 'r', 'normalized', ['k'], 3135), ('[1]', 'r', 'normalized', ['k'], 3136), ('[2]', 'r', 'normalized', ['k'], 3137), ('[0]', 'r', 'normalized', ['k'], 3138), ('[1]', 'r', 'normalized', ['k'], 3138), ('[0]', 'r', 'normalized', ['k'], 3139), ('[1]', 'r', 'normalized', ['k'], 3140), ('[0]', 'r', 'normalized', ['k'], 3141), ('[1]', 'r', 'normalized', ['k'], 3141), ('[0]', 'r', 'normalized', ['k'], 3142), ('[1]', 'r', 'normalized', ['k'], 3143), ('[0]', 'r', 'normalized', ['k'], 3144), ('[1]', 'r', 'normalized', ['k'], 3144), ('[0]', 'r', 'normalized', ['k'], 3145), ('[1]', 'r', 'normalized', ['k'], 3146), ('[0]', 'r', 'normalized', ['k'], 3147), ('[0]', 'r', 'normalized', ['k'], 3148), ('[0]', 'r', 'normalized', ['k'], 3149), ('[0]', 'r', 'normalized', ['k'], 3150), ('[0]', 'r', 'normalized', ['k'], 3151)]
LDEs formed:0

variables -> [('[k]', 'r', 'normalized', ['k'], 3127), ('[i]', 'r', 'not normalized', ['k'], 3128)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < basfun->nin  j++
induction variable: ['j']
{
L3129: (in[j],r) 
}
array table
-----------------------------------------------
in -> [('[j]', 'r', 'normalized', ['j'], 3129)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < forsub->narg  j++
induction variable: ['j']
{
L3130: (arg[j],r) 
}
array table
-----------------------------------------------
arg -> [('[j]', 'r', 'normalized', ['j'], 3130)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < basfun->nin  j++
induction variable: ['j']
{
L3131: (in[j],r) 
}
array table
-----------------------------------------------
in -> [('[j]', 'r', 'normalized', ['j'], 3131)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < forsub->narg  j++
induction variable: ['j']
{
L3132: (arg[j],r) 
}
array table
-----------------------------------------------
arg -> [('[j]', 'r', 'normalized', ['j'], 3132)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nFun  i++
induction variable: ['i']
{
L3133: (funNames[i],r) 
	loop info: j = 0  j < 25 - (int)strlen(funNames[i])  j++
	induction variable: ['i', 'j']
		}
 }
array table
-----------------------------------------------
funNames -> [('[i]', 'r', 'normalized', ['i', 'j'], 3133)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Init[j].ndecls  i++
induction variable: ['i']
{
L3134: (Init[j].decls,r) 
}
array table
-----------------------------------------------
Init -> [('[j]', 'r', 'not normalized', ['i'], 3134)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < Init[j].ndecls  i++
induction variable: ['i']
{
L3135: (Init[j].decls,r) 
L3136: (Init[j].ndecls-,r) 
}
array table
-----------------------------------------------
Init -> [('[j]', 'r', 'not normalized', ['i'], 3135), ('[j]', 'r', 'not normalized', ['i'], 3136)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)strlen(sbuf)  i++
induction variable: ['i']
{
L3137: (sbuf[i],r) 
L3138: (sbuf[i]==,r) 
L3139: (sbuf[i],r) 
}
array table
-----------------------------------------------
sbuf -> [('[i]', 'r', 'normalized', ['i'], 3137), ('[i]', 'r', 'normalized', ['i'], 3138), ('[i]', 'r', 'normalized', ['i'], 3139)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < basfun->nin   i++
induction variable: ['i']
{
L3140: (variables[i],r) 
L3141: (FORTAB[var->type].fonc,r) 
	loop info:  j = 0   j < nVariable   j++
	induction variable: ['i', 'j']
		{
		L3142: (variables[j],r) 
		L3143: (FORTAB[var1->type].fonc,r) 
		}
 }
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i', 'j'], 3140), ('[j]', 'r', 'normalized', ['i', 'j'], 3142)]
LDEs formed:0

FORTAB -> [('[var->type]', 'r', 'not normalized', ['i', 'j'], 3141), ('[var1->type]', 'r', 'not normalized', ['i', 'j'], 3143)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = basfun->nin   i < nVariable   i++
induction variable: ['i']
{
L3144: (variables[i],r) 
L3145: (FORTAB[var->type].fonc,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3144)]
LDEs formed:0

FORTAB -> [('[var->type]', 'r', 'not normalized', ['i'], 3145)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < Init[j].ndecls   i++ 
induction variable: ['i']
{
L3146: (Init[j].decls,r) 
}
array table
-----------------------------------------------
Init -> [('[j]', 'r', 'not normalized', ['i'], 3146)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < Init[j].ndecls   i++
induction variable: ['i']
{
L3147: (Init[j].decls,r) 
}
array table
-----------------------------------------------
Init -> [('[j]', 'r', 'not normalized', ['i'], 3147)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < Init[j].ndecls   i++
induction variable: ['i']
{
L3148: (Init[j].nameC,r) 
L3149: (Init[j].decls,r) 
}
array table
-----------------------------------------------
Init -> [('[j]', 'r', 'not normalized', ['i'], 3148), ('[j]', 'r', 'not normalized', ['i'], 3149)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < Init[j].ndecls   i++
induction variable: ['i']
{
L3150: (Init[j].type,r) 
L3151: (Init[j].type==,r) 
L3152: (Init[j].decls,r) 
L3153: (Init[j].ndecls-,r) 
}
array table
-----------------------------------------------
Init -> [('[j]', 'r', 'not normalized', ['i'], 3150), ('[j]', 'r', 'not normalized', ['i'], 3151), ('[j]', 'r', 'not normalized', ['i'], 3152), ('[j]', 'r', 'not normalized', ['i'], 3153)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3154: (variables[i],r) 
	loop info: j=0   j < var->length   j++
	induction variable: ['i', 'j']
	{
	L3155: (el[j],r) 
	L3156: (el[j]-,r) 
	}
	loop info: j=0   j < var->nfor_name   j++
	induction variable: ['i', 'j']
		{
		L3157: (for_name[j],r) 
		L3158: (for_name_orig[j],r) 
		}
 }
array table
-----------------------------------------------
el -> [('[j]', 'r', 'normalized', ['i', 'j'], 3155), ('[j]', 'r', 'normalized', ['i', 'j'], 3156)]
LDEs formed:0

variables -> [('[i]', 'r', 'normalized', ['i', 'j'], 3154)]
LDEs formed:0

for_name_orig -> [('[j]', 'r', 'normalized', ['i', 'j'], 3158)]
LDEs formed:0

for_name -> [('[j]', 'r', 'normalized', ['i', 'j'], 3157)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = nVariable-1   i >= 0  i--
induction variable: ['i']
{
L3158: (variables[i],r) 
	loop info:  j = 0   j < nVariable   j++ 
	induction variable: ['i', 'j']
		{
		L3159: (variables[j],r) 
		}
 }
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i', 'j'], 3158), ('[j]', 'r', 'normalized', ['i', 'j'], 3159)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3160: (variables[i],r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3160)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3161: (variables[i],r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3161)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3162: (variables[i]-,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3162)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3163: (variables[i]-,r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3163)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nVariable  i++
induction variable: ['i']
{
L3164: (variables[i],r) 
}
array table
-----------------------------------------------
variables -> [('[i]', 'r', 'normalized', ['i'], 3164)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < l   i++
induction variable: ['i']
{
L3165: (for_name_orig[i]==,r) 
}
array table
-----------------------------------------------
for_name_orig -> [('[i]', 'r', 'normalized', ['i'], 3165)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0   i < mn   i++
induction variable: ['i']
{
L3166: (b[i]=,w) (a[i]+,r) 
}
array table
-----------------------------------------------
a -> [('[i]', 'r', 'normalized', ['i'], 3166)]
LDEs formed:0

b -> [('[i]', 'w', 'normalized', ['i'], 3166)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < headerdims[1]*headerdims[2]  k++
induction variable: ['k']
{
L3167: (headerdims[4 + k],r) 
}
array table
-----------------------------------------------
headerdims -> [('[4 + k]', 'r', 'normalized', ['k'], 3167)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < headerdims[1]*headerdims[2]  k++
induction variable: ['k']
{
L3168: (headerdims[4 + k],r) 
}
array table
-----------------------------------------------
headerdims -> [('[4 + k]', 'r', 'normalized', ['k'], 3168)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < headerdims[1]*headerdims[2]  k++
induction variable: ['k']
{
L3169: (headerdims[4 + k],r) 
}
array table
-----------------------------------------------
headerdims -> [('[4 + k]', 'r', 'normalized', ['k'], 3169)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j <= M * commonlength  ++j
induction variable: ['j']
{
L3170: (header[5 + j + M]=,w) (header[5 + j + oldM],r) 
}
array table
-----------------------------------------------
header -> [('[5 + j + M]', 'w', 'not normalized', ['j'], 3170), ('[5 + j + oldM]', 'r', 'not normalized', ['j'], 3170)]
LDEs formed:2

distinct LDEs:
5 + j1 + M=5 + j2 + M
5 + j1 + M=5 + j2 + oldM
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < numberofdim - 2  ++j
induction variable: ['j']
{
L3171: (header1[6 + j],r) 
}
array table
-----------------------------------------------
header1 -> [('[6 + j]', 'r', 'normalized', ['j'], 3171)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m  ++i
induction variable: ['i']
{
L3172: (header[5 + i]=,w) (header[4 + i]+,r) 
}
array table
-----------------------------------------------
header -> [('[5 + i]', 'w', 'normalized', ['i'], 3172), ('[4 + i]', 'r', 'normalized', ['i'], 3172)]
LDEs formed:2

distinct LDEs:
5 + i1=4 + i2
5 + i1=5 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < headerdims[1]*headerdims[2]  k++
induction variable: ['k']
{
L3173: (headerdims[4 + k],r) 
}
array table
-----------------------------------------------
headerdims -> [('[4 + k]', 'r', 'normalized', ['k'], 3173)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < headerdims[1]*headerdims[2]  k++
induction variable: ['k']
{
L3174: (headerdims[4 + k],r) 
}
array table
-----------------------------------------------
headerdims -> [('[4 + k]', 'r', 'normalized', ['k'], 3174)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = 0  kk < 2 * isize  ++kk
induction variable: ['kk']
{
L3175: (headerobjcopy[kk]=,w) (headerobj[kk],r) 
}
array table
-----------------------------------------------
headerobjcopy -> [('[kk]', 'w', 'normalized', ['kk'], 3175)]
LDEs formed:1

headerobj -> [('[kk]', 'r', 'normalized', ['kk'], 3175)]
LDEs formed:0

distinct LDEs:
kk1=kk2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < nf  k++
induction variable: ['k']
{
L3176: (headerstr[7 + k]-,r) (headerstr[6 + k],r) 
L3177: (headerstr[6 + k],r) 
L3178: (headerstr[istart],r) 
L3179: (str[longueur]=,w) 
}
array table
-----------------------------------------------
headerstr -> [('[7 + k]', 'r', 'normalized', ['k'], 3176), ('[6 + k]', 'r', 'normalized', ['k'], 3176), ('[6 + k]', 'r', 'normalized', ['k'], 3177), ('[istart]', 'r', 'not normalized', ['k'], 3178)]
LDEs formed:0

str -> [('[longueur]', 'w', 'not normalized', ['k'], 3179)]
LDEs formed:1

distinct LDEs:
longueur=longueur
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < headerdims[1]*headerdims[2]  k++
induction variable: ['k']
{
L3180: (headerdims[4 + k],r) 
}
array table
-----------------------------------------------
headerdims -> [('[4 + k]', 'r', 'normalized', ['k'], 3180)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = 0  kk < 2 * isize  ++kk
induction variable: ['kk']
{
L3181: (headerobjcopy[kk]=,w) (headerobj[kk],r) 
}
array table
-----------------------------------------------
headerobjcopy -> [('[kk]', 'w', 'normalized', ['kk'], 3181)]
LDEs formed:1

headerobj -> [('[kk]', 'r', 'normalized', ['kk'], 3181)]
LDEs formed:0

distinct LDEs:
kk1=kk2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < headerdims[1]*headerdims[2]  k++
induction variable: ['k']
{
L3182: (headerdims[4 + k],r) 
}
array table
-----------------------------------------------
headerdims -> [('[4 + k]', 'r', 'normalized', ['k'], 3182)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = 0  kk < 2 * isize  ++kk
induction variable: ['kk']
{
L3183: (headerobjcopy[kk]=,w) (headerobj[kk],r) 
}
array table
-----------------------------------------------
headerobjcopy -> [('[kk]', 'w', 'normalized', ['kk'], 3183)]
LDEs formed:1

headerobj -> [('[kk]', 'r', 'normalized', ['kk'], 3183)]
LDEs formed:0

distinct LDEs:
kk1=kk2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < rec_size   i++
induction variable: ['i']
{
L3184: (calloc_table[i].keep==,r) 
L3185: (calloc_table[i].adr=,w) 
L3186: (calloc_table[i].keep=,w) 
}
array table
-----------------------------------------------
calloc_table -> [('[i]', 'r', 'normalized', ['i'], 3184), ('[i]', 'w', 'normalized', ['i'], 3185), ('[i]', 'w', 'normalized', ['i'], 3186)]
LDEs formed:5

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < rec_size   i++
induction variable: ['i']
{
L3187: (calloc_table[i].keep==,r) 
L3188: (calloc_table[i].adr=,w) 
L3189: (calloc_table[i].keep=,w) 
}
array table
-----------------------------------------------
calloc_table -> [('[i]', 'r', 'normalized', ['i'], 3187), ('[i]', 'w', 'normalized', ['i'], 3188), ('[i]', 'w', 'normalized', ['i'], 3189)]
LDEs formed:5

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < rec_size   i++
induction variable: ['i']
{
L3190: (calloc_table[i].adr==,r) 
L3191: (calloc_table[i].keep==,r) 
L3192: (calloc_table[i].keep=,w) 
}
array table
-----------------------------------------------
calloc_table -> [('[i]', 'r', 'normalized', ['i'], 3190), ('[i]', 'r', 'normalized', ['i'], 3191), ('[i]', 'w', 'normalized', ['i'], 3192)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < rec_size   i++
induction variable: ['i']
{
L3193: (calloc_table[i].adr==,r) 
L3194: (calloc_table[i].keep,r) 
L3195: (calloc_table[i].keep=,w) 
L3196: (calloc_table[i].adr=,w) 
}
array table
-----------------------------------------------
calloc_table -> [('[i]', 'r', 'normalized', ['i'], 3193), ('[i]', 'r', 'normalized', ['i'], 3194), ('[i]', 'w', 'normalized', ['i'], 3195), ('[i]', 'w', 'normalized', ['i'], 3196)]
LDEs formed:7

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < rec_size   i++
induction variable: ['i']
{
L3197: (calloc_table[i].keep==,r) 
L3198: (calloc_table[i].adr,r) 
L3199: (calloc_table[i].keep=,w) 
L3200: (calloc_table[i].adr=,w) 
}
array table
-----------------------------------------------
calloc_table -> [('[i]', 'r', 'normalized', ['i'], 3197), ('[i]', 'r', 'normalized', ['i'], 3198), ('[i]', 'w', 'normalized', ['i'], 3199), ('[i]', 'w', 'normalized', ['i'], 3200)]
LDEs formed:7

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = 1  kk <= Nbvars  kk++
induction variable: ['kk']
{
L3201: (lstk[kk + Top - Rhs - 1],r) 
}
array table
-----------------------------------------------
lstk -> [('[kk + Top - Rhs - 1]', 'r', 'not normalized', ['kk'], 3201)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = Bot  kk <  C2F(vstk).isiz  kk++
induction variable: ['kk']
{
L3202: (lstk[kk - 1],r) 
}
array table
-----------------------------------------------
lstk -> [('[kk - 1]', 'r', 'normalized', ['kk'], 3202)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = 1  kk <= Nbvars  kk++
induction variable: ['kk']
{
L3203: (lstk[kk + Top - Rhs - 1],r) 
}
array table
-----------------------------------------------
lstk -> [('[kk + Top - Rhs - 1]', 'r', 'not normalized', ['kk'], 3203)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = Bot  kk <  C2F(vstk).isiz  kk++
induction variable: ['kk']
{
L3204: (lstk[kk - 1],r) 
}
array table
-----------------------------------------------
lstk -> [('[kk - 1]', 'r', 'normalized', ['kk'], 3204)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = 1  kk <= Nbvars  kk++
induction variable: ['kk']
{
L3205: (lstk[kk + Top - Rhs - 1],r) 
}
array table
-----------------------------------------------
lstk -> [('[kk + Top - Rhs - 1]', 'r', 'not normalized', ['kk'], 3205)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: kk = Bot  kk <  C2F(vstk).isiz  kk++
induction variable: ['kk']
{
L3206: (lstk[kk - 1],r) 
}
array table
-----------------------------------------------
lstk -> [('[kk - 1]', 'r', 'normalized', ['kk'], 3206)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < size  ++k
induction variable: ['k']
{
L3207: (data[k]=,w) (old[k],r) 
}
array table
-----------------------------------------------
old -> [('[k]', 'r', 'normalized', ['k'], 3207)]
LDEs formed:0

data -> [('[k]', 'w', 'normalized', ['k'], 3207)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < headerdims[1]*headerdims[2]  k++
induction variable: ['k']
{
L3208: (headerdims[4 + k],r) 
}
array table
-----------------------------------------------
headerdims -> [('[4 + k]', 'r', 'normalized', ['k'], 3208)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: list = 0  list < nb  list++
induction variable: ['list']
{
L3209: (headerlist[1],r) 
	loop info: lindex = 0  lindex < nbobj  lindex++
	induction variable: ['list', 'lindex']
	{
	L3210: (headerobj[0],r) 
	L3211: (headerobj[3],r) 
	L3212: (headerlist[lindex + 3]-,r) (headerlist[lindex + 2],r) 
	}
L3213: (headernew[4 + suite]=,w) 
}
array table
-----------------------------------------------
headerlist -> [('[1]', 'r', 'normalized', ['list', 'lindex'], 3209), ('[lindex + 3]', 'r', 'normalized', ['list', 'lindex'], 3212), ('[lindex + 2]', 'r', 'normalized', ['list', 'lindex'], 3212)]
LDEs formed:0

headernew -> [('[4 + suite]', 'w', 'not normalized', ['list', 'lindex'], 3213)]
LDEs formed:1

headerobj -> [('[0]', 'r', 'normalized', ['list', 'lindex'], 3210), ('[3]', 'r', 'normalized', ['list', 'lindex'], 3211)]
LDEs formed:0

distinct LDEs:
4 + suite=4 + suite
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: list = 0  list < nb  list++
induction variable: ['list']
{
L3212: (headerlist[1],r) 
L3213: (headerlistnew[0]=,w) 
L3214: (headerlistnew[1]=,w) 
L3215: (headerlistnew[2]=,w) 
	loop info: lindex = 0  lindex < nbobj  lindex++
	induction variable: ['list', 'lindex']
	{
	L3216: (headerobj[0],r) 
	L3217: (headerobj[3],r) 
	L3218: (headerlist[lindex + 3]-,r) (headerlist[lindex + 2],r) 
	L3219: (headerlistnew[3 + lindex]=,w) (headerlistnew[2 + lindex]+,r) 
	}
 }
array table
-----------------------------------------------
headerlist -> [('[1]', 'r', 'normalized', ['list', 'lindex'], 3212), ('[lindex + 3]', 'r', 'normalized', ['list', 'lindex'], 3218), ('[lindex + 2]', 'r', 'normalized', ['list', 'lindex'], 3218)]
LDEs formed:0

headerlistnew -> [('[0]', 'w', 'normalized', ['list', 'lindex'], 3213), ('[1]', 'w', 'normalized', ['list', 'lindex'], 3214), ('[2]', 'w', 'normalized', ['list', 'lindex'], 3215), ('[3 + lindex]', 'w', 'normalized', ['list', 'lindex'], 3219), ('[2 + lindex]', 'r', 'normalized', ['list', 'lindex'], 3219)]
LDEs formed:14

headerobj -> [('[0]', 'r', 'normalized', ['list', 'lindex'], 3216), ('[3]', 'r', 'normalized', ['list', 'lindex'], 3217)]
LDEs formed:0

distinct LDEs:
2=3 + lindex2
1=2 + lindex2
0=2 + lindex2
3 + lindex1=2 + lindex2
2=2 + lindex2
2=2
1=1
3 + lindex1=3 + lindex2
0=0
0=1
0=2
0=3 + lindex2
1=3 + lindex2
1=2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: list = 0  list < nb  list++
induction variable: ['list']
{
L3218: (headerlist[1],r) 
	loop info: lindex = 0  lindex < nbobj  lindex++
	induction variable: ['list', 'lindex']
	{
	L3219: (headerobj[0],r) 
	L3220: (headerobj[3],r) 
	L3221: (headerobj[1],r) 
	L3222: (headerlist[lindex + 3]-,r) (headerlist[lindex + 2],r) 
		loop info: k = 0  k < 2 * sizeobj  k++
		induction variable: ['list', 'lindex', 'k']
		{
		L3223: (headerobjnew[k]=,w) (headerobj[k],r) 
		}
 	}
 }
array table
-----------------------------------------------
headerobjnew -> [('[k]', 'w', 'normalized', ['list', 'lindex', 'k'], 3223)]
LDEs formed:1

headerlist -> [('[1]', 'r', 'normalized', ['list', 'lindex', 'k'], 3218), ('[lindex + 3]', 'r', 'normalized', ['list', 'lindex', 'k'], 3222), ('[lindex + 2]', 'r', 'normalized', ['list', 'lindex', 'k'], 3222)]
LDEs formed:0

headerobj -> [('[0]', 'r', 'normalized', ['list', 'lindex', 'k'], 3219), ('[3]', 'r', 'normalized', ['list', 'lindex', 'k'], 3220), ('[1]', 'r', 'normalized', ['list', 'lindex', 'k'], 3221), ('[k]', 'r', 'normalized', ['list', 'lindex', 'k'], 3223)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: obj = 0  obj < nb  obj++
induction variable: ['obj']
{
L3224: (headerobj[0],r) 
L3225: (headerobj[3],r) 
L3226: (header[5 + obj]-,r) (header[4 + obj],r) 
L3227: (headernew[4 + suite]=,w) 
}
array table
-----------------------------------------------
header -> [('[5 + obj]', 'r', 'normalized', ['obj'], 3226), ('[4 + obj]', 'r', 'normalized', ['obj'], 3226)]
LDEs formed:0

headernew -> [('[4 + suite]', 'w', 'not normalized', ['obj'], 3227)]
LDEs formed:1

headerobj -> [('[0]', 'r', 'normalized', ['obj'], 3224), ('[3]', 'r', 'normalized', ['obj'], 3225)]
LDEs formed:0

distinct LDEs:
4 + suite=4 + suite
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: obj = 0  obj < nb  obj++
induction variable: ['obj']
{
L3226: (headerobj[0],r) 
L3227: (headerobj[3],r) 
L3228: (headerobj[1],r) 
L3229: (header[5 + obj]-,r) (header[4 + obj],r) 
	loop info: k = 0  k < 2 * sizeobj  k++
	induction variable: ['obj', 'k']
	{
	L3230: (headerobjnew[k]=,w) (headerobj[k],r) 
	}
 }
array table
-----------------------------------------------
headerobjnew -> [('[k]', 'w', 'normalized', ['obj', 'k'], 3230)]
LDEs formed:1

header -> [('[5 + obj]', 'r', 'normalized', ['obj', 'k'], 3229), ('[4 + obj]', 'r', 'normalized', ['obj', 'k'], 3229)]
LDEs formed:0

headerobj -> [('[0]', 'r', 'normalized', ['obj', 'k'], 3226), ('[3]', 'r', 'normalized', ['obj', 'k'], 3227), ('[1]', 'r', 'normalized', ['obj', 'k'], 3228), ('[k]', 'r', 'normalized', ['obj', 'k'], 3230)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < m * n  k++
induction variable: ['k']
{
L3231: (header[3 + k]=,w) 
}
array table
-----------------------------------------------
header -> [('[3 + k]', 'w', 'normalized', ['k'], 3231)]
LDEs formed:1

distinct LDEs:
3 + k1=3 + k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= nlhs  ++k
induction variable: ['k']
{
L3232: (plhs[k - 1]=,w) (lstk[nv + k + Top - Rhs - 1],r) 
}
array table
-----------------------------------------------
plhs -> [('[k - 1]', 'w', 'normalized', ['k'], 3232)]
LDEs formed:1

lstk -> [('[nv + k + Top - Rhs - 1]', 'r', 'not normalized', ['k'], 3232)]
LDEs formed:0

distinct LDEs:
k1 - 1=k2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < nsubs  k++
induction variable: ['k']
{
L3233: (subs[k]*,r) 
L3234: (dims[k],r) 
}
array table
-----------------------------------------------
dims -> [('[k]', 'r', 'normalized', ['k'], 3234)]
LDEs formed:0

subs -> [('[k]', 'r', 'normalized', ['k'], 3233)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k < m  ++k
induction variable: ['k']
{
L3234: (str[k],r) 
}
array table
-----------------------------------------------
str -> [('[k]', 'r', 'normalized', ['k'], 3234)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < m  ++k
induction variable: ['k']
{
L3235: (str[k],r) 
L3236: (str[k],r) 
	loop info: kk = 0  kk < nmax - n  ++kk
	induction variable: ['k', 'kk']
		{
		}
 }
array table
-----------------------------------------------
str -> [('[k]', 'r', 'normalized', ['k', 'kk'], 3235), ('[k]', 'r', 'normalized', ['k', 'kk'], 3236)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: output = 1  output <= *nlhs   ++output
induction variable: ['output']
{
L3237: (plhs[output - 1]=,w) 
}
array table
-----------------------------------------------
plhs -> [('[output - 1]', 'w', 'normalized', ['output'], 3237)]
LDEs formed:1

distinct LDEs:
output1 - 1=output2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= *nrhs   ++k
induction variable: ['k']
{
L3238: (prhs[k - 1]=,w) (lstk[RhsVar - 1],r) 
L3239: (ntypes[k - 1]=,w) 
L3240: (prhs[k - 1],r) 
L3241: (header[0],r) 
L3242: (header[1],r) 
L3243: (header[0],r) 
L3244: (header[2],r) 
L3245: (header[1],r) 
L3246: (header[5]-,r) (header[4],r) 
	loop info: line = 1  line < m  line++
	induction variable: ['k', 'line']
			{
			L3247: (header[5 + line]-,r) (header[4 + line],r) 
			}
 }
array table
-----------------------------------------------
header -> [('[0]', 'r', 'normalized', ['k', 'line'], 3241), ('[1]', 'r', 'normalized', ['k', 'line'], 3242), ('[0]', 'r', 'normalized', ['k', 'line'], 3243), ('[2]', 'r', 'normalized', ['k', 'line'], 3244), ('[1]', 'r', 'normalized', ['k', 'line'], 3245), ('[5]', 'r', 'normalized', ['k', 'line'], 3246), ('[4]', 'r', 'normalized', ['k', 'line'], 3246), ('[5 + line]', 'r', 'normalized', ['k', 'line'], 3247), ('[4 + line]', 'r', 'normalized', ['k', 'line'], 3247)]
LDEs formed:0

lstk -> [('[RhsVar - 1]', 'r', 'not normalized', ['k', 'line'], 3238)]
LDEs formed:0

prhs -> [('[k - 1]', 'w', 'normalized', ['k', 'line'], 3238), ('[k - 1]', 'r', 'normalized', ['k', 'line'], 3240)]
LDEs formed:2

ntypes -> [('[k - 1]', 'w', 'normalized', ['k', 'line'], 3239)]
LDEs formed:1

distinct LDEs:
k1 - 1=k2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= *nlhs  k++
induction variable: ['k']
{
L3240: (plhs[k - 1],r) 
L3241: (plhs[k - 1]=,w) (plhs[k - 1],r) 
}
array table
-----------------------------------------------
plhs -> [('[k - 1]', 'r', 'normalized', ['k'], 3240), ('[k - 1]', 'w', 'normalized', ['k'], 3241), ('[k - 1]', 'r', 'normalized', ['k'], 3241)]
LDEs formed:3

distinct LDEs:
k1 - 1=k2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= *nlhs  k++
induction variable: ['k']
{
L3242: (plhs[k - 1],r) 
	loop info: kk = 1  kk <= nv  kk++
	induction variable: ['k', 'kk']
	{
	L3243: (lstk[kk + Top - Rhs - 1],r) 
	}
 }
array table
-----------------------------------------------
plhs -> [('[k - 1]', 'r', 'normalized', ['k', 'kk'], 3242)]
LDEs formed:0

lstk -> [('[kk + Top - Rhs - 1]', 'r', 'not normalized', ['k', 'kk'], 3243)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= nlhs  k++
induction variable: ['k']
{
L3244: (plhs[k - 1],r) 
}
array table
-----------------------------------------------
plhs -> [('[k - 1]', 'r', 'normalized', ['k'], 3244)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= nrhs  k++
induction variable: ['k']
{
L3245: (prhs[k - 1],r) 
}
array table
-----------------------------------------------
prhs -> [('[k - 1]', 'r', 'normalized', ['k'], 3245)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < N   i++
induction variable: ['i']
{
L3246: (AMSB[i + i * N]-=,w) 
}
array table
-----------------------------------------------
AMSB -> [('[i + i * N]', 'w', 'not normalized', ['i'], 3246)]
LDEs formed:1

distinct LDEs:
i1 + i1 * N=i2 + i2 * N
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
	{
	L3247: (AMSB[i + j * N]=,w) (AMSB[j + i * N]+,r) (AR[i + j * N]-,r) (AR[j + i * N],r) 
	}
 }
array table
-----------------------------------------------
AR -> [('[i + j * N]', 'r', 'not normalized', ['i', 'j'], 3247), ('[j + i * N]', 'r', 'not normalized', ['i', 'j'], 3247)]
LDEs formed:0

AMSB -> [('[i + j * N]', 'w', 'not normalized', ['i', 'j'], 3247), ('[j + i * N]', 'r', 'not normalized', ['i', 'j'], 3247)]
LDEs formed:2

distinct LDEs:
i1 + j1 * N=j2 + i2 * N
i1 + j1 * N=i2 + j2 * N
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < N   i++
induction variable: ['i']
{
L3248: (AMSBC[i + i * N].r-=,w) 
L3249: (AMSBC[i + i * N].i-=,w) 
}
array table
-----------------------------------------------
AMSBC -> [('[i + i * N]', 'w', 'not normalized', ['i'], 3248), ('[i + i * N]', 'w', 'not normalized', ['i'], 3249)]
LDEs formed:3

distinct LDEs:
i1 + i1 * N=i2 + i2 * N
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nev + 1  i++
induction variable: ['i']
{
L3250: (eigenvalue[i].r=,w) (DR[i],r) 
L3251: (eigenvalue[i].i=,w) (DI[i],r) 
}
array table
-----------------------------------------------
eigenvalue -> [('[i]', 'w', 'normalized', ['i'], 3250), ('[i]', 'w', 'normalized', ['i'], 3251)]
LDEs formed:3

DR -> [('[i]', 'r', 'normalized', ['i'], 3250)]
LDEs formed:0

DI -> [('[i]', 'r', 'normalized', ['i'], 3251)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < N  j++
induction variable: ['j']
{
L3252: (eigenvector[i * N + j].r=,w) (Z[i * N + j],r) 
L3253: (eigenvector[i * N + j].i=,w) (Z[(i + 1) * N + j],r) 
L3254: (eigenvector[(i + 1) * N + j].r=,w) (Z[i * N + j],r) 
L3255: (eigenvector[(i + 1) * N + j].i=,w) (Z[(i + 1) * N + j],r) 
}
array table
-----------------------------------------------
Z -> [('[i * N + j]', 'r', 'not normalized', ['j'], 3252), ('[(i + 1) * N + j]', 'r', 'not normalized', ['j'], 3253), ('[i * N + j]', 'r', 'not normalized', ['j'], 3254), ('[(i + 1) * N + j]', 'r', 'not normalized', ['j'], 3255)]
LDEs formed:0

eigenvector -> [('[i * N + j]', 'w', 'not normalized', ['j'], 3252), ('[i * N + j]', 'w', 'not normalized', ['j'], 3253), ('[(i + 1) * N + j]', 'w', 'not normalized', ['j'], 3254), ('[(i + 1) * N + j]', 'w', 'not normalized', ['j'], 3255)]
LDEs formed:10

distinct LDEs:
i * N + j1=i * N + j2
(i + 1) * N + j1=(i + 1) * N + j2
i * N + j1=(i + 1) * N + j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < N  j++
induction variable: ['j']
{
L3256: (eigenvector[i * N + j].r=,w) (Z[i * N + j],r) 
L3257: (eigenvector[i * N + j].i=,w) 
}
array table
-----------------------------------------------
Z -> [('[i * N + j]', 'r', 'not normalized', ['j'], 3256)]
LDEs formed:0

eigenvector -> [('[i * N + j]', 'w', 'not normalized', ['j'], 3256), ('[i * N + j]', 'w', 'not normalized', ['j'], 3257)]
LDEs formed:3

distinct LDEs:
i * N + j1=i * N + j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iColsOne  i++
induction variable: ['i']
{
	loop info: j = 0  j < i  j++
	induction variable: ['i', 'j']
	{
	L3258: (Areal[j + i * iColsOne],r) 
	L3259: (Areal[j * iColsOne + i],r) 
	}
 }
array table
-----------------------------------------------
Areal -> [('[j + i * iColsOne]', 'r', 'not normalized', ['i', 'j'], 3258), ('[j * iColsOne + i]', 'r', 'not normalized', ['i', 'j'], 3259)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < N * N    i++
induction variable: ['i']
{
L3260: (Bcplx[i].r=,w) (Breal[i],r) 
}
array table
-----------------------------------------------
Bcplx -> [('[i]', 'w', 'normalized', ['i'], 3260)]
LDEs formed:1

Breal -> [('[i]', 'r', 'normalized', ['i'], 3260)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < N * N    i++
induction variable: ['i']
{
L3261: (Acplx[i].r=,w) (Areal[i],r) 
}
array table
-----------------------------------------------
Areal -> [('[i]', 'r', 'normalized', ['i'], 3261)]
LDEs formed:0

Acplx -> [('[i]', 'w', 'normalized', ['i'], 3261)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
	loop info: j = 0  j <= i  j++
	induction variable: ['i', 'j']
	{
	L3262: (Breal[i + j * N]==,r) 
	L3263: (Breal[i + j * N],r) 
	}
 }
array table
-----------------------------------------------
Breal -> [('[i + j * N]', 'r', 'not normalized', ['i', 'j'], 3262), ('[i + j * N]', 'r', 'not normalized', ['i', 'j'], 3263)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < N  i++
induction variable: ['i']
{
	loop info: j = 0  j <= i  j++
	induction variable: ['i', 'j']
	{
	L3264: (Bcplx[i + i * N].r==,r) (Bcplx[i + i * N].i==,r) 
	L3265: (Bcplx[i + j * N].r,r) (Bcplx[i + j * N].i,r) 
	}
 }
array table
-----------------------------------------------
Bcplx -> [('[i + i * N]', 'r', 'not normalized', ['i', 'j'], 3264), ('[i + i * N]', 'r', 'not normalized', ['i', 'j'], 3264), ('[i + j * N]', 'r', 'not normalized', ['i', 'j'], 3265), ('[i + j * N]', 'r', 'not normalized', ['i', 'j'], 3265)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNEV  i++
induction variable: ['i']
{
L3266: (mat_eigenvalue[i * iNEV + i]=,w) (eigenvalue[i],r) 
}
array table
-----------------------------------------------
mat_eigenvalue -> [('[i * iNEV + i]', 'w', 'not normalized', ['i'], 3266)]
LDEs formed:1

eigenvalue -> [('[i]', 'r', 'normalized', ['i'], 3266)]
LDEs formed:0

distinct LDEs:
i1 * iNEV + i1=i2 * iNEV + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iNEV  i++
induction variable: ['i']
{
L3267: (mat_eigenvalueC[i * iNEV + i]=,w) (eigenvalueC[i],r) 
}
array table
-----------------------------------------------
eigenvalueC -> [('[i]', 'r', 'normalized', ['i'], 3267)]
LDEs formed:0

mat_eigenvalueC -> [('[i * iNEV + i]', 'w', 'not normalized', ['i'], 3267)]
LDEs formed:1

distinct LDEs:
i1 * iNEV + i1=i2 * iNEV + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  j = 0  j < n-1  j++
induction variable: ['j']
{
L3268: (dim[j],r) 
	loop info:  i = 0  i < p  i++ 
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
dim -> [('[j]', 'r', 'normalized', ['j', 'i'], 3268)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0  i < np  i++ 
induction variable: ['i']
{
	loop info:  j = 0  j < n  j++ 
	induction variable: ['i', 'j']
	{
	L3269: (xp[j][i],r) 
	L3270: (v[0]=,w) 
	L3271: (x[j],r) (dim[j],r) (k[j],r) 
	L3272: (k[j]==,r) 
	L3273: (v[0]=,w) 
	L3274: (v[0]=,w) 
	L3275: (x[j][0],r) 
	L3276: (k[j]=,w) 
	L3277: (k[j]=,w) (dim[j]-,r) 
	L3278: (x[j][0],r) 
	L3279: (u[j]=,w) (k[j]=,w) 
	L3280: (u[j]=,w) (k[j]=,w) (dim[j]-,r) 
	L3281: (x[j],r) (dim[j],r) (k[j],r) 
	L3282: (u[j]=,w) (x[j],r) (k[j],r) (x[j],r) (k[j]+,r) (x[j],r) (k[j],r) 
	}
L3283: (k[n-1],r) 
	loop info:  j = n-2  j >= 0  j-- 
	induction variable: ['i', 'j']
	}
	loop info:  j = 0  j < two_p_n  j++ 
	induction variable: ['i', 'j']
	}
	loop info:  j = 0  j < n   j++ 
	induction variable: ['i', 'j']
	{
		loop info:  l = 0  l < two_p_n  l+=2*temp
		induction variable: ['i', 'j', 'l']
		{
		L3284: (v[l]=,w) (v[l]*,r) (u[j],r) (v[l+temp]*,r) (u[j],r) 
		}
 	}
L3285: (yp[i]=,w) (v[0],r) 
}
array table
-----------------------------------------------
dim -> [('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3271), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3277), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3280), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3281)]
LDEs formed:0

yp -> [('[i]', 'w', 'normalized', ['i', 'j', 'l'], 3285)]
LDEs formed:1

k -> [('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3271), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3272), ('[j]', 'w', 'normalized', ['i', 'j', 'l'], 3276), ('[j]', 'w', 'normalized', ['i', 'j', 'l'], 3277), ('[j]', 'w', 'normalized', ['i', 'j', 'l'], 3279), ('[j]', 'w', 'normalized', ['i', 'j', 'l'], 3280), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3281), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3282), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3282), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3282), ('[n-1]', 'r', 'not normalized', ['i', 'j', 'l'], 3283)]
LDEs formed:38

u -> [('[j]', 'w', 'normalized', ['i', 'j', 'l'], 3279), ('[j]', 'w', 'normalized', ['i', 'j', 'l'], 3280), ('[j]', 'w', 'normalized', ['i', 'j', 'l'], 3282), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3284), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3284)]
LDEs formed:12

v -> [('[0]', 'w', 'normalized', ['i', 'j', 'l'], 3270), ('[0]', 'w', 'normalized', ['i', 'j', 'l'], 3273), ('[0]', 'w', 'normalized', ['i', 'j', 'l'], 3274), ('[l]', 'w', 'normalized', ['i', 'j', 'l'], 3284), ('[l]', 'r', 'normalized', ['i', 'j', 'l'], 3284), ('[l+temp]', 'r', 'not normalized', ['i', 'j', 'l'], 3284), ('[0]', 'r', 'normalized', ['i', 'j', 'l'], 3285)]
LDEs formed:22

x -> [('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3271), ('[j][0]', 'r', 'normalized', ['i', 'j', 'l'], 3275), ('[j][0]', 'r', 'normalized', ['i', 'j', 'l'], 3278), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3281), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3282), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3282), ('[j]', 'r', 'normalized', ['i', 'j', 'l'], 3282)]
LDEs formed:0

xp -> [('[j][i]', 'r', 'normalized', ['i', 'j', 'l'], 3269)]
LDEs formed:0

distinct LDEs:
l1=l2
i1=i2
l1=l2+temp
j1=n-1
0=0
0=l2+temp
0=l2
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 2   i <= n   i++ 
induction variable: ['i']
{
L3270: (xp[i - 1]=,w) 
}
array table
-----------------------------------------------
xp -> [('[i - 1]', 'w', 'normalized', ['i'], 3270)]
LDEs formed:1

distinct LDEs:
i1 - 1=i2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i <= n   i++ 
induction variable: ['i']
{
L3271: (x[i - 1]=,w) 
L3272: (dim[i - 1]=,w) 
L3273: (x[i - 1],r) 
}
array table
-----------------------------------------------
x -> [('[i - 1]', 'w', 'normalized', ['i'], 3271), ('[i - 1]', 'r', 'normalized', ['i'], 3273)]
LDEs formed:2

dim -> [('[i - 1]', 'w', 'normalized', ['i'], 3272)]
LDEs formed:1

distinct LDEs:
i1 - 1=i2 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < np   i++ 
induction variable: ['i']
{
L3273: (xp[i],r) (yp[i],r) (xyz[n],r) (xyz[2 * n],r) 
L3274: (grid[1],r) (grid[2],r) (grid[3],r) 
L3275: (f[i],r) (dfdx[i],r) (dfdy[i],r) 
L3276: (dffdxx[i],r) (dffdxy[i],r) (dffdyy[i],r) 
}
array table
-----------------------------------------------
f -> [('[i]', 'r', 'normalized', ['i'], 3275)]
LDEs formed:0

dffdyy -> [('[i]', 'r', 'normalized', ['i'], 3276)]
LDEs formed:0

xyz -> [('[n]', 'r', 'not normalized', ['i'], 3273), ('[2 * n]', 'r', 'not normalized', ['i'], 3273)]
LDEs formed:0

dffdxy -> [('[i]', 'r', 'normalized', ['i'], 3276)]
LDEs formed:0

dfdx -> [('[i]', 'r', 'normalized', ['i'], 3275)]
LDEs formed:0

dfdy -> [('[i]', 'r', 'normalized', ['i'], 3275)]
LDEs formed:0

grid -> [('[1]', 'r', 'normalized', ['i'], 3274), ('[2]', 'r', 'normalized', ['i'], 3274), ('[3]', 'r', 'normalized', ['i'], 3274)]
LDEs formed:0

yp -> [('[i]', 'r', 'normalized', ['i'], 3273)]
LDEs formed:0

xp -> [('[i]', 'r', 'normalized', ['i'], 3273)]
LDEs formed:0

dffdxx -> [('[i]', 'r', 'normalized', ['i'], 3276)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < np  i++
induction variable: ['i']
{
L3277: (fp[i]=,w) (xp[i],r) (yp[i],r) (zp[i],r) 
}
array table
-----------------------------------------------
fp -> [('[i]', 'w', 'normalized', ['i'], 3277)]
LDEs formed:1

yp -> [('[i]', 'r', 'normalized', ['i'], 3277)]
LDEs formed:0

xp -> [('[i]', 'r', 'normalized', ['i'], 3277)]
LDEs formed:0

zp -> [('[i]', 'r', 'normalized', ['i'], 3277)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < size  i++
induction variable: ['i']
{
L3278: (str[i]=,w) (lengths[i]+,r) 
L3279: (str[i]==,r) 
}
array table
-----------------------------------------------
lengths -> [('[i]', 'r', 'normalized', ['i'], 3278)]
LDEs formed:0

str -> [('[i]', 'w', 'normalized', ['i'], 3278), ('[i]', 'r', 'normalized', ['i'], 3279)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < N  i++
induction variable: ['i']
{
L3280: (ptrStrs[i]=,w) 
}
array table
-----------------------------------------------
ptrStrs -> [('[i]', 'w', 'normalized', ['i'], 3280)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows   i++
induction variable: ['i']
{
L3281: (piNewRow[i]=,w) (piNbItemRow[i],r) 
	loop info: j = 0   j < iCols   j++
	induction variable: ['i', 'j']
	{
		loop info: k = 0   k < piNbItemRow[i]   k++
		induction variable: ['i', 'j', 'k']
		{
		L3282: (piColPos[iCol + k]==,r) 
		}
	L3283: (piNewCol[iNewCol++]=,w) 
	}
L3284: (piNbItemRow[i],r) 
}
array table
-----------------------------------------------
piColPos -> [('[iCol + k]', 'r', 'not normalized', ['i', 'j', 'k'], 3282)]
LDEs formed:0

piNewRow -> [('[i]', 'w', 'normalized', ['i', 'j', 'k'], 3281)]
LDEs formed:1

piNewCol -> [('[iNewCol++]', 'w', 'not normalized', ['i', 'j', 'k'], 3283)]
LDEs formed:1

piNbItemRow -> [('[i]', 'r', 'normalized', ['i', 'j', 'k'], 3281), ('[i]', 'r', 'normalized', ['i', 'j', 'k'], 3284)]
LDEs formed:0

distinct LDEs:
iNewCol++=iNewCol++
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3285: (pdblReal[i]=,w) (piNbCoef[i],r) 
L3286: (pdblImg[i]=,w) (piNbCoef[i],r) 
}
array table
-----------------------------------------------
piNbCoef -> [('[i]', 'r', 'normalized', ['i'], 3285), ('[i]', 'r', 'normalized', ['i'], 3286)]
LDEs formed:0

pdblImg -> [('[i]', 'w', 'normalized', ['i'], 3286)]
LDEs formed:1

pdblReal -> [('[i]', 'w', 'normalized', ['i'], 3285)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < (iRows * iCols) / 2   i++
induction variable: ['i']
{
L3286: (pdblReal[i],r) 
L3287: (pdblReal[i]=,w) (pdblReal[iPos1],r) 
L3288: (pdblReal[iPos1]=,w) 
L3289: (pdblImg[i],r) 
L3290: (pdblImg[i]=,w) (pdblImg[iPos1],r) 
L3291: (pdblImg[iPos1]=,w) 
L3292: (piNbCoef[i],r) 
L3293: (piNbCoef[i]=,w) (piNbCoef[iPos1],r) 
L3294: (piNbCoef[iPos1]=,w) 
}
array table
-----------------------------------------------
piNbCoef -> [('[i]', 'r', 'normalized', ['i'], 3292), ('[i]', 'w', 'normalized', ['i'], 3293), ('[iPos1]', 'r', 'not normalized', ['i'], 3293), ('[iPos1]', 'w', 'not normalized', ['i'], 3294)]
LDEs formed:7

pdblImg -> [('[i]', 'r', 'normalized', ['i'], 3289), ('[i]', 'w', 'normalized', ['i'], 3290), ('[iPos1]', 'r', 'not normalized', ['i'], 3290), ('[iPos1]', 'w', 'not normalized', ['i'], 3291)]
LDEs formed:7

pdblReal -> [('[i]', 'r', 'normalized', ['i'], 3286), ('[i]', 'w', 'normalized', ['i'], 3287), ('[iPos1]', 'r', 'not normalized', ['i'], 3287), ('[iPos1]', 'w', 'not normalized', ['i'], 3288)]
LDEs formed:7

distinct LDEs:
iPos1=iPos1
i1=iPos1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
	loop info: j = 0   j < piNbCoef[i] / 2   j++
	induction variable: ['i', 'j']
	{
	L3289: (piNbCoef[i]-,r) 
	L3290: (pdblReal[i][j],r) 
	L3291: (pdblReal[i][j]=,w) (pdblReal[i][iPos2],r) 
	L3292: (pdblReal[i][iPos2]=,w) 
	L3293: (pdblImg[i][j],r) 
	L3294: (pdblImg[i][j]=,w) (pdblImg[i][iPos2],r) 
	L3295: (pdblImg[i][iPos2]=,w) 
	}
 }
array table
-----------------------------------------------
piNbCoef -> [('[i]', 'r', 'normalized', ['i', 'j'], 3289)]
LDEs formed:0

pdblImg -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3293), ('[i][j]', 'w', 'normalized', ['i', 'j'], 3294), ('[i][iPos2]', 'r', 'not normalized', ['i', 'j'], 3294), ('[i][iPos2]', 'w', 'not normalized', ['i', 'j'], 3295)]
LDEs formed:14

pdblReal -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3290), ('[i][j]', 'w', 'normalized', ['i', 'j'], 3291), ('[i][iPos2]', 'r', 'not normalized', ['i', 'j'], 3291), ('[i][iPos2]', 'w', 'not normalized', ['i', 'j'], 3292)]
LDEs formed:14

distinct LDEs:
i1=i2,iPos2=iPos2
i1=i2,j1=j2
i1=i2,j1=iPos2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3293: (pdblReal[i],r) 
L3294: (pdblImg[i],r) 
}
array table
-----------------------------------------------
pdblImg -> [('[i]', 'r', 'normalized', ['i'], 3294)]
LDEs formed:0

pdblReal -> [('[i]', 'r', 'normalized', ['i'], 3293)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3294: (piBool[i]=,w) (piBool[i]==,r) 
}
array table
-----------------------------------------------
piBool -> [('[i]', 'w', 'normalized', ['i'], 3294), ('[i]', 'r', 'normalized', ['i'], 3294)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3295: (pdblReal[i]=,w) (pdblReal[i]*,r) 
}
array table
-----------------------------------------------
pdblReal -> [('[i]', 'w', 'normalized', ['i'], 3295), ('[i]', 'r', 'normalized', ['i'], 3295)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows   i++
induction variable: ['i']
{
	loop info: j = 0   j < piNbItemRow[i]   j++
	induction variable: ['i', 'j']
	{
	L3296: (piColPos[k],r) (pdblReal[k],r) 
	L3297: (pdblImg[k],r) 
	}
 }
array table
-----------------------------------------------
piColPos -> [('[k]', 'r', 'not normalized', ['i', 'j'], 3296)]
LDEs formed:0

pdblImg -> [('[k]', 'r', 'not normalized', ['i', 'j'], 3297)]
LDEs formed:0

pdblReal -> [('[k]', 'r', 'not normalized', ['i', 'j'], 3296)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows1   i++
induction variable: ['i']
{
	loop info: j = 0   j < iCols1   j++
	induction variable: ['i', 'j']
	{
	L3297: (pdblReal1[i + iRows1 * j]=,w) 
	}
 }
array table
-----------------------------------------------
pdblReal1 -> [('[i + iRows1 * j]', 'w', 'not normalized', ['i', 'j'], 3297)]
LDEs formed:1

distinct LDEs:
i1 + iRows1 * j1=i2 + iRows1 * j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows2   i++
induction variable: ['i']
{
	loop info: j = 0   j < iCols2   j++
	induction variable: ['i', 'j']
	{
	L3298: (pdblReal2[i + iRows2 * j]=,w) 
	}
 }
array table
-----------------------------------------------
pdblReal2 -> [('[i + iRows2 * j]', 'w', 'not normalized', ['i', 'j'], 3298)]
LDEs formed:1

distinct LDEs:
i1 + iRows2 * j1=i2 + iRows2 * j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3299: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 3299)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 3299)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3300: (piLen[i],r) 
}
array table
-----------------------------------------------
piLen -> [('[i]', 'r', 'normalized', ['i'], 3300)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows   i++
induction variable: ['i']
{
	loop info: j = 0   j < iCols   j++
	induction variable: ['i', 'j']
	{
	L3301: (pstData[j * iRows + i],r) 
	}
 }
array table
-----------------------------------------------
pstData -> [('[j * iRows + i]', 'r', 'not normalized', ['i', 'j'], 3301)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3302: (pstData[i],r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'r', 'normalized', ['i'], 3302)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3303: (pdblReal[i]=,w) (piCoeff[i],r) 
L3304: (pdblImg[i]=,w) (piCoeff[i],r) 
}
array table
-----------------------------------------------
piCoeff -> [('[i]', 'r', 'normalized', ['i'], 3303), ('[i]', 'r', 'normalized', ['i'], 3304)]
LDEs formed:0

pdblImg -> [('[i]', 'w', 'normalized', ['i'], 3304)]
LDEs formed:1

pdblReal -> [('[i]', 'w', 'normalized', ['i'], 3303)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3304: (pdblReal[i]=,w) (piCoeff[i],r) 
L3305: (pdblImg[i]=,w) (piCoeff[i],r) 
}
array table
-----------------------------------------------
piCoeff -> [('[i]', 'r', 'normalized', ['i'], 3304), ('[i]', 'r', 'normalized', ['i'], 3305)]
LDEs formed:0

pdblImg -> [('[i]', 'w', 'normalized', ['i'], 3305)]
LDEs formed:1

pdblReal -> [('[i]', 'w', 'normalized', ['i'], 3304)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3305: (pdblReal[i],r) 
L3306: (pdblImg[i],r) 
}
array table
-----------------------------------------------
pdblImg -> [('[i]', 'r', 'normalized', ['i'], 3306)]
LDEs formed:0

pdblReal -> [('[i]', 'r', 'normalized', ['i'], 3305)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3306: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 3306)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 3306)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows * iCols   i++
induction variable: ['i']
{
L3307: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 3307)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 3307)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L3308: (A[j * (*na) ],r) 
L3309: (V[iv]=,w) 
}
array table
-----------------------------------------------
A -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3308)]
LDEs formed:0

V -> [('[iv]', 'w', 'not normalized', ['j'], 3309)]
LDEs formed:1

distinct LDEs:
iv=iv
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *m  ++i
induction variable: ['i']
{
L3310: (A[i],r) 
L3311: (V[iv]=,w) 
}
array table
-----------------------------------------------
A -> [('[i]', 'r', 'normalized', ['i'], 3310)]
LDEs formed:0

V -> [('[iv]', 'w', 'not normalized', ['i'], 3311)]
LDEs formed:1

distinct LDEs:
iv=iv
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L3312: (A[j * (*na) ],r) 
L3313: (v[iv]=,w) 
}
array table
-----------------------------------------------
A -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3312)]
LDEs formed:0

v -> [('[iv]', 'w', 'not normalized', ['j'], 3313)]
LDEs formed:1

distinct LDEs:
iv=iv
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *m  ++i
induction variable: ['i']
{
L3314: (A[i],r) 
L3315: (v[iv]=,w) 
}
array table
-----------------------------------------------
A -> [('[i]', 'r', 'normalized', ['i'], 3314)]
LDEs formed:0

v -> [('[iv]', 'w', 'not normalized', ['i'], 3315)]
LDEs formed:1

distinct LDEs:
iv=iv
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L3316: (IN[kk],r) 
L3317: (OUT[kk]=,w) 
}
array table
-----------------------------------------------
OUT -> [('[kk]', 'w', 'not normalized', ['k'], 3317)]
LDEs formed:1

IN -> [('[kk]', 'r', 'not normalized', ['k'], 3316)]
LDEs formed:0

distinct LDEs:
kk=kk
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L3317: (IN[kk],r) 
L3318: (out[kk]=,w) 
}
array table
-----------------------------------------------
out -> [('[kk]', 'w', 'not normalized', ['k'], 3318)]
LDEs formed:1

IN -> [('[kk]', 'r', 'not normalized', ['k'], 3317)]
LDEs formed:0

distinct LDEs:
kk=kk
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= i1  ++j
induction variable: ['j']
{
L3318: (indxj[j]-,r) 
	loop info: i = 1  i <= i2  ++i
	induction variable: ['j', 'i']
	}
 }
array table
-----------------------------------------------
indxj -> [('[j]', 'r', 'normalized', ['j', 'i'], 3318)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L3319: (DX[ix]*,r) (DY[iy],r) 
}
array table
-----------------------------------------------
DX -> [('[ix]', 'r', 'not normalized', ['i'], 3319)]
LDEs formed:0

DY -> [('[iy]', 'r', 'not normalized', ['i'], 3319)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= n  ++k
induction variable: ['k']
{
L3320: (iw[k]=,w) 
	loop info: l = 1  l <= m  ++l
	induction variable: ['k', 'l']
	{
	L3321: (X[lp + l],r) 
	L3322: (iw[k]=,w) (iw[k],r) 
	}
L3323: (iw[k],r) 
L3324: (iw[lbloc + nbloc]=,w) 
L3325: (iw[lbloc + nbloc]=,w) 
L3326: (iw[k],r) 
}
array table
-----------------------------------------------
X -> [('[lp + l]', 'r', 'not normalized', ['k', 'l'], 3321)]
LDEs formed:0

iw -> [('[k]', 'w', 'normalized', ['k', 'l'], 3320), ('[k]', 'w', 'normalized', ['k', 'l'], 3322), ('[k]', 'r', 'normalized', ['k', 'l'], 3322), ('[k]', 'r', 'normalized', ['k', 'l'], 3323), ('[lbloc + nbloc]', 'w', 'not normalized', ['k', 'l'], 3324), ('[lbloc + nbloc]', 'w', 'not normalized', ['k', 'l'], 3325), ('[k]', 'r', 'normalized', ['k', 'l'], 3326)]
LDEs formed:22

distinct LDEs:
lbloc + nbloc=lbloc + nbloc
k1=lbloc + nbloc
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ib = 1  ib <= nbloc  ++ib
induction variable: ['ib']
{
L3327: (iw[lbloc + ib],r) 
	loop info: l = 1  l <= m  ++l
	induction variable: ['ib', 'l']
	{
	L3328: (cw[0]=,w) 
		loop info: k = k1  k <= k2  ++k
		induction variable: ['ib', 'l', 'k']
		{
		L3329: (X[l + (k - 1) * *nx],r) 
		L3330: (cw[l1],r) (iw[k],r) 
		L3331: (iw[k]+,r) 
		}
	L3332: (cw[l1]=,w) 
	}
 }
array table
-----------------------------------------------
X -> [('[l + (k - 1) * *nx]', 'r', 'not normalized', ['ib', 'l', 'k'], 3329)]
LDEs formed:0

cw -> [('[0]', 'w', 'normalized', ['ib', 'l', 'k'], 3328), ('[l1]', 'r', 'not normalized', ['ib', 'l', 'k'], 3330), ('[l1]', 'w', 'not normalized', ['ib', 'l', 'k'], 3332)]
LDEs formed:5

iw -> [('[lbloc + ib]', 'r', 'not normalized', ['ib', 'l', 'k'], 3327), ('[k]', 'r', 'normalized', ['ib', 'l', 'k'], 3330), ('[k]', 'r', 'normalized', ['ib', 'l', 'k'], 3331)]
LDEs formed:0

distinct LDEs:
0=l1
l1=l1
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L3332: (DY[iy]=,w) (DX[ix],r) 
}
array table
-----------------------------------------------
DX -> [('[ix]', 'r', 'not normalized', ['i'], 3332)]
LDEs formed:0

DY -> [('[iy]', 'w', 'not normalized', ['i'], 3332)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= ii1  ++i
induction variable: ['i']
{
L3333: (A[i1]==,r) (B[i2],r) 
L3334: (r[i]=,w) 
L3335: (r[i]=,w) 
}
array table
-----------------------------------------------
A -> [('[i1]', 'r', 'not normalized', ['i'], 3333)]
LDEs formed:0

r -> [('[i]', 'w', 'normalized', ['i'], 3334), ('[i]', 'w', 'normalized', ['i'], 3335)]
LDEs formed:3

B -> [('[i2]', 'r', 'not normalized', ['i'], 3333)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= ii1  ++i
induction variable: ['i']
{
L3334: (A[i1],r) (B[i2],r) 
L3335: (r[i]=,w) 
L3336: (r[i]=,w) 
}
array table
-----------------------------------------------
A -> [('[i1]', 'r', 'not normalized', ['i'], 3334)]
LDEs formed:0

r -> [('[i]', 'w', 'normalized', ['i'], 3335), ('[i]', 'w', 'normalized', ['i'], 3336)]
LDEs formed:3

B -> [('[i2]', 'r', 'not normalized', ['i'], 3334)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= ii1  ++i
induction variable: ['i']
{
L3335: (A[i1],r) (B[i2],r) 
L3336: (r[i]=,w) 
L3337: (r[i]=,w) 
}
array table
-----------------------------------------------
A -> [('[i1]', 'r', 'not normalized', ['i'], 3335)]
LDEs formed:0

r -> [('[i]', 'w', 'normalized', ['i'], 3336), ('[i]', 'w', 'normalized', ['i'], 3337)]
LDEs formed:3

B -> [('[i2]', 'r', 'not normalized', ['i'], 3335)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= ii1  ++i
induction variable: ['i']
{
L3336: (A[i1],r) (B[i2],r) 
L3337: (r[i]=,w) 
L3338: (r[i]=,w) 
}
array table
-----------------------------------------------
A -> [('[i1]', 'r', 'not normalized', ['i'], 3336)]
LDEs formed:0

r -> [('[i]', 'w', 'normalized', ['i'], 3337), ('[i]', 'w', 'normalized', ['i'], 3338)]
LDEs formed:3

B -> [('[i2]', 'r', 'not normalized', ['i'], 3336)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= ii1  ++i
induction variable: ['i']
{
L3337: (A[i1],r) (B[i2],r) 
L3338: (r[i]=,w) 
L3339: (r[i]=,w) 
}
array table
-----------------------------------------------
A -> [('[i1]', 'r', 'not normalized', ['i'], 3337)]
LDEs formed:0

r -> [('[i]', 'w', 'normalized', ['i'], 3338), ('[i]', 'w', 'normalized', ['i'], 3339)]
LDEs formed:3

B -> [('[i2]', 'r', 'not normalized', ['i'], 3337)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= ii1  ++i
induction variable: ['i']
{
L3338: (A[i1],r) (B[i2],r) 
L3339: (r[i]=,w) 
L3340: (r[i]=,w) 
}
array table
-----------------------------------------------
A -> [('[i1]', 'r', 'not normalized', ['i'], 3338)]
LDEs formed:0

r -> [('[i]', 'w', 'normalized', ['i'], 3339), ('[i]', 'w', 'normalized', ['i'], 3340)]
LDEs formed:3

B -> [('[i2]', 'r', 'not normalized', ['i'], 3338)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= i1  ++k
induction variable: ['k']
{
L3339: (B[jb]==,r) 
L3340: (R[jr]=,w) (A[ja]/,r) (B[jb],r) 
}
array table
-----------------------------------------------
A -> [('[ja]', 'r', 'not normalized', ['k'], 3340)]
LDEs formed:0

R -> [('[jr]', 'w', 'not normalized', ['k'], 3340)]
LDEs formed:1

B -> [('[jb]', 'r', 'not normalized', ['k'], 3339), ('[jb]', 'r', 'not normalized', ['k'], 3340)]
LDEs formed:0

distinct LDEs:
jr=jr
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= i1  ++k
induction variable: ['k']
{
L3341: (R[jr]=,w) (A[ja]/,r) (B[jb],r) 
}
array table
-----------------------------------------------
A -> [('[ja]', 'r', 'not normalized', ['k'], 3341)]
LDEs formed:0

B -> [('[jb]', 'r', 'not normalized', ['k'], 3341)]
LDEs formed:0

R -> [('[jr]', 'w', 'not normalized', ['k'], 3341)]
LDEs formed:1

distinct LDEs:
jr=jr
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= i1  ++k
induction variable: ['k']
{
L3342: (B[jb]==,r) 
L3343: (R[jr]=,w) (A[ja]/,r) (B[jb],r) 
}
array table
-----------------------------------------------
A -> [('[ja]', 'r', 'not normalized', ['k'], 3343)]
LDEs formed:0

R -> [('[jr]', 'w', 'not normalized', ['k'], 3343)]
LDEs formed:1

B -> [('[jb]', 'r', 'not normalized', ['k'], 3342), ('[jb]', 'r', 'not normalized', ['k'], 3343)]
LDEs formed:0

distinct LDEs:
jr=jr
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *n  ++i
induction variable: ['i']
{
L3344: (DY[iy]=,w) 
}
array table
-----------------------------------------------
DY -> [('[iy]', 'w', 'not normalized', ['i'], 3344)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l = 1  l <= *m  ++l
induction variable: ['l']
{
L3345: (DY[l]=,w) (DX[l],r) (DK[l]=,w) 
	loop info: k = 1  k < *n  ++k
	induction variable: ['l', 'k']
	{
	L3346: (DX[l+k*ix],r) (DY[l],r) 
	L3347: (DY[l]=,w) (DX[l+k*ix],r) (DK[l]=,w) 
	}
 }
array table
-----------------------------------------------
DK -> [('[l]', 'w', 'normalized', ['l', 'k'], 3345), ('[l]', 'w', 'normalized', ['l', 'k'], 3347)]
LDEs formed:3

DX -> [('[l]', 'r', 'normalized', ['l', 'k'], 3345), ('[l+k*ix]', 'r', 'not normalized', ['l', 'k'], 3346), ('[l+k*ix]', 'r', 'not normalized', ['l', 'k'], 3347)]
LDEs formed:0

DY -> [('[l]', 'w', 'normalized', ['l', 'k'], 3345), ('[l]', 'r', 'normalized', ['l', 'k'], 3346), ('[l]', 'w', 'normalized', ['l', 'k'], 3347)]
LDEs formed:5

distinct LDEs:
l1=l2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L3348: (DY[1+k*iy]=,w) (DX[1+kk],r) (DK[1+k*iy]=,w) 
	loop info: l = 2  l <= *m  ++l
	induction variable: ['k', 'l']
	{
	L3349: (DX[l+kk],r) (DY[1+k*iy],r) 
	L3350: (DY[1+k*iy]=,w) (DX[l+kk],r) (DK[1+k*iy]=,w) 
	}
 }
array table
-----------------------------------------------
DK -> [('[1+k*iy]', 'w', 'not normalized', ['k', 'l'], 3348), ('[1+k*iy]', 'w', 'not normalized', ['k', 'l'], 3350)]
LDEs formed:3

DX -> [('[1+kk]', 'r', 'not normalized', ['k', 'l'], 3348), ('[l+kk]', 'r', 'not normalized', ['k', 'l'], 3349), ('[l+kk]', 'r', 'not normalized', ['k', 'l'], 3350)]
LDEs formed:0

DY -> [('[1+k*iy]', 'w', 'not normalized', ['k', 'l'], 3348), ('[1+k*iy]', 'r', 'not normalized', ['k', 'l'], 3349), ('[1+k*iy]', 'w', 'not normalized', ['k', 'l'], 3350)]
LDEs formed:5

distinct LDEs:
1+k1*iy=1+k2*iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
	loop info: l = 1  l <= *m  ++l
	induction variable: ['k', 'l']
	{
	L3351: (DX[l+kk],r) (DY[1],r) 
	L3352: (DY[1]=,w) (DX[l+kk],r) (DK[1]=,w) 
	}
 }
array table
-----------------------------------------------
DK -> [('[1]', 'w', 'normalized', ['k', 'l'], 3352)]
LDEs formed:1

DX -> [('[l+kk]', 'r', 'not normalized', ['k', 'l'], 3351), ('[l+kk]', 'r', 'not normalized', ['k', 'l'], 3352)]
LDEs formed:0

DY -> [('[1]', 'r', 'normalized', ['k', 'l'], 3351), ('[1]', 'w', 'normalized', ['k', 'l'], 3352)]
LDEs formed:2

distinct LDEs:
1=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L3353: (DY[iy]=,w) (dx[ix],r) 
}
array table
-----------------------------------------------
dx -> [('[ix]', 'r', 'not normalized', ['i'], 3353)]
LDEs formed:0

DY -> [('[iy]', 'w', 'not normalized', ['i'], 3353)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L3354: (IN[j * (*na) ],r) (OUT[j * (*na) ],r) 
}
array table
-----------------------------------------------
OUT -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3354)]
LDEs formed:0

IN -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3354)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *m  ++i
induction variable: ['i']
{
L3355: (IN[i],r) (OUT[i],r) 
}
array table
-----------------------------------------------
OUT -> [('[i]', 'r', 'normalized', ['i'], 3355)]
LDEs formed:0

IN -> [('[i]', 'r', 'normalized', ['i'], 3355)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L3356: (IN[j * (*na) ],r) (out[j * (*na) ],r) 
}
array table
-----------------------------------------------
out -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3356)]
LDEs formed:0

IN -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3356)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *m  ++i
induction variable: ['i']
{
L3357: (IN[i],r) (out[i],r) 
}
array table
-----------------------------------------------
out -> [('[i]', 'r', 'normalized', ['i'], 3357)]
LDEs formed:0

IN -> [('[i]', 'r', 'normalized', ['i'], 3357)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *mi  ++i
induction variable: ['i']
{
L3358: (DY[i]=,w) 
}
array table
-----------------------------------------------
DY -> [('[i]', 'w', 'normalized', ['i'], 3358)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *n  ++i
induction variable: ['i']
{
L3359: (DY[iy+i*(nn+1)]=,w) (DX[i],r) 
}
array table
-----------------------------------------------
DX -> [('[i]', 'r', 'normalized', ['i'], 3359)]
LDEs formed:0

DY -> [('[iy+i*(nn+1)]', 'w', 'not normalized', ['i'], 3359)]
LDEs formed:1

distinct LDEs:
iy+i1*(nn+1)=iy+i2*(nn+1)
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= *nj  ++j
induction variable: ['j']
{
L3360: (TO[l]=,w) (indxi[i]+,r) (indxj[j]-,r) 
}
array table
-----------------------------------------------
TO -> [('[l]', 'w', 'not normalized', ['j'], 3360)]
LDEs formed:1

indxj -> [('[j]', 'r', 'normalized', ['j'], 3360)]
LDEs formed:0

indxi -> [('[i]', 'r', 'not normalized', ['j'], 3360)]
LDEs formed:0

distinct LDEs:
l=l
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= (*m2)*(*n2)  ++i
induction variable: ['i']
{
L3361: (DX[ix],r) (DY[i],r) 
L3362: (DY[i]=,w) (DX[ix],r) 
L3363: (ind[i-1]=,w) 
}
array table
-----------------------------------------------
ind -> [('[i-1]', 'w', 'normalized', ['i'], 3363)]
LDEs formed:1

DX -> [('[ix]', 'r', 'not normalized', ['i'], 3361), ('[ix]', 'r', 'not normalized', ['i'], 3362)]
LDEs formed:0

DY -> [('[i]', 'r', 'normalized', ['i'], 3361), ('[i]', 'w', 'normalized', ['i'], 3362)]
LDEs formed:2

distinct LDEs:
i1=i2
i1-1=i2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L3363: (IN[j * (*na) ],r) (OUT[j * (*na) ],r) 
}
array table
-----------------------------------------------
OUT -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3363)]
LDEs formed:0

IN -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3363)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *m  ++i
induction variable: ['i']
{
L3364: (IN[i],r) (OUT[i],r) 
}
array table
-----------------------------------------------
OUT -> [('[i]', 'r', 'normalized', ['i'], 3364)]
LDEs formed:0

IN -> [('[i]', 'r', 'normalized', ['i'], 3364)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L3365: (IN[j * (*na) ],r) (out[j * (*na) ],r) 
}
array table
-----------------------------------------------
out -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3365)]
LDEs formed:0

IN -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3365)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *m  ++i
induction variable: ['i']
{
L3366: (IN[i],r) (out[i],r) 
}
array table
-----------------------------------------------
out -> [('[i]', 'r', 'normalized', ['i'], 3366)]
LDEs formed:0

IN -> [('[i]', 'r', 'normalized', ['i'], 3366)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L3367: (DX[ix]=,w) (DX[ix]-,r) (DY[iy],r) 
}
array table
-----------------------------------------------
DX -> [('[ix]', 'w', 'not normalized', ['i'], 3367), ('[ix]', 'r', 'not normalized', ['i'], 3367)]
LDEs formed:2

DY -> [('[iy]', 'r', 'not normalized', ['i'], 3367)]
LDEs formed:0

distinct LDEs:
ix=ix
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= nv  ++i
induction variable: ['i']
{
L3368: (DY[iy]=,w) (DX[ix]+,r) (DY[iy],r) 
}
array table
-----------------------------------------------
DX -> [('[ix]', 'r', 'not normalized', ['i'], 3368)]
LDEs formed:0

DY -> [('[iy]', 'w', 'not normalized', ['i'], 3368), ('[iy]', 'r', 'not normalized', ['i'], 3368)]
LDEs formed:2

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *n  ++i
induction variable: ['i']
{
L3369: (DX[ix],r) (DY[i],r) 
L3370: (DY[i]=,w) (DX[ix],r) 
L3371: (ind[i-1]=,w) 
}
array table
-----------------------------------------------
ind -> [('[i-1]', 'w', 'normalized', ['i'], 3371)]
LDEs formed:1

DX -> [('[ix]', 'r', 'not normalized', ['i'], 3369), ('[ix]', 'r', 'not normalized', ['i'], 3370)]
LDEs formed:0

DY -> [('[i]', 'r', 'normalized', ['i'], 3369), ('[i]', 'w', 'normalized', ['i'], 3370)]
LDEs formed:2

distinct LDEs:
i1=i2
i1-1=i2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i2 < 0 ? i >= i1 : i <= i1  i += i2
induction variable: ['i']
{
L3371: (DX[i]=,w) (DX[i],r) 
}
array table
-----------------------------------------------
DX -> [('[i]', 'w', 'normalized', ['i'], 3371), ('[i]', 'r', 'normalized', ['i'], 3371)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= i1  ++j
induction variable: ['j']
{
	loop info: i = 1  i <= i2  ++i
	induction variable: ['j', 'i']
	{
	L3372: (B[ib]=,w) (A[ia + i],r) 
	}
 }
array table
-----------------------------------------------
A -> [('[ia + i]', 'r', 'not normalized', ['j', 'i'], 3372)]
LDEs formed:0

B -> [('[ib]', 'w', 'not normalized', ['j', 'i'], 3372)]
LDEs formed:1

distinct LDEs:
ib=ib
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L3373: (IN[kk],r) 
L3374: (OUT[kk]=,w) 
}
array table
-----------------------------------------------
OUT -> [('[kk]', 'w', 'not normalized', ['k'], 3374)]
LDEs formed:1

IN -> [('[kk]', 'r', 'not normalized', ['k'], 3373)]
LDEs formed:0

distinct LDEs:
kk=kk
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L3374: (IN[kk],r) 
L3375: (out[kk]=,w) 
}
array table
-----------------------------------------------
out -> [('[kk]', 'w', 'not normalized', ['k'], 3375)]
LDEs formed:1

IN -> [('[kk]', 'r', 'not normalized', ['k'], 3374)]
LDEs formed:0

distinct LDEs:
kk=kk
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *n  ++i
induction variable: ['i']
{
L3375: (DY[iy]=,w) (DX[ix],r) 
}
array table
-----------------------------------------------
DX -> [('[ix]', 'r', 'not normalized', ['i'], 3375)]
LDEs formed:0

DY -> [('[iy]', 'w', 'not normalized', ['i'], 3375)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L3376: (DY[iy]*=,w) (DX[ix],r) 
}
array table
-----------------------------------------------
DX -> [('[ix]', 'r', 'not normalized', ['i'], 3376)]
LDEs formed:0

DY -> [('[iy]', 'w', 'not normalized', ['i'], 3376)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i2 < 0 ? i >= i1 : i <= i1  i += i2
induction variable: ['i']
{
L3377: (DX[i]=,w) (DX[i],r) 
}
array table
-----------------------------------------------
DX -> [('[i]', 'w', 'normalized', ['i'], 3377), ('[i]', 'r', 'normalized', ['i'], 3377)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L3378: (A[j * (*na) ],r) 
L3379: (V[iv]=,w) 
}
array table
-----------------------------------------------
A -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3378)]
LDEs formed:0

V -> [('[iv]', 'w', 'not normalized', ['j'], 3379)]
LDEs formed:1

distinct LDEs:
iv=iv
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *m  ++i
induction variable: ['i']
{
L3380: (A[i],r) 
L3381: (V[iv]=,w) 
}
array table
-----------------------------------------------
A -> [('[i]', 'r', 'normalized', ['i'], 3380)]
LDEs formed:0

V -> [('[iv]', 'w', 'not normalized', ['i'], 3381)]
LDEs formed:1

distinct LDEs:
iv=iv
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *n  ++j
induction variable: ['j']
{
L3382: (v[iv]=,w) (A[j * (*na) ],r) 
}
array table
-----------------------------------------------
A -> [('[j * (*na) ]', 'r', 'not normalized', ['j'], 3382)]
LDEs formed:0

v -> [('[iv]', 'w', 'not normalized', ['j'], 3382)]
LDEs formed:1

distinct LDEs:
iv=iv
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *m  ++i
induction variable: ['i']
{
L3383: (v[iv]=,w) (A[i],r) 
}
array table
-----------------------------------------------
A -> [('[i]', 'r', 'normalized', ['i'], 3383)]
LDEs formed:0

v -> [('[iv]', 'w', 'not normalized', ['i'], 3383)]
LDEs formed:1

distinct LDEs:
iv=iv
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=FIRST j<=LAST j++
induction variable: ['j']
{
L3384: (RES[i++]=,w) 
}
array table
-----------------------------------------------
RES -> [('[i++]', 'w', 'not normalized', ['j'], 3384)]
LDEs formed:1

distinct LDEs:
i++=i++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=FIRST j>=LAST j+=STEP
induction variable: ['j']
{
L3385: (RES[i++]=,w) 
}
array table
-----------------------------------------------
RES -> [('[i++]', 'w', 'not normalized', ['j'], 3385)]
LDEs formed:1

distinct LDEs:
i++=i++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=FIRST j<=LAST j+=STEP
induction variable: ['j']
{
L3386: (RES[i++]=,w) 
}
array table
-----------------------------------------------
RES -> [('[i++]', 'w', 'not normalized', ['j'], 3386)]
LDEs formed:1

distinct LDEs:
i++=i++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= nv  ++i
induction variable: ['i']
{
L3387: (DY[iy]=,w) (DX[ix],r) (DY[iy],r) 
}
array table
-----------------------------------------------
DX -> [('[ix]', 'r', 'not normalized', ['i'], 3387)]
LDEs formed:0

DY -> [('[iy]', 'w', 'not normalized', ['i'], 3387), ('[iy]', 'r', 'not normalized', ['i'], 3387)]
LDEs formed:2

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= nv  ++i
induction variable: ['i']
{
L3388: (DX[iy]=,w) (DX[ix],r) 
}
array table
-----------------------------------------------
DX -> [('[iy]', 'w', 'not normalized', ['i'], 3388), ('[ix]', 'r', 'not normalized', ['i'], 3388)]
LDEs formed:2

distinct LDEs:
iy=iy
iy=ix
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m i++
induction variable: ['i']
{
L3389: (B[i]=,w) (A[i+(j-1)*m],r) 
}
array table
-----------------------------------------------
A -> [('[i+(j-1)*m]', 'r', 'not normalized', ['i'], 3389)]
LDEs formed:0

B -> [('[i]', 'w', 'normalized', ['i'], 3389)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

L3390: (XR[ir2 + i]=,w) (X2[i2 + i],r) 
}
array table
-----------------------------------------------
XR -> [('[ir2 + i]', 'w', 'not normalized', ['j', 'i'], 3390)]
LDEs formed:1

X2 -> [('[i2 + i]', 'r', 'not normalized', ['j', 'i'], 3390)]
LDEs formed:0

distinct LDEs:
ir2 + i1=ir2 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l = 1  l <= *m  ++l
induction variable: ['l']
{
L3391: (DY[l]=,w) (DX[l],r) (DK[l]=,w) 
	loop info: k = 1  k < *n  ++k
	induction variable: ['l', 'k']
	{
	L3392: (DX[l+k*ix],r) (DY[l],r) 
	L3393: (DY[l]=,w) (DX[l+k*ix],r) (DK[l]=,w) 
	}
 }
array table
-----------------------------------------------
DK -> [('[l]', 'w', 'normalized', ['l', 'k'], 3391), ('[l]', 'w', 'normalized', ['l', 'k'], 3393)]
LDEs formed:3

DX -> [('[l]', 'r', 'normalized', ['l', 'k'], 3391), ('[l+k*ix]', 'r', 'not normalized', ['l', 'k'], 3392), ('[l+k*ix]', 'r', 'not normalized', ['l', 'k'], 3393)]
LDEs formed:0

DY -> [('[l]', 'w', 'normalized', ['l', 'k'], 3391), ('[l]', 'r', 'normalized', ['l', 'k'], 3392), ('[l]', 'w', 'normalized', ['l', 'k'], 3393)]
LDEs formed:5

distinct LDEs:
l1=l2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L3394: (DY[1+k*iy]=,w) (DX[1+kk],r) (DK[1+k*iy]=,w) 
	loop info: l = 2  l <= *m  ++l
	induction variable: ['k', 'l']
	{
	L3395: (DX[l+kk],r) (DY[1+k*iy],r) 
	L3396: (DY[1+k*iy]=,w) (DX[l+kk],r) (DK[1+k*iy]=,w) 
	}
 }
array table
-----------------------------------------------
DK -> [('[1+k*iy]', 'w', 'not normalized', ['k', 'l'], 3394), ('[1+k*iy]', 'w', 'not normalized', ['k', 'l'], 3396)]
LDEs formed:3

DX -> [('[1+kk]', 'r', 'not normalized', ['k', 'l'], 3394), ('[l+kk]', 'r', 'not normalized', ['k', 'l'], 3395), ('[l+kk]', 'r', 'not normalized', ['k', 'l'], 3396)]
LDEs formed:0

DY -> [('[1+k*iy]', 'w', 'not normalized', ['k', 'l'], 3394), ('[1+k*iy]', 'r', 'not normalized', ['k', 'l'], 3395), ('[1+k*iy]', 'w', 'not normalized', ['k', 'l'], 3396)]
LDEs formed:5

distinct LDEs:
1+k1*iy=1+k2*iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
	loop info: l = 1  l <= *m  ++l
	induction variable: ['k', 'l']
	{
	L3397: (DX[l+kk],r) (DY[1],r) 
	L3398: (DY[1]=,w) (DX[l+kk],r) (DK[1]=,w) 
	}
 }
array table
-----------------------------------------------
DK -> [('[1]', 'w', 'normalized', ['k', 'l'], 3398)]
LDEs formed:1

DX -> [('[l+kk]', 'r', 'not normalized', ['k', 'l'], 3397), ('[l+kk]', 'r', 'not normalized', ['k', 'l'], 3398)]
LDEs formed:0

DY -> [('[1]', 'r', 'normalized', ['k', 'l'], 3397), ('[1]', 'w', 'normalized', ['k', 'l'], 3398)]
LDEs formed:2

distinct LDEs:
1=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = kmin  k <= srhs  k++
induction variable: ['k']
{
L3399: (Ids[1 + Pt * nsiz]=,w) 
L3400: (Ids[2 + Pt * nsiz]=,w) 
L3401: (Ids[3 + Pt * nsiz]=,w) 
}
array table
-----------------------------------------------
Ids -> [('[1 + Pt * nsiz]', 'w', 'not normalized', ['k'], 3399), ('[2 + Pt * nsiz]', 'w', 'not normalized', ['k'], 3400), ('[3 + Pt * nsiz]', 'w', 'not normalized', ['k'], 3401)]
LDEs formed:6

distinct LDEs:
2 + Pt * nsiz=2 + Pt * nsiz
3 + Pt * nsiz=3 + Pt * nsiz
1 + Pt * nsiz=2 + Pt * nsiz
2 + Pt * nsiz=3 + Pt * nsiz
1 + Pt * nsiz=3 + Pt * nsiz
1 + Pt * nsiz=1 + Pt * nsiz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<n  i++
induction variable: ['i']
{
L3402: (d1[i],r) (d2[i],r) 
}
array table
-----------------------------------------------
d2 -> [('[i]', 'r', 'normalized', ['i'], 3402)]
LDEs formed:0

d1 -> [('[i]', 'r', 'normalized', ['i'], 3402)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<n  i++
induction variable: ['i']
{
L3403: (l1[i],r) (l2[i],r) 
}
array table
-----------------------------------------------
l2 -> [('[i]', 'r', 'normalized', ['i'], 3403)]
LDEs formed:0

l1 -> [('[i]', 'r', 'normalized', ['i'], 3403)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<n  i++
induction variable: ['i']
{
L3404: (d1[i],r) (d2[i],r) 
}
array table
-----------------------------------------------
d2 -> [('[i]', 'r', 'normalized', ['i'], 3404)]
LDEs formed:0

d1 -> [('[i]', 'r', 'normalized', ['i'], 3404)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i <n  ++i
induction variable: ['i']
{
L3405: (A[i],r) (B[i],r) 
}
array table
-----------------------------------------------
A -> [('[i]', 'r', 'normalized', ['i'], 3405)]
LDEs formed:0

B -> [('[i]', 'r', 'normalized', ['i'], 3405)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++
induction variable: ['i']
{
	loop info:  j= 0   j < p   j++ 
	induction variable: ['i', 'j']
	{
	L3406: (ind[i+n*j]=,w) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i+n*j]', 'w', 'not normalized', ['i', 'j'], 3406)]
LDEs formed:1

distinct LDEs:
i1+n*j1=i2+n*j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++
induction variable: ['i']
{
	loop info:  j= 0   j < p   j++ 
	induction variable: ['i', 'j']
	{
	L3407: (ind[i+n*j]=,w) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i+n*j]', 'w', 'not normalized', ['i', 'j'], 3407)]
LDEs formed:1

distinct LDEs:
i1+n*j1=i2+n*j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L3408: (dy[iy]=,w) (dx[ix],r) 
}
array table
-----------------------------------------------
dx -> [('[ix]', 'r', 'not normalized', ['i'], 3408)]
LDEs formed:0

dy -> [('[iy]', 'w', 'not normalized', ['i'], 3408)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<*n i++
induction variable: ['i']
{
L3409: (y[iy1]=,w) (x[ix1],r) 
}
array table
-----------------------------------------------
y -> [('[iy1]', 'w', 'not normalized', ['i'], 3409)]
LDEs formed:1

x -> [('[ix1]', 'r', 'not normalized', ['i'], 3409)]
LDEs formed:0

distinct LDEs:
iy1=iy1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++
induction variable: ['i']
{
	loop info:  j= 0   j < p   j++ 
	induction variable: ['i', 'j']
	{
	L3410: (ind[i+n*j]=,w) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i+n*j]', 'w', 'not normalized', ['i', 'j'], 3410)]
LDEs formed:1

distinct LDEs:
i1+n*j1=i2+n*j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *n  i++
induction variable: ['i']
{
L3411: (dy[iy]=,w) (dx[ix],r) 
}
array table
-----------------------------------------------
dx -> [('[ix]', 'r', 'not normalized', ['i'], 3411)]
LDEs formed:0

dy -> [('[iy]', 'w', 'not normalized', ['i'], 3411)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++
induction variable: ['i']
{
	loop info:  j= 0   j < p   j++ 
	induction variable: ['i', 'j']
	{
	L3412: (ind[i+n*j]=,w) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i+n*j]', 'w', 'not normalized', ['i', 'j'], 3412)]
LDEs formed:1

distinct LDEs:
i1+n*j1=i2+n*j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++
induction variable: ['i']
{
	loop info:  j= 0   j < p   j++ 
	induction variable: ['i', 'j']
	{
	L3413: (ind[i+n*j]=,w) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i+n*j]', 'w', 'not normalized', ['i', 'j'], 3413)]
LDEs formed:1

distinct LDEs:
i1+n*j1=i2+n*j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = j + 1  i <= i1  ++i
induction variable: ['i']
{
L3414: (x[i * x_dim1 + 1],r) 
L3415: (x[i * x_dim1 + 1],r) 
}
array table
-----------------------------------------------
x -> [('[i * x_dim1 + 1]', 'r', 'not normalized', ['i'], 3414), ('[i * x_dim1 + 1]', 'r', 'not normalized', ['i'], 3415)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<*n i++
induction variable: ['i']
{
L3416: (y[iy1]=,w) (x[ix1],r) 
}
array table
-----------------------------------------------
y -> [('[iy1]', 'w', 'not normalized', ['i'], 3416)]
LDEs formed:1

x -> [('[ix1]', 'r', 'not normalized', ['i'], 3416)]
LDEs formed:0

distinct LDEs:
iy1=iy1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < len  i++
induction variable: ['i']
{
L3417: (pStr[i],r) (pStr[i],r) 
L3418: (pStr[i]-,r) 
L3419: (pStr[i],r) (pStr[i],r) 
L3420: (pStr[i]-,r) 
L3421: (pStr[i],r) (pStr[i],r) 
L3422: (pStr[i]-,r) 
}
array table
-----------------------------------------------
pStr -> [('[i]', 'r', 'normalized', ['i'], 3417), ('[i]', 'r', 'normalized', ['i'], 3417), ('[i]', 'r', 'normalized', ['i'], 3418), ('[i]', 'r', 'normalized', ['i'], 3419), ('[i]', 'r', 'normalized', ['i'], 3419), ('[i]', 'r', 'normalized', ['i'], 3420), ('[i]', 'r', 'normalized', ['i'], 3421), ('[i]', 'r', 'normalized', ['i'], 3421), ('[i]', 'r', 'normalized', ['i'], 3422)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = i - 1  j > (i / 2 - t)  j--
induction variable: ['j']
{
L3423: (chResult[j],r) 
L3424: (chResult[j]=,w) (chResult[k],r) 
L3425: (chResult[k++]=,w) 
}
array table
-----------------------------------------------
chResult -> [('[j]', 'r', 'normalized', ['j'], 3423), ('[j]', 'w', 'normalized', ['j'], 3424), ('[k]', 'r', 'not normalized', ['j'], 3424), ('[k++]', 'w', 'not normalized', ['j'], 3425)]
LDEs formed:7

distinct LDEs:
k++=k++
j1=j2
j1=k++
k=k++
j1=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbDigits - lenConvertedValue  i++
induction variable: ['i']
{
L3426: (tmp[i]=,w) 
}
array table
-----------------------------------------------
tmp -> [('[i]', 'w', 'normalized', ['i'], 3426)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mn  i++
induction variable: ['i']
{
L3427: (dValues[i],r) 
L3428: (dValues[i],r) 
L3429: (dValues[i],r) 
L3430: (dValues[i],r) 
L3431: (dValues[i],r) (dValues[i],r) 
}
array table
-----------------------------------------------
dValues -> [('[i]', 'r', 'normalized', ['i'], 3427), ('[i]', 'r', 'normalized', ['i'], 3428), ('[i]', 'r', 'normalized', ['i'], 3429), ('[i]', 'r', 'normalized', ['i'], 3430), ('[i]', 'r', 'normalized', ['i'], 3431), ('[i]', 'r', 'normalized', ['i'], 3431)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < mn  i++
induction variable: ['i']
{
L3432: (convertedValues[i]=,w) (dValues[i],r) 
}
array table
-----------------------------------------------
dValues -> [('[i]', 'r', 'normalized', ['i'], 3432)]
LDEs formed:0

convertedValues -> [('[i]', 'w', 'normalized', ['i'], 3432)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++
induction variable: ['i']
{
	loop info:  j= 0   j < p   j++ 
	induction variable: ['i', 'j']
	{
	L3433: (ind[i+n*j]=,w) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i+n*j]', 'w', 'not normalized', ['i', 'j'], 3433)]
LDEs formed:1

distinct LDEs:
i1+n*j1=i2+n*j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *n  i++
induction variable: ['i']
{
L3434: (y[iy1]=,w) (x[ix1],r) 
L3435: (z[iz1]=,w) 
}
array table
-----------------------------------------------
y -> [('[iy1]', 'w', 'not normalized', ['i'], 3434)]
LDEs formed:1

x -> [('[ix1]', 'r', 'not normalized', ['i'], 3434)]
LDEs formed:0

z -> [('[iz1]', 'w', 'not normalized', ['i'], 3435)]
LDEs formed:1

distinct LDEs:
iy1=iy1
iz1=iz1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < *n  i++
induction variable: ['i']
{
L3436: (x[i],r) (y[i],r) 
L3437: (res[i]=,w) 
L3438: (res[i]=,w) (x[i]==,r) (y[i],r) 
L3439: (res[i]=,w) (x[i]==,r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 3436), ('[i]', 'r', 'normalized', ['i'], 3438), ('[i]', 'r', 'normalized', ['i'], 3439)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 3436), ('[i]', 'r', 'normalized', ['i'], 3438), ('[i]', 'r', 'normalized', ['i'], 3439)]
LDEs formed:0

res -> [('[i]', 'w', 'normalized', ['i'], 3437), ('[i]', 'w', 'normalized', ['i'], 3438), ('[i]', 'w', 'normalized', ['i'], 3439)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < *n  i++
induction variable: ['i']
{
L3440: (x[i],r) (y[i],r) 
L3441: (res[i]=,w) 
L3442: (res[i]=,w) (x[i],r) (y[i],r) 
L3443: (res[i]=,w) (x[i],r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 3440), ('[i]', 'r', 'normalized', ['i'], 3442), ('[i]', 'r', 'normalized', ['i'], 3443)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 3440), ('[i]', 'r', 'normalized', ['i'], 3442), ('[i]', 'r', 'normalized', ['i'], 3443)]
LDEs formed:0

res -> [('[i]', 'w', 'normalized', ['i'], 3441), ('[i]', 'w', 'normalized', ['i'], 3442), ('[i]', 'w', 'normalized', ['i'], 3443)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < *n  i++
induction variable: ['i']
{
L3444: (x[i],r) (y[i],r) 
L3445: (res[i]=,w) 
L3446: (res[i]=,w) (x[i],r) (y[i],r) 
L3447: (res[i]=,w) (x[i],r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 3444), ('[i]', 'r', 'normalized', ['i'], 3446), ('[i]', 'r', 'normalized', ['i'], 3447)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 3444), ('[i]', 'r', 'normalized', ['i'], 3446), ('[i]', 'r', 'normalized', ['i'], 3447)]
LDEs formed:0

res -> [('[i]', 'w', 'normalized', ['i'], 3445), ('[i]', 'w', 'normalized', ['i'], 3446), ('[i]', 'w', 'normalized', ['i'], 3447)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < *n  i++
induction variable: ['i']
{
L3448: (x[i],r) (y[i],r) 
L3449: (res[i]=,w) 
L3450: (res[i]=,w) (x[i],r) (y[i],r) 
L3451: (res[i]=,w) (x[i],r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 3448), ('[i]', 'r', 'normalized', ['i'], 3450), ('[i]', 'r', 'normalized', ['i'], 3451)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 3448), ('[i]', 'r', 'normalized', ['i'], 3450), ('[i]', 'r', 'normalized', ['i'], 3451)]
LDEs formed:0

res -> [('[i]', 'w', 'normalized', ['i'], 3449), ('[i]', 'w', 'normalized', ['i'], 3450), ('[i]', 'w', 'normalized', ['i'], 3451)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < *n  i++
induction variable: ['i']
{
L3452: (x[i],r) (y[i],r) 
L3453: (res[i]=,w) 
L3454: (res[i]=,w) (x[i],r) (y[i],r) 
L3455: (res[i]=,w) (x[i],r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 3452), ('[i]', 'r', 'normalized', ['i'], 3454), ('[i]', 'r', 'normalized', ['i'], 3455)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 3452), ('[i]', 'r', 'normalized', ['i'], 3454), ('[i]', 'r', 'normalized', ['i'], 3455)]
LDEs formed:0

res -> [('[i]', 'w', 'normalized', ['i'], 3453), ('[i]', 'w', 'normalized', ['i'], 3454), ('[i]', 'w', 'normalized', ['i'], 3455)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i < *n  i++
induction variable: ['i']
{
L3456: (x[i],r) (y[i],r) 
L3457: (res[i]=,w) 
L3458: (res[i]=,w) (x[i],r) (y[i],r) 
L3459: (res[i]=,w) (x[i],r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 3456), ('[i]', 'r', 'normalized', ['i'], 3458), ('[i]', 'r', 'normalized', ['i'], 3459)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 3456), ('[i]', 'r', 'normalized', ['i'], 3458), ('[i]', 'r', 'normalized', ['i'], 3459)]
LDEs formed:0

res -> [('[i]', 'w', 'normalized', ['i'], 3457), ('[i]', 'w', 'normalized', ['i'], 3458), ('[i]', 'w', 'normalized', ['i'], 3459)]
LDEs formed:6

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L3460: (dy[iy]=,w) (dx[ix],r) 
}
array table
-----------------------------------------------
dx -> [('[ix]', 'r', 'not normalized', ['i'], 3460)]
LDEs formed:0

dy -> [('[iy]', 'w', 'not normalized', ['i'], 3460)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = j + 1  i <= i1  ++i
induction variable: ['i']
{
L3461: (x[i * x_dim1 + 1],r) 
L3462: (x[i * x_dim1 + 1],r) 
}
array table
-----------------------------------------------
x -> [('[i * x_dim1 + 1]', 'r', 'not normalized', ['i'], 3461), ('[i * x_dim1 + 1]', 'r', 'not normalized', ['i'], 3462)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *n  i++
induction variable: ['i']
{
L3463: (dy[iy]=,w) (dx[ix],r) 
}
array table
-----------------------------------------------
dx -> [('[ix]', 'r', 'not normalized', ['i'], 3463)]
LDEs formed:0

dy -> [('[iy]', 'w', 'not normalized', ['i'], 3463)]
LDEs formed:1

distinct LDEs:
iy=iy
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++
induction variable: ['i']
{
	loop info:  j= 0   j < p   j++ 
	induction variable: ['i', 'j']
	{
	L3464: (ind[i+n*j]=,w) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i+n*j]', 'w', 'not normalized', ['i', 'j'], 3464)]
LDEs formed:1

distinct LDEs:
i1+n*j1=i2+n*j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < n   i++
induction variable: ['i']
{
	loop info:  j= 0   j < p   j++ 
	induction variable: ['i', 'j']
	{
	L3465: (ind[i+n*j]=,w) 
	}
 }
array table
-----------------------------------------------
ind -> [('[i+n*j]', 'w', 'not normalized', ['i', 'j'], 3465)]
LDEs formed:1

distinct LDEs:
i1+n*j1=i2+n*j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m * n  i++
induction variable: ['i']
{
L3466: (dResults[i]=,w) (pStrs[i],r) 
}
array table
-----------------------------------------------
pStrs -> [('[i]', 'r', 'normalized', ['i'], 3466)]
LDEs formed:0

dResults -> [('[i]', 'w', 'normalized', ['i'], 3466)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < listLen - 1  i++
induction variable: ['i']
{
L3467: (types[i],r) 
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j']
				{
					loop info: k = 0  k < nbCol  k++
					induction variable: ['i', 'j', 'k']
					{
					L3468: (real[k * nbRow + j]=,w) (element[k],r) 
					}
 				}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
				{
					loop info: k = 0  k < nbCol  k++
					induction variable: ['i', 'j', 'k']
					{
					L3469: (real[k * nbRow + j]=,w) (elementR[k],r) 
					L3470: (imag[k * nbRow + j]=,w) (elementI[k],r) 
					}
 				}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
				{
					loop info: k = 0  k < nbCol  k++
					induction variable: ['i', 'j', 'k']
					{
					L3471: (nbCoef[k * nbRow + j]=,w) 
					L3472: (real[k * nbRow + j]=,w) 
					L3473: (real[k * nbRow + j],r) 
					}
 				}
	loop info: j = 0  j < nbRow * nbCol  j++
	induction variable: ['i', 'j', 'k']
				{
				L3474: (real[j],r) 
				}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
				{
					loop info: k = 0  k < nbCol  k++
					induction variable: ['i', 'j', 'k']
					{
					L3475: (nbCoef[k * nbRow + j]=,w) 
					L3476: (real[k * nbRow + j]=,w) 
					L3477: (imag[k * nbRow + j]=,w) 
					L3478: (real[k * nbRow + j],r) 
					L3479: (imag[k * nbRow + j],r) 
					}
 				}
	loop info: j = 0  j < nbRow * nbCol  j++
	induction variable: ['i', 'j', 'k']
				{
				L3480: (real[j],r) 
				L3481: (imag[j],r) 
				}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
			{
				loop info: k = 0  k < nbCol  k++
				induction variable: ['i', 'j', 'k']
				{
				L3482: (b[k * nbRow + j]=,w) (element[k],r) 
				}
 			}
L3483: (dims[0],r) (dims[1],r) 
L3484: (dims[0],r) (dims[1],r) 
L3485: (dims[0],r) (dims[1],r) 
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
					{
						loop info: k = 0  k < nbCol  k++
						induction variable: ['i', 'j', 'k']
						{
						L3486: (data[k * nbRow + j]=,w) (element[k],r) 
						}
 					}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
					{
						loop info: k = 0  k < nbCol  k++
						induction variable: ['i', 'j', 'k']
						{
						L3487: (data[k * nbRow + j]=,w) (element[k],r) 
						}
 					}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
					{
						loop info: k = 0  k < nbCol  k++
						induction variable: ['i', 'j', 'k']
						{
						L3488: (data[k * nbRow + j]=,w) (element[k],r) 
						}
 					}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
					{
						loop info: k = 0  k < nbCol  k++
						induction variable: ['i', 'j', 'k']
						{
						L3489: (data[k * nbRow + j]=,w) (element[k],r) 
						}
 					}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
					{
						loop info: k = 0  k < nbCol  k++
						induction variable: ['i', 'j', 'k']
						{
						L3490: (data[k * nbRow + j]=,w) (element[k],r) 
						}
 					}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
					{
						loop info: k = 0  k < nbCol  k++
						induction variable: ['i', 'j', 'k']
						{
						L3491: (data[k * nbRow + j]=,w) (element[k],r) 
						}
 					}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
					{
						loop info: k = 0  k < nbCol  k++
						induction variable: ['i', 'j', 'k']
						{
						L3492: (data[k * nbRow + j]=,w) (element[k],r) 
						}
 					}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
					{
						loop info: k = 0  k < nbCol  k++
						induction variable: ['i', 'j', 'k']
						{
						L3493: (data[k * nbRow + j]=,w) (element[k],r) 
						}
 					}
	loop info:   j < nbRow  j++
	induction variable: ['i', 'j', 'k']
			{
				loop info: k = 0  k < nbCol  k++
				induction variable: ['i', 'j', 'k']
				{
				L3494: (strings[k * nbRow + j]=,w) 
				L3495: (strings[k * nbRow + j],r) 
				}
 			}
	loop info: j = 0  j < nbRow * nbCol  j++
	induction variable: ['i', 'j', 'k']
			{
			L3496: (strings[j],r) 
			}
 }
array table
-----------------------------------------------
real -> [('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3468), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3469), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3472), ('[k * nbRow + j]', 'r', 'not normalized', ['i', 'j', 'k'], 3473), ('[j]', 'r', 'normalized', ['i', 'j', 'k'], 3474), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3476), ('[k * nbRow + j]', 'r', 'not normalized', ['i', 'j', 'k'], 3478), ('[j]', 'r', 'normalized', ['i', 'j', 'k'], 3480)]
LDEs formed:26

elementR -> [('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3469)]
LDEs formed:0

b -> [('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3482)]
LDEs formed:1

imag -> [('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3470), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3477), ('[k * nbRow + j]', 'r', 'not normalized', ['i', 'j', 'k'], 3479), ('[j]', 'r', 'normalized', ['i', 'j', 'k'], 3481)]
LDEs formed:7

strings -> [('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3494), ('[k * nbRow + j]', 'r', 'not normalized', ['i', 'j', 'k'], 3495), ('[j]', 'r', 'normalized', ['i', 'j', 'k'], 3496)]
LDEs formed:3

element -> [('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3468), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3482), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3486), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3487), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3488), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3489), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3490), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3491), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3492), ('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3493)]
LDEs formed:0

dims -> [('[0]', 'r', 'normalized', ['i', 'j', 'k'], 3483), ('[1]', 'r', 'normalized', ['i', 'j', 'k'], 3483), ('[0]', 'r', 'normalized', ['i', 'j', 'k'], 3484), ('[1]', 'r', 'normalized', ['i', 'j', 'k'], 3484), ('[0]', 'r', 'normalized', ['i', 'j', 'k'], 3485), ('[1]', 'r', 'normalized', ['i', 'j', 'k'], 3485)]
LDEs formed:0

elementI -> [('[k]', 'r', 'normalized', ['i', 'j', 'k'], 3470)]
LDEs formed:0

data -> [('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3486), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3487), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3488), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3489), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3490), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3491), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3492), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3493)]
LDEs formed:36

nbCoef -> [('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3471), ('[k * nbRow + j]', 'w', 'not normalized', ['i', 'j', 'k'], 3475)]
LDEs formed:3

types -> [('[i]', 'r', 'normalized', ['i', 'j', 'k'], 3467)]
LDEs formed:0

distinct LDEs:
k1 * nbRow + j1=k2 * nbRow + j2
k1 * nbRow + j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<size1  i++
induction variable: ['i']
{
L3468: (arg1[i]=,w) 
L3469: (arg1[i],r) 
}
array table
-----------------------------------------------
arg1 -> [('[i]', 'w', 'normalized', ['i'], 3468), ('[i]', 'r', 'normalized', ['i'], 3469)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<size1-1  i++
induction variable: ['i']
{
L3470: (arg1[i],r) 
L3471: (arg1[i]=,w) 
}
array table
-----------------------------------------------
arg1 -> [('[i]', 'r', 'normalized', ['i'], 3470), ('[i]', 'w', 'normalized', ['i'], 3471)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3472: (arg2[j * arg3 + i]=,w) 
	L3473: (arg2[j * arg3 + i],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3472), ('[j * arg3 + i]', 'r', 'not normalized', ['i', 'j'], 3473)]
LDEs formed:2

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3 * arg4  i++
induction variable: ['i']
{
L3474: (arg2[i],r) 
}
array table
-----------------------------------------------
arg2 -> [('[i]', 'r', 'normalized', ['i'], 3474)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3475: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3475)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3475)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg6  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg7  j++
	induction variable: ['i', 'j']
	{
	L3476: (arg5[j * arg6 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg5 -> [('[j * arg6 + i]', 'w', 'not normalized', ['i', 'j'], 3476)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3476)]
LDEs formed:0

distinct LDEs:
j1 * arg6 + i1=j2 * arg6 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3477: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3477)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3477)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3478: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3478)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3478)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3479: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3479)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3479)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3480: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3480)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3480)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3481: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3481)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3481)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3482: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3482)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3482)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3483: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3483)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3483)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg3  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg4  j++
	induction variable: ['i', 'j']
	{
	L3484: (arg2[j * arg3 + i]=,w) (element[j],r) 
	}
 }
array table
-----------------------------------------------
arg2 -> [('[j * arg3 + i]', 'w', 'not normalized', ['i', 'j'], 3484)]
LDEs formed:1

element -> [('[j]', 'r', 'normalized', ['i', 'j'], 3484)]
LDEs formed:0

distinct LDEs:
j1 * arg3 + i1=j2 * arg3 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg4  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg5  j++
	induction variable: ['i', 'j']
	{
	L3485: (arg6[j * arg4 + i]=,w) 
	L3486: (arg3[j * arg4 + i]=,w) (arg6[j * arg4 + i],r) 
	L3487: (arg3[j * arg4 + i],r) (arg6[j * arg4 + i],r) 
	}
 }
array table
-----------------------------------------------
arg3 -> [('[j * arg4 + i]', 'w', 'not normalized', ['i', 'j'], 3486), ('[j * arg4 + i]', 'r', 'not normalized', ['i', 'j'], 3487)]
LDEs formed:2

arg6 -> [('[j * arg4 + i]', 'w', 'not normalized', ['i', 'j'], 3485), ('[j * arg4 + i]', 'r', 'not normalized', ['i', 'j'], 3486), ('[j * arg4 + i]', 'r', 'not normalized', ['i', 'j'], 3487)]
LDEs formed:3

distinct LDEs:
j1 * arg4 + i1=j2 * arg4 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg4 * arg5  i++
induction variable: ['i']
{
L3488: (arg3[i],r) 
}
array table
-----------------------------------------------
arg3 -> [('[i]', 'r', 'normalized', ['i'], 3488)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg4  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg5  j++
	induction variable: ['i', 'j']
	{
	L3489: (arg6[j * arg4 + i]=,w) 
	L3490: (arg3[j * arg4 + i]=,w) (arg6[j * arg4 + i],r) 
	L3491: (arg3[j * arg4 + i],r) (arg6[j * arg4 + i],r) 
	}
 }
array table
-----------------------------------------------
arg3 -> [('[j * arg4 + i]', 'w', 'not normalized', ['i', 'j'], 3490), ('[j * arg4 + i]', 'r', 'not normalized', ['i', 'j'], 3491)]
LDEs formed:2

arg6 -> [('[j * arg4 + i]', 'w', 'not normalized', ['i', 'j'], 3489), ('[j * arg4 + i]', 'r', 'not normalized', ['i', 'j'], 3490), ('[j * arg4 + i]', 'r', 'not normalized', ['i', 'j'], 3491)]
LDEs formed:3

distinct LDEs:
j1 * arg4 + i1=j2 * arg4 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg8  i++
induction variable: ['i']
{
	loop info: j = 0  j < arg9  j++
	induction variable: ['i', 'j']
	{
	L3492: (arg10[j * arg8 + i]=,w) 
	L3493: (arg7[j * arg8 + i]=,w) (arg10[j * arg8 + i],r) 
	L3494: (arg7[j * arg8 + i],r) (arg10[j * arg8 + i],r) 
	}
 }
array table
-----------------------------------------------
arg10 -> [('[j * arg8 + i]', 'w', 'not normalized', ['i', 'j'], 3492), ('[j * arg8 + i]', 'r', 'not normalized', ['i', 'j'], 3493), ('[j * arg8 + i]', 'r', 'not normalized', ['i', 'j'], 3494)]
LDEs formed:3

arg7 -> [('[j * arg8 + i]', 'w', 'not normalized', ['i', 'j'], 3493), ('[j * arg8 + i]', 'r', 'not normalized', ['i', 'j'], 3494)]
LDEs formed:2

distinct LDEs:
j1 * arg8 + i1=j2 * arg8 + i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg4 * arg5  i++
induction variable: ['i']
{
L3495: (arg3[i],r) 
}
array table
-----------------------------------------------
arg3 -> [('[i]', 'r', 'normalized', ['i'], 3495)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   i < arg8 * arg9  i++
induction variable: ['i']
{
L3496: (arg7[i],r) 
}
array table
-----------------------------------------------
arg7 -> [('[i]', 'r', 'normalized', ['i'], 3496)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (*nbRow) * (*nbCol)  i++
induction variable: ['i']
{
L3497: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 3497)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 3497)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<size2  i++
induction variable: ['i']
{
L3498: (arg2[i]=,w) 
L3499: (arg2[i],r) 
}
array table
-----------------------------------------------
arg2 -> [('[i]', 'w', 'normalized', ['i'], 3498), ('[i]', 'r', 'normalized', ['i'], 3499)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<size2-1  i++
induction variable: ['i']
{
L3500: (arg2[i],r) 
L3501: (arg2[i]=,w) 
}
array table
-----------------------------------------------
arg2 -> [('[i]', 'r', 'normalized', ['i'], 3500), ('[i]', 'w', 'normalized', ['i'], 3501)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n_label * m_label  i++
induction variable: ['i']
{
L3502: (label_list[i]=,w) (len_label[i]+,r) 
}
array table
-----------------------------------------------
label_list -> [('[i]', 'w', 'normalized', ['i'], 3502)]
LDEs formed:1

len_label -> [('[i]', 'r', 'normalized', ['i'], 3502)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n_label * m_label  i++
induction variable: ['i']
{
L3503: (label_list[i]=,w) (len_label[i]+,r) 
}
array table
-----------------------------------------------
label_list -> [('[i]', 'w', 'normalized', ['i'], 3503)]
LDEs formed:1

len_label -> [('[i]', 'r', 'normalized', ['i'], 3503)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *_piSize  i++
induction variable: ['i']
{
L3504: (_piValue[i]=,w) (tmp_dbl[i],r) 
}
array table
-----------------------------------------------
_piValue -> [('[i]', 'w', 'normalized', ['i'], 3504)]
LDEs formed:1

tmp_dbl -> [('[i]', 'r', 'normalized', ['i'], 3504)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iDefaultSize  i++
induction variable: ['i']
{
L3505: (_pdblValue[i]=,w) 
}
array table
-----------------------------------------------
_pdblValue -> [('[i]', 'w', 'normalized', ['i'], 3505)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iDefaultSize  i++
induction variable: ['i']
{
L3506: (_pdblValue[i]=,w) 
}
array table
-----------------------------------------------
_pdblValue -> [('[i]', 'w', 'normalized', ['i'], 3506)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iDefaultSize  i++
induction variable: ['i']
{
L3507: (_pdblValue[i]=,w) 
}
array table
-----------------------------------------------
_pdblValue -> [('[i]', 'w', 'normalized', ['i'], 3507)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iDefaultSize  i++
induction variable: ['i']
{
L3508: (_pdblValue[i]=,w) 
}
array table
-----------------------------------------------
_pdblValue -> [('[i]', 'w', 'normalized', ['i'], 3508)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iDefaultSize  i++
induction variable: ['i']
{
L3509: (_pdblValue[i]=,w) 
}
array table
-----------------------------------------------
_pdblValue -> [('[i]', 'w', 'normalized', ['i'], 3509)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iDefaultSize  i++
induction variable: ['i']
{
L3510: (_pdblValue[i]=,w) 
}
array table
-----------------------------------------------
_pdblValue -> [('[i]', 'w', 'normalized', ['i'], 3510)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= _iNbParams  i++
induction variable: ['i']
{
L3511: (label_list[i]=,w) (_pstLabelNames[i-1],r) 
}
array table
-----------------------------------------------
_pstLabelNames -> [('[i-1]', 'r', 'normalized', ['i'], 3511)]
LDEs formed:0

label_list -> [('[i]', 'w', 'normalized', ['i'], 3511)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iNbValues  i++
induction variable: ['i']
{
L3512: (tmp_val[i]=,w) (_piValue[i],r) 
}
array table
-----------------------------------------------
_piValue -> [('[i]', 'r', 'normalized', ['i'], 3512)]
LDEs formed:0

tmp_val -> [('[i]', 'w', 'normalized', ['i'], 3512)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < n_label * m_label  i++
induction variable: ['i']
{
L3513: (label_list[i]=,w) (len_label[i]+,r) 
}
array table
-----------------------------------------------
label_list -> [('[i]', 'w', 'normalized', ['i'], 3513)]
LDEs formed:1

len_label -> [('[i]', 'r', 'normalized', ['i'], 3513)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m_label * n_label  i++
induction variable: ['i']
{
L3514: (label_list[i],r) 
L3515: (label_list[i],r) 
}
array table
-----------------------------------------------
label_list -> [('[i]', 'r', 'normalized', ['i'], 3514), ('[i]', 'r', 'normalized', ['i'], 3515)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n_label * m_label  i++
induction variable: ['i']
{
L3516: (label_list[i]=,w) (len_label[i]+,r) 
}
array table
-----------------------------------------------
label_list -> [('[i]', 'w', 'normalized', ['i'], 3516)]
LDEs formed:1

len_label -> [('[i]', 'r', 'normalized', ['i'], 3516)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m_label * n_label  i++
induction variable: ['i']
{
L3517: (label_list[i],r) 
L3518: (label_list[i],r) 
}
array table
-----------------------------------------------
label_list -> [('[i]', 'r', 'normalized', ['i'], 3517), ('[i]', 'r', 'normalized', ['i'], 3518)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i< block->insz[0] i++
induction variable: ['i']
{
L3519: (outptr[0][i]=,w) (z[i],r) 
L3520: (z[i]=,w) (inptr[0][i],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3520)]
LDEs formed:0

z -> [('[i]', 'r', 'normalized', ['i'], 3519), ('[i]', 'w', 'normalized', ['i'], 3520)]
LDEs formed:2

outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3519)]
LDEs formed:2

distinct LDEs:
0=0,i1=i2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L3520: (u1[ji],r) (u2[il],r) 
		}
	L3521: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 3521)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 3520)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 3520)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3521: (rpar[0],r) (rpar[1],r) 
L3522: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3522)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3521), ('[1]', 'r', 'normalized', ['i'], 3521)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3522: (rpar[0],r) (rpar[1],r) 
L3523: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3523)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3522), ('[1]', 'r', 'normalized', ['i'], 3522)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3523: (rpar[0],r) (rpar[1],r) 
L3524: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3524)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3523), ('[1]', 'r', 'normalized', ['i'], 3523)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3524: (rpar[0],r) (rpar[1],r) 
L3525: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3525)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3524), ('[1]', 'r', 'normalized', ['i'], 3524)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3525: (rpar[0],r) (rpar[1],r) 
L3526: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3526)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3525), ('[1]', 'r', 'normalized', ['i'], 3525)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3526: (rpar[0],r) (rpar[1],r) 
L3527: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3527)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3526), ('[1]', 'r', 'normalized', ['i'], 3526)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3527: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3527)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3527)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nu*nu) i++
induction variable: ['i']
{
L3528: (LA[2*i]=,w) (ur[i],r) 
L3529: (LA[2*i+1]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ur -> [('[i]', 'r', 'normalized', ['i'], 3528)]
LDEs formed:0

ui -> [('[i]', 'r', 'normalized', ['i'], 3529)]
LDEs formed:0

LA -> [('[2*i]', 'w', 'normalized', ['i'], 3528), ('[2*i+1]', 'w', 'normalized', ['i'], 3529)]
LDEs formed:3

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3530: (u[i],r) 
	loop info: j=0 j<-ipar[0] j++
	induction variable: ['i', 'j']
	{
	L3531: (y[i]=,w) 
	L3532: (y[i]==,r) 
	L3533: (y[i]=,w) 
	L3534: (y[i]=,w) (y[i]&,r) 
	L3535: (y[i]=,w) 
	L3536: (y[i]=,w) (y[i],r) 
	L3537: (y[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3531), ('[i]', 'r', 'normalized', ['i', 'j'], 3532), ('[i]', 'w', 'normalized', ['i', 'j'], 3533), ('[i]', 'w', 'normalized', ['i', 'j'], 3534), ('[i]', 'r', 'normalized', ['i', 'j'], 3534), ('[i]', 'w', 'normalized', ['i', 'j'], 3535), ('[i]', 'w', 'normalized', ['i', 'j'], 3536), ('[i]', 'r', 'normalized', ['i', 'j'], 3536), ('[i]', 'r', 'normalized', ['i', 'j'], 3537)]
LDEs formed:35

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3530)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nu*nu) i++
induction variable: ['i']
{
L3531: (LA[2*i]=,w) (ur[i],r) 
L3532: (LA[2*i+1]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ur -> [('[i]', 'r', 'normalized', ['i'], 3531)]
LDEs formed:0

ui -> [('[i]', 'r', 'normalized', ['i'], 3532)]
LDEs formed:0

LA -> [('[2*i]', 'w', 'normalized', ['i'], 3531), ('[2*i+1]', 'w', 'normalized', ['i'], 3532)]
LDEs formed:3

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<my*ny i++
induction variable: ['i']
{
L3533: (z[i+1]=,w) 
}
array table
-----------------------------------------------
z -> [('[i+1]', 'w', 'normalized', ['i'], 3533)]
LDEs formed:1

distinct LDEs:
i1+1=i2+1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L3534: (u1[ji],r) (u2[il],r) 
		}
	L3535: (y[jl]=,w) 
	L3536: (y[jl]=,w) 
	L3537: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 3535), ('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 3536), ('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 3537)]
LDEs formed:6

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 3534)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 3534)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<=(mz*nz)-2  i++
induction variable: ['i']
{
L3535: (oz[i]=,w) (oz[i+1],r) 
}
array table
-----------------------------------------------
oz -> [('[i]', 'w', 'normalized', ['i'], 3535), ('[i+1]', 'r', 'normalized', ['i'], 3535)]
LDEs formed:2

distinct LDEs:
i1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3536: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 3536)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3537: (ipar[k],r) 
	L3538: (u[j],r) 
	L3539: (u[j],r) 
	}
L3540: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3540)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3538), ('[j]', 'r', 'normalized', ['j', 'k'], 3539)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3537)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3538: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3538)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3538)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < *nu   i++
induction variable: ['i']
{
L3539: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3539)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3539)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3540: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 3540)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3541: (ipar[k],r) 
	L3542: (u[j],r) 
	L3543: (u[j],r) 
	}
L3544: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3544)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3542), ('[j]', 'r', 'normalized', ['j', 'k'], 3543)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3541)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<mu*nu j++
induction variable: ['j']
{
L3542: (yr[0]=,w) (yr[0]+,r) (ur[j],r) 
L3543: (yi[0]=,w) (yi[0]+,r) (ui[j],r) 
}
array table
-----------------------------------------------
yi -> [('[0]', 'w', 'normalized', ['j'], 3543), ('[0]', 'r', 'normalized', ['j'], 3543)]
LDEs formed:2

yr -> [('[0]', 'w', 'normalized', ['j'], 3542), ('[0]', 'r', 'normalized', ['j'], 3542)]
LDEs formed:2

ui -> [('[j]', 'r', 'normalized', ['j'], 3543)]
LDEs formed:0

ur -> [('[j]', 'r', 'normalized', ['j'], 3542)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<mu*nu j++
induction variable: ['j']
{
L3543: (yr[j]=,w) 
L3544: (yi[j]=,w) 
	loop info: k=1 k<GetNin(block)+1 k++
	induction variable: ['j', 'k']
	{
	L3545: (ipar[k-1],r) 
	L3546: (yr[j]=,w) (yr[j]+,r) (ur[j],r) 
	L3547: (yi[j]=,w) (yi[j]+,r) (ui[j],r) 
	L3548: (yr[j]=,w) (yr[j]-,r) (ur[j],r) 
	L3549: (yi[j]=,w) (yi[j]-,r) (ui[j],r) 
	}
 }
array table
-----------------------------------------------
yi -> [('[j]', 'w', 'normalized', ['j', 'k'], 3544), ('[j]', 'w', 'normalized', ['j', 'k'], 3547), ('[j]', 'r', 'normalized', ['j', 'k'], 3547), ('[j]', 'w', 'normalized', ['j', 'k'], 3549), ('[j]', 'r', 'normalized', ['j', 'k'], 3549)]
LDEs formed:12

yr -> [('[j]', 'w', 'normalized', ['j', 'k'], 3543), ('[j]', 'w', 'normalized', ['j', 'k'], 3546), ('[j]', 'r', 'normalized', ['j', 'k'], 3546), ('[j]', 'w', 'normalized', ['j', 'k'], 3548), ('[j]', 'r', 'normalized', ['j', 'k'], 3548)]
LDEs formed:12

ui -> [('[j]', 'r', 'normalized', ['j', 'k'], 3547), ('[j]', 'r', 'normalized', ['j', 'k'], 3549)]
LDEs formed:0

ipar -> [('[k-1]', 'r', 'normalized', ['j', 'k'], 3545)]
LDEs formed:0

ur -> [('[j]', 'r', 'normalized', ['j', 'k'], 3546), ('[j]', 'r', 'normalized', ['j', 'k'], 3548)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L3549: (inptr[0][i],r) 
L3550: (mode[i],r) 
L3551: (outptr[0][i]=,w) (inptr[0][i],r) 
L3552: (outptr[0][i]=,w) (inptr[0][i],r) 
}
array table
-----------------------------------------------
outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3551), ('[0][i]', 'w', 'normalized', ['i'], 3552)]
LDEs formed:6

inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3549), ('[0][i]', 'r', 'normalized', ['i'], 3551), ('[0][i]', 'r', 'normalized', ['i'], 3552)]
LDEs formed:0

mode -> [('[i]', 'r', 'normalized', ['i'], 3550)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L3551: (inptr[0][i],r) 
L3552: (outptr[0][i]=,w) (inptr[0][i],r) 
L3553: (outptr[0][i]=,w) (inptr[0][i],r) 
}
array table
-----------------------------------------------
outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3552), ('[0][i]', 'w', 'normalized', ['i'], 3553)]
LDEs formed:6

inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3551), ('[0][i]', 'r', 'normalized', ['i'], 3552), ('[0][i]', 'r', 'normalized', ['i'], 3553)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L3554: (g[i]=,w) (inptr[0][i],r) 
L3555: (g[i],r) 
L3556: (mode[i]=,w) 
L3557: (mode[i]=,w) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3554)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3556), ('[i]', 'w', 'normalized', ['i'], 3557)]
LDEs formed:3

g -> [('[i]', 'w', 'normalized', ['i'], 3554), ('[i]', 'r', 'normalized', ['i'], 3555)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3556: (u1[i]==,r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3556)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3556)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3556)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3557: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3557)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3557)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3557)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3558: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3558)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3558)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3558)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3559: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3559)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3559)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3559)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3560: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3560)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3560)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3560)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3561: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3561)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3561)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3561)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3562: (u1[i]==,r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3562)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3562)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3562)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3563: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3563)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3563)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3563)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3564: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3564)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3564)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3564)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3565: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3565)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3565)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3565)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3566: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3566)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3566)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3566)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3567: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3567)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3567)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3567)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3568: (outptr[0][0]=,w) (outptr[0][0]*,r) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3568)]
LDEs formed:0

outptr -> [('[0][0]', 'w', 'normalized', ['j'], 3568), ('[0][0]', 'r', 'normalized', ['j'], 3568)]
LDEs formed:4

distinct LDEs:
0=0,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3569: (outptr[0][j]=,w) 
	loop info: k=0 k<block->nin k++
	induction variable: ['j', 'k']
	{
	L3570: (ipar[k],r) 
	L3571: (outptr[0][j]=,w) (outptr[0][j]*,r) (inptr[k][j],r) 
	L3572: (inptr[k][j]==,r) 
	L3573: (outptr[0][j]=,w) (outptr[0][j]/,r) (inptr[k][j],r) 
	}
 }
array table
-----------------------------------------------
inptr -> [('[k][j]', 'r', 'normalized', ['j', 'k'], 3571), ('[k][j]', 'r', 'normalized', ['j', 'k'], 3572), ('[k][j]', 'r', 'normalized', ['j', 'k'], 3573)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j', 'k'], 3569), ('[0][j]', 'w', 'normalized', ['j', 'k'], 3571), ('[0][j]', 'r', 'normalized', ['j', 'k'], 3571), ('[0][j]', 'w', 'normalized', ['j', 'k'], 3573), ('[0][j]', 'r', 'normalized', ['j', 'k'], 3573)]
LDEs formed:24

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3570)]
LDEs formed:0

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3571: (ur[i],r) 
L3572: (ui[i],r) 
L3573: (yr[i],r) (yi[i],r) 
}
array table
-----------------------------------------------
yi -> [('[i]', 'r', 'normalized', ['i'], 3573)]
LDEs formed:0

yr -> [('[i]', 'r', 'normalized', ['i'], 3573)]
LDEs formed:0

ui -> [('[i]', 'r', 'normalized', ['i'], 3572)]
LDEs formed:0

ur -> [('[i]', 'r', 'normalized', ['i'], 3571)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3572: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3572)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3572)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3573: (u[i],r) 
	L3574: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3574)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3573)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3574: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3575: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3574), ('[i]', 'w', 'normalized', ['i', 'j'], 3575), ('[i]', 'r', 'normalized', ['i', 'j'], 3575)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3574), ('[i]', 'r', 'normalized', ['i', 'j'], 3575)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3576: (u[i],r) 
	L3577: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3577)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3576)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3577: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3577), ('[i]', 'r', 'normalized', ['i', 'j'], 3577)]
LDEs formed:2

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3577)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3578: (u[i],r) 
	L3579: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3579)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3578)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3579: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3580: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3581: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3579), ('[i]', 'w', 'normalized', ['i', 'j'], 3580), ('[i]', 'r', 'normalized', ['i', 'j'], 3580), ('[i]', 'w', 'normalized', ['i', 'j'], 3581), ('[i]', 'r', 'normalized', ['i', 'j'], 3581)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3579), ('[i]', 'r', 'normalized', ['i', 'j'], 3580)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3581: (u[i],r) 
	L3582: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3582)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3581)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3582: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3583: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3584: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3582), ('[i]', 'w', 'normalized', ['i', 'j'], 3583), ('[i]', 'r', 'normalized', ['i', 'j'], 3583), ('[i]', 'w', 'normalized', ['i', 'j'], 3584), ('[i]', 'r', 'normalized', ['i', 'j'], 3584)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3582), ('[i]', 'r', 'normalized', ['i', 'j'], 3583)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3584: (u[i],r) 
	}
L3585: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3585)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3584)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3585: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3586: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3585), ('[i]', 'w', 'normalized', ['i', 'j'], 3586), ('[i]', 'r', 'normalized', ['i', 'j'], 3586)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3585), ('[i]', 'r', 'normalized', ['i', 'j'], 3586)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3587: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3587)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L3588: (u1[ji],r) (u2[il],r) 
		}
L3589: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3589)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3588)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3588)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu j++
induction variable: ['j']
{
L3589: (yr[ij]=,w) (ur[ij],r) 
L3590: (yi[ij]=,w) (ui[ij],r) 
	loop info: i=1 i<mu i++
	induction variable: ['j', 'i']
	{
	L3591: (yr[ij]=,w) (ur[ij]+,r) (yr[ij-1],r) 
	L3592: (yi[ij]=,w) (ui[ij]+,r) (yi[ij-1],r) 
	}
 }
array table
-----------------------------------------------
yi -> [('[ij]', 'w', 'not normalized', ['j', 'i'], 3590), ('[ij]', 'w', 'not normalized', ['j', 'i'], 3592), ('[ij-1]', 'r', 'not normalized', ['j', 'i'], 3592)]
LDEs formed:5

yr -> [('[ij]', 'w', 'not normalized', ['j', 'i'], 3589), ('[ij]', 'w', 'not normalized', ['j', 'i'], 3591), ('[ij-1]', 'r', 'not normalized', ['j', 'i'], 3591)]
LDEs formed:5

ui -> [('[ij]', 'r', 'not normalized', ['j', 'i'], 3590), ('[ij]', 'r', 'not normalized', ['j', 'i'], 3592)]
LDEs formed:0

ur -> [('[ij]', 'r', 'not normalized', ['j', 'i'], 3589), ('[ij]', 'r', 'not normalized', ['j', 'i'], 3591)]
LDEs formed:0

distinct LDEs:
ij=ij-1
ij=ij
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->nout ++i
induction variable: ['i']
{
	loop info: j=0 j<block->outsz[i] ++j
	induction variable: ['i', 'j']
	{
	L3592: (outptr[i][j]=,w) (inptr[0][k],r) 
	}
 }
array table
-----------------------------------------------
inptr -> [('[0][k]', 'r', 'not normalized', ['i', 'j'], 3592)]
LDEs formed:0

outptr -> [('[i][j]', 'w', 'normalized', ['i', 'j'], 3592)]
LDEs formed:2

distinct LDEs:
i1=i2,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->nin ++i
induction variable: ['i']
{
	loop info: j=0 j<block->insz[i] ++j
	induction variable: ['i', 'j']
	{
	L3593: (outptr[0][k]=,w) (inptr[i][j],r) 
	}
 }
array table
-----------------------------------------------
inptr -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3593)]
LDEs formed:0

outptr -> [('[0][k]', 'w', 'not normalized', ['i', 'j'], 3593)]
LDEs formed:2

distinct LDEs:
0=0,k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu i++
induction variable: ['i']
{
L3594: (yi[i]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
yi -> [('[i]', 'w', 'normalized', ['i'], 3594)]
LDEs formed:1

ui -> [('[i]', 'r', 'normalized', ['i'], 3594)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j<nu j++
induction variable: ['j']
{
	loop info: i=0 i<mu i++
	induction variable: ['j', 'i']
	{
	L3595: (yr[ij]=,w) (ur[ij]+,r) (yr[ij-mu],r) 
	L3596: (yi[ij]=,w) (ui[ij]+,r) (yi[ij-mu],r) 
	}
 }
array table
-----------------------------------------------
yi -> [('[ij]', 'w', 'not normalized', ['j', 'i'], 3596), ('[ij-mu]', 'r', 'not normalized', ['j', 'i'], 3596)]
LDEs formed:2

yr -> [('[ij]', 'w', 'not normalized', ['j', 'i'], 3595), ('[ij-mu]', 'r', 'not normalized', ['j', 'i'], 3595)]
LDEs formed:2

ui -> [('[ij]', 'r', 'not normalized', ['j', 'i'], 3596)]
LDEs formed:0

ur -> [('[ij]', 'r', 'not normalized', ['j', 'i'], 3595)]
LDEs formed:0

distinct LDEs:
ij=ij-mu
ij=ij
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3596: (rpar[0],r) (rpar[0],r) 
L3597: (rpar[1],r) (rpar[1],r) 
L3598: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3598)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3596), ('[0]', 'r', 'normalized', ['i'], 3596), ('[1]', 'r', 'normalized', ['i'], 3597), ('[1]', 'r', 'normalized', ['i'], 3597)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3598: (rpar[0],r) (rpar[0],r) 
L3599: (rpar[1],r) (rpar[1],r) 
L3600: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3600)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3598), ('[0]', 'r', 'normalized', ['i'], 3598), ('[1]', 'r', 'normalized', ['i'], 3599), ('[1]', 'r', 'normalized', ['i'], 3599)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3600: (rpar[0],r) (rpar[0],r) 
L3601: (rpar[1],r) (rpar[1],r) 
L3602: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3602)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3600), ('[0]', 'r', 'normalized', ['i'], 3600), ('[1]', 'r', 'normalized', ['i'], 3601), ('[1]', 'r', 'normalized', ['i'], 3601)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3602: (rpar[0],r) (rpar[0],r) 
L3603: (rpar[1],r) (rpar[1],r) 
L3604: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3604)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3602), ('[0]', 'r', 'normalized', ['i'], 3602), ('[1]', 'r', 'normalized', ['i'], 3603), ('[1]', 'r', 'normalized', ['i'], 3603)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3604: (rpar[0],r) (rpar[0],r) 
L3605: (rpar[1],r) (rpar[1],r) 
L3606: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3606)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3604), ('[0]', 'r', 'normalized', ['i'], 3604), ('[1]', 'r', 'normalized', ['i'], 3605), ('[1]', 'r', 'normalized', ['i'], 3605)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3606: (rpar[0],r) (rpar[0],r) 
L3607: (rpar[1],r) (rpar[1],r) 
L3608: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3608)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 3606), ('[0]', 'r', 'normalized', ['i'], 3606), ('[1]', 'r', 'normalized', ['i'], 3607), ('[1]', 'r', 'normalized', ['i'], 3607)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3608: (opar[0],r) (u[i],r) 
L3609: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3609)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3608)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3608)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3609: (opar[ji],r) (u[il],r) 
		}
L3610: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3610)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3609)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3609)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3610: (opar[0],r) (u[i],r) 
L3611: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3611)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3610)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3610)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3611: (opar[ji],r) (u[il],r) 
		}
L3612: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3612)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3611)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3611)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3612: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3612)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3612)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3613: (internal.bufferCoordinates[i]=,w) (insz[i],r) 
L3614: (internal.bufferCoordinates[i]==,r) 
}
array table
-----------------------------------------------
insz -> [('[i]', 'r', 'normalized', ['i'], 3613)]
LDEs formed:0

internal.bufferCoordinates -> [('[i]', 'w', 'normalized', ['i'], 3613), ('[i]', 'r', 'normalized', ['i'], 3614)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
	loop info: j = 0  j < block->insz[i]  j++
	induction variable: ['i', 'j']
	{
	L3615: (internal.bufferCoordinates[i][j]=,w) (ipar[2],r) 
	L3616: (internal.bufferCoordinates[i][j]==,r) 
	}
 }
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[i][j]', 'w', 'normalized', ['i', 'j'], 3615), ('[i][j]', 'r', 'normalized', ['i', 'j'], 3616)]
LDEs formed:4

ipar -> [('[2]', 'r', 'normalized', ['i', 'j'], 3615)]
LDEs formed:0

distinct LDEs:
i1=i2,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3616: (internal.historyCoordinates[i]=,w) (insz[i],r) 
L3617: (internal.historyCoordinates[i]==,r) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[i]', 'w', 'normalized', ['i'], 3616), ('[i]', 'r', 'normalized', ['i'], 3617)]
LDEs formed:2

insz -> [('[i]', 'r', 'normalized', ['i'], 3616)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L3617: (internal.historyCoordinates[i],r) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[i]', 'r', 'not normalized', ['j'], 3617)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < i  k++
induction variable: ['k']
{
	loop info: l = 0  l < j  l++
	induction variable: ['k', 'l']
	{
	L3618: (internal.bufferCoordinates[k][l],r) 
	}
 }
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[k][l]', 'r', 'normalized', ['k', 'l'], 3618)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L3619: (internal.bufferCoordinates[i],r) 
}
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[i]', 'r', 'not normalized', ['j'], 3619)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
	loop info: j = 0  j < block->insz[i]  j++
	induction variable: ['i', 'j']
	{
	L3620: (internal.historyCoordinates[i][j],r) 
	L3621: (internal.historyCoordinates[i][j],r) 
	L3622: (internal.bufferCoordinates[i][j],r) 
	}
L3623: (internal.historyCoordinates[i],r) 
L3624: (internal.bufferCoordinates[i],r) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3620), ('[i][j]', 'r', 'normalized', ['i', 'j'], 3621), ('[i]', 'r', 'normalized', ['i', 'j'], 3623)]
LDEs formed:0

internal.bufferCoordinates -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3622), ('[i]', 'r', 'normalized', ['i', 'j'], 3624)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3625: (scope.cachedHistoryPolylinesUIDs[i],r) 
L3626: (scope.cachedBufferPolylinesUIDs[i],r) 
}
array table
-----------------------------------------------
scope.cachedHistoryPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 3625)]
LDEs formed:0

scope.cachedBufferPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 3626)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3627: (internal.historyCoordinates[0][i],r) 
L3628: (internal.historyCoordinates[0][i]+,r) 
L3629: (internal.bufferCoordinates[0][i],r) 
L3630: (internal.historyCoordinates[0][i],r) 
L3631: (internal.historyCoordinates[0][i]=,w) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[0][i]', 'r', 'normalized', ['i'], 3627), ('[0][i]', 'r', 'normalized', ['i'], 3628), ('[0][i]', 'r', 'normalized', ['i'], 3630), ('[0][i]', 'w', 'normalized', ['i'], 3631)]
LDEs formed:8

internal.bufferCoordinates -> [('[0][i]', 'r', 'normalized', ['i'], 3629)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: setLen = numberOfPoints  setLen < bufferPoints  setLen++
induction variable: ['setLen']
{
L3630: (coordinates[setLen]=,w) 
}
array table
-----------------------------------------------
coordinates -> [('[setLen]', 'w', 'normalized', ['setLen'], 3630)]
LDEs formed:1

distinct LDEs:
setLen1=setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: setLen = numberOfPoints  setLen < bufferPoints  setLen++
induction variable: ['setLen']
{
L3631: (coordinates[bufferPoints + setLen]=,w) 
}
array table
-----------------------------------------------
coordinates -> [('[bufferPoints + setLen]', 'w', 'not normalized', ['setLen'], 3631)]
LDEs formed:1

distinct LDEs:
bufferPoints + setLen1=bufferPoints + setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3632: (internal.bufferCoordinates[input][i][0]=,w) (internal.bufferCoordinates[input][i][sco->internal.numberOfPoints - 1],r) 
L3633: (internal.bufferCoordinates[input][i],r) (ipar[2],r) (internal.bufferCoordinates[input][i],r) (ipar[2]+,r) 
}
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[input][i][0]', 'w', 'not normalized', ['i'], 3632), ('[input][i][sco->internal.numberOfPoints - 1]', 'r', 'not normalized', ['i'], 3632), ('[input][i]', 'r', 'not normalized', ['i'], 3633), ('[input][i]', 'r', 'not normalized', ['i'], 3633)]
LDEs formed:8

ipar -> [('[2]', 'r', 'normalized', ['i'], 3633), ('[2]', 'r', 'normalized', ['i'], 3633)]
LDEs formed:0

distinct LDEs:
input=input,i1=i2,0=sco->internal.numberOfPoints - 1
input=input,i1=i2
input=input,i1=i2,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3634: (internal.historyCoordinates[input][i],r) 
L3635: (internal.historyCoordinates[input][i],r) 
L3636: (internal.historyCoordinates[input][i]=,w) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[input][i]', 'r', 'not normalized', ['i'], 3634), ('[input][i]', 'r', 'not normalized', ['i'], 3635), ('[input][i]', 'w', 'not normalized', ['i'], 3636)]
LDEs formed:6

distinct LDEs:
input=input,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3637: (internal.bufferCoordinates[input][i][0]=,w) (internal.bufferCoordinates[input][i],r) (ipar[2]-,r) 
L3638: (internal.bufferCoordinates[input][i],r) (ipar[2],r) (internal.bufferCoordinates[input][i],r) (ipar[2]-,r) 
}
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[input][i][0]', 'w', 'not normalized', ['i'], 3637), ('[input][i]', 'r', 'not normalized', ['i'], 3637), ('[input][i]', 'r', 'not normalized', ['i'], 3638), ('[input][i]', 'r', 'not normalized', ['i'], 3638)]
LDEs formed:8

ipar -> [('[2]', 'r', 'normalized', ['i'], 3637), ('[2]', 'r', 'normalized', ['i'], 3638), ('[2]', 'r', 'normalized', ['i'], 3638)]
LDEs formed:0

distinct LDEs:
input=input,i1=i2
input=input,i1=i2,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3639: (data[i],r) 
L3640: (internal.bufferCoordinates[input][i],r) (ipar[2],r) 
}
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[input][i]', 'r', 'not normalized', ['i'], 3640)]
LDEs formed:0

data -> [('[i]', 'r', 'normalized', ['i'], 3639)]
LDEs formed:0

ipar -> [('[2]', 'r', 'normalized', ['i'], 3640)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
	loop info: j = 0  j < block->insz[i]  j++
	induction variable: ['i', 'j']
	{
	L3641: (scope.cachedBufferPolylinesUIDs[j],r) 
	}
 }
array table
-----------------------------------------------
scope.cachedBufferPolylinesUIDs -> [('[j]', 'r', 'normalized', ['i', 'j'], 3641)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3642: (internal.historyCoordinates[input][i],r) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[input][i]', 'r', 'not normalized', ['i'], 3642)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=1 i<block->insz[0] ++i
induction variable: ['i']
{
L3643: (ipar[0]==,r) 
L3644: (inptr[0][i],r) (inptr[0][i],r) 
L3645: (inptr[0][i],r) (inptr[0][i],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3644), ('[0][i]', 'r', 'normalized', ['i'], 3644), ('[0][i]', 'r', 'normalized', ['i'], 3645), ('[0][i]', 'r', 'normalized', ['i'], 3645)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['i'], 3643)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L3644: (ipar[0]==,r) 
L3645: (outptr[0][i]=,w) (inptr[0][i],r) (inptr[1][i],r) 
L3646: (outptr[0][i]=,w) (inptr[0][i],r) (inptr[1][i],r) 
L3647: (outptr[0][i]=,w) (mode[0]-,r) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3645), ('[1][i]', 'r', 'normalized', ['i'], 3645), ('[0][i]', 'r', 'normalized', ['i'], 3646), ('[1][i]', 'r', 'normalized', ['i'], 3646)]
LDEs formed:0

outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3645), ('[0][i]', 'w', 'normalized', ['i'], 3646), ('[0][i]', 'w', 'normalized', ['i'], 3647)]
LDEs formed:12

mode -> [('[0]', 'r', 'normalized', ['i'], 3647)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['i'], 3644)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L3645: (mode[0]-,r) 
L3646: (g[i]=,w) (inptr[0][i]-,r) (inptr[0],r) (mode[0]-,r) 
L3647: (g[i]=,w) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3646), ('[0]', 'r', 'normalized', ['i'], 3646)]
LDEs formed:0

mode -> [('[0]', 'r', 'normalized', ['i'], 3645), ('[0]', 'r', 'normalized', ['i'], 3646)]
LDEs formed:0

g -> [('[i]', 'w', 'normalized', ['i'], 3646), ('[i]', 'w', 'normalized', ['i'], 3647)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=1 i<block->insz[0] ++i
induction variable: ['i']
{
L3648: (ipar[0]==,r) 
L3649: (inptr[0][i],r) 
L3650: (inptr[0][i],r) 
L3651: (mode[0]=,w) 
L3652: (inptr[0][i],r) 
L3653: (inptr[0][i],r) 
L3654: (mode[0]=,w) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3649), ('[0][i]', 'r', 'normalized', ['i'], 3650), ('[0][i]', 'r', 'normalized', ['i'], 3652), ('[0][i]', 'r', 'normalized', ['i'], 3653)]
LDEs formed:0

mode -> [('[0]', 'w', 'normalized', ['i'], 3651), ('[0]', 'w', 'normalized', ['i'], 3654)]
LDEs formed:3

ipar -> [('[0]', 'r', 'normalized', ['i'], 3648)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L3649: (g[i]=,w) (inptr[0][i]-,r) (inptr[1][i],r) 
L3650: (ipar[0]==,r) 
L3651: (g[i],r) 
L3652: (mode[i]=,w) 
L3653: (mode[i]=,w) 
L3654: (g[i],r) 
L3655: (mode[i]=,w) 
L3656: (mode[i]=,w) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3649), ('[1][i]', 'r', 'normalized', ['i'], 3649)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['i'], 3650)]
LDEs formed:0

g -> [('[i]', 'w', 'normalized', ['i'], 3649), ('[i]', 'r', 'normalized', ['i'], 3651), ('[i]', 'r', 'normalized', ['i'], 3654)]
LDEs formed:3

mode -> [('[i]', 'w', 'normalized', ['i'], 3652), ('[i]', 'w', 'normalized', ['i'], 3653), ('[i]', 'w', 'normalized', ['i'], 3655), ('[i]', 'w', 'normalized', ['i'], 3656)]
LDEs formed:10

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3657: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 3657)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3658: (ipar[k],r) 
	L3659: (u[j],r) 
	L3660: (u[j],r) 
	}
L3661: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3661)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3659), ('[j]', 'r', 'normalized', ['j', 'k'], 3660)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3658)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=2 i>=0 i--
induction variable: ['i']
{
L3659: (type[i+1]=,w) 
}
array table
-----------------------------------------------
type -> [('[i+1]', 'w', 'normalized', ['i'], 3659)]
LDEs formed:1

distinct LDEs:
i1+1=i2+1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=2 i>=0 i--
induction variable: ['i']
{
L3660: (type[i+1]=,w) 
}
array table
-----------------------------------------------
type -> [('[i+1]', 'w', 'normalized', ['i'], 3660)]
LDEs formed:1

distinct LDEs:
i1+1=i2+1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu j++
induction variable: ['j']
{
L3661: (y[ij]=,w) (u[ij],r) 
	loop info: i=1 i<mu i++
	induction variable: ['j', 'i']
	{
	L3662: (y[ij]=,w) (u[ij]+,r) (y[ij-1],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[ij]', 'w', 'not normalized', ['j', 'i'], 3661), ('[ij]', 'w', 'not normalized', ['j', 'i'], 3662), ('[ij-1]', 'r', 'not normalized', ['j', 'i'], 3662)]
LDEs formed:5

u -> [('[ij]', 'r', 'not normalized', ['j', 'i'], 3661), ('[ij]', 'r', 'not normalized', ['j', 'i'], 3662)]
LDEs formed:0

distinct LDEs:
ij=ij-1
ij=ij
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<NX i++
induction variable: ['i']
{
L3663: (y1[i]=,w) (x[i],r) 
L3664: (y1[i+NX]=,w) (xd[i],r) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 3663), ('[i+NX]', 'w', 'not normalized', ['i'], 3664)]
LDEs formed:3

x -> [('[i]', 'r', 'normalized', ['i'], 3663)]
LDEs formed:0

xd -> [('[i]', 'r', 'normalized', ['i'], 3664)]
LDEs formed:0

distinct LDEs:
i1=i2+NX
i1+NX=i2+NX
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<insz[Mi-1]-2*NX j++
induction variable: ['j']
{
L3665: (g[j]=,w) (ui[j+2*NX],r) 
}
array table
-----------------------------------------------
ui -> [('[j+2*NX]', 'r', 'not normalized', ['j'], 3665)]
LDEs formed:0

g -> [('[j]', 'w', 'normalized', ['j'], 3665)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<insz[Mi-1]-2*NX k++
induction variable: ['k']
{
L3666: (evout[0]=,w) 
}
array table
-----------------------------------------------
evout -> [('[0]', 'w', 'normalized', ['k'], 3666)]
LDEs formed:1

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<insz[Mi-1]-2*NX k++
induction variable: ['k']
{
L3667: (jroot[k]==,r) 
L3668: (iparCx[indice+k],r) 
L3669: (Mode[0]=,w) 
L3670: (Mode[1]=,w) 
}
array table
-----------------------------------------------
iparCx -> [('[indice+k]', 'r', 'not normalized', ['k'], 3668)]
LDEs formed:0

jroot -> [('[k]', 'r', 'normalized', ['k'], 3667)]
LDEs formed:0

Mode -> [('[0]', 'w', 'normalized', ['k'], 3669), ('[1]', 'w', 'normalized', ['k'], 3670)]
LDEs formed:3

distinct LDEs:
1=1
0=0
0=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3671: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3671)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3671)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3672: (opar[0],r) (u[i],r) 
L3673: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3673)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3672)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3672)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3673: (opar[ji],r) (u[il],r) 
		}
L3674: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3674)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3673)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3673)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(block->nx)/2 ++i
induction variable: ['i']
{
L3674: (mode[i]==,r) 
L3675: (xd[i]=,w) (ur[i],r) 
L3676: (xd[i+(block->nx)/2]=,w) (ui[i],r) 
L3677: (xd[i]=,w) 
L3678: (xd[i+(block->nx)/2]=,w) 
}
array table
-----------------------------------------------
ui -> [('[i]', 'r', 'normalized', ['i'], 3676)]
LDEs formed:0

mode -> [('[i]', 'r', 'normalized', ['i'], 3674)]
LDEs formed:0

xd -> [('[i]', 'w', 'normalized', ['i'], 3675), ('[i+(block->nx)/2]', 'w', 'not normalized', ['i'], 3676), ('[i]', 'w', 'normalized', ['i'], 3677), ('[i+(block->nx)/2]', 'w', 'not normalized', ['i'], 3678)]
LDEs formed:10

ur -> [('[i]', 'r', 'normalized', ['i'], 3675)]
LDEs formed:0

distinct LDEs:
i1+(block->nx)/2=i2+(block->nx)/2
i1=i2+(block->nx)/2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(block->nx)/2 ++i
induction variable: ['i']
{
L3676: (xd[i]=,w) (ur[i],r) 
L3677: (xd[i+(block->nx)/2]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ui -> [('[i]', 'r', 'normalized', ['i'], 3677)]
LDEs formed:0

xd -> [('[i]', 'w', 'normalized', ['i'], 3676), ('[i+(block->nx)/2]', 'w', 'not normalized', ['i'], 3677)]
LDEs formed:3

ur -> [('[i]', 'r', 'normalized', ['i'], 3676)]
LDEs formed:0

distinct LDEs:
i1+(block->nx)/2=i2+(block->nx)/2
i1=i2+(block->nx)/2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(block->nx)/2 ++i
induction variable: ['i']
{
L3677: (yr[i]=,w) (x[i],r) 
L3678: (yi[i]=,w) (x[i+(block->nx)/2],r) 
}
array table
-----------------------------------------------
yi -> [('[i]', 'w', 'normalized', ['i'], 3678)]
LDEs formed:1

x -> [('[i]', 'r', 'normalized', ['i'], 3677), ('[i+(block->nx)/2]', 'r', 'not normalized', ['i'], 3678)]
LDEs formed:0

yr -> [('[i]', 'w', 'normalized', ['i'], 3677)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(block->nx)/2 ++i
induction variable: ['i']
{
L3678: (x[i]=,w) (ur[i],r) 
L3679: (x[i+(block->nx)/2]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'w', 'normalized', ['i'], 3678), ('[i+(block->nx)/2]', 'w', 'not normalized', ['i'], 3679)]
LDEs formed:3

ui -> [('[i]', 'r', 'normalized', ['i'], 3679)]
LDEs formed:0

ur -> [('[i]', 'r', 'normalized', ['i'], 3678)]
LDEs formed:0

distinct LDEs:
i1+(block->nx)/2=i2+(block->nx)/2
i1=i2+(block->nx)/2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(block->nx)/2 ++i
induction variable: ['i']
{
L3679: (mode[i]==,r) 
L3680: (g[i]=,w) (x[i]-,r) (rpar[i],r) (x[i]-,r) (rpar[(block->nx)/2+i],r) 
L3681: (g[i+(block->nx)/2]=,w) (x[i+(block->nx)/2]-,r) (rpar[i+(block->nx)],r) (x[i+(block->nx)/2]-,r) (rpar[3*(block->nx)/2+i],r) 
L3682: (g[i]=,w) (ur[i],r) 
L3683: (g[i+(block->nx)/2]=,w) (ui[i],r) 
L3684: (ur[i],r) (x[i],r) (rpar[i]&,r) (ui[i>=0]&,r) (x[i+(block->nx)/2],r) (rpar[i+(block->nx)],r) 
L3685: (mode[i]=,w) 
L3686: (ur[i],r) (x[i],r) (rpar[(block->nx)/2+i]&,r) (ui[i],r) (x[i+(block->nx)/2],r) (rpar[3*(block->nx)/2+i],r) 
L3687: (mode[i]=,w) 
L3688: (mode[i]=,w) 
}
array table
-----------------------------------------------
g -> [('[i]', 'w', 'normalized', ['i'], 3680), ('[i+(block->nx)/2]', 'w', 'not normalized', ['i'], 3681), ('[i]', 'w', 'normalized', ['i'], 3682), ('[i+(block->nx)/2]', 'w', 'not normalized', ['i'], 3683)]
LDEs formed:10

ur -> [('[i]', 'r', 'normalized', ['i'], 3682), ('[i]', 'r', 'normalized', ['i'], 3684), ('[i]', 'r', 'normalized', ['i'], 3686)]
LDEs formed:0

ui -> [('[i]', 'r', 'normalized', ['i'], 3683), ('[i>=0]', 'r', 'normalized', ['i'], 3684), ('[i]', 'r', 'normalized', ['i'], 3686)]
LDEs formed:0

mode -> [('[i]', 'r', 'normalized', ['i'], 3679), ('[i]', 'w', 'normalized', ['i'], 3685), ('[i]', 'w', 'normalized', ['i'], 3687), ('[i]', 'w', 'normalized', ['i'], 3688)]
LDEs formed:9

x -> [('[i]', 'r', 'normalized', ['i'], 3680), ('[i]', 'r', 'normalized', ['i'], 3680), ('[i+(block->nx)/2]', 'r', 'not normalized', ['i'], 3681), ('[i+(block->nx)/2]', 'r', 'not normalized', ['i'], 3681), ('[i]', 'r', 'normalized', ['i'], 3684), ('[i+(block->nx)/2]', 'r', 'not normalized', ['i'], 3684), ('[i]', 'r', 'normalized', ['i'], 3686), ('[i+(block->nx)/2]', 'r', 'not normalized', ['i'], 3686)]
LDEs formed:0

rpar -> [('[i]', 'r', 'normalized', ['i'], 3680), ('[(block->nx)/2+i]', 'r', 'not normalized', ['i'], 3680), ('[i+(block->nx)]', 'r', 'not normalized', ['i'], 3681), ('[3*(block->nx)/2+i]', 'r', 'not normalized', ['i'], 3681), ('[i]', 'r', 'normalized', ['i'], 3684), ('[i+(block->nx)]', 'r', 'not normalized', ['i'], 3684), ('[(block->nx)/2+i]', 'r', 'not normalized', ['i'], 3686), ('[3*(block->nx)/2+i]', 'r', 'not normalized', ['i'], 3686)]
LDEs formed:0

distinct LDEs:
i1+(block->nx)/2=i2+(block->nx)/2
i1=i2+(block->nx)/2
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L3687: (u1[ji],r) (u2[il],r) 
		}
	L3688: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 3688)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 3687)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 3687)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L3688: (u1[ji],r) (u2[il],r) 
		}
	L3689: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 3689)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 3688)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 3688)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3689: (u1[i]==,r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3689)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3689)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3689)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3690: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3690)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3690)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3690)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3691: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3691)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3691)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3691)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3692: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3692)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3692)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3692)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3693: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3693)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3693)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3693)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3694: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3694)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3694)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3694)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3695: (u1[i]==,r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3695)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3695)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3695)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3696: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3696)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3696)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3696)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3697: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3697)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3697)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3697)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3698: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3698)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3698)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3698)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3699: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3699)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3699)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3699)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3700: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3700)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3700)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3700)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3701: (opar[0],r) (u[i],r) 
L3702: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3702)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3701)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3701)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3702: (opar[ji],r) (u[il],r) 
		}
L3703: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3703)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3702)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3702)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L3703: (u1[ji],r) (u2[il],r) 
		}
	L3704: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 3704)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 3703)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 3703)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nc j++
induction variable: ['j']
{
L3704: (r[i]-,r) (r[nl+j]-,r) 
}
array table
-----------------------------------------------
r -> [('[i]', 'r', 'not normalized', ['j'], 3704), ('[nl+j]', 'r', 'not normalized', ['j'], 3704)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<=(mz*nz)-2  i++
induction variable: ['i']
{
L3705: (oz[i]=,w) (oz[i+1],r) 
}
array table
-----------------------------------------------
oz -> [('[i]', 'w', 'normalized', ['i'], 3705), ('[i+1]', 'r', 'normalized', ['i'], 3705)]
LDEs formed:2

distinct LDEs:
i1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3706: (opar[0],r) (u[i],r) 
L3707: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3707)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3706)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3706)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3707: (opar[ji],r) (u[il],r) 
		}
L3708: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3708)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3707)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3707)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 1  i++
induction variable: ['i']
{
L3708: (internal.coordinates[i]=,w) 
L3709: (internal.coordinates[i]==,r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'w', 'normalized', ['i'], 3708), ('[i]', 'r', 'normalized', ['i'], 3709)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 1  i++
induction variable: ['i']
{
	loop info: j = 0  j < links_count  j++
	induction variable: ['i', 'j']
	{
	L3710: (internal.coordinates[i][j]=,w) (ipar[2],r) 
	L3711: (internal.coordinates[i][j]==,r) 
	}
 }
array table
-----------------------------------------------
internal.coordinates -> [('[i][j]', 'w', 'normalized', ['i', 'j'], 3710), ('[i][j]', 'r', 'normalized', ['i', 'j'], 3711)]
LDEs formed:4

ipar -> [('[2]', 'r', 'normalized', ['i', 'j'], 3710)]
LDEs formed:0

distinct LDEs:
i1=i2,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < i  k++
induction variable: ['k']
{
	loop info: l = 0  l < j  l++
	induction variable: ['k', 'l']
	{
	L3711: (internal.coordinates[k][l],r) 
	}
 }
array table
-----------------------------------------------
internal.coordinates -> [('[k][l]', 'r', 'normalized', ['k', 'l'], 3711)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L3712: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'not normalized', ['j'], 3712)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 1  i++
induction variable: ['i']
{
	loop info: j = 0  j < links_count  j++
	induction variable: ['i', 'j']
	{
	L3713: (internal.coordinates[i][j],r) 
	}
L3714: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3713), ('[i]', 'r', 'normalized', ['i', 'j'], 3714)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < links_count  i++
induction variable: ['i']
{
L3715: (scope.cachedPolylinesUIDs[i],r) 
}
array table
-----------------------------------------------
scope.cachedPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 3715)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < 1  i++
induction variable: ['i']
{
	loop info: j = 0  j < links_count  j++
	induction variable: ['i', 'j']
	{
	L3716: (internal.coordinates[i][j],r) 
		loop info: setLen = newPoints - 1  setLen >= 0  setLen--
		induction variable: ['i', 'j', 'setLen']
		{
		L3717: (ptr[numberOfPoints + previousNumberOfPoints + setLen]=,w) (ptr[numberOfPoints + previousNumberOfPoints - 1],r) 
		}
	L3718: (ptr[previousNumberOfPoints + setLen]=,w) (ptr[previousNumberOfPoints - 1],r) 
	L3719: (internal.coordinates[i][j]=,w) 
	}
 }
array table
-----------------------------------------------
internal.coordinates -> [('[i][j]', 'r', 'normalized', ['i', 'j', 'setLen'], 3716), ('[i][j]', 'w', 'normalized', ['i', 'j', 'setLen'], 3719)]
LDEs formed:4

ptr -> [('[numberOfPoints + previousNumberOfPoints + setLen]', 'w', 'not normalized', ['i', 'j', 'setLen'], 3717), ('[numberOfPoints + previousNumberOfPoints - 1]', 'r', 'not normalized', ['i', 'j', 'setLen'], 3717), ('[previousNumberOfPoints + setLen]', 'w', 'not normalized', ['i', 'j', 'setLen'], 3718), ('[previousNumberOfPoints - 1]', 'r', 'not normalized', ['i', 'j', 'setLen'], 3718)]
LDEs formed:7

distinct LDEs:
i1=i2,j1=j2
numberOfPoints + previousNumberOfPoints + setLen1=previousNumberOfPoints + setLen2
previousNumberOfPoints + setLen1=previousNumberOfPoints + setLen2
numberOfPoints + previousNumberOfPoints + setLen1=numberOfPoints + previousNumberOfPoints + setLen2
numberOfPoints + previousNumberOfPoints - 1=previousNumberOfPoints + setLen2
numberOfPoints + previousNumberOfPoints + setLen1=previousNumberOfPoints - 1
previousNumberOfPoints + setLen1=previousNumberOfPoints - 1
numberOfPoints + previousNumberOfPoints + setLen1=numberOfPoints + previousNumberOfPoints - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < links_count  i++
induction variable: ['i']
{
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3719: (internal.coordinates[input][i][numberOfPoints + setLen]=,w) 
	}
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3720: (internal.coordinates[input][i][maxNumberOfPoints + numberOfPoints + setLen]=,w) (data[i],r) 
	}
 }
array table
-----------------------------------------------
data -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 3720)]
LDEs formed:0

internal.coordinates -> [('[input][i][numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3719), ('[input][i][maxNumberOfPoints + numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3720)]
LDEs formed:9

distinct LDEs:
input=input,i1=i2,numberOfPoints + setLen1=numberOfPoints + setLen2
input=input,i1=i2,maxNumberOfPoints + numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
input=input,i1=i2,numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3721: (opar[0],r) (u[i],r) 
L3722: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3722)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3721)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3721)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3722: (opar[ji],r) (u[il],r) 
		}
L3723: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3723)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3722)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3722)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->outsz[0] ++i
induction variable: ['i']
{
L3723: (outptr[0][i]=,w) (outsz[0]+,r) 
}
array table
-----------------------------------------------
outsz -> [('[0]', 'r', 'normalized', ['i'], 3723)]
LDEs formed:0

outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3723)]
LDEs formed:2

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->outsz[0] ++i
induction variable: ['i']
{
L3724: (outptr[0][i]=,w) (rpar[i],r) 
}
array table
-----------------------------------------------
outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3724)]
LDEs formed:2

rpar -> [('[i]', 'r', 'normalized', ['i'], 3724)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(mu*nu) i++
induction variable: ['i']
{
L3725: (LA[2*i]=,w) (ur[i],r) 
L3726: (LA[2*i+1]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ur -> [('[i]', 'r', 'normalized', ['i'], 3725)]
LDEs formed:0

ui -> [('[i]', 'r', 'normalized', ['i'], 3726)]
LDEs formed:0

LA -> [('[2*i]', 'w', 'normalized', ['i'], 3725), ('[2*i+1]', 'w', 'normalized', ['i'], 3726)]
LDEs formed:3

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3727: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3727)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3727)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3728: (opar[0],r) (u[i],r) 
L3729: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3729)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3728)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3728)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3729: (opar[ji],r) (u[il],r) 
		}
L3730: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3730)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3729)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3729)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L3730: (u1[ji],r) (u2[il],r) 
		}
L3731: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3731)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3730)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3730)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3731: (inptr[i],r) 
	loop info: j = 0  j < block->insz[i]  j++
	induction variable: ['i', 'j']
	{
	}
 }
array table
-----------------------------------------------
inptr -> [('[i]', 'r', 'normalized', ['i', 'j'], 3731)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3732: (internal.maxNumberOfPoints[i]+,r) (internal.numberOfPoints[i],r) 
L3733: (scope.disableBufferUpdate[i]=,w) 
L3734: (scope.historyUpdateCounter[i]=,w) 
L3735: (internal.maxNumberOfPoints[i],r) 
}
array table
-----------------------------------------------
internal.maxNumberOfPoints -> [('[i]', 'r', 'normalized', ['i'], 3732), ('[i]', 'r', 'normalized', ['i'], 3735)]
LDEs formed:0

internal.numberOfPoints -> [('[i]', 'r', 'normalized', ['i'], 3732)]
LDEs formed:0

scope.disableBufferUpdate -> [('[i]', 'w', 'normalized', ['i'], 3733)]
LDEs formed:1

scope.historyUpdateCounter -> [('[i]', 'w', 'normalized', ['i'], 3734)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3735: (ipar[2],r) 
L3736: (internal.numberOfPoints[i]=,w) 
L3737: (internal.maxNumberOfPoints[i]=,w) 
}
array table
-----------------------------------------------
internal.maxNumberOfPoints -> [('[i]', 'w', 'normalized', ['i'], 3737)]
LDEs formed:1

internal.numberOfPoints -> [('[i]', 'w', 'normalized', ['i'], 3736)]
LDEs formed:1

ipar -> [('[2]', 'r', 'normalized', ['i'], 3735)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3736: (internal.bufferCoordinates[i]=,w) (insz[i],r) 
L3737: (internal.bufferCoordinates[i]==,r) 
}
array table
-----------------------------------------------
insz -> [('[i]', 'r', 'normalized', ['i'], 3736)]
LDEs formed:0

internal.bufferCoordinates -> [('[i]', 'w', 'normalized', ['i'], 3736), ('[i]', 'r', 'normalized', ['i'], 3737)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
	loop info: j = 0  j < block->insz[i]  j++
	induction variable: ['i', 'j']
	{
	L3738: (internal.bufferCoordinates[i][j]=,w) (ipar[2],r) 
	L3739: (internal.bufferCoordinates[i][j]==,r) 
	}
 }
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[i][j]', 'w', 'normalized', ['i', 'j'], 3738), ('[i][j]', 'r', 'normalized', ['i', 'j'], 3739)]
LDEs formed:4

ipar -> [('[2]', 'r', 'normalized', ['i', 'j'], 3738)]
LDEs formed:0

distinct LDEs:
i1=i2,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3739: (internal.historyCoordinates[i]=,w) (insz[i],r) 
L3740: (internal.historyCoordinates[i]==,r) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[i]', 'w', 'normalized', ['i'], 3739), ('[i]', 'r', 'normalized', ['i'], 3740)]
LDEs formed:2

insz -> [('[i]', 'r', 'normalized', ['i'], 3739)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3740: (scope.cachedBufferPolylinesUIDs[i]=,w) (insz[i],r) 
L3741: (scope.cachedHistoryPolylinesUIDs[i]=,w) (insz[i],r) 
}
array table
-----------------------------------------------
insz -> [('[i]', 'r', 'normalized', ['i'], 3740), ('[i]', 'r', 'normalized', ['i'], 3741)]
LDEs formed:0

scope.cachedHistoryPolylinesUIDs -> [('[i]', 'w', 'normalized', ['i'], 3741)]
LDEs formed:1

scope.cachedBufferPolylinesUIDs -> [('[i]', 'w', 'normalized', ['i'], 3740)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L3741: (internal.historyCoordinates[i],r) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[i]', 'r', 'not normalized', ['j'], 3741)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < i  k++
induction variable: ['k']
{
	loop info: l = 0  l < j  l++
	induction variable: ['k', 'l']
	{
	L3742: (internal.bufferCoordinates[k][l],r) 
	}
 }
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[k][l]', 'r', 'normalized', ['k', 'l'], 3742)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L3743: (internal.bufferCoordinates[i],r) 
}
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[i]', 'r', 'not normalized', ['j'], 3743)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
	loop info: j = 0  j < block->insz[i]  j++
	induction variable: ['i', 'j']
	{
	L3744: (internal.historyCoordinates[i][j],r) 
	L3745: (internal.historyCoordinates[i][j],r) 
	L3746: (internal.bufferCoordinates[i][j],r) 
	}
L3747: (internal.historyCoordinates[i],r) 
L3748: (internal.bufferCoordinates[i],r) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3744), ('[i][j]', 'r', 'normalized', ['i', 'j'], 3745), ('[i]', 'r', 'normalized', ['i', 'j'], 3747)]
LDEs formed:0

internal.bufferCoordinates -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3746), ('[i]', 'r', 'normalized', ['i', 'j'], 3748)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
L3749: (scope.cachedHistoryPolylinesUIDs[i],r) 
L3750: (scope.cachedBufferPolylinesUIDs[i],r) 
}
array table
-----------------------------------------------
scope.cachedHistoryPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 3749)]
LDEs formed:0

scope.cachedBufferPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 3750)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3751: (internal.historyCoordinates[input][i],r) 
L3752: (internal.historyCoordinates[input][i]+,r) 
L3753: (internal.bufferCoordinates[input][i],r) 
L3754: (internal.historyCoordinates[input][i],r) 
L3755: (internal.historyCoordinates[input][i]=,w) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[input][i]', 'r', 'not normalized', ['i'], 3751), ('[input][i]', 'r', 'not normalized', ['i'], 3752), ('[input][i]', 'r', 'not normalized', ['i'], 3754), ('[input][i]', 'w', 'not normalized', ['i'], 3755)]
LDEs formed:8

internal.bufferCoordinates -> [('[input][i]', 'r', 'not normalized', ['i'], 3753)]
LDEs formed:0

distinct LDEs:
input=input,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: setLen = numberOfPoints  setLen < bufferPoints  setLen++
induction variable: ['setLen']
{
L3754: (coordinates[setLen]=,w) 
}
array table
-----------------------------------------------
coordinates -> [('[setLen]', 'w', 'normalized', ['setLen'], 3754)]
LDEs formed:1

distinct LDEs:
setLen1=setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: setLen = numberOfPoints  setLen < bufferPoints  setLen++
induction variable: ['setLen']
{
L3755: (coordinates[bufferPoints + setLen]=,w) 
}
array table
-----------------------------------------------
coordinates -> [('[bufferPoints + setLen]', 'w', 'not normalized', ['setLen'], 3755)]
LDEs formed:1

distinct LDEs:
bufferPoints + setLen1=bufferPoints + setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3756: (internal.bufferCoordinates[input][i][0]=,w) (internal.bufferCoordinates[input][i],r) (internal.numberOfPoints[input]-,r) 
L3757: (internal.bufferCoordinates[input][i],r) (ipar[2],r) (internal.bufferCoordinates[input][i],r) (ipar[2]+,r) (internal.numberOfPoints[input]-,r) 
}
array table
-----------------------------------------------
internal.numberOfPoints -> [('[input]', 'r', 'not normalized', ['i'], 3756), ('[input]', 'r', 'not normalized', ['i'], 3757)]
LDEs formed:0

internal.bufferCoordinates -> [('[input][i][0]', 'w', 'not normalized', ['i'], 3756), ('[input][i]', 'r', 'not normalized', ['i'], 3756), ('[input][i]', 'r', 'not normalized', ['i'], 3757), ('[input][i]', 'r', 'not normalized', ['i'], 3757)]
LDEs formed:8

ipar -> [('[2]', 'r', 'normalized', ['i'], 3757), ('[2]', 'r', 'normalized', ['i'], 3757)]
LDEs formed:0

distinct LDEs:
input=input,i1=i2
input=input,i1=i2,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3758: (internal.historyCoordinates[input][i],r) 
L3759: (internal.historyCoordinates[input][i],r) 
L3760: (internal.historyCoordinates[input][i]=,w) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[input][i]', 'r', 'not normalized', ['i'], 3758), ('[input][i]', 'r', 'not normalized', ['i'], 3759), ('[input][i]', 'w', 'not normalized', ['i'], 3760)]
LDEs formed:6

distinct LDEs:
input=input,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3761: (internal.bufferCoordinates[input][i][0]=,w) (internal.bufferCoordinates[input][i],r) (ipar[2]-,r) 
L3762: (internal.bufferCoordinates[input][i],r) (ipar[2],r) (internal.bufferCoordinates[input][i],r) (ipar[2]-,r) 
}
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[input][i][0]', 'w', 'not normalized', ['i'], 3761), ('[input][i]', 'r', 'not normalized', ['i'], 3761), ('[input][i]', 'r', 'not normalized', ['i'], 3762), ('[input][i]', 'r', 'not normalized', ['i'], 3762)]
LDEs formed:8

ipar -> [('[2]', 'r', 'normalized', ['i'], 3761), ('[2]', 'r', 'normalized', ['i'], 3762), ('[2]', 'r', 'normalized', ['i'], 3762)]
LDEs formed:0

distinct LDEs:
input=input,i1=i2
input=input,i1=i2,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3763: (data[i],r) 
L3764: (internal.bufferCoordinates[input][i],r) (internal.numberOfPoints[input],r) (ipar[2],r) 
}
array table
-----------------------------------------------
internal.bufferCoordinates -> [('[input][i]', 'r', 'not normalized', ['i'], 3764)]
LDEs formed:0

data -> [('[i]', 'r', 'normalized', ['i'], 3763)]
LDEs formed:0

ipar -> [('[2]', 'r', 'normalized', ['i'], 3764)]
LDEs formed:0

internal.numberOfPoints -> [('[input]', 'r', 'not normalized', ['i'], 3764)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->nin  i++
induction variable: ['i']
{
	loop info: j = 0  j < block->insz[i]  j++
	induction variable: ['i', 'j']
	{
	L3765: (scope.cachedBufferPolylinesUIDs[i][j],r) 
	}
 }
array table
-----------------------------------------------
scope.cachedBufferPolylinesUIDs -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 3765)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[input]  i++
induction variable: ['i']
{
L3766: (internal.historyCoordinates[input][i],r) 
}
array table
-----------------------------------------------
internal.historyCoordinates -> [('[input][i]', 'r', 'not normalized', ['i'], 3766)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3767: (opar[0],r) (u[i],r) 
L3768: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3768)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3767)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3767)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3768: (opar[ji],r) (u[il],r) 
		}
L3769: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3769)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3768)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3768)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3769: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3769)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3769)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3770: (u[i],r) 
	loop info: j=0 j<ipar[0] j++
	induction variable: ['i', 'j']
	{
	L3771: (y[i]=,w) 
	L3772: (y[i]==,r) (y[i]=,w) 
	L3773: (y[i]=,w) 
	L3774: (y[i]=,w) (y[i],r) 
	L3775: (y[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3771), ('[i]', 'r', 'normalized', ['i', 'j'], 3772), ('[i]', 'w', 'normalized', ['i', 'j'], 3772), ('[i]', 'w', 'normalized', ['i', 'j'], 3773), ('[i]', 'w', 'normalized', ['i', 'j'], 3774), ('[i]', 'r', 'normalized', ['i', 'j'], 3774), ('[i]', 'r', 'normalized', ['i', 'j'], 3775)]
LDEs formed:22

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3770)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L3771: (u1[ji],r) (u2[il],r) 
		}
L3772: (y[jl]=,w) 
L3773: (y[jl]=,w) 
L3774: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3772), ('[jl]', 'w', 'not normalized', ['l', 'i'], 3773), ('[jl]', 'w', 'not normalized', ['l', 'i'], 3774)]
LDEs formed:6

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3771)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3771)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->nipar ++i
induction variable: ['i']
{
L3772: (ipar[i]-,r) 
L3773: (insz[0],r) (insz[0]-,r) 
L3774: (outptr[0][i]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'not normalized', ['i'], 3774)]
LDEs formed:0

insz -> [('[0]', 'r', 'normalized', ['i'], 3773), ('[0]', 'r', 'normalized', ['i'], 3773)]
LDEs formed:0

outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3774)]
LDEs formed:2

ipar -> [('[i]', 'r', 'normalized', ['i'], 3772)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nu  j++
induction variable: ['j']
{
	loop info: bk = 1  bk < GetNin(block) + 1  bk++
	induction variable: ['j', 'bk']
	{
		loop info: i = 0  i < mu  i++
		induction variable: ['j', 'bk', 'i']
		{
		L3773: (yr[k]=,w) (ur[ij],r) 
		L3774: (yi[k]=,w) (ui[ij],r) 
		}
 	}
 }
array table
-----------------------------------------------
yi -> [('[k]', 'w', 'not normalized', ['j', 'bk', 'i'], 3774)]
LDEs formed:1

yr -> [('[k]', 'w', 'not normalized', ['j', 'bk', 'i'], 3773)]
LDEs formed:1

ui -> [('[ij]', 'r', 'not normalized', ['j', 'bk', 'i'], 3774)]
LDEs formed:0

ur -> [('[ij]', 'r', 'not normalized', ['j', 'bk', 'i'], 3773)]
LDEs formed:0

distinct LDEs:
k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3774: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 3774)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3775: (ipar[k],r) 
	L3776: (u[j],r) 
	L3777: (u[j],r) 
	}
L3778: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3778)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3776), ('[j]', 'r', 'normalized', ['j', 'k'], 3777)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3775)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3776: (y[0]=,w) (y[0]+,r) (u[j],r) 
}
array table
-----------------------------------------------
y -> [('[0]', 'w', 'normalized', ['j'], 3776), ('[0]', 'r', 'normalized', ['j'], 3776)]
LDEs formed:2

u -> [('[j]', 'r', 'normalized', ['j'], 3776)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3777: (y[j]=,w) 
	loop info: k=0 k<GetNin(block) k++
	induction variable: ['j', 'k']
	{
	L3778: (ipar[k],r) 
	L3779: (y[j]=,w) (y[j]+,r) (u[j],r) 
	L3780: (y[j]=,w) (y[j]-,r) (u[j],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3777), ('[j]', 'w', 'normalized', ['j', 'k'], 3779), ('[j]', 'r', 'normalized', ['j', 'k'], 3779), ('[j]', 'w', 'normalized', ['j', 'k'], 3780), ('[j]', 'r', 'normalized', ['j', 'k'], 3780)]
LDEs formed:12

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3779), ('[j]', 'r', 'normalized', ['j', 'k'], 3780)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3778)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*mu i++
induction variable: ['i']
{
L3779: (yr[0]+=,w) (ur[i],r) 
L3780: (yi[0]+=,w) (ui[i],r) 
}
array table
-----------------------------------------------
yi -> [('[0]', 'w', 'normalized', ['i'], 3780)]
LDEs formed:1

yr -> [('[0]', 'w', 'normalized', ['i'], 3779)]
LDEs formed:1

ui -> [('[i]', 'r', 'normalized', ['i'], 3780)]
LDEs formed:0

ur -> [('[i]', 'r', 'normalized', ['i'], 3779)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<*nin i++
induction variable: ['i']
{
L3780: (inptr[i],r) 
L3781: (record[i]=,w) 
}
array table
-----------------------------------------------
record -> [('[i]', 'w', 'normalized', ['i'], 3781)]
LDEs formed:1

inptr -> [('[i]', 'r', 'normalized', ['i'], 3780)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nu*mu  i++
induction variable: ['i']
{
L3781: (y[0]=,w) (u[i]+,r) (y[0],r) 
}
array table
-----------------------------------------------
y -> [('[0]', 'w', 'normalized', ['i'], 3781), ('[0]', 'r', 'normalized', ['i'], 3781)]
LDEs formed:2

u -> [('[i]', 'r', 'normalized', ['i'], 3781)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(mu*nu) i++
induction variable: ['i']
{
L3782: (dwork[2*i]=,w) (ur[i],r) 
L3783: (dwork[2*i+1]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ui -> [('[i]', 'r', 'normalized', ['i'], 3783)]
LDEs formed:0

dwork -> [('[2*i]', 'w', 'normalized', ['i'], 3782), ('[2*i+1]', 'w', 'normalized', ['i'], 3783)]
LDEs formed:3

ur -> [('[i]', 'r', 'normalized', ['i'], 3782)]
LDEs formed:0

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<=(mz*nz)-2  i++
induction variable: ['i']
{
L3783: (oz[i]=,w) (oz[i+1],r) 
}
array table
-----------------------------------------------
oz -> [('[i]', 'w', 'normalized', ['i'], 3783), ('[i+1]', 'r', 'normalized', ['i'], 3783)]
LDEs formed:2

distinct LDEs:
i1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<*ntvec i++
induction variable: ['i']
{
	loop info: j=0 j<*ng j++
	induction variable: ['i', 'j']
	{
	L3784: (rpar[(*ng+1)*i+j],r) 
	L3785: (rpar[(*ng+1)*i+j]*,r) (g[j],r) 
	}
L3786: (tvec[i]=,w) (rpar[(*ng+1)*i+*ng],r) 
L3787: (tvec[i]=,w) 
}
array table
-----------------------------------------------
tvec -> [('[i]', 'w', 'normalized', ['i', 'j'], 3786), ('[i]', 'w', 'normalized', ['i', 'j'], 3787)]
LDEs formed:3

g -> [('[j]', 'r', 'normalized', ['i', 'j'], 3785)]
LDEs formed:0

rpar -> [('[(*ng+1)*i+j]', 'r', 'not normalized', ['i', 'j'], 3784), ('[(*ng+1)*i+j]', 'r', 'not normalized', ['i', 'j'], 3785), ('[(*ng+1)*i+*ng]', 'r', 'not normalized', ['i', 'j'], 3786)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i< block->insz[0] i++
induction variable: ['i']
{
L3787: (inptr[0][i],r) 
L3788: (outptr[0][i]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3788)]
LDEs formed:2

inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3787)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i< block->insz[0] i++
induction variable: ['i']
{
L3788: (inptr[0][i],r) 
L3789: (outptr[0][i]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3789)]
LDEs formed:2

inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3788)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L3789: (u1[ji],r) (u2[il],r) 
		}
L3790: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3790)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3789)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3789)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->nx ++i
induction variable: ['i']
{
L3790: (mode[i]==,r) 
L3791: (xd[i]=,w) (inptr[0][i],r) 
L3792: (xd[i]=,w) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3791)]
LDEs formed:0

mode -> [('[i]', 'r', 'normalized', ['i'], 3790)]
LDEs formed:0

xd -> [('[i]', 'w', 'normalized', ['i'], 3791), ('[i]', 'w', 'normalized', ['i'], 3792)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->nx ++i
induction variable: ['i']
{
L3793: (xd[i]=,w) (inptr[0][i],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3793)]
LDEs formed:0

xd -> [('[i]', 'w', 'normalized', ['i'], 3793)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->nx ++i
induction variable: ['i']
{
L3794: (outptr[0][i]=,w) (x[i],r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'r', 'normalized', ['i'], 3794)]
LDEs formed:0

outptr -> [('[0][i]', 'w', 'normalized', ['i'], 3794)]
LDEs formed:2

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->nx ++i
induction variable: ['i']
{
L3795: (x[i]=,w) (inptr[1][i],r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'w', 'normalized', ['i'], 3795)]
LDEs formed:1

inptr -> [('[1][i]', 'r', 'normalized', ['i'], 3795)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->nx ++i
induction variable: ['i']
{
L3796: (mode[i]==,r) 
L3797: (g[i]=,w) (x[i]-,r) (rpar[i],r) (x[i]-,r) (rpar[block->nx+i],r) 
L3798: (g[i]=,w) (inptr[0][i],r) 
L3799: (inptr[0][i],r) (x[i],r) (rpar[i],r) 
L3800: (mode[i]=,w) 
L3801: (inptr[0][i],r) (x[i],r) (rpar[block->nx+i],r) 
L3802: (mode[i]=,w) 
L3803: (mode[i]=,w) 
}
array table
-----------------------------------------------
x -> [('[i]', 'r', 'normalized', ['i'], 3797), ('[i]', 'r', 'normalized', ['i'], 3797), ('[i]', 'r', 'normalized', ['i'], 3799), ('[i]', 'r', 'normalized', ['i'], 3801)]
LDEs formed:0

inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3798), ('[0][i]', 'r', 'normalized', ['i'], 3799), ('[0][i]', 'r', 'normalized', ['i'], 3801)]
LDEs formed:0

mode -> [('[i]', 'r', 'normalized', ['i'], 3796), ('[i]', 'w', 'normalized', ['i'], 3800), ('[i]', 'w', 'normalized', ['i'], 3802), ('[i]', 'w', 'normalized', ['i'], 3803)]
LDEs formed:9

g -> [('[i]', 'w', 'normalized', ['i'], 3797), ('[i]', 'w', 'normalized', ['i'], 3798)]
LDEs formed:3

rpar -> [('[i]', 'r', 'normalized', ['i'], 3797), ('[block->nx+i]', 'r', 'not normalized', ['i'], 3797), ('[i]', 'r', 'normalized', ['i'], 3799), ('[block->nx+i]', 'r', 'not normalized', ['i'], 3801)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3802: (u[i],r) 
	L3803: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3803)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3802)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3803: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3804: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3803), ('[i]', 'w', 'normalized', ['i', 'j'], 3804), ('[i]', 'r', 'normalized', ['i', 'j'], 3804)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3803), ('[i]', 'r', 'normalized', ['i', 'j'], 3804)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3805: (u[i],r) 
	L3806: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3806)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3805)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3806: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3806), ('[i]', 'r', 'normalized', ['i', 'j'], 3806)]
LDEs formed:2

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3806)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3807: (u[i],r) 
	L3808: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3808)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3807)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3808: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3809: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3810: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3808), ('[i]', 'w', 'normalized', ['i', 'j'], 3809), ('[i]', 'r', 'normalized', ['i', 'j'], 3809), ('[i]', 'w', 'normalized', ['i', 'j'], 3810), ('[i]', 'r', 'normalized', ['i', 'j'], 3810)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3808), ('[i]', 'r', 'normalized', ['i', 'j'], 3809)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3810: (u[i],r) 
	L3811: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3811)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3810)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3811: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3812: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3813: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3811), ('[i]', 'w', 'normalized', ['i', 'j'], 3812), ('[i]', 'r', 'normalized', ['i', 'j'], 3812), ('[i]', 'w', 'normalized', ['i', 'j'], 3813), ('[i]', 'r', 'normalized', ['i', 'j'], 3813)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3811), ('[i]', 'r', 'normalized', ['i', 'j'], 3812)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3813: (u[i],r) 
	}
L3814: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3814)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3813)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3814: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3815: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3814), ('[i]', 'w', 'normalized', ['i', 'j'], 3815), ('[i]', 'r', 'normalized', ['i', 'j'], 3815)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3814), ('[i]', 'r', 'normalized', ['i', 'j'], 3815)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3816: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3816)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3817: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 3817)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3818: (ipar[k],r) 
	L3819: (u[j],r) 
	L3820: (u[j],r) 
	}
L3821: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3821)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3819), ('[j]', 'r', 'normalized', ['j', 'k'], 3820)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3818)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3819: (internal.coordinates[i]=,w) (ipar[2],r) 
L3820: (internal.coordinates[i]==,r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'w', 'normalized', ['i'], 3819), ('[i]', 'r', 'normalized', ['i'], 3820)]
LDEs formed:2

ipar -> [('[2]', 'r', 'normalized', ['i'], 3819)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L3820: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'not normalized', ['j'], 3820)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3821: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'normalized', ['i'], 3821)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3822: (scope.cachedPolylinesUIDs[i],r) 
}
array table
-----------------------------------------------
scope.cachedPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 3822)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3823: (internal.coordinates[i],r) 
	loop info: setLen = newPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3824: (ptr[2 * numberOfPoints + previousNumberOfPoints + setLen]=,w) (ptr[2 * numberOfPoints + previousNumberOfPoints - 1],r) 
	}
L3825: (ptr[numberOfPoints + previousNumberOfPoints + setLen]=,w) (ptr[numberOfPoints + previousNumberOfPoints - 1],r) 
	loop info: setLen = newPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3826: (ptr[previousNumberOfPoints + setLen]=,w) (ptr[previousNumberOfPoints - 1],r) 
	}
L3827: (internal.coordinates[i]=,w) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 3823), ('[i]', 'w', 'normalized', ['i', 'setLen'], 3827)]
LDEs formed:2

ptr -> [('[2 * numberOfPoints + previousNumberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3824), ('[2 * numberOfPoints + previousNumberOfPoints - 1]', 'r', 'not normalized', ['i', 'setLen'], 3824), ('[numberOfPoints + previousNumberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3825), ('[numberOfPoints + previousNumberOfPoints - 1]', 'r', 'not normalized', ['i', 'setLen'], 3825), ('[previousNumberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3826), ('[previousNumberOfPoints - 1]', 'r', 'not normalized', ['i', 'setLen'], 3826)]
LDEs formed:15

distinct LDEs:
2 * numberOfPoints + previousNumberOfPoints - 1=previousNumberOfPoints + setLen2
2 * numberOfPoints + previousNumberOfPoints + setLen1=previousNumberOfPoints + setLen2
2 * numberOfPoints + previousNumberOfPoints - 1=numberOfPoints + previousNumberOfPoints + setLen2
i1=i2
2 * numberOfPoints + previousNumberOfPoints + setLen1=2 * numberOfPoints + previousNumberOfPoints + setLen2
previousNumberOfPoints + setLen1=previousNumberOfPoints + setLen2
2 * numberOfPoints + previousNumberOfPoints + setLen1=numberOfPoints + previousNumberOfPoints + setLen2
numberOfPoints + previousNumberOfPoints + setLen1=previousNumberOfPoints + setLen2
numberOfPoints + previousNumberOfPoints + setLen1=numberOfPoints + previousNumberOfPoints + setLen2
numberOfPoints + previousNumberOfPoints - 1=previousNumberOfPoints + setLen2
2 * numberOfPoints + previousNumberOfPoints + setLen1=2 * numberOfPoints + previousNumberOfPoints - 1
numberOfPoints + previousNumberOfPoints + setLen1=previousNumberOfPoints - 1
2 * numberOfPoints + previousNumberOfPoints + setLen1=numberOfPoints + previousNumberOfPoints - 1
2 * numberOfPoints + previousNumberOfPoints + setLen1=previousNumberOfPoints - 1
previousNumberOfPoints + setLen1=previousNumberOfPoints - 1
numberOfPoints + previousNumberOfPoints + setLen1=numberOfPoints + previousNumberOfPoints - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3827: (internal.coordinates[i][numberOfPoints + setLen]=,w) (x[i],r) 
	}
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3828: (internal.coordinates[i][maxNumberOfPoints + numberOfPoints + setLen]=,w) (y[i],r) 
	}
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3829: (internal.coordinates[i][2 * maxNumberOfPoints + numberOfPoints + setLen]=,w) (z[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 3828)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 3827)]
LDEs formed:0

z -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 3829)]
LDEs formed:0

internal.coordinates -> [('[i][numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3827), ('[i][maxNumberOfPoints + numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3828), ('[i][2 * maxNumberOfPoints + numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3829)]
LDEs formed:12

distinct LDEs:
i1=i2,numberOfPoints + setLen1=2 * maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,numberOfPoints + setLen1=numberOfPoints + setLen2
i1=i2,2 * maxNumberOfPoints + numberOfPoints + setLen1=2 * maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,maxNumberOfPoints + numberOfPoints + setLen1=2 * maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,maxNumberOfPoints + numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3830: (u[i],r) 
	loop info: j=0 j<-ipar[0] j++
	induction variable: ['i', 'j']
	{
	L3831: (y[i]=,w) 
	L3832: (y[i]==,r) 
	L3833: (y[i]=,w) 
	L3834: (y[i]=,w) (y[i]&,r) 
	L3835: (y[i]=,w) 
	L3836: (y[i]=,w) (y[i],r) 
	L3837: (y[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3831), ('[i]', 'r', 'normalized', ['i', 'j'], 3832), ('[i]', 'w', 'normalized', ['i', 'j'], 3833), ('[i]', 'w', 'normalized', ['i', 'j'], 3834), ('[i]', 'r', 'normalized', ['i', 'j'], 3834), ('[i]', 'w', 'normalized', ['i', 'j'], 3835), ('[i]', 'w', 'normalized', ['i', 'j'], 3836), ('[i]', 'r', 'normalized', ['i', 'j'], 3836), ('[i]', 'r', 'normalized', ['i', 'j'], 3837)]
LDEs formed:35

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3830)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(mu*nu) i++
induction variable: ['i']
{
L3831: (LA[2*i]=,w) (ur[i],r) 
L3832: (LA[2*i+1]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ur -> [('[i]', 'r', 'normalized', ['i'], 3831)]
LDEs formed:0

ui -> [('[i]', 'r', 'normalized', ['i'], 3832)]
LDEs formed:0

LA -> [('[2*i]', 'w', 'normalized', ['i'], 3831), ('[2*i+1]', 'w', 'normalized', ['i'], 3832)]
LDEs formed:3

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3833: (y[0]=,w) (y[0]+,r) (u[j],r) 
}
array table
-----------------------------------------------
y -> [('[0]', 'w', 'normalized', ['j'], 3833), ('[0]', 'r', 'normalized', ['j'], 3833)]
LDEs formed:2

u -> [('[j]', 'r', 'normalized', ['j'], 3833)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3834: (y[j]=,w) 
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3835: (ipar[k],r) 
	L3836: (y[j]=,w) (y[j]+,r) (u[j],r) 
	L3837: (y[j]=,w) (y[j]-,r) (u[j],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3834), ('[j]', 'w', 'normalized', ['j', 'k'], 3836), ('[j]', 'r', 'normalized', ['j', 'k'], 3836), ('[j]', 'w', 'normalized', ['j', 'k'], 3837), ('[j]', 'r', 'normalized', ['j', 'k'], 3837)]
LDEs formed:12

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3836), ('[j]', 'r', 'normalized', ['j', 'k'], 3837)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3835)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3836: (opar[0],r) (u[i],r) 
L3837: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3837)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3836)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3836)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3837: (opar[ji],r) (u[il],r) 
		}
L3838: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3838)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3837)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3837)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3838: (y[0]=,w) (y[0]+,r) (u[j],r) 
}
array table
-----------------------------------------------
y -> [('[0]', 'w', 'normalized', ['j'], 3838), ('[0]', 'r', 'normalized', ['j'], 3838)]
LDEs formed:2

u -> [('[j]', 'r', 'normalized', ['j'], 3838)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3839: (y[j]=,w) 
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3840: (ipar[k],r) 
	L3841: (y[j]=,w) (y[j]+,r) (u[j],r) 
	L3842: (y[j]=,w) (y[j]-,r) (u[j],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3839), ('[j]', 'w', 'normalized', ['j', 'k'], 3841), ('[j]', 'r', 'normalized', ['j', 'k'], 3841), ('[j]', 'w', 'normalized', ['j', 'k'], 3842), ('[j]', 'r', 'normalized', ['j', 'k'], 3842)]
LDEs formed:12

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3841), ('[j]', 'r', 'normalized', ['j', 'k'], 3842)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3840)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3841: (opar[0],r) (u[i],r) 
L3842: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3842)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3841)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3841)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3842: (opar[ji],r) (u[il],r) 
		}
L3843: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3843)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3842)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3842)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3843: (u[i],r) 
	L3844: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3844)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3843)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3844: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3845: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3844), ('[i]', 'w', 'normalized', ['i', 'j'], 3845), ('[i]', 'r', 'normalized', ['i', 'j'], 3845)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3844), ('[i]', 'r', 'normalized', ['i', 'j'], 3845)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3846: (u[i],r) 
	L3847: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3847)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3846)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3847: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3847), ('[i]', 'r', 'normalized', ['i', 'j'], 3847)]
LDEs formed:2

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3847)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3848: (u[i],r) 
	L3849: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3849)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3848)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3849: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3850: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3851: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3849), ('[i]', 'w', 'normalized', ['i', 'j'], 3850), ('[i]', 'r', 'normalized', ['i', 'j'], 3850), ('[i]', 'w', 'normalized', ['i', 'j'], 3851), ('[i]', 'r', 'normalized', ['i', 'j'], 3851)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3849), ('[i]', 'r', 'normalized', ['i', 'j'], 3850)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3851: (u[i],r) 
	L3852: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3852)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3851)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3852: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3853: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3854: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3852), ('[i]', 'w', 'normalized', ['i', 'j'], 3853), ('[i]', 'r', 'normalized', ['i', 'j'], 3853), ('[i]', 'w', 'normalized', ['i', 'j'], 3854), ('[i]', 'r', 'normalized', ['i', 'j'], 3854)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3852), ('[i]', 'r', 'normalized', ['i', 'j'], 3853)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3854: (u[i],r) 
	}
L3855: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3855)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3854)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3855: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3856: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3855), ('[i]', 'w', 'normalized', ['i', 'j'], 3856), ('[i]', 'r', 'normalized', ['i', 'j'], 3856)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3855), ('[i]', 'r', 'normalized', ['i', 'j'], 3856)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3857: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3857)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3858: (u[i],r) 
	L3859: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3859)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3858)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3859: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3860: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3859), ('[i]', 'w', 'normalized', ['i', 'j'], 3860), ('[i]', 'r', 'normalized', ['i', 'j'], 3860)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3859), ('[i]', 'r', 'normalized', ['i', 'j'], 3860)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3861: (u[i],r) 
	L3862: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3862)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3861)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3862: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3862), ('[i]', 'r', 'normalized', ['i', 'j'], 3862)]
LDEs formed:2

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3862)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3863: (u[i],r) 
	L3864: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3864)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3863)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3864: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3865: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3866: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3864), ('[i]', 'w', 'normalized', ['i', 'j'], 3865), ('[i]', 'r', 'normalized', ['i', 'j'], 3865), ('[i]', 'w', 'normalized', ['i', 'j'], 3866), ('[i]', 'r', 'normalized', ['i', 'j'], 3866)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3864), ('[i]', 'r', 'normalized', ['i', 'j'], 3865)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3866: (u[i],r) 
	L3867: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3867)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3866)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3867: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3868: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3869: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3867), ('[i]', 'w', 'normalized', ['i', 'j'], 3868), ('[i]', 'r', 'normalized', ['i', 'j'], 3868), ('[i]', 'w', 'normalized', ['i', 'j'], 3869), ('[i]', 'r', 'normalized', ['i', 'j'], 3869)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3867), ('[i]', 'r', 'normalized', ['i', 'j'], 3868)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3869: (u[i],r) 
	}
L3870: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3870)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3869)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3870: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3871: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3870), ('[i]', 'w', 'normalized', ['i', 'j'], 3871), ('[i]', 'r', 'normalized', ['i', 'j'], 3871)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3870), ('[i]', 'r', 'normalized', ['i', 'j'], 3871)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3872: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3872)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<=(mz*nz)-2  i++
induction variable: ['i']
{
L3873: (oz[i]=,w) (oz[i+1],r) 
}
array table
-----------------------------------------------
oz -> [('[i]', 'w', 'normalized', ['i'], 3873), ('[i+1]', 'r', 'normalized', ['i'], 3873)]
LDEs formed:2

distinct LDEs:
i1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3874: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3874)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3874)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3875: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 3875)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3876: (ipar[k],r) 
	L3877: (u[j],r) 
	L3878: (u[j],r) 
	}
L3879: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3879)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3877), ('[j]', 'r', 'normalized', ['j', 'k'], 3878)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3876)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3877: (internal.coordinates[i]=,w) (ipar[2],r) 
L3878: (internal.coordinates[i]==,r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'w', 'normalized', ['i'], 3877), ('[i]', 'r', 'normalized', ['i'], 3878)]
LDEs formed:2

ipar -> [('[2]', 'r', 'normalized', ['i'], 3877)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L3878: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'not normalized', ['j'], 3878)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3879: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'normalized', ['i'], 3879)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3880: (scope.cachedPolylinesUIDs[i],r) 
L3881: (scope.cachedPolylinesUIDs[i]=,w) 
}
array table
-----------------------------------------------
scope.cachedPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 3880), ('[i]', 'w', 'normalized', ['i'], 3881)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L3882: (internal.coordinates[i],r) (internal.coordinates[i]+,r) 
L3883: (internal.coordinates[i][setLen]=,w) (x[i],r) 
L3884: (internal.coordinates[i]+,r) (internal.coordinates[i]+,r) 
L3885: (internal.coordinates[i][maxNumberOfPoints + setLen]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 3885)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 3883)]
LDEs formed:0

internal.coordinates -> [('[i]', 'r', 'normalized', ['i'], 3882), ('[i]', 'r', 'normalized', ['i'], 3882), ('[i][setLen]', 'w', 'not normalized', ['i'], 3883), ('[i]', 'r', 'normalized', ['i'], 3884), ('[i]', 'r', 'normalized', ['i'], 3884), ('[i][maxNumberOfPoints + setLen]', 'w', 'not normalized', ['i'], 3885)]
LDEs formed:22

distinct LDEs:
i1=i2,setLen=maxNumberOfPoints + setLen
i1=i2,maxNumberOfPoints + setLen=maxNumberOfPoints + setLen
i1=i2,setLen=setLen
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3886: (internal.coordinates[i][numberOfPoints + setLen]=,w) (x[i],r) 
	}
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L3887: (internal.coordinates[i][maxNumberOfPoints + numberOfPoints + setLen]=,w) (y[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 3887)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 3886)]
LDEs formed:0

internal.coordinates -> [('[i][numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3886), ('[i][maxNumberOfPoints + numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 3887)]
LDEs formed:6

distinct LDEs:
i1=i2,numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,maxNumberOfPoints + numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,numberOfPoints + setLen1=numberOfPoints + setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3888: (y[0]=,w) (y[0]+,r) (u[j],r) 
}
array table
-----------------------------------------------
y -> [('[0]', 'w', 'normalized', ['j'], 3888), ('[0]', 'r', 'normalized', ['j'], 3888)]
LDEs formed:2

u -> [('[j]', 'r', 'normalized', ['j'], 3888)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3889: (y[j]=,w) 
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3890: (ipar[k],r) 
	L3891: (y[j]=,w) (y[j]+,r) (u[j],r) 
	L3892: (y[j]=,w) (y[j]-,r) (u[j],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3889), ('[j]', 'w', 'normalized', ['j', 'k'], 3891), ('[j]', 'r', 'normalized', ['j', 'k'], 3891), ('[j]', 'w', 'normalized', ['j', 'k'], 3892), ('[j]', 'r', 'normalized', ['j', 'k'], 3892)]
LDEs formed:12

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3891), ('[j]', 'r', 'normalized', ['j', 'k'], 3892)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3890)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<mu j++
induction variable: ['j']
{
	loop info: bk=1 bk<GetNin(block)+1 bk++
	induction variable: ['j', 'bk']
	{
		loop info: i=0 i<nu i++
		induction variable: ['j', 'bk', 'i']
		{
		L3891: (yr[k]=,w) (ur[ij],r) 
		L3892: (yi[k]=,w) (ui[ij],r) 
		}
 	}
 }
array table
-----------------------------------------------
yi -> [('[k]', 'w', 'not normalized', ['j', 'bk', 'i'], 3892)]
LDEs formed:1

yr -> [('[k]', 'w', 'not normalized', ['j', 'bk', 'i'], 3891)]
LDEs formed:1

ui -> [('[ij]', 'r', 'not normalized', ['j', 'bk', 'i'], 3892)]
LDEs formed:0

ur -> [('[ij]', 'r', 'not normalized', ['j', 'bk', 'i'], 3891)]
LDEs formed:0

distinct LDEs:
k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3892: (u1[i]==,r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3892)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3892)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3892)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3893: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3893)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3893)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3893)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3894: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3894)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3894)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3894)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3895: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3895)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3895)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3895)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3896: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3896)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3896)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3896)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3897: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3897)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3897)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3897)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3898: (u1[i]==,r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3898)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3898)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3898)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3899: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3899)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3899)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3899)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3900: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3900)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3900)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3900)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3901: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3901)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3901)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3901)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3902: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3902)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3902)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3902)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3903: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3903)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3903)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3903)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j<mu*nu j++
induction variable: ['j']
{
L3904: (yr[j]=,w) (ur[j]+,r) (yr[j-1],r) 
L3905: (yi[j]=,w) (ui[j]+,r) (yi[j-1],r) 
}
array table
-----------------------------------------------
yi -> [('[j]', 'w', 'normalized', ['j'], 3905), ('[j-1]', 'r', 'normalized', ['j'], 3905)]
LDEs formed:2

yr -> [('[j]', 'w', 'normalized', ['j'], 3904), ('[j-1]', 'r', 'normalized', ['j'], 3904)]
LDEs formed:2

ui -> [('[j]', 'r', 'normalized', ['j'], 3905)]
LDEs formed:0

ur -> [('[j]', 'r', 'normalized', ['j'], 3904)]
LDEs formed:0

distinct LDEs:
j1=j2
j1=j2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3905: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 3905)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3906: (ipar[k],r) 
	L3907: (u[j],r) 
	L3908: (u[j],r) 
	}
L3909: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3909)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3907), ('[j]', 'r', 'normalized', ['j', 'k'], 3908)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3906)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nPoints i++
induction variable: ['i']
{
L3907: (rpar[i],r) 
L3908: (ind[0]=,w) 
L3909: (ind[1]=,w) 
}
array table
-----------------------------------------------
ind -> [('[0]', 'w', 'normalized', ['i'], 3908), ('[1]', 'w', 'normalized', ['i'], 3909)]
LDEs formed:3

rpar -> [('[i]', 'r', 'normalized', ['i'], 3907)]
LDEs formed:0

distinct LDEs:
1=1
0=0
0=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=ind[0] i<nPoints i++
induction variable: ['i']
{
L3908: (rpar[i],r) 
L3909: (ind[1],r) 
L3910: (ind[1]=,w) 
L3911: (ind[0]=,w) (ind[1],r) 
L3912: (ind[1]=,w) 
}
array table
-----------------------------------------------
ind -> [('[1]', 'r', 'normalized', ['i'], 3909), ('[1]', 'w', 'normalized', ['i'], 3910), ('[0]', 'w', 'normalized', ['i'], 3911), ('[1]', 'r', 'normalized', ['i'], 3911), ('[1]', 'w', 'normalized', ['i'], 3912)]
LDEs formed:12

rpar -> [('[i]', 'r', 'normalized', ['i'], 3908)]
LDEs formed:0

distinct LDEs:
1=1
1=0
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<=(mz*nz)-2  i++
induction variable: ['i']
{
L3909: (oz[i]=,w) (oz[i+1],r) 
}
array table
-----------------------------------------------
oz -> [('[i]', 'w', 'normalized', ['i'], 3909), ('[i+1]', 'r', 'normalized', ['i'], 3909)]
LDEs formed:2

distinct LDEs:
i1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nclk  i++
induction variable: ['i']
{
L3910: (internal.maxNumberOfPoints[i]=,w) 
}
array table
-----------------------------------------------
internal.maxNumberOfPoints -> [('[i]', 'w', 'normalized', ['i'], 3910)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nclk  i++
induction variable: ['i']
{
L3911: (internal.data[2 * i + 0]=,w) 
L3912: (internal.data[2 * i + 0]==,r) 
L3913: (internal.data[2 * i + 1]=,w) 
L3914: (internal.data[2 * i + 1]==,r) 
L3915: (internal.data[2 * i + 0],r) 
}
array table
-----------------------------------------------
internal.data -> [('[2 * i + 0]', 'w', 'normalized', ['i'], 3911), ('[2 * i + 0]', 'r', 'normalized', ['i'], 3912), ('[2 * i + 1]', 'w', 'normalized', ['i'], 3913), ('[2 * i + 1]', 'r', 'normalized', ['i'], 3914), ('[2 * i + 0]', 'r', 'normalized', ['i'], 3915)]
LDEs formed:9

distinct LDEs:
2 * i1 + 0=2 * i2 + 1
2 * i1 + 0=2 * i2 + 0
2 * i1 + 1=2 * i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L3916: (internal.data[2 * j + 0],r) 
L3917: (internal.data[2 * j + 1],r) 
}
array table
-----------------------------------------------
internal.data -> [('[2 * j + 0]', 'r', 'normalized', ['j'], 3916), ('[2 * j + 1]', 'r', 'normalized', ['j'], 3917)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nclk  i++
induction variable: ['i']
{
L3918: (internal.data[i],r) 
}
array table
-----------------------------------------------
internal.data -> [('[i]', 'r', 'normalized', ['i'], 3918)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nclk  i++
induction variable: ['i']
{
L3919: (scope.cachedSegsUIDs[i],r) 
}
array table
-----------------------------------------------
scope.cachedSegsUIDs -> [('[i]', 'r', 'normalized', ['i'], 3919)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: setLen = numberOfPoints - previousNumberOfPoints - 1  setLen >= 0  setLen--
induction variable: ['setLen']
{
L3920: (ptr[3 * (previousNumberOfPoints + setLen) + 0]=,w) (ptr[3 * (previousNumberOfPoints - 1) + 0],r) 
L3921: (ptr[3 * (previousNumberOfPoints + setLen) + 1]=,w) (ptr[3 * (previousNumberOfPoints - 1) + 1],r) 
L3922: (ptr[3 * (previousNumberOfPoints + setLen) + 2]=,w) (ptr[3 * (previousNumberOfPoints - 1) + 2],r) 
}
array table
-----------------------------------------------
ptr -> [('[3 * (previousNumberOfPoints + setLen) + 0]', 'w', 'not normalized', ['setLen'], 3920), ('[3 * (previousNumberOfPoints - 1) + 0]', 'r', 'not normalized', ['setLen'], 3920), ('[3 * (previousNumberOfPoints + setLen) + 1]', 'w', 'not normalized', ['setLen'], 3921), ('[3 * (previousNumberOfPoints - 1) + 1]', 'r', 'not normalized', ['setLen'], 3921), ('[3 * (previousNumberOfPoints + setLen) + 2]', 'w', 'not normalized', ['setLen'], 3922), ('[3 * (previousNumberOfPoints - 1) + 2]', 'r', 'not normalized', ['setLen'], 3922)]
LDEs formed:15

distinct LDEs:
3 * (previousNumberOfPoints + setLen1) + 1=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints + setLen1) + 1=3 * (previousNumberOfPoints + setLen2) + 1
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints + setLen2) + 1
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints + setLen2) + 0
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints - 1) + 0=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints + setLen1) + 2=3 * (previousNumberOfPoints - 1) + 2
3 * (previousNumberOfPoints + setLen1) + 2=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints - 1) + 0=3 * (previousNumberOfPoints + setLen2) + 1
3 * (previousNumberOfPoints + setLen1) + 1=3 * (previousNumberOfPoints - 1) + 2
3 * (previousNumberOfPoints + setLen1) + 1=3 * (previousNumberOfPoints - 1) + 1
3 * (previousNumberOfPoints - 1) + 1=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints - 1) + 1
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints - 1) + 0
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints - 1) + 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: setLen = numberOfPoints - previousNumberOfPoints - 1  setLen >= 0  setLen--
induction variable: ['setLen']
{
L3923: (ptr[3 * (previousNumberOfPoints + setLen) + 0]=,w) (ptr[3 * (previousNumberOfPoints - 1) + 0],r) 
L3924: (ptr[3 * (previousNumberOfPoints + setLen) + 1]=,w) (ptr[3 * (previousNumberOfPoints - 1) + 1],r) 
L3925: (ptr[3 * (previousNumberOfPoints + setLen) + 2]=,w) (ptr[3 * (previousNumberOfPoints - 1) + 2],r) 
}
array table
-----------------------------------------------
ptr -> [('[3 * (previousNumberOfPoints + setLen) + 0]', 'w', 'not normalized', ['setLen'], 3923), ('[3 * (previousNumberOfPoints - 1) + 0]', 'r', 'not normalized', ['setLen'], 3923), ('[3 * (previousNumberOfPoints + setLen) + 1]', 'w', 'not normalized', ['setLen'], 3924), ('[3 * (previousNumberOfPoints - 1) + 1]', 'r', 'not normalized', ['setLen'], 3924), ('[3 * (previousNumberOfPoints + setLen) + 2]', 'w', 'not normalized', ['setLen'], 3925), ('[3 * (previousNumberOfPoints - 1) + 2]', 'r', 'not normalized', ['setLen'], 3925)]
LDEs formed:15

distinct LDEs:
3 * (previousNumberOfPoints + setLen1) + 1=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints + setLen1) + 1=3 * (previousNumberOfPoints + setLen2) + 1
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints + setLen2) + 1
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints + setLen2) + 0
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints - 1) + 0=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints + setLen1) + 2=3 * (previousNumberOfPoints - 1) + 2
3 * (previousNumberOfPoints + setLen1) + 2=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints - 1) + 0=3 * (previousNumberOfPoints + setLen2) + 1
3 * (previousNumberOfPoints + setLen1) + 1=3 * (previousNumberOfPoints - 1) + 2
3 * (previousNumberOfPoints + setLen1) + 1=3 * (previousNumberOfPoints - 1) + 1
3 * (previousNumberOfPoints - 1) + 1=3 * (previousNumberOfPoints + setLen2) + 2
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints - 1) + 1
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints - 1) + 0
3 * (previousNumberOfPoints + setLen1) + 0=3 * (previousNumberOfPoints - 1) + 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nclk  i++
induction variable: ['i']
{
L3926: (internal.numberOfPoints[i]=,w) 
}
array table
-----------------------------------------------
internal.numberOfPoints -> [('[i]', 'w', 'normalized', ['i'], 3926)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
induction variable: ['setLen']
{
L3927: (internal.data[2 * input + 0][3 * (numberOfPoints + setLen) + 0]=,w) 
L3928: (internal.data[2 * input + 0][3 * (numberOfPoints + setLen) + 1]=,w) 
L3929: (internal.data[2 * input + 0][3 * (numberOfPoints + setLen) + 2]=,w) 
}
array table
-----------------------------------------------
internal.data -> [('[2 * input + 0][3 * (numberOfPoints + setLen) + 0]', 'w', 'not normalized', ['setLen'], 3927), ('[2 * input + 0][3 * (numberOfPoints + setLen) + 1]', 'w', 'not normalized', ['setLen'], 3928), ('[2 * input + 0][3 * (numberOfPoints + setLen) + 2]', 'w', 'not normalized', ['setLen'], 3929)]
LDEs formed:12

distinct LDEs:
2 * input + 0=2 * input + 0,3 * (numberOfPoints + setLen1) + 2=3 * (numberOfPoints + setLen2) + 2
2 * input + 0=2 * input + 0,3 * (numberOfPoints + setLen1) + 1=3 * (numberOfPoints + setLen2) + 2
2 * input + 0=2 * input + 0,3 * (numberOfPoints + setLen1) + 1=3 * (numberOfPoints + setLen2) + 1
2 * input + 0=2 * input + 0,3 * (numberOfPoints + setLen1) + 0=3 * (numberOfPoints + setLen2) + 0
2 * input + 0=2 * input + 0,3 * (numberOfPoints + setLen1) + 0=3 * (numberOfPoints + setLen2) + 1
2 * input + 0=2 * input + 0,3 * (numberOfPoints + setLen1) + 0=3 * (numberOfPoints + setLen2) + 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
induction variable: ['setLen']
{
L3930: (internal.data[2 * input + 1][3 * (numberOfPoints + setLen) + 0]=,w) 
L3931: (internal.data[2 * input + 1][3 * (numberOfPoints + setLen) + 1]=,w) 
L3932: (internal.data[2 * input + 1][3 * (numberOfPoints + setLen) + 2]=,w) 
}
array table
-----------------------------------------------
internal.data -> [('[2 * input + 1][3 * (numberOfPoints + setLen) + 0]', 'w', 'not normalized', ['setLen'], 3930), ('[2 * input + 1][3 * (numberOfPoints + setLen) + 1]', 'w', 'not normalized', ['setLen'], 3931), ('[2 * input + 1][3 * (numberOfPoints + setLen) + 2]', 'w', 'not normalized', ['setLen'], 3932)]
LDEs formed:12

distinct LDEs:
2 * input + 1=2 * input + 1,3 * (numberOfPoints + setLen1) + 0=3 * (numberOfPoints + setLen2) + 0
2 * input + 1=2 * input + 1,3 * (numberOfPoints + setLen1) + 0=3 * (numberOfPoints + setLen2) + 1
2 * input + 1=2 * input + 1,3 * (numberOfPoints + setLen1) + 0=3 * (numberOfPoints + setLen2) + 2
2 * input + 1=2 * input + 1,3 * (numberOfPoints + setLen1) + 1=3 * (numberOfPoints + setLen2) + 2
2 * input + 1=2 * input + 1,3 * (numberOfPoints + setLen1) + 1=3 * (numberOfPoints + setLen2) + 1
2 * input + 1=2 * input + 1,3 * (numberOfPoints + setLen1) + 2=3 * (numberOfPoints + setLen2) + 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nclk  i++
induction variable: ['i']
{
L3933: (ipar[2 + i],r) 
}
array table
-----------------------------------------------
ipar -> [('[2 + i]', 'r', 'normalized', ['i'], 3933)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3934: (y[0]=,w) (y[0]+,r) (u[j],r) 
}
array table
-----------------------------------------------
y -> [('[0]', 'w', 'normalized', ['j'], 3934), ('[0]', 'r', 'normalized', ['j'], 3934)]
LDEs formed:2

u -> [('[j]', 'r', 'normalized', ['j'], 3934)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3935: (y[j]=,w) 
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3936: (ipar[k],r) 
	L3937: (y[j]=,w) (y[j]+,r) (u[j],r) 
	L3938: (y[j]=,w) (y[j]-,r) (u[j],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3935), ('[j]', 'w', 'normalized', ['j', 'k'], 3937), ('[j]', 'r', 'normalized', ['j', 'k'], 3937), ('[j]', 'w', 'normalized', ['j', 'k'], 3938), ('[j]', 'r', 'normalized', ['j', 'k'], 3938)]
LDEs formed:12

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3937), ('[j]', 'r', 'normalized', ['j', 'k'], 3938)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3936)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3937: (opar[0],r) (u[i],r) 
L3938: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3938)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3937)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3937)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3938: (opar[ji],r) (u[il],r) 
		}
L3939: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3939)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3938)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3938)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i <  *nu   ++i 
induction variable: ['i']
{
L3939: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3939)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3939)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3940: (y[0]=,w) (y[0]+,r) (u[j],r) 
}
array table
-----------------------------------------------
y -> [('[0]', 'w', 'normalized', ['j'], 3940), ('[0]', 'r', 'normalized', ['j'], 3940)]
LDEs formed:2

u -> [('[j]', 'r', 'normalized', ['j'], 3940)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3941: (y[j]=,w) 
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3942: (ipar[k],r) 
	L3943: (y[j]=,w) (y[j]+,r) (u[j],r) 
	L3944: (y[j]=,w) (y[j]-,r) (u[j],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3941), ('[j]', 'w', 'normalized', ['j', 'k'], 3943), ('[j]', 'r', 'normalized', ['j', 'k'], 3943), ('[j]', 'w', 'normalized', ['j', 'k'], 3944), ('[j]', 'r', 'normalized', ['j', 'k'], 3944)]
LDEs formed:12

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3943), ('[j]', 'r', 'normalized', ['j', 'k'], 3944)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3942)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3943: (u1[i]==,r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3943)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3943)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3943)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3944: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3944)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3944)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3944)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3945: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3945)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3945)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3945)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3946: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3946)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3946)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3946)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3947: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3947)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3947)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3947)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3948: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3948)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3948)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3948)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3949: (u1[i]==,r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3949)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3949)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3949)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3950: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3950)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3950)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3950)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3951: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3951)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3951)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3951)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3952: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3952)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3952)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3952)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3953: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3953)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3953)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3953)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3954: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3954)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3954)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3954)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L3955: (u1[ji],r) (u2[il],r) 
		}
	L3956: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 3956)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 3955)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 3955)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3956: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3956)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3956)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<=nz-2  i++
induction variable: ['i']
{
L3957: (z[i]=,w) (z[i+1],r) 
}
array table
-----------------------------------------------
z -> [('[i]', 'w', 'normalized', ['i'], 3957), ('[i+1]', 'r', 'normalized', ['i'], 3957)]
LDEs formed:2

distinct LDEs:
i1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n  i++
induction variable: ['i']
{
L3958: (y[i]=,w) 
	loop info: k = 0  k < *nin  k++
	induction variable: ['i', 'k']
	{
	L3959: (inptr[k],r) 
	L3960: (y[i]=,w) (y[i]*,r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'k'], 3958), ('[i]', 'w', 'normalized', ['i', 'k'], 3960), ('[i]', 'r', 'normalized', ['i', 'k'], 3960)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'k'], 3960)]
LDEs formed:0

inptr -> [('[k]', 'r', 'normalized', ['i', 'k'], 3959)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3960: (opar[0],r) (u[i],r) 
L3961: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3961)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3960)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3960)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3961: (opar[ji],r) (u[il],r) 
		}
L3962: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3962)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3961)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3961)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<n i++
induction variable: ['i']
{
L3962: (y[i]=,w) 
	loop info: k = 0 k < *nin  k++
	induction variable: ['i', 'k']
	{
	L3963: (inptr[k],r) 
	L3964: (y[i]=,w) (y[i]+,r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'k'], 3962), ('[i]', 'w', 'normalized', ['i', 'k'], 3964), ('[i]', 'r', 'normalized', ['i', 'k'], 3964)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'k'], 3964)]
LDEs formed:0

inptr -> [('[k]', 'r', 'normalized', ['i', 'k'], 3963)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L3964: (opar[0],r) (u[i],r) 
L3965: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3965)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 3964)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 3964)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L3965: (opar[ji],r) (u[il],r) 
		}
L3966: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 3966)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 3965)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 3965)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L3966: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 3966)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L3967: (ipar[k],r) 
	L3968: (u[j],r) 
	L3969: (u[j],r) 
	}
L3970: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 3970)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 3968), ('[j]', 'r', 'normalized', ['j', 'k'], 3969)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 3967)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L3968: (rw[2+2*i]=,w) 
L3969: (rw[3+2*i]=,w) 
}
array table
-----------------------------------------------
rw -> [('[2+2*i]', 'w', 'normalized', ['i'], 3968), ('[3+2*i]', 'w', 'normalized', ['i'], 3969)]
LDEs formed:3

distinct LDEs:
2+2*i1=2+2*i2
2+2*i1=3+2*i2
3+2*i1=3+2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L3970: (rw[3+2*i]=,w) (inptr[0][i],r) 
}
array table
-----------------------------------------------
rw -> [('[3+2*i]', 'w', 'normalized', ['i'], 3970)]
LDEs formed:1

inptr -> [('[0][i]', 'r', 'normalized', ['i'], 3970)]
LDEs formed:0

distinct LDEs:
3+2*i1=3+2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3971: (u[i],r) 
	L3972: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3972)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3971)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3972: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3973: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3972), ('[i]', 'w', 'normalized', ['i', 'j'], 3973), ('[i]', 'r', 'normalized', ['i', 'j'], 3973)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3972), ('[i]', 'r', 'normalized', ['i', 'j'], 3973)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3974: (u[i],r) 
	L3975: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3975)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3974)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3975: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3975), ('[i]', 'r', 'normalized', ['i', 'j'], 3975)]
LDEs formed:2

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3975)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3976: (u[i],r) 
	L3977: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3977)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3976)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3977: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3978: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3979: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3977), ('[i]', 'w', 'normalized', ['i', 'j'], 3978), ('[i]', 'r', 'normalized', ['i', 'j'], 3978), ('[i]', 'w', 'normalized', ['i', 'j'], 3979), ('[i]', 'r', 'normalized', ['i', 'j'], 3979)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3977), ('[i]', 'r', 'normalized', ['i', 'j'], 3978)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3979: (u[i],r) 
	L3980: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3980)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3979)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3980: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3981: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L3982: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3980), ('[i]', 'w', 'normalized', ['i', 'j'], 3981), ('[i]', 'r', 'normalized', ['i', 'j'], 3981), ('[i]', 'w', 'normalized', ['i', 'j'], 3982), ('[i]', 'r', 'normalized', ['i', 'j'], 3982)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3980), ('[i]', 'r', 'normalized', ['i', 'j'], 3981)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3982: (u[i],r) 
	}
L3983: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3983)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3982)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3983: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L3984: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3983), ('[i]', 'w', 'normalized', ['i', 'j'], 3984), ('[i]', 'r', 'normalized', ['i', 'j'], 3984)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3983), ('[i]', 'r', 'normalized', ['i', 'j'], 3984)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3985: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3985)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L3986: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 3986)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 3986)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L3987: (u[i],r) 
	loop info: j=0 j<-ipar[0] j++
	induction variable: ['i', 'j']
	{
	L3988: (y[i]=,w) 
	L3989: (y[i]==,r) 
	L3990: (y[i]=,w) 
	L3991: (y[i]=,w) (y[i]&,r) 
	L3992: (y[i]=,w) 
	L3993: (y[i]=,w) (y[i],r) 
	L3994: (y[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 3988), ('[i]', 'r', 'normalized', ['i', 'j'], 3989), ('[i]', 'w', 'normalized', ['i', 'j'], 3990), ('[i]', 'w', 'normalized', ['i', 'j'], 3991), ('[i]', 'r', 'normalized', ['i', 'j'], 3991), ('[i]', 'w', 'normalized', ['i', 'j'], 3992), ('[i]', 'w', 'normalized', ['i', 'j'], 3993), ('[i]', 'r', 'normalized', ['i', 'j'], 3993), ('[i]', 'r', 'normalized', ['i', 'j'], 3994)]
LDEs formed:35

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 3987)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nu*nu) i++
induction variable: ['i']
{
L3988: (LX[2*i]=,w) (ur[i],r) 
L3989: (LX[2*i+1]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ui -> [('[i]', 'r', 'normalized', ['i'], 3989)]
LDEs formed:0

LX -> [('[2*i]', 'w', 'normalized', ['i'], 3988), ('[2*i+1]', 'w', 'normalized', ['i'], 3989)]
LDEs formed:3

ur -> [('[i]', 'r', 'normalized', ['i'], 3988)]
LDEs formed:0

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nu*nu) i++
induction variable: ['i']
{
L3989: (yr[i]=,w) (LX[2*i],r) 
L3990: (yi[i]=,w) (LX[2*i+1],r) 
}
array table
-----------------------------------------------
yi -> [('[i]', 'w', 'normalized', ['i'], 3990)]
LDEs formed:1

yr -> [('[i]', 'w', 'normalized', ['i'], 3989)]
LDEs formed:1

LX -> [('[2*i]', 'r', 'normalized', ['i'], 3989), ('[2*i+1]', 'r', 'normalized', ['i'], 3990)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3991: (u1[i]==,r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3991)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3991)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3991)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3992: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3992)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3992)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3992)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3993: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3993)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3993)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3993)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3994: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3994)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3994)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3994)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3995: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3995)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3995)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3995)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3996: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 3996)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 3996)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 3996)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3997: (u1[i]==,r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3997)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3997)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3997)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3998: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3998)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3998)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3998)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L3999: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 3999)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 3999)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 3999)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4000: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4000)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4000)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4000)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4001: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4001)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4001)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4001)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4002: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4002)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4002)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4002)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < n  i++
induction variable: ['i']
{
L4003: (y[i]=,w) 
	loop info: k = 0  k < *nin  k++
	induction variable: ['i', 'k']
	{
	L4004: (inptr[k],r) 
	L4005: (rpar[k],r) 
	L4006: (y[i]=,w) (y[i]+,r) (u[i]*,r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'k'], 4003), ('[i]', 'w', 'normalized', ['i', 'k'], 4006), ('[i]', 'r', 'normalized', ['i', 'k'], 4006)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'k'], 4006)]
LDEs formed:0

inptr -> [('[k]', 'r', 'normalized', ['i', 'k'], 4004)]
LDEs formed:0

rpar -> [('[k]', 'r', 'normalized', ['i', 'k'], 4005)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nin  j += 2
induction variable: ['j']
{
L4006: (outsz[0]==,r) (insz[j],r) 
L4007: (outsz[1]==,r) (insz[nin + j],r) 
}
array table
-----------------------------------------------
outsz -> [('[0]', 'r', 'normalized', ['j'], 4006), ('[1]', 'r', 'normalized', ['j'], 4007)]
LDEs formed:0

insz -> [('[j]', 'r', 'normalized', ['j'], 4006), ('[nin + j]', 'r', 'not normalized', ['j'], 4007)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= len  i++
induction variable: ['i']
{
L4008: (values[i]=,w) 
}
array table
-----------------------------------------------
values -> [('[i]', 'w', 'normalized', ['i'], 4008)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L4009: (opar[0],r) (u[i],r) 
L4010: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4010)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4009)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 4009)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L4010: (opar[ji],r) (u[il],r) 
		}
L4011: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4011)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4010)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4010)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4011: (y1i[i]=,w) (u1r[i]*,r) (u2i[0],r) (u1i[i]*,r) (u2r[0],r) 
}
array table
-----------------------------------------------
u1i -> [('[i]', 'r', 'normalized', ['i'], 4011)]
LDEs formed:0

u1r -> [('[i]', 'r', 'normalized', ['i'], 4011)]
LDEs formed:0

y1i -> [('[i]', 'w', 'normalized', ['i'], 4011)]
LDEs formed:1

u2i -> [('[0]', 'r', 'normalized', ['i'], 4011)]
LDEs formed:0

u2r -> [('[0]', 'r', 'normalized', ['i'], 4011)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L4012: (u1[ji],r) (u2[il],r) 
		}
L4013: (y[jl]=,w) 
L4014: (y[jl]=,w) 
L4015: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4013), ('[jl]', 'w', 'not normalized', ['l', 'i'], 4014), ('[jl]', 'w', 'not normalized', ['l', 'i'], 4015)]
LDEs formed:6

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4012)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4012)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L4013: (opar[0],r) (u[i],r) 
L4014: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4014)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4013)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 4013)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L4014: (opar[ji],r) (u[il],r) 
		}
L4015: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4015)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4014)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4014)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<=(mz*nz)-2  i++
induction variable: ['i']
{
L4015: (oz[i]=,w) (oz[i+1],r) 
}
array table
-----------------------------------------------
oz -> [('[i]', 'w', 'normalized', ['i'], 4015), ('[i+1]', 'r', 'normalized', ['i'], 4015)]
LDEs formed:2

distinct LDEs:
i1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L4016: (u1[ji],r) (u2[il],r) 
		}
	L4017: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 4017)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 4016)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 4016)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=1 i< block->ipar[0] i++
induction variable: ['i']
{
L4017: (pw[i]=,w) (pw[i-1]+,r) (rpar[0],r) 
	loop info: j=1 j< block->insz[0]+1 j++
	induction variable: ['i', 'j']
	{
	L4018: (ipar[0]*,r) (rpar[1],r) 
	}
 }
array table
-----------------------------------------------
pw -> [('[i]', 'w', 'normalized', ['i', 'j'], 4017), ('[i-1]', 'r', 'normalized', ['i', 'j'], 4017)]
LDEs formed:2

ipar -> [('[0]', 'r', 'normalized', ['i', 'j'], 4018)]
LDEs formed:0

rpar -> [('[0]', 'r', 'normalized', ['i', 'j'], 4017), ('[1]', 'r', 'normalized', ['i', 'j'], 4018)]
LDEs formed:0

distinct LDEs:
i1=i2-1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j< block->insz[0]+1 j++
induction variable: ['j']
{
L4019: (ipar[0]*,r) (inptr[0][j-1],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j-1]', 'r', 'normalized', ['j'], 4019)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['j'], 4019)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j< block->insz[0]+1 j++
induction variable: ['j']
{
L4020: (ipar[0]+,r) (ipar[0]+,r) (ipar[0]*,r) (inptr[0][j-1],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j-1]', 'r', 'normalized', ['j'], 4020)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['j'], 4020), ('[0]', 'r', 'normalized', ['j'], 4020), ('[0]', 'r', 'normalized', ['j'], 4020)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1 k<block->insz[0]+1 k++
induction variable: ['k']
{
L4021: (outptr[0][k-1]=,w) (pw[j]-,r) (ipar[0]*,r) 
L4022: (pw[i],r) (ipar[0]*,r) 
}
array table
-----------------------------------------------
outptr -> [('[0][k-1]', 'w', 'normalized', ['k'], 4021)]
LDEs formed:2

pw -> [('[j]', 'r', 'not normalized', ['k'], 4021), ('[i]', 'r', 'not normalized', ['k'], 4022)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['k'], 4021), ('[0]', 'r', 'normalized', ['k'], 4022)]
LDEs formed:0

distinct LDEs:
0=0,k1-1=k2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1 k<block->insz[0]+1 k++
induction variable: ['k']
{
L4023: (outptr[0][k-1]=,w) (ipar[0]*,r) 
}
array table
-----------------------------------------------
outptr -> [('[0][k-1]', 'w', 'normalized', ['k'], 4023)]
LDEs formed:2

ipar -> [('[0]', 'r', 'normalized', ['k'], 4023)]
LDEs formed:0

distinct LDEs:
0=0,k1-1=k2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<NX i++
induction variable: ['i']
{
L4024: (property[i]=,w) (ipar[i],r) 
}
array table
-----------------------------------------------
property -> [('[i]', 'w', 'normalized', ['i'], 4024)]
LDEs formed:1

ipar -> [('[i]', 'r', 'normalized', ['i'], 4024)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4025: (outptr[0][j]=,w) (inptr[i][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[i][j]', 'r', 'not normalized', ['j'], 4025)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 4025)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4026: (u1[i]==,r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4026)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4026)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4026)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4027: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4027)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4027)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4027)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4028: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4028)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4028)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4028)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4029: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4029)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4029)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4029)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4030: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4030)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4030)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4030)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4031: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4031)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4031)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4031)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4032: (u1[i]==,r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4032)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4032)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4032)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4033: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4033)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4033)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4033)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4034: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4034)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4034)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4034)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4035: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4035)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4035)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4035)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4036: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4036)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4036)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4036)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4037: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4037)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4037)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4037)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (nu * nu)  i++
induction variable: ['i']
{
L4038: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4038)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4038)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4039: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 4039)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 4039)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4040: (rpar[0],r) (rpar[1],r) 
L4041: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4041)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4040), ('[1]', 'r', 'normalized', ['i'], 4040)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4041: (rpar[0],r) (rpar[1],r) 
L4042: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4042)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4041), ('[1]', 'r', 'normalized', ['i'], 4041)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4042: (rpar[0],r) (rpar[1],r) 
L4043: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4043)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4042), ('[1]', 'r', 'normalized', ['i'], 4042)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4043: (rpar[0],r) (rpar[1],r) 
L4044: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4044)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4043), ('[1]', 'r', 'normalized', ['i'], 4043)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4044: (rpar[0],r) (rpar[1],r) 
L4045: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4045)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4044), ('[1]', 'r', 'normalized', ['i'], 4044)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4045: (rpar[0],r) (rpar[1],r) 
L4046: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4046)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4045), ('[1]', 'r', 'normalized', ['i'], 4045)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(mu1*nu) i++
induction variable: ['i']
{
L4046: (IN1[2*i]=,w) (urT1[i],r) 
L4047: (IN1[2*i+1]=,w) (uiT1[i],r) 
}
array table
-----------------------------------------------
urT1 -> [('[i]', 'r', 'normalized', ['i'], 4046)]
LDEs formed:0

IN1 -> [('[2*i]', 'w', 'normalized', ['i'], 4046), ('[2*i+1]', 'w', 'normalized', ['i'], 4047)]
LDEs formed:3

uiT1 -> [('[i]', 'r', 'normalized', ['i'], 4047)]
LDEs formed:0

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(mu2*nu) i++
induction variable: ['i']
{
L4048: (IN2[2*i]=,w) (urT2[i],r) 
L4049: (IN2[2*i+1]=,w) (uiT2[i],r) 
}
array table
-----------------------------------------------
uiT2 -> [('[i]', 'r', 'normalized', ['i'], 4049)]
LDEs formed:0

IN2 -> [('[2*i]', 'w', 'normalized', ['i'], 4048), ('[2*i+1]', 'w', 'normalized', ['i'], 4049)]
LDEs formed:3

urT2 -> [('[i]', 'r', 'normalized', ['i'], 4048)]
LDEs formed:0

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L4049: (u1[ji],r) (u2[il],r) 
		}
L4050: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4050)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4049)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4049)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4050: (inptr[0][j],r) 
L4051: (outptr[0][0]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][0]', 'w', 'normalized', ['j'], 4051)]
LDEs formed:2

inptr -> [('[0][j]', 'r', 'normalized', ['j'], 4050)]
LDEs formed:0

distinct LDEs:
0=0,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4051: (outptr[0][j]=,w) 
	loop info: k=0 k<block->nin k++
	induction variable: ['j', 'k']
	{
	L4052: (inptr[k][j],r) 
	L4053: (outptr[0][j]=,w) 
	}
 }
array table
-----------------------------------------------
inptr -> [('[k][j]', 'r', 'normalized', ['j', 'k'], 4052)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j', 'k'], 4051), ('[0][j]', 'w', 'normalized', ['j', 'k'], 4053)]
LDEs formed:6

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4054: (inptr[0][j],r) 
L4055: (outptr[0][0]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][0]', 'w', 'normalized', ['j'], 4055)]
LDEs formed:2

inptr -> [('[0][j]', 'r', 'normalized', ['j'], 4054)]
LDEs formed:0

distinct LDEs:
0=0,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4055: (outptr[0][j]=,w) 
	loop info: k=0 k<block->nin k++
	induction variable: ['j', 'k']
	{
	L4056: (inptr[k][j],r) 
	L4057: (outptr[0][j]=,w) 
	}
 }
array table
-----------------------------------------------
inptr -> [('[k][j]', 'r', 'normalized', ['j', 'k'], 4056)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j', 'k'], 4055), ('[0][j]', 'w', 'normalized', ['j', 'k'], 4057)]
LDEs formed:6

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4058: (inptr[0][j],r) 
L4059: (outptr[0][0]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][0]', 'w', 'normalized', ['j'], 4059)]
LDEs formed:2

inptr -> [('[0][j]', 'r', 'normalized', ['j'], 4058)]
LDEs formed:0

distinct LDEs:
0=0,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4059: (outptr[0][j]=,w) 
	loop info: k=0 k<block->nin k++
	induction variable: ['j', 'k']
	{
	L4060: (inptr[k][j],r) 
	L4061: (outptr[0][j]=,w) 
	}
 }
array table
-----------------------------------------------
inptr -> [('[k][j]', 'r', 'normalized', ['j', 'k'], 4060)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j', 'k'], 4059), ('[0][j]', 'w', 'normalized', ['j', 'k'], 4061)]
LDEs formed:6

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4062: (inptr[0][j],r) 
L4063: (outptr[0][0]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][0]', 'w', 'normalized', ['j'], 4063)]
LDEs formed:2

inptr -> [('[0][j]', 'r', 'normalized', ['j'], 4062)]
LDEs formed:0

distinct LDEs:
0=0,0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4063: (outptr[0][j]=,w) 
	loop info: k=0 k<block->nin k++
	induction variable: ['j', 'k']
	{
	L4064: (inptr[k][j],r) 
	L4065: (outptr[0][j]=,w) 
	}
 }
array table
-----------------------------------------------
inptr -> [('[k][j]', 'r', 'normalized', ['j', 'k'], 4064)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j', 'k'], 4063), ('[0][j]', 'w', 'normalized', ['j', 'k'], 4065)]
LDEs formed:6

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4066: (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 4066)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
	loop info: k=0 k<block->nin k++
	induction variable: ['j', 'k']
	{
	L4067: (inptr[k][j],r) 
	}
L4068: (outptr[0][j]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][j]', 'w', 'normalized', ['j', 'k'], 4068)]
LDEs formed:2

inptr -> [('[k][j]', 'r', 'normalized', ['j', 'k'], 4067)]
LDEs formed:0

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4068: (inptr[0][j],r) 
L4069: (outptr[0][j]=,w) 
L4070: (outptr[0][j]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][j]', 'w', 'normalized', ['j'], 4069), ('[0][j]', 'w', 'normalized', ['j'], 4070)]
LDEs formed:6

inptr -> [('[0][j]', 'r', 'normalized', ['j'], 4068)]
LDEs formed:0

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j<nu j++
induction variable: ['j']
{
	loop info: i=0 i<mu i++
	induction variable: ['j', 'i']
	{
	L4069: (y[ij]=,w) (u[ij]+,r) (y[ij-mu],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[ij]', 'w', 'not normalized', ['j', 'i'], 4069), ('[ij-mu]', 'r', 'not normalized', ['j', 'i'], 4069)]
LDEs formed:2

u -> [('[ij]', 'r', 'not normalized', ['j', 'i'], 4069)]
LDEs formed:0

distinct LDEs:
ij=ij-mu
ij=ij
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4070: (internal.ballsSize[i]=,w) (z[6 * i + 2],r) 
}
array table
-----------------------------------------------
z -> [('[6 * i + 2]', 'r', 'normalized', ['i'], 4070)]
LDEs formed:0

internal.ballsSize -> [('[i]', 'w', 'normalized', ['i'], 4070)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4071: (internal.data[i]=,w) 
L4072: (internal.data[i]==,r) 
}
array table
-----------------------------------------------
internal.data -> [('[i]', 'w', 'normalized', ['i'], 4071), ('[i]', 'r', 'normalized', ['i'], 4072)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L4073: (internal.data[i],r) 
}
array table
-----------------------------------------------
internal.data -> [('[i]', 'r', 'not normalized', ['j'], 4073)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4074: (internal.data[i],r) 
}
array table
-----------------------------------------------
internal.data -> [('[i]', 'r', 'normalized', ['i'], 4074)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4075: (scope.cachedArcsUIDs[i],r) 
L4076: (scope.cachedArcsUIDs[i]=,w) 
}
array table
-----------------------------------------------
scope.cachedArcsUIDs -> [('[i]', 'r', 'normalized', ['i'], 4075), ('[i]', 'w', 'normalized', ['i'], 4076)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4077: (internal.data[i],r) 
L4078: (internal.ballsSize[i],r) 
L4079: (upperLeftPoint[0]=,w) (x[i]-,r) 
L4080: (upperLeftPoint[1]=,w) (y[i]+,r) 
L4081: (upperLeftPoint[2]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 4080)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 4079)]
LDEs formed:0

internal.data -> [('[i]', 'r', 'normalized', ['i'], 4077)]
LDEs formed:0

upperLeftPoint -> [('[0]', 'w', 'normalized', ['i'], 4079), ('[1]', 'w', 'normalized', ['i'], 4080), ('[2]', 'w', 'normalized', ['i'], 4081)]
LDEs formed:6

internal.ballsSize -> [('[i]', 'r', 'normalized', ['i'], 4078)]
LDEs formed:0

distinct LDEs:
2=2
0=0
0=1
0=2
1=1
1=2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<block->insz[0] j++
induction variable: ['j']
{
L4079: (outptr[0][j]=,w) (inptr[0][j],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j]', 'r', 'normalized', ['j'], 4079)]
LDEs formed:0

outptr -> [('[0][j]', 'w', 'normalized', ['j'], 4079)]
LDEs formed:2

distinct LDEs:
0=0,j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nc j++
induction variable: ['j']
{
L4080: (r[i]-,r) (r[nl+j]-,r) 
}
array table
-----------------------------------------------
r -> [('[i]', 'r', 'not normalized', ['j'], 4080), ('[nl+j]', 'r', 'not normalized', ['j'], 4080)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nu*nu) i++
induction variable: ['i']
{
L4081: (wrk[2*i]=,w) (ur[i],r) 
L4082: (wrk[2*i+1]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ui -> [('[i]', 'r', 'normalized', ['i'], 4082)]
LDEs formed:0

wrk -> [('[2*i]', 'w', 'normalized', ['i'], 4081), ('[2*i+1]', 'w', 'normalized', ['i'], 4082)]
LDEs formed:3

ur -> [('[i]', 'r', 'normalized', ['i'], 4081)]
LDEs formed:0

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L4082: (u1[ji],r) (u2[il],r) 
		}
L4083: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4083)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4082)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4082)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4083: (y1i[i]=,w) (u1r[i]*,r) (u2i[i],r) (u1i[i]*,r) (u2r[i],r) 
}
array table
-----------------------------------------------
u1i -> [('[i]', 'r', 'normalized', ['i'], 4083)]
LDEs formed:0

u1r -> [('[i]', 'r', 'normalized', ['i'], 4083)]
LDEs formed:0

y1i -> [('[i]', 'w', 'normalized', ['i'], 4083)]
LDEs formed:1

u2i -> [('[i]', 'r', 'normalized', ['i'], 4083)]
LDEs formed:0

u2r -> [('[i]', 'r', 'normalized', ['i'], 4083)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L4084: (opar[0],r) (u[i],r) 
L4085: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4085)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4084)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 4084)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L4085: (opar[ji],r) (u[il],r) 
		}
L4086: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4086)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4085)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4085)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < nPoints-1  j++
induction variable: ['j']
{
L4086: (ptr_T[j],r) (ptr_T[j+1],r) 
}
array table
-----------------------------------------------
ptr_T -> [('[j]', 'r', 'normalized', ['j'], 4086), ('[j+1]', 'r', 'normalized', ['j'], 4086)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<mY j++
induction variable: ['j']
{
	loop info: i=0 i<=nPoints-2 i++
	induction variable: ['j', 'i']
	{
	L4087: (A_sd[i]=,w) (ptr_T[i+1]-,r) (ptr_T[i],r) 
	L4088: (qdy[i]=,w) (ptr_d[i+1+j*nPoints]-,r) (ptr_d[i+j*nPoints],r) (A_sd[i]*,r) (A_sd[i],r) 
	}
	loop info: i=1 i<=nPoints-2 i++
	induction variable: ['j', 'i']
	{
	L4089: (A_d[i]=,w) (A_sd[i-1]+,r) (A_sd[i],r) 
	L4090: (D[i+j*nPoints]=,w) (qdy[i-1]+,r) (qdy[i],r) 
	}
L4091: (A_d[0]=,w) (A_sd[0],r) 
L4092: (D[0+j*nPoints]=,w) (qdy[0],r) 
L4093: (A_d[nPoints-1]=,w) (A_sd[nPoints-2],r) 
L4094: (D[nPoints-1+j*nPoints]=,w) (qdy[nPoints-2],r) 
L4095: (D[j*nPoints],r) 
L4096: (A_sd[1]/,r) (A_sd[0],r) 
L4097: (A_d[0]=,w) (A_sd[0]/,r) 
L4098: (D[j*nPoints]=,w) (qdy[0]+,r) (qdy[1],r) 
L4099: (A_sd[nPoints-3]/,r) (A_sd[nPoints-2],r) 
L4100: (A_d[nPoints-1]=,w) (A_sd[nPoints-2]/,r) 
L4101: (D[nPoints-1+j*nPoints]=,w) 
L4102: (qdy[nPoints-2]+,r) (qdy[nPoints-3],r) 
L4103: (D[j*nPoints],r) 
}
array table
-----------------------------------------------
D -> [('[i+j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4090), ('[0+j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4092), ('[nPoints-1+j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4094), ('[j*nPoints]', 'r', 'not normalized', ['j', 'i'], 4095), ('[j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4098), ('[nPoints-1+j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4101), ('[j*nPoints]', 'r', 'not normalized', ['j', 'i'], 4103)]
LDEs formed:25

ptr_d -> [('[i+1+j*nPoints]', 'r', 'not normalized', ['j', 'i'], 4088), ('[i+j*nPoints]', 'r', 'not normalized', ['j', 'i'], 4088)]
LDEs formed:0

A_d -> [('[i]', 'w', 'normalized', ['j', 'i'], 4089), ('[0]', 'w', 'normalized', ['j', 'i'], 4091), ('[nPoints-1]', 'w', 'not normalized', ['j', 'i'], 4093), ('[0]', 'w', 'normalized', ['j', 'i'], 4097), ('[nPoints-1]', 'w', 'not normalized', ['j', 'i'], 4100)]
LDEs formed:15

A_sd -> [('[i]', 'w', 'normalized', ['j', 'i'], 4087), ('[i]', 'r', 'normalized', ['j', 'i'], 4088), ('[i]', 'r', 'normalized', ['j', 'i'], 4088), ('[i-1]', 'r', 'normalized', ['j', 'i'], 4089), ('[i]', 'r', 'normalized', ['j', 'i'], 4089), ('[0]', 'r', 'normalized', ['j', 'i'], 4091), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4093), ('[1]', 'r', 'normalized', ['j', 'i'], 4096), ('[0]', 'r', 'normalized', ['j', 'i'], 4096), ('[0]', 'r', 'normalized', ['j', 'i'], 4097), ('[nPoints-3]', 'r', 'not normalized', ['j', 'i'], 4099), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4099), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4100)]
LDEs formed:13

ptr_T -> [('[i+1]', 'r', 'normalized', ['j', 'i'], 4087), ('[i]', 'r', 'normalized', ['j', 'i'], 4087)]
LDEs formed:0

qdy -> [('[i]', 'w', 'normalized', ['j', 'i'], 4088), ('[i-1]', 'r', 'normalized', ['j', 'i'], 4090), ('[i]', 'r', 'normalized', ['j', 'i'], 4090), ('[0]', 'r', 'normalized', ['j', 'i'], 4092), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4094), ('[0]', 'r', 'normalized', ['j', 'i'], 4098), ('[1]', 'r', 'normalized', ['j', 'i'], 4098), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4102), ('[nPoints-3]', 'r', 'not normalized', ['j', 'i'], 4102)]
LDEs formed:9

distinct LDEs:
j1*nPoints=j2*nPoints
i1=i2-1
i1+j1*nPoints=0+j2*nPoints
i1=i2
i1+j1*nPoints=i2+j2*nPoints
i1+j1*nPoints=nPoints-1+j2*nPoints
i1=nPoints-1
0+j1*nPoints=0+j2*nPoints
i1=nPoints-3
i1=0
0+j1*nPoints=j2*nPoints
0=0
0=nPoints-1
nPoints-1+j1*nPoints=j2*nPoints
nPoints-1=nPoints-1
i1+j1*nPoints=j2*nPoints
i1=nPoints-2
i1=1
0+j1*nPoints=nPoints-1+j2*nPoints
nPoints-1+j1*nPoints=nPoints-1+j2*nPoints
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<mY j++
induction variable: ['j']
{
	loop info: i=0 i<=nPoints-2 i++
	induction variable: ['j', 'i']
	{
	L4103: (A_sd[i]=,w) (ptr_T[i+1]-,r) (ptr_T[i],r) 
	L4104: (qdy[i]=,w) (ptr_d[nPoints+i+1+j*nPoints]-,r) (ptr_d[nPoints+i+j*nPoints],r) (A_sd[i]*,r) (A_sd[i],r) 
	}
	loop info: i=1 i<=nPoints-2 i++
	induction variable: ['j', 'i']
	{
	L4105: (A_d[i]=,w) (A_sd[i-1]+,r) (A_sd[i],r) 
	L4106: (D[i+j*nPoints+nPoints]=,w) (qdy[i-1]+,r) (qdy[i],r) 
	}
L4107: (A_d[0]=,w) (A_sd[0],r) 
L4108: (D[nPoints+0+j*nPoints]=,w) (qdy[0],r) 
L4109: (A_d[nPoints-1]=,w) (A_sd[nPoints-2],r) 
L4110: (D[nPoints+nPoints-1+j*nPoints]=,w) (qdy[nPoints-2],r) 
L4111: (D[nPoints+j*nPoints],r) 
L4112: (A_sd[1]/,r) (A_sd[0],r) 
L4113: (A_d[0]=,w) (A_sd[0]/,r) 
L4114: (D[nPoints+j*nPoints]=,w) (qdy[0]+,r) (qdy[1],r) 
L4115: (A_sd[nPoints-3]/,r) (A_sd[nPoints-2],r) 
L4116: (A_d[nPoints-1]=,w) (A_sd[nPoints-2]/,r) 
L4117: (D[nPoints+nPoints-1+j*nPoints]=,w) 
L4118: (qdy[nPoints-2]+,r) (qdy[nPoints-3],r) 
L4119: (D[nPoints+j*nPoints],r) 
}
array table
-----------------------------------------------
D -> [('[i+j*nPoints+nPoints]', 'w', 'not normalized', ['j', 'i'], 4106), ('[nPoints+0+j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4108), ('[nPoints+nPoints-1+j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4110), ('[nPoints+j*nPoints]', 'r', 'not normalized', ['j', 'i'], 4111), ('[nPoints+j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4114), ('[nPoints+nPoints-1+j*nPoints]', 'w', 'not normalized', ['j', 'i'], 4117), ('[nPoints+j*nPoints]', 'r', 'not normalized', ['j', 'i'], 4119)]
LDEs formed:25

ptr_d -> [('[nPoints+i+1+j*nPoints]', 'r', 'not normalized', ['j', 'i'], 4104), ('[nPoints+i+j*nPoints]', 'r', 'not normalized', ['j', 'i'], 4104)]
LDEs formed:0

A_d -> [('[i]', 'w', 'normalized', ['j', 'i'], 4105), ('[0]', 'w', 'normalized', ['j', 'i'], 4107), ('[nPoints-1]', 'w', 'not normalized', ['j', 'i'], 4109), ('[0]', 'w', 'normalized', ['j', 'i'], 4113), ('[nPoints-1]', 'w', 'not normalized', ['j', 'i'], 4116)]
LDEs formed:15

A_sd -> [('[i]', 'w', 'normalized', ['j', 'i'], 4103), ('[i]', 'r', 'normalized', ['j', 'i'], 4104), ('[i]', 'r', 'normalized', ['j', 'i'], 4104), ('[i-1]', 'r', 'normalized', ['j', 'i'], 4105), ('[i]', 'r', 'normalized', ['j', 'i'], 4105), ('[0]', 'r', 'normalized', ['j', 'i'], 4107), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4109), ('[1]', 'r', 'normalized', ['j', 'i'], 4112), ('[0]', 'r', 'normalized', ['j', 'i'], 4112), ('[0]', 'r', 'normalized', ['j', 'i'], 4113), ('[nPoints-3]', 'r', 'not normalized', ['j', 'i'], 4115), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4115), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4116)]
LDEs formed:13

ptr_T -> [('[i+1]', 'r', 'normalized', ['j', 'i'], 4103), ('[i]', 'r', 'normalized', ['j', 'i'], 4103)]
LDEs formed:0

qdy -> [('[i]', 'w', 'normalized', ['j', 'i'], 4104), ('[i-1]', 'r', 'normalized', ['j', 'i'], 4106), ('[i]', 'r', 'normalized', ['j', 'i'], 4106), ('[0]', 'r', 'normalized', ['j', 'i'], 4108), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4110), ('[0]', 'r', 'normalized', ['j', 'i'], 4114), ('[1]', 'r', 'normalized', ['j', 'i'], 4114), ('[nPoints-2]', 'r', 'not normalized', ['j', 'i'], 4118), ('[nPoints-3]', 'r', 'not normalized', ['j', 'i'], 4118)]
LDEs formed:9

distinct LDEs:
nPoints+j1*nPoints=nPoints+j2*nPoints
nPoints+nPoints-1+j1*nPoints=nPoints+nPoints-1+j2*nPoints
nPoints+0+j1*nPoints=nPoints+j2*nPoints
i1=i2-1
i1+j1*nPoints+nPoints=nPoints+j2*nPoints
i1=i2
i1=nPoints-1
0=nPoints-1
i1=nPoints-3
i1=nPoints-2
nPoints-1=nPoints-1
0=0
nPoints+nPoints-1+j1*nPoints=nPoints+j2*nPoints
nPoints+0+j1*nPoints=nPoints+0+j2*nPoints
i1+j1*nPoints+nPoints=nPoints+0+j2*nPoints
i1+j1*nPoints+nPoints=i2+j2*nPoints+nPoints
i1+j1*nPoints+nPoints=nPoints+nPoints-1+j2*nPoints
i1=1
i1=0
nPoints+0+j1*nPoints=nPoints+nPoints-1+j2*nPoints
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nPoints i++
induction variable: ['i']
{
L4119: (workt[i],r) 
}
array table
-----------------------------------------------
workt -> [('[i]', 'r', 'normalized', ['i'], 4119)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = cnt1   i < nPoints   i++
induction variable: ['i']
{
L4120: (workt[i],r) 
L4121: (workt[i],r) 
}
array table
-----------------------------------------------
workt -> [('[i]', 'r', 'normalized', ['i'], 4120), ('[i]', 'r', 'normalized', ['i'], 4121)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < nPoints   i++
induction variable: ['i']
{
L4122: (workt[i],r) 
L4123: (workt[i],r) 
}
array table
-----------------------------------------------
workt -> [('[i]', 'r', 'normalized', ['i'], 4122), ('[i]', 'r', 'normalized', ['i'], 4123)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<my*ny j++
induction variable: ['j']
{
L4124: (y_d[j]=,w) 
L4125: (y_d[j]=,w) (ptr_d[(nPoints-1)*ny*my+j],r) 
L4126: (y_d[j]=,w) 
L4127: (y_d[j]=,w) (ptr_d[inow*ny*my+j],r) 
L4128: (y_d[j]=,w) 
L4129: (y_cd[j]=,w) 
L4130: (y_d[j]=,w) (ptr_d[(nPoints-1)*ny*my+j],r) 
L4131: (y_cd[j]=,w) (ptr_d[nPoints*my*ny+(nPoints-1)*ny*my+j],r) 
L4132: (y_d[j]=,w) 
L4133: (y_cd[j]=,w) 
L4134: (y_d[j]=,w) (ptr_d[inow*ny*my+j],r) 
L4135: (y_cd[j]=,w) (ptr_d[nPoints*my*ny+inow*ny*my+j],r) 
L4136: (y_c[j]=,w) 
L4137: (y_c[j]=,w) (ptr_c[(nPoints-1)*ny*my+j],r) 
L4138: (y_c[j]=,w) 
L4139: (y_c[j]=,w) (ptr_c[inow*ny*my+j],r) 
L4140: (y_s[j]=,w) 
L4141: (y_s[j]=,w) (ptr_s[(nPoints-1)*ny*my+j],r) 
L4142: (y_s[j]=,w) 
L4143: (y_s[j]=,w) (ptr_s[inow*ny*my+j],r) 
L4144: (y_l[j]=,w) 
L4145: (y_l[j]=,w) (ptr_l[(nPoints-1)*ny*my+j],r) 
L4146: (y_l[j]=,w) 
L4147: (y_l[j]=,w) (ptr_l[inow*ny*my+j],r) 
L4148: (y_uc[j]=,w) 
L4149: (y_uc[j]=,w) (ptr_uc[(nPoints-1)*ny*my+j],r) 
L4150: (y_uc[j]=,w) 
L4151: (y_uc[j]=,w) (ptr_uc[inow*ny*my+j],r) 
L4152: (y_us[j]=,w) 
L4153: (y_us[j]=,w) (ptr_us[(nPoints-1)*ny*my+j],r) 
L4154: (y_us[j]=,w) 
L4155: (y_us[j]=,w) (ptr_us[inow*ny*my+j],r) 
L4156: (y_ul[j]=,w) 
L4157: (y_ul[j]=,w) (ptr_ul[(nPoints-1)*ny*my+j],r) 
L4158: (y_ul[j]=,w) 
L4159: (y_ul[j]=,w) (ptr_ul[inow*ny*my+j],r) 
}
array table
-----------------------------------------------
y_us -> [('[j]', 'w', 'normalized', ['j'], 4152), ('[j]', 'w', 'normalized', ['j'], 4153), ('[j]', 'w', 'normalized', ['j'], 4154), ('[j]', 'w', 'normalized', ['j'], 4155)]
LDEs formed:10

ptr_us -> [('[(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4153), ('[inow*ny*my+j]', 'r', 'not normalized', ['j'], 4155)]
LDEs formed:0

ptr_ul -> [('[(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4157), ('[inow*ny*my+j]', 'r', 'not normalized', ['j'], 4159)]
LDEs formed:0

ptr_l -> [('[(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4145), ('[inow*ny*my+j]', 'r', 'not normalized', ['j'], 4147)]
LDEs formed:0

y_ul -> [('[j]', 'w', 'normalized', ['j'], 4156), ('[j]', 'w', 'normalized', ['j'], 4157), ('[j]', 'w', 'normalized', ['j'], 4158), ('[j]', 'w', 'normalized', ['j'], 4159)]
LDEs formed:10

ptr_c -> [('[(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4137), ('[inow*ny*my+j]', 'r', 'not normalized', ['j'], 4139)]
LDEs formed:0

ptr_uc -> [('[(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4149), ('[inow*ny*my+j]', 'r', 'not normalized', ['j'], 4151)]
LDEs formed:0

y_s -> [('[j]', 'w', 'normalized', ['j'], 4140), ('[j]', 'w', 'normalized', ['j'], 4141), ('[j]', 'w', 'normalized', ['j'], 4142), ('[j]', 'w', 'normalized', ['j'], 4143)]
LDEs formed:10

ptr_d -> [('[(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4125), ('[inow*ny*my+j]', 'r', 'not normalized', ['j'], 4127), ('[(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4130), ('[nPoints*my*ny+(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4131), ('[inow*ny*my+j]', 'r', 'not normalized', ['j'], 4134), ('[nPoints*my*ny+inow*ny*my+j]', 'r', 'not normalized', ['j'], 4135)]
LDEs formed:0

y_l -> [('[j]', 'w', 'normalized', ['j'], 4144), ('[j]', 'w', 'normalized', ['j'], 4145), ('[j]', 'w', 'normalized', ['j'], 4146), ('[j]', 'w', 'normalized', ['j'], 4147)]
LDEs formed:10

y_uc -> [('[j]', 'w', 'normalized', ['j'], 4148), ('[j]', 'w', 'normalized', ['j'], 4149), ('[j]', 'w', 'normalized', ['j'], 4150), ('[j]', 'w', 'normalized', ['j'], 4151)]
LDEs formed:10

ptr_s -> [('[(nPoints-1)*ny*my+j]', 'r', 'not normalized', ['j'], 4141), ('[inow*ny*my+j]', 'r', 'not normalized', ['j'], 4143)]
LDEs formed:0

y_d -> [('[j]', 'w', 'normalized', ['j'], 4124), ('[j]', 'w', 'normalized', ['j'], 4125), ('[j]', 'w', 'normalized', ['j'], 4126), ('[j]', 'w', 'normalized', ['j'], 4127), ('[j]', 'w', 'normalized', ['j'], 4128), ('[j]', 'w', 'normalized', ['j'], 4130), ('[j]', 'w', 'normalized', ['j'], 4132), ('[j]', 'w', 'normalized', ['j'], 4134)]
LDEs formed:36

y_c -> [('[j]', 'w', 'normalized', ['j'], 4136), ('[j]', 'w', 'normalized', ['j'], 4137), ('[j]', 'w', 'normalized', ['j'], 4138), ('[j]', 'w', 'normalized', ['j'], 4139)]
LDEs formed:10

y_cd -> [('[j]', 'w', 'normalized', ['j'], 4129), ('[j]', 'w', 'normalized', ['j'], 4131), ('[j]', 'w', 'normalized', ['j'], 4133), ('[j]', 'w', 'normalized', ['j'], 4135)]
LDEs formed:10

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<my j++
induction variable: ['j']
{
L4136: (y_d[j]=,w) 
L4137: (y_d[j]=,w) (ptr_d[nPoints-1+(j)*nPoints],r) 
L4138: (y_d[j]=,w) 
L4139: (y_d[j]=,w) (ptr_d[inow+(j)*nPoints],r) 
L4140: (workt[inow],r) 
L4141: (workt[inow+1],r) 
L4142: (ptr_d[inow+j*nPoints],r) 
L4143: (ptr_d[inow+1+j*nPoints],r) 
L4144: (y_d[j]=,w) 
L4145: (workt[inow],r) 
L4146: (workt[inow+1],r) 
L4147: (ptr_d[inow+j*nPoints],r) 
L4148: (ptr_d[inow+1+j*nPoints],r) 
L4149: (ptr_D[inow+j*nPoints],r) 
L4150: (ptr_D[inow+1+j*nPoints],r) 
L4151: (y_d[j]=,w) 
L4152: (y_cd[j]=,w) 
L4153: (y_cd[j]=,w) (ptr_d[nPoints*my+nPoints-1+(j)*nPoints],r) 
L4154: (y_cd[j]=,w) 
L4155: (y_cd[j]=,w) (ptr_d[nPoints*my+inow+(j)*nPoints],r) 
L4156: (workt[inow],r) 
L4157: (workt[inow+1],r) 
L4158: (ptr_d[nPoints*my+inow+j*nPoints],r) 
L4159: (ptr_d[nPoints*my+inow+1+j*nPoints],r) 
L4160: (y_cd[j]=,w) 
L4161: (workt[inow],r) 
L4162: (workt[inow+1],r) 
L4163: (ptr_d[inow+j*nPoints+nPoints],r) 
L4164: (ptr_d[inow+1+j*nPoints+nPoints],r) 
L4165: (ptr_D[inow+j*nPoints+nPoints],r) 
L4166: (ptr_D[inow+1+j*nPoints+nPoints],r) 
L4167: (y_cd[j]=,w) 
L4168: (y_c[j]=,w) 
L4169: (y_c[j]=,w) (ptr_c[nPoints-1+(j)*nPoints],r) 
L4170: (y_c[j]=,w) 
L4171: (y_c[j]=,w) (ptr_c[inow+(j)*nPoints],r) 
L4172: (workt[inow],r) 
L4173: (workt[inow+1],r) 
L4174: (ptr_c[inow+j*nPoints],r) 
L4175: (ptr_c[inow+1+j*nPoints],r) 
L4176: (y_c[j]=,w) 
L4177: (y_s[j]=,w) 
L4178: (y_s[j]=,w) (ptr_s[nPoints-1+(j)*nPoints],r) 
L4179: (y_s[j]=,w) 
L4180: (y_s[j]=,w) (ptr_s[inow+(j)*nPoints],r) 
L4181: (workt[inow],r) 
L4182: (workt[inow+1],r) 
L4183: (ptr_s[inow+j*nPoints],r) 
L4184: (ptr_s[inow+1+j*nPoints],r) 
L4185: (y_s[j]=,w) 
L4186: (y_l[j]=,w) 
L4187: (y_l[j]=,w) (ptr_l[nPoints-1+(j)*nPoints],r) 
L4188: (y_l[j]=,w) 
L4189: (y_l[j]=,w) (ptr_l[inow+(j)*nPoints],r) 
L4190: (workt[inow],r) 
L4191: (workt[inow+1],r) 
L4192: (ptr_l[inow+j*nPoints],r) 
L4193: (ptr_l[inow+1+j*nPoints],r) 
L4194: (y_l[j]=,w) 
L4195: (y_uc[j]=,w) 
L4196: (y_uc[j]=,w) (ptr_uc[nPoints-1+(j)*nPoints],r) 
L4197: (y_uc[j]=,w) 
L4198: (y_uc[j]=,w) (ptr_uc[inow+(j)*nPoints],r) 
L4199: (workt[inow],r) 
L4200: (workt[inow+1],r) 
L4201: (ptr_uc[inow+j*nPoints],r) 
L4202: (ptr_uc[inow+1+j*nPoints],r) 
L4203: (y_uc[j]=,w) 
L4204: (y_us[j]=,w) 
L4205: (y_us[j]=,w) (ptr_us[nPoints-1+(j)*nPoints],r) 
L4206: (y_us[j]=,w) 
L4207: (y_us[j]=,w) (ptr_us[inow+(j)*nPoints],r) 
L4208: (workt[inow],r) 
L4209: (workt[inow+1],r) 
L4210: (ptr_us[inow+j*nPoints],r) 
L4211: (ptr_us[inow+1+j*nPoints],r) 
L4212: (y_us[j]=,w) 
L4213: (y_ul[j]=,w) 
L4214: (y_ul[j]=,w) (ptr_ul[nPoints-1+(j)*nPoints],r) 
L4215: (y_ul[j]=,w) 
L4216: (y_ul[j]=,w) (ptr_ul[inow+(j)*nPoints],r) 
L4217: (workt[inow],r) 
L4218: (workt[inow+1],r) 
L4219: (ptr_ul[inow+j*nPoints],r) 
L4220: (ptr_ul[inow+1+j*nPoints],r) 
L4221: (y_ul[j]=,w) 
}
array table
-----------------------------------------------
y_us -> [('[j]', 'w', 'normalized', ['j'], 4204), ('[j]', 'w', 'normalized', ['j'], 4205), ('[j]', 'w', 'normalized', ['j'], 4206), ('[j]', 'w', 'normalized', ['j'], 4207), ('[j]', 'w', 'normalized', ['j'], 4212)]
LDEs formed:15

ptr_us -> [('[nPoints-1+(j)*nPoints]', 'r', 'not normalized', ['j'], 4205), ('[inow+(j)*nPoints]', 'r', 'not normalized', ['j'], 4207), ('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4210), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4211)]
LDEs formed:0

ptr_ul -> [('[nPoints-1+(j)*nPoints]', 'r', 'not normalized', ['j'], 4214), ('[inow+(j)*nPoints]', 'r', 'not normalized', ['j'], 4216), ('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4219), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4220)]
LDEs formed:0

ptr_l -> [('[nPoints-1+(j)*nPoints]', 'r', 'not normalized', ['j'], 4187), ('[inow+(j)*nPoints]', 'r', 'not normalized', ['j'], 4189), ('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4192), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4193)]
LDEs formed:0

y_ul -> [('[j]', 'w', 'normalized', ['j'], 4213), ('[j]', 'w', 'normalized', ['j'], 4214), ('[j]', 'w', 'normalized', ['j'], 4215), ('[j]', 'w', 'normalized', ['j'], 4216), ('[j]', 'w', 'normalized', ['j'], 4221)]
LDEs formed:15

workt -> [('[inow]', 'r', 'not normalized', ['j'], 4140), ('[inow+1]', 'r', 'not normalized', ['j'], 4141), ('[inow]', 'r', 'not normalized', ['j'], 4145), ('[inow+1]', 'r', 'not normalized', ['j'], 4146), ('[inow]', 'r', 'not normalized', ['j'], 4156), ('[inow+1]', 'r', 'not normalized', ['j'], 4157), ('[inow]', 'r', 'not normalized', ['j'], 4161), ('[inow+1]', 'r', 'not normalized', ['j'], 4162), ('[inow]', 'r', 'not normalized', ['j'], 4172), ('[inow+1]', 'r', 'not normalized', ['j'], 4173), ('[inow]', 'r', 'not normalized', ['j'], 4181), ('[inow+1]', 'r', 'not normalized', ['j'], 4182), ('[inow]', 'r', 'not normalized', ['j'], 4190), ('[inow+1]', 'r', 'not normalized', ['j'], 4191), ('[inow]', 'r', 'not normalized', ['j'], 4199), ('[inow+1]', 'r', 'not normalized', ['j'], 4200), ('[inow]', 'r', 'not normalized', ['j'], 4208), ('[inow+1]', 'r', 'not normalized', ['j'], 4209), ('[inow]', 'r', 'not normalized', ['j'], 4217), ('[inow+1]', 'r', 'not normalized', ['j'], 4218)]
LDEs formed:0

ptr_uc -> [('[nPoints-1+(j)*nPoints]', 'r', 'not normalized', ['j'], 4196), ('[inow+(j)*nPoints]', 'r', 'not normalized', ['j'], 4198), ('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4201), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4202)]
LDEs formed:0

y_s -> [('[j]', 'w', 'normalized', ['j'], 4177), ('[j]', 'w', 'normalized', ['j'], 4178), ('[j]', 'w', 'normalized', ['j'], 4179), ('[j]', 'w', 'normalized', ['j'], 4180), ('[j]', 'w', 'normalized', ['j'], 4185)]
LDEs formed:15

ptr_D -> [('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4149), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4150), ('[inow+j*nPoints+nPoints]', 'r', 'not normalized', ['j'], 4165), ('[inow+1+j*nPoints+nPoints]', 'r', 'not normalized', ['j'], 4166)]
LDEs formed:0

y_l -> [('[j]', 'w', 'normalized', ['j'], 4186), ('[j]', 'w', 'normalized', ['j'], 4187), ('[j]', 'w', 'normalized', ['j'], 4188), ('[j]', 'w', 'normalized', ['j'], 4189), ('[j]', 'w', 'normalized', ['j'], 4194)]
LDEs formed:15

y_uc -> [('[j]', 'w', 'normalized', ['j'], 4195), ('[j]', 'w', 'normalized', ['j'], 4196), ('[j]', 'w', 'normalized', ['j'], 4197), ('[j]', 'w', 'normalized', ['j'], 4198), ('[j]', 'w', 'normalized', ['j'], 4203)]
LDEs formed:15

ptr_d -> [('[nPoints-1+(j)*nPoints]', 'r', 'not normalized', ['j'], 4137), ('[inow+(j)*nPoints]', 'r', 'not normalized', ['j'], 4139), ('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4142), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4143), ('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4147), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4148), ('[nPoints*my+nPoints-1+(j)*nPoints]', 'r', 'not normalized', ['j'], 4153), ('[nPoints*my+inow+(j)*nPoints]', 'r', 'not normalized', ['j'], 4155), ('[nPoints*my+inow+j*nPoints]', 'r', 'not normalized', ['j'], 4158), ('[nPoints*my+inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4159), ('[inow+j*nPoints+nPoints]', 'r', 'not normalized', ['j'], 4163), ('[inow+1+j*nPoints+nPoints]', 'r', 'not normalized', ['j'], 4164)]
LDEs formed:0

ptr_c -> [('[nPoints-1+(j)*nPoints]', 'r', 'not normalized', ['j'], 4169), ('[inow+(j)*nPoints]', 'r', 'not normalized', ['j'], 4171), ('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4174), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4175)]
LDEs formed:0

ptr_s -> [('[nPoints-1+(j)*nPoints]', 'r', 'not normalized', ['j'], 4178), ('[inow+(j)*nPoints]', 'r', 'not normalized', ['j'], 4180), ('[inow+j*nPoints]', 'r', 'not normalized', ['j'], 4183), ('[inow+1+j*nPoints]', 'r', 'not normalized', ['j'], 4184)]
LDEs formed:0

y_d -> [('[j]', 'w', 'normalized', ['j'], 4136), ('[j]', 'w', 'normalized', ['j'], 4137), ('[j]', 'w', 'normalized', ['j'], 4138), ('[j]', 'w', 'normalized', ['j'], 4139), ('[j]', 'w', 'normalized', ['j'], 4144), ('[j]', 'w', 'normalized', ['j'], 4151)]
LDEs formed:21

y_c -> [('[j]', 'w', 'normalized', ['j'], 4168), ('[j]', 'w', 'normalized', ['j'], 4169), ('[j]', 'w', 'normalized', ['j'], 4170), ('[j]', 'w', 'normalized', ['j'], 4171), ('[j]', 'w', 'normalized', ['j'], 4176)]
LDEs formed:15

y_cd -> [('[j]', 'w', 'normalized', ['j'], 4152), ('[j]', 'w', 'normalized', ['j'], 4153), ('[j]', 'w', 'normalized', ['j'], 4154), ('[j]', 'w', 'normalized', ['j'], 4155), ('[j]', 'w', 'normalized', ['j'], 4160), ('[j]', 'w', 'normalized', ['j'], 4167)]
LDEs formed:21

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nPoints j++
induction variable: ['j']
{
L4168: (workt[j],r) 
}
array table
-----------------------------------------------
workt -> [('[j]', 'r', 'normalized', ['j'], 4168)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nPoints j++
induction variable: ['j']
{
L4169: (workt[j],r) 
}
array table
-----------------------------------------------
workt -> [('[j]', 'r', 'normalized', ['j'], 4169)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= N-1  ++j
induction variable: ['j']
{
L4170: (lA[j-1],r) 
L4171: (lA[j-1]/=,w) (dA[j-1],r) 
L4172: (B[j]-=,w) (lA[j-1]*,r) (B[j-1],r) 
L4173: (dA[j]-=,w) (lA[j-1],r) 
}
array table
-----------------------------------------------
B -> [('[j]', 'w', 'normalized', ['j'], 4172), ('[j-1]', 'r', 'normalized', ['j'], 4172)]
LDEs formed:2

dA -> [('[j-1]', 'r', 'normalized', ['j'], 4171), ('[j]', 'w', 'normalized', ['j'], 4173)]
LDEs formed:2

lA -> [('[j-1]', 'r', 'normalized', ['j'], 4170), ('[j-1]', 'w', 'normalized', ['j'], 4171), ('[j-1]', 'r', 'normalized', ['j'], 4172), ('[j-1]', 'r', 'normalized', ['j'], 4173)]
LDEs formed:4

distinct LDEs:
j1=j2
j1=j2-1
j1-1=j2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = N - 2  j >= 0  --j
induction variable: ['j']
{
L4174: (B[j]=,w) (lA[j]*,r) (B[j + 1]+,r) (B[j]/,r) (dA[j],r) 
}
array table
-----------------------------------------------
dA -> [('[j]', 'r', 'normalized', ['j'], 4174)]
LDEs formed:0

B -> [('[j]', 'w', 'normalized', ['j'], 4174), ('[j + 1]', 'r', 'normalized', ['j'], 4174), ('[j]', 'r', 'normalized', ['j'], 4174)]
LDEs formed:3

lA -> [('[j]', 'r', 'normalized', ['j'], 4174)]
LDEs formed:0

distinct LDEs:
j1=j2
j1=j2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L4175: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 4175)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L4176: (ipar[k],r) 
	L4177: (u[j],r) 
	L4178: (u[j],r) 
	}
L4179: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 4179)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 4177), ('[j]', 'r', 'normalized', ['j', 'k'], 4178)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 4176)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4177: (rpar[0],r) (rpar[0],r) 
L4178: (rpar[1],r) (rpar[1],r) 
L4179: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4179)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4177), ('[0]', 'r', 'normalized', ['i'], 4177), ('[1]', 'r', 'normalized', ['i'], 4178), ('[1]', 'r', 'normalized', ['i'], 4178)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4179: (rpar[0],r) (rpar[0],r) 
L4180: (rpar[1],r) (rpar[1],r) 
L4181: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4181)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4179), ('[0]', 'r', 'normalized', ['i'], 4179), ('[1]', 'r', 'normalized', ['i'], 4180), ('[1]', 'r', 'normalized', ['i'], 4180)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4181: (rpar[0],r) (rpar[0],r) 
L4182: (rpar[1],r) (rpar[1],r) 
L4183: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4183)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4181), ('[0]', 'r', 'normalized', ['i'], 4181), ('[1]', 'r', 'normalized', ['i'], 4182), ('[1]', 'r', 'normalized', ['i'], 4182)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4183: (rpar[0],r) (rpar[0],r) 
L4184: (rpar[1],r) (rpar[1],r) 
L4185: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4185)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4183), ('[0]', 'r', 'normalized', ['i'], 4183), ('[1]', 'r', 'normalized', ['i'], 4184), ('[1]', 'r', 'normalized', ['i'], 4184)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4185: (rpar[0],r) (rpar[0],r) 
L4186: (rpar[1],r) (rpar[1],r) 
L4187: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4187)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4185), ('[0]', 'r', 'normalized', ['i'], 4185), ('[1]', 'r', 'normalized', ['i'], 4186), ('[1]', 'r', 'normalized', ['i'], 4186)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4187: (rpar[0],r) (rpar[0],r) 
L4188: (rpar[1],r) (rpar[1],r) 
L4189: (y1[i]=,w) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4189)]
LDEs formed:1

rpar -> [('[0]', 'r', 'normalized', ['i'], 4187), ('[0]', 'r', 'normalized', ['i'], 4187), ('[1]', 'r', 'normalized', ['i'], 4188), ('[1]', 'r', 'normalized', ['i'], 4188)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<my*ny i++
induction variable: ['i']
{
L4189: (z[i+2]=,w) 
L4190: (z[i+2+my*ny]=,w) 
}
array table
-----------------------------------------------
z -> [('[i+2]', 'w', 'normalized', ['i'], 4189), ('[i+2+my*ny]', 'w', 'not normalized', ['i'], 4190)]
LDEs formed:3

distinct LDEs:
i1+2=i2+2
i1+2=i2+2+my*ny
i1+2+my*ny=i2+2+my*ny
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4191: (yr[i]=,w) (u1r[i]*,r) (u2r[i]-,r) (u1i[i]*,r) (u2i[i],r) 
L4192: (yi[i]=,w) (u1r[i]*,r) (u2i[i]+,r) (u1i[i]*,r) (u2r[i],r) 
}
array table
-----------------------------------------------
u1i -> [('[i]', 'r', 'normalized', ['i'], 4191), ('[i]', 'r', 'normalized', ['i'], 4192)]
LDEs formed:0

yi -> [('[i]', 'w', 'normalized', ['i'], 4192)]
LDEs formed:1

yr -> [('[i]', 'w', 'normalized', ['i'], 4191)]
LDEs formed:1

u2i -> [('[i]', 'r', 'normalized', ['i'], 4191), ('[i]', 'r', 'normalized', ['i'], 4192)]
LDEs formed:0

u2r -> [('[i]', 'r', 'normalized', ['i'], 4191), ('[i]', 'r', 'normalized', ['i'], 4192)]
LDEs formed:0

u1r -> [('[i]', 'r', 'normalized', ['i'], 4191), ('[i]', 'r', 'normalized', ['i'], 4192)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4193: (u[i],r) 
	loop info: j=0 j<ipar[0] j++
	induction variable: ['i', 'j']
	{
	L4194: (y[i]=,w) 
	L4195: (y[i]==,r) (y[i]=,w) 
	L4196: (y[i]=,w) 
	L4197: (y[i]=,w) (y[i],r) 
	L4198: (y[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4194), ('[i]', 'r', 'normalized', ['i', 'j'], 4195), ('[i]', 'w', 'normalized', ['i', 'j'], 4195), ('[i]', 'w', 'normalized', ['i', 'j'], 4196), ('[i]', 'w', 'normalized', ['i', 'j'], 4197), ('[i]', 'r', 'normalized', ['i', 'j'], 4197), ('[i]', 'r', 'normalized', ['i', 'j'], 4198)]
LDEs formed:22

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4193)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m * n  i++
induction variable: ['i']
{
L4194: (scaledData[i]=,w) (data[i]+,r) 
}
array table
-----------------------------------------------
data -> [('[i]', 'r', 'normalized', ['i'], 4194)]
LDEs formed:0

scaledData -> [('[i]', 'w', 'normalized', ['i'], 4194)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= len  i++
induction variable: ['i']
{
L4195: (values[i]=,w) 
}
array table
-----------------------------------------------
values -> [('[i]', 'w', 'normalized', ['i'], 4195)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4196: (u[i],r) 
	L4197: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4197)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4196)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4197: (y[i]=,w) (u[i],r) 
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4198: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4197), ('[i]', 'w', 'normalized', ['i', 'j'], 4198), ('[i]', 'r', 'normalized', ['i', 'j'], 4198)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4197), ('[i]', 'r', 'normalized', ['i', 'j'], 4198)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4199: (u[i],r) 
	L4200: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4200)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4199)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4200: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4200), ('[i]', 'r', 'normalized', ['i', 'j'], 4200)]
LDEs formed:2

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4200)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4201: (u[i],r) 
	L4202: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4202)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4201)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4202: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4203: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L4204: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4202), ('[i]', 'w', 'normalized', ['i', 'j'], 4203), ('[i]', 'r', 'normalized', ['i', 'j'], 4203), ('[i]', 'w', 'normalized', ['i', 'j'], 4204), ('[i]', 'r', 'normalized', ['i', 'j'], 4204)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4202), ('[i]', 'r', 'normalized', ['i', 'j'], 4203)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4204: (u[i],r) 
	L4205: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4205)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4204)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4205: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4206: (y[i]=,w) (y[i],r) (u[i],r) 
	}
L4207: (y[i]=,w) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4205), ('[i]', 'w', 'normalized', ['i', 'j'], 4206), ('[i]', 'r', 'normalized', ['i', 'j'], 4206), ('[i]', 'w', 'normalized', ['i', 'j'], 4207), ('[i]', 'r', 'normalized', ['i', 'j'], 4207)]
LDEs formed:12

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4205), ('[i]', 'r', 'normalized', ['i', 'j'], 4206)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4207: (u[i],r) 
	}
L4208: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4208)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4207)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4208: (y[i]=,w) (u[i],r) 
	loop info: j=2 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4209: (y[i]=,w) (y[i],r) (u[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4208), ('[i]', 'w', 'normalized', ['i', 'j'], 4209), ('[i]', 'r', 'normalized', ['i', 'j'], 4209)]
LDEs formed:5

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4208), ('[i]', 'r', 'normalized', ['i', 'j'], 4209)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4210: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4210)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L4211: (opar[0],r) (u[i],r) 
L4212: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4212)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4211)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 4211)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L4212: (opar[ji],r) (u[il],r) 
		}
L4213: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4213)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4212)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4212)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L4213: (inptr[0][i],r) 
L4214: (inptr[0][i],r) 
L4215: (mode[i],r) 
L4216: (outptr[0][i]=,w) 
L4217: (outptr[0][i]=,w) 
L4218: (outptr[0][i]=,w) 
}
array table
-----------------------------------------------
outptr -> [('[0][i]', 'w', 'normalized', ['i'], 4216), ('[0][i]', 'w', 'normalized', ['i'], 4217), ('[0][i]', 'w', 'normalized', ['i'], 4218)]
LDEs formed:12

inptr -> [('[0][i]', 'r', 'normalized', ['i'], 4213), ('[0][i]', 'r', 'normalized', ['i'], 4214)]
LDEs formed:0

mode -> [('[i]', 'r', 'normalized', ['i'], 4215)]
LDEs formed:0

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->insz[0] ++i
induction variable: ['i']
{
L4216: (g[i]=,w) (inptr[0][i],r) 
L4217: (g[i],r) 
L4218: (mode[i]=,w) 
L4219: (mode[i]=,w) 
}
array table
-----------------------------------------------
inptr -> [('[0][i]', 'r', 'normalized', ['i'], 4216)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4218), ('[i]', 'w', 'normalized', ['i'], 4219)]
LDEs formed:3

g -> [('[i]', 'w', 'normalized', ['i'], 4216), ('[i]', 'r', 'normalized', ['i'], 4217)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4218: (internal.coordinates[i]=,w) (ipar[2],r) 
L4219: (internal.coordinates[i]==,r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'w', 'normalized', ['i'], 4218), ('[i]', 'r', 'normalized', ['i'], 4219)]
LDEs formed:2

ipar -> [('[2]', 'r', 'normalized', ['i'], 4218)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L4219: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'not normalized', ['j'], 4219)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4220: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'normalized', ['i'], 4220)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4221: (scope.cachedPolylinesUIDs[i],r) 
L4222: (scope.cachedPolylinesUIDs[i]=,w) 
}
array table
-----------------------------------------------
scope.cachedPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 4221), ('[i]', 'w', 'normalized', ['i'], 4222)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4223: (internal.coordinates[i],r) (internal.coordinates[i]+,r) 
L4224: (internal.coordinates[i][setLen]=,w) (x[i],r) 
L4225: (internal.coordinates[i]+,r) (internal.coordinates[i]+,r) 
L4226: (internal.coordinates[i][maxNumberOfPoints + setLen]=,w) (y[i],r) 
L4227: (internal.coordinates[i]+,r) (internal.coordinates[i]+,r) 
L4228: (internal.coordinates[i][2 * maxNumberOfPoints + setLen]=,w) (z[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 4226)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 4224)]
LDEs formed:0

z -> [('[i]', 'r', 'normalized', ['i'], 4228)]
LDEs formed:0

internal.coordinates -> [('[i]', 'r', 'normalized', ['i'], 4223), ('[i]', 'r', 'normalized', ['i'], 4223), ('[i][setLen]', 'w', 'not normalized', ['i'], 4224), ('[i]', 'r', 'normalized', ['i'], 4225), ('[i]', 'r', 'normalized', ['i'], 4225), ('[i][maxNumberOfPoints + setLen]', 'w', 'not normalized', ['i'], 4226), ('[i]', 'r', 'normalized', ['i'], 4227), ('[i]', 'r', 'normalized', ['i'], 4227), ('[i][2 * maxNumberOfPoints + setLen]', 'w', 'not normalized', ['i'], 4228)]
LDEs formed:48

distinct LDEs:
i1=i2,2 * maxNumberOfPoints + setLen=2 * maxNumberOfPoints + setLen
i1=i2,setLen=2 * maxNumberOfPoints + setLen
i1=i2,maxNumberOfPoints + setLen=2 * maxNumberOfPoints + setLen
i1=i2
i1=i2,setLen=maxNumberOfPoints + setLen
i1=i2,maxNumberOfPoints + setLen=maxNumberOfPoints + setLen
i1=i2,setLen=setLen
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L4229: (internal.coordinates[i][numberOfPoints + setLen]=,w) (x[i],r) 
	}
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L4230: (internal.coordinates[i][maxNumberOfPoints + numberOfPoints + setLen]=,w) (y[i],r) 
	}
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L4231: (internal.coordinates[i][2 * maxNumberOfPoints + numberOfPoints + setLen]=,w) (z[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 4230)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 4229)]
LDEs formed:0

z -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 4231)]
LDEs formed:0

internal.coordinates -> [('[i][numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 4229), ('[i][maxNumberOfPoints + numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 4230), ('[i][2 * maxNumberOfPoints + numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 4231)]
LDEs formed:12

distinct LDEs:
i1=i2,numberOfPoints + setLen1=2 * maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,numberOfPoints + setLen1=numberOfPoints + setLen2
i1=i2,2 * maxNumberOfPoints + numberOfPoints + setLen1=2 * maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,maxNumberOfPoints + numberOfPoints + setLen1=2 * maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,maxNumberOfPoints + numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < *nu   i++ 
induction variable: ['i']
{
L4232: (u[i],r) 
L4233: (y[i]=,w) (u[i]+,r) (rpar[i]/,r) 
L4234: (y[i]=,w) (u[i]-,r) (rpar[i]/,r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4233), ('[i]', 'w', 'normalized', ['i'], 4234)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4232), ('[i]', 'r', 'normalized', ['i'], 4233), ('[i]', 'r', 'normalized', ['i'], 4234)]
LDEs formed:0

rpar -> [('[i]', 'r', 'normalized', ['i'], 4233), ('[i]', 'r', 'normalized', ['i'], 4234)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j< block->insz[0]+1 j++
induction variable: ['j']
{
L4235: (ipar[0]*,r) (rpar[1],r) 
}
array table
-----------------------------------------------
ipar -> [('[0]', 'r', 'normalized', ['j'], 4235)]
LDEs formed:0

rpar -> [('[1]', 'r', 'normalized', ['j'], 4235)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=1 i< block->ipar[0] i++
induction variable: ['i']
{
L4236: (pw[i]=,w) (pw[i-1]+,r) (rpar[0]-,r) 
	loop info: j=1 j< block->insz[0]+1 j++
	induction variable: ['i', 'j']
	{
	L4237: (ipar[0]*,r) (rpar[1],r) 
	}
 }
array table
-----------------------------------------------
pw -> [('[i]', 'w', 'normalized', ['i', 'j'], 4236), ('[i-1]', 'r', 'normalized', ['i', 'j'], 4236)]
LDEs formed:2

ipar -> [('[0]', 'r', 'normalized', ['i', 'j'], 4237)]
LDEs formed:0

rpar -> [('[0]', 'r', 'normalized', ['i', 'j'], 4236), ('[1]', 'r', 'normalized', ['i', 'j'], 4237)]
LDEs formed:0

distinct LDEs:
i1=i2-1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=0 k<block->insz[0] k++
induction variable: ['k']
{
L4238: (outptr[0][k]=,w) (rpar[1],r) 
}
array table
-----------------------------------------------
outptr -> [('[0][k]', 'w', 'normalized', ['k'], 4238)]
LDEs formed:2

rpar -> [('[1]', 'r', 'normalized', ['k'], 4238)]
LDEs formed:0

distinct LDEs:
0=0,k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j< block->insz[0]+1 j++
induction variable: ['j']
{
L4239: (ipar[0]*,r) (inptr[0][j-1],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j-1]', 'r', 'normalized', ['j'], 4239)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['j'], 4239)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j< block->insz[0]+1 j++
induction variable: ['j']
{
L4240: (ipar[0]+,r) (ipar[0]+,r) (ipar[0]*,r) (inptr[0][j-1],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][j-1]', 'r', 'normalized', ['j'], 4240)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['j'], 4240), ('[0]', 'r', 'normalized', ['j'], 4240), ('[0]', 'r', 'normalized', ['j'], 4240)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1 k<block->insz[0]+1 k++
induction variable: ['k']
{
L4241: (outptr[0][k-1]=,w) (pw[j]-,r) (ipar[0]*,r) 
L4242: (pw[i],r) (ipar[0]*,r) 
}
array table
-----------------------------------------------
outptr -> [('[0][k-1]', 'w', 'normalized', ['k'], 4241)]
LDEs formed:2

pw -> [('[j]', 'r', 'not normalized', ['k'], 4241), ('[i]', 'r', 'not normalized', ['k'], 4242)]
LDEs formed:0

ipar -> [('[0]', 'r', 'normalized', ['k'], 4241), ('[0]', 'r', 'normalized', ['k'], 4242)]
LDEs formed:0

distinct LDEs:
0=0,k1-1=k2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k=1 k<block->insz[0]+1 k++
induction variable: ['k']
{
L4243: (outptr[0][k-1]=,w) (ipar[0]*,r) 
}
array table
-----------------------------------------------
outptr -> [('[0][k-1]', 'w', 'normalized', ['k'], 4243)]
LDEs formed:2

ipar -> [('[0]', 'r', 'normalized', ['k'], 4243)]
LDEs formed:0

distinct LDEs:
0=0,k1-1=k2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ny*mu ++i
induction variable: ['i']
{
L4244: (opar[0],r) (u[i],r) 
L4245: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4245)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4244)]
LDEs formed:0

opar -> [('[0]', 'r', 'normalized', ['i'], 4244)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<ny l++
induction variable: ['l']
{
	loop info: i=0 i<mu i++
	induction variable: ['l', 'i']
		{
		L4245: (opar[ji],r) (u[il],r) 
		}
L4246: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4246)]
LDEs formed:1

u -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4245)]
LDEs formed:0

opar -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4245)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<*nout i++
induction variable: ['i']
{
L4246: (record[i],r) 
L4247: (ETAB[e-1],r) 
L4248: (outptr[i]=,w) 
}
array table
-----------------------------------------------
record -> [('[i]', 'r', 'normalized', ['i'], 4246)]
LDEs formed:0

outptr -> [('[i]', 'w', 'normalized', ['i'], 4248)]
LDEs formed:1

ETAB -> [('[e-1]', 'r', 'not normalized', ['i'], 4247)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=2 i>=0 i--
induction variable: ['i']
{
L4248: (type[i+1]=,w) 
}
array table
-----------------------------------------------
type -> [('[i+1]', 'w', 'normalized', ['i'], 4248)]
LDEs formed:1

distinct LDEs:
i1+1=i2+1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=2 i>=0 i--
induction variable: ['i']
{
L4249: (type[i+1]=,w) 
}
array table
-----------------------------------------------
type -> [('[i+1]', 'w', 'normalized', ['i'], 4249)]
LDEs formed:1

distinct LDEs:
i1+1=i2+1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=2 i>=0 i--
induction variable: ['i']
{
L4250: (type[i+1]=,w) 
}
array table
-----------------------------------------------
type -> [('[i+1]', 'w', 'normalized', ['i'], 4250)]
LDEs formed:1

distinct LDEs:
i1+1=i2+1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L4251: (u1[ji],r) (u2[il],r) 
		}
L4252: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4252)]
LDEs formed:1

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4251)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4251)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<block->outsz[0] ++i
induction variable: ['i']
{
L4252: (outptr[0][i]=,w) (inptr[0][0],r) 
}
array table
-----------------------------------------------
inptr -> [('[0][0]', 'r', 'normalized', ['i'], 4252)]
LDEs formed:0

outptr -> [('[0][i]', 'w', 'normalized', ['i'], 4252)]
LDEs formed:2

distinct LDEs:
0=0,i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*my ++i
induction variable: ['i']
{
L4253: (y[i]=,w) (rpar[0]*,r) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4253)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4253)]
LDEs formed:0

rpar -> [('[0]', 'r', 'normalized', ['i'], 4253)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L4254: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 4254)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L4255: (ipar[k],r) 
	L4256: (u[j],r) 
	L4257: (u[j],r) 
	}
L4258: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 4258)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 4256), ('[j]', 'r', 'normalized', ['j', 'k'], 4257)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 4255)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4256: (internal.coordinates[i]=,w) (ipar[2],r) 
L4257: (internal.coordinates[i]==,r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'w', 'normalized', ['i'], 4256), ('[i]', 'r', 'normalized', ['i'], 4257)]
LDEs formed:2

ipar -> [('[2]', 'r', 'normalized', ['i'], 4256)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i  j++
induction variable: ['j']
{
L4257: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'not normalized', ['j'], 4257)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4258: (internal.coordinates[i],r) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'normalized', ['i'], 4258)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4259: (scope.cachedPolylinesUIDs[i],r) 
}
array table
-----------------------------------------------
scope.cachedPolylinesUIDs -> [('[i]', 'r', 'normalized', ['i'], 4259)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
L4260: (internal.coordinates[i],r) 
	loop info: setLen = newPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L4261: (ptr[numberOfPoints + previousNumberOfPoints + setLen]=,w) (ptr[numberOfPoints + previousNumberOfPoints - 1],r) 
	}
L4262: (ptr[previousNumberOfPoints + setLen]=,w) (ptr[previousNumberOfPoints - 1],r) 
L4263: (internal.coordinates[i]=,w) 
}
array table
-----------------------------------------------
internal.coordinates -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 4260), ('[i]', 'w', 'normalized', ['i', 'setLen'], 4263)]
LDEs formed:2

ptr -> [('[numberOfPoints + previousNumberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 4261), ('[numberOfPoints + previousNumberOfPoints - 1]', 'r', 'not normalized', ['i', 'setLen'], 4261), ('[previousNumberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 4262), ('[previousNumberOfPoints - 1]', 'r', 'not normalized', ['i', 'setLen'], 4262)]
LDEs formed:7

distinct LDEs:
numberOfPoints + previousNumberOfPoints + setLen1=previousNumberOfPoints + setLen2
previousNumberOfPoints + setLen1=previousNumberOfPoints + setLen2
numberOfPoints + previousNumberOfPoints + setLen1=numberOfPoints + previousNumberOfPoints + setLen2
numberOfPoints + previousNumberOfPoints - 1=previousNumberOfPoints + setLen2
i1=i2
numberOfPoints + previousNumberOfPoints + setLen1=previousNumberOfPoints - 1
previousNumberOfPoints + setLen1=previousNumberOfPoints - 1
numberOfPoints + previousNumberOfPoints + setLen1=numberOfPoints + previousNumberOfPoints - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < block->insz[0]  i++
induction variable: ['i']
{
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L4263: (internal.coordinates[i][numberOfPoints + setLen]=,w) (x[i],r) 
	}
	loop info: setLen = maxNumberOfPoints - numberOfPoints - 1  setLen >= 0  setLen--
	induction variable: ['i', 'setLen']
	{
	L4264: (internal.coordinates[i][maxNumberOfPoints + numberOfPoints + setLen]=,w) (y[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 4264)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i', 'setLen'], 4263)]
LDEs formed:0

internal.coordinates -> [('[i][numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 4263), ('[i][maxNumberOfPoints + numberOfPoints + setLen]', 'w', 'not normalized', ['i', 'setLen'], 4264)]
LDEs formed:6

distinct LDEs:
i1=i2,numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,maxNumberOfPoints + numberOfPoints + setLen1=maxNumberOfPoints + numberOfPoints + setLen2
i1=i2,numberOfPoints + setLen1=numberOfPoints + setLen2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: i=0 i<nu1 i++
	induction variable: ['l', 'i']
		{
		L4265: (u1[ji],r) (u2[il],r) 
		}
L4266: (y[jl]=,w) 
L4267: (y[jl]=,w) 
L4268: (y[jl]=,w) 
}
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'i'], 4266), ('[jl]', 'w', 'not normalized', ['l', 'i'], 4267), ('[jl]', 'w', 'not normalized', ['l', 'i'], 4268)]
LDEs formed:6

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'i'], 4265)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'i'], 4265)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L4266: (y[0]=,w) (y[0]+,r) (u[j],r) 
}
array table
-----------------------------------------------
y -> [('[0]', 'w', 'normalized', ['j'], 4266), ('[0]', 'r', 'normalized', ['j'], 4266)]
LDEs formed:2

u -> [('[j]', 'r', 'normalized', ['j'], 4266)]
LDEs formed:0

distinct LDEs:
0=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L4267: (y[j]=,w) 
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L4268: (ipar[k],r) 
	L4269: (y[j]=,w) (y[j]+,r) (u[j],r) 
	L4270: (y[j]=,w) (y[j]-,r) (u[j],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 4267), ('[j]', 'w', 'normalized', ['j', 'k'], 4269), ('[j]', 'r', 'normalized', ['j', 'k'], 4269), ('[j]', 'w', 'normalized', ['j', 'k'], 4270), ('[j]', 'r', 'normalized', ['j', 'k'], 4270)]
LDEs formed:12

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 4269), ('[j]', 'r', 'normalized', ['j', 'k'], 4270)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 4268)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(mu*nu) i++
induction variable: ['i']
{
L4269: (LA[2*i]=,w) (ur[i],r) 
L4270: (LA[2*i+1]=,w) (ui[i],r) 
}
array table
-----------------------------------------------
ur -> [('[i]', 'r', 'normalized', ['i'], 4269)]
LDEs formed:0

ui -> [('[i]', 'r', 'normalized', ['i'], 4270)]
LDEs formed:0

LA -> [('[2*i]', 'w', 'normalized', ['i'], 4269), ('[2*i+1]', 'w', 'normalized', ['i'], 4270)]
LDEs formed:3

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L4271: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 4271)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L4272: (ipar[k],r) 
	L4273: (u[j],r) 
	L4274: (u[j],r) 
	}
L4275: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 4275)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 4273), ('[j]', 'r', 'normalized', ['j', 'k'], 4274)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 4272)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
L4273: (u[j],r) 
}
array table
-----------------------------------------------
u -> [('[j]', 'r', 'normalized', ['j'], 4273)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<nu*mu j++
induction variable: ['j']
{
	loop info: k=0 k<nin k++
	induction variable: ['j', 'k']
	{
	L4274: (ipar[k],r) 
	L4275: (u[j],r) 
	L4276: (u[j],r) 
	}
L4277: (y[j]=,w) 
}
array table
-----------------------------------------------
y -> [('[j]', 'w', 'normalized', ['j', 'k'], 4277)]
LDEs formed:1

u -> [('[j]', 'r', 'normalized', ['j', 'k'], 4275), ('[j]', 'r', 'normalized', ['j', 'k'], 4276)]
LDEs formed:0

ipar -> [('[k]', 'r', 'normalized', ['j', 'k'], 4274)]
LDEs formed:0

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nz i++
induction variable: ['i']
{
L4275: (ptr_d[i]=,w) 
}
array table
-----------------------------------------------
ptr_d -> [('[i]', 'w', 'normalized', ['i'], 4275)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2*nz i++
induction variable: ['i']
{
L4276: (ptr_d[i]=,w) 
}
array table
-----------------------------------------------
ptr_d -> [('[i]', 'w', 'normalized', ['i'], 4276)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<2*nu*nu2*nz i++
induction variable: ['i']
{
L4277: (ptr_d[i]=,w) 
}
array table
-----------------------------------------------
ptr_d -> [('[i]', 'w', 'normalized', ['i'], 4277)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2*nz i++
induction variable: ['i']
{
L4278: (ptr_c[i]=,w) 
}
array table
-----------------------------------------------
ptr_c -> [('[i]', 'w', 'normalized', ['i'], 4278)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2*nz i++
induction variable: ['i']
{
L4279: (ptr_s[i]=,w) 
}
array table
-----------------------------------------------
ptr_s -> [('[i]', 'w', 'normalized', ['i'], 4279)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2*nz i++
induction variable: ['i']
{
L4280: (ptr_l[i]=,w) 
}
array table
-----------------------------------------------
ptr_l -> [('[i]', 'w', 'normalized', ['i'], 4280)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2*nz i++
induction variable: ['i']
{
L4281: (ptr_uc[i]=,w) 
}
array table
-----------------------------------------------
ptr_uc -> [('[i]', 'w', 'normalized', ['i'], 4281)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2*nz i++
induction variable: ['i']
{
L4282: (ptr_us[i]=,w) 
}
array table
-----------------------------------------------
ptr_us -> [('[i]', 'w', 'normalized', ['i'], 4282)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2*nz i++
induction variable: ['i']
{
L4283: (ptr_ul[i]=,w) 
}
array table
-----------------------------------------------
ptr_ul -> [('[i]', 'w', 'normalized', ['i'], 4283)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0 j<ptr->cnt j++
induction variable: ['j']
{
L4284: (ptr_i[10],r) 
L4285: (ptr_i[10],r) 
}
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['j'], 4284), ('[10]', 'r', 'normalized', ['j'], 4285)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ptr_i[8]-1 i++
induction variable: ['i']
{
	loop info: j=0 j<ptr->cnt j++
	induction variable: ['i', 'j']
	{
	L4286: (ptr_i[10],r) 
	L4287: (ptr_i[10],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4286), ('[10]', 'r', 'normalized', ['i', 'j'], 4287)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ptr_i[8]-1 i++
induction variable: ['i']
{
	loop info: j=0 j<ptr->cnt j++
	induction variable: ['i', 'j']
	{
	L4288: (ptr_i[10],r) 
	L4289: (ptr_i[10],r) 
	L4290: (ptr_i[10],r) 
	L4291: (ptr_i[10],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4288), ('[10]', 'r', 'normalized', ['i', 'j'], 4289), ('[10]', 'r', 'normalized', ['i', 'j'], 4290), ('[10]', 'r', 'normalized', ['i', 'j'], 4291)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ptr_i[8]-1 i++
induction variable: ['i']
{
	loop info: j=0 j<ptr->cnt j++
	induction variable: ['i', 'j']
	{
	L4292: (ptr_i[10],r) 
	L4293: (ptr_i[10],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4292), ('[10]', 'r', 'normalized', ['i', 'j'], 4293)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ptr_i[8]-1 i++
induction variable: ['i']
{
	loop info: j=0 j<ptr->cnt j++
	induction variable: ['i', 'j']
	{
	L4294: (ptr_i[10],r) 
	L4295: (ptr_i[10],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4294), ('[10]', 'r', 'normalized', ['i', 'j'], 4295)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ptr_i[8]-1 i++
induction variable: ['i']
{
	loop info: j=0 j<ptr->cnt j++
	induction variable: ['i', 'j']
	{
	L4296: (ptr_i[10],r) 
	L4297: (ptr_i[10],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4296), ('[10]', 'r', 'normalized', ['i', 'j'], 4297)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ptr_i[8]-1 i++
induction variable: ['i']
{
	loop info: j=0 j<ptr->cnt j++
	induction variable: ['i', 'j']
	{
	L4298: (ptr_i[10],r) 
	L4299: (ptr_i[10],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4298), ('[10]', 'r', 'normalized', ['i', 'j'], 4299)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ptr_i[8]-1 i++
induction variable: ['i']
{
	loop info: j=0 j<ptr->cnt j++
	induction variable: ['i', 'j']
	{
	L4300: (ptr_i[10],r) 
	L4301: (ptr_i[10],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4300), ('[10]', 'r', 'normalized', ['i', 'j'], 4301)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<ptr_i[8]-1 i++
induction variable: ['i']
{
	loop info: j=0 j<ptr->cnt j++
	induction variable: ['i', 'j']
	{
	L4302: (ptr_i[10],r) 
	L4303: (ptr_i[10],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4302), ('[10]', 'r', 'normalized', ['i', 'j'], 4303)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
L4304: (ptr_i[10],r) 
	loop info: j=(nz-1) j>=1 j--
	induction variable: ['i', 'j']
	{
	L4305: (ptr_i[10],r) (ptr_i[10],r) 
	}
L4306: (ptr_i[10],r) 
}
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'j'], 4304), ('[10]', 'r', 'normalized', ['i', 'j'], 4305), ('[10]', 'r', 'normalized', ['i', 'j'], 4305), ('[10]', 'r', 'normalized', ['i', 'j'], 4306)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4307: (sav_d[k]=,w) (ptr_i[44],r) 
	}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
		{
		L4308: (ptr_i[44],r) (ptr_i[44],r) 
		}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4309: (ptr_i[44],r) (sav_d[k],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[44]', 'r', 'normalized', ['i', 'k'], 4307), ('[44]', 'r', 'normalized', ['i', 'k'], 4308), ('[44]', 'r', 'normalized', ['i', 'k'], 4308), ('[44]', 'r', 'normalized', ['i', 'k'], 4309)]
LDEs formed:0

sav_d -> [('[k]', 'w', 'normalized', ['i', 'k'], 4307), ('[k]', 'r', 'normalized', ['i', 'k'], 4309)]
LDEs formed:2

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4310: (sav_d[k]=,w) (ptr_i[10],r) 
	}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
		{
		L4311: (ptr_i[10],r) (ptr_i[10],r) 
		}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4312: (ptr_i[10],r) (sav_d[k],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'k'], 4310), ('[10]', 'r', 'normalized', ['i', 'k'], 4311), ('[10]', 'r', 'normalized', ['i', 'k'], 4311), ('[10]', 'r', 'normalized', ['i', 'k'], 4312)]
LDEs formed:0

sav_d -> [('[k]', 'w', 'normalized', ['i', 'k'], 4310), ('[k]', 'r', 'normalized', ['i', 'k'], 4312)]
LDEs formed:2

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4313: (sav_d[k]=,w) (ptr_i[44],r) 
	L4314: (sav_d[k+nu*nu2]=,w) (ptr_i[44],r) 
	}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
		{
		L4315: (ptr_i[44],r) 
		L4316: (ptr_i[44],r) 
		L4317: (ptr_i[44],r) 
		L4318: (ptr_i[44],r) 
		}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4319: (ptr_i[44],r) (sav_d[k],r) 
	L4320: (ptr_i[44],r) (sav_d[k+nu*nu2],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[44]', 'r', 'normalized', ['i', 'k'], 4313), ('[44]', 'r', 'normalized', ['i', 'k'], 4314), ('[44]', 'r', 'normalized', ['i', 'k'], 4315), ('[44]', 'r', 'normalized', ['i', 'k'], 4316), ('[44]', 'r', 'normalized', ['i', 'k'], 4317), ('[44]', 'r', 'normalized', ['i', 'k'], 4318), ('[44]', 'r', 'normalized', ['i', 'k'], 4319), ('[44]', 'r', 'normalized', ['i', 'k'], 4320)]
LDEs formed:0

sav_d -> [('[k]', 'w', 'normalized', ['i', 'k'], 4313), ('[k+nu*nu2]', 'w', 'not normalized', ['i', 'k'], 4314), ('[k]', 'r', 'normalized', ['i', 'k'], 4319), ('[k+nu*nu2]', 'r', 'not normalized', ['i', 'k'], 4320)]
LDEs formed:7

distinct LDEs:
k1+nu*nu2=k2+nu*nu2
k1=k2
k1=k2+nu*nu2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4321: (sav_d[k]=,w) (ptr_i[10],r) 
	L4322: (sav_d[k+nu]=,w) (ptr_i[10],r) 
	}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
		{
		L4323: (ptr_i[10],r) 
		L4324: (ptr_i[10],r) 
		L4325: (ptr_i[10],r) 
		L4326: (ptr_i[10],r) 
		}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4327: (ptr_i[10],r) (sav_d[k],r) 
	L4328: (ptr_i[10],r) (sav_d[k+nu],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'k'], 4321), ('[10]', 'r', 'normalized', ['i', 'k'], 4322), ('[10]', 'r', 'normalized', ['i', 'k'], 4323), ('[10]', 'r', 'normalized', ['i', 'k'], 4324), ('[10]', 'r', 'normalized', ['i', 'k'], 4325), ('[10]', 'r', 'normalized', ['i', 'k'], 4326), ('[10]', 'r', 'normalized', ['i', 'k'], 4327), ('[10]', 'r', 'normalized', ['i', 'k'], 4328)]
LDEs formed:0

sav_d -> [('[k]', 'w', 'normalized', ['i', 'k'], 4321), ('[k+nu]', 'w', 'not normalized', ['i', 'k'], 4322), ('[k]', 'r', 'normalized', ['i', 'k'], 4327), ('[k+nu]', 'r', 'not normalized', ['i', 'k'], 4328)]
LDEs formed:7

distinct LDEs:
k1+nu=k2+nu
k1=k2+nu
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4329: (sav_c[k]=,w) (ptr_i[44],r) 
	}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
		{
		L4330: (ptr_i[44],r) (ptr_i[44],r) 
		}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4331: (ptr_i[44],r) (sav_c[k],r) 
	}
 }
array table
-----------------------------------------------
sav_c -> [('[k]', 'w', 'normalized', ['i', 'k'], 4329), ('[k]', 'r', 'normalized', ['i', 'k'], 4331)]
LDEs formed:2

ptr_i -> [('[44]', 'r', 'normalized', ['i', 'k'], 4329), ('[44]', 'r', 'normalized', ['i', 'k'], 4330), ('[44]', 'r', 'normalized', ['i', 'k'], 4330), ('[44]', 'r', 'normalized', ['i', 'k'], 4331)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4332: (sav_c[k]=,w) (ptr_i[10],r) 
	}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
		{
		L4333: (ptr_i[10],r) (ptr_i[10],r) 
		}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4334: (ptr_i[10],r) (sav_c[k],r) 
	}
 }
array table
-----------------------------------------------
sav_c -> [('[k]', 'w', 'normalized', ['i', 'k'], 4332), ('[k]', 'r', 'normalized', ['i', 'k'], 4334)]
LDEs formed:2

ptr_i -> [('[10]', 'r', 'normalized', ['i', 'k'], 4332), ('[10]', 'r', 'normalized', ['i', 'k'], 4333), ('[10]', 'r', 'normalized', ['i', 'k'], 4333), ('[10]', 'r', 'normalized', ['i', 'k'], 4334)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4335: (sav_s[k]=,w) (ptr_i[44],r) 
	}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
		{
		L4336: (ptr_i[44],r) (ptr_i[44],r) 
		}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4337: (ptr_i[44],r) (sav_s[k],r) 
	}
 }
array table
-----------------------------------------------
sav_s -> [('[k]', 'w', 'normalized', ['i', 'k'], 4335), ('[k]', 'r', 'normalized', ['i', 'k'], 4337)]
LDEs formed:2

ptr_i -> [('[44]', 'r', 'normalized', ['i', 'k'], 4335), ('[44]', 'r', 'normalized', ['i', 'k'], 4336), ('[44]', 'r', 'normalized', ['i', 'k'], 4336), ('[44]', 'r', 'normalized', ['i', 'k'], 4337)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4338: (sav_s[k]=,w) (ptr_i[10],r) 
	}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
		{
		L4339: (ptr_i[10],r) (ptr_i[10],r) 
		}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4340: (ptr_i[10],r) (sav_s[k],r) 
	}
 }
array table
-----------------------------------------------
sav_s -> [('[k]', 'w', 'normalized', ['i', 'k'], 4338), ('[k]', 'r', 'normalized', ['i', 'k'], 4340)]
LDEs formed:2

ptr_i -> [('[10]', 'r', 'normalized', ['i', 'k'], 4338), ('[10]', 'r', 'normalized', ['i', 'k'], 4339), ('[10]', 'r', 'normalized', ['i', 'k'], 4339), ('[10]', 'r', 'normalized', ['i', 'k'], 4340)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4341: (sav_l[k]=,w) (ptr_i[44],r) 
	}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
		{
		L4342: (ptr_i[44],r) (ptr_i[44],r) 
		}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4343: (ptr_i[44],r) (sav_l[k],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[44]', 'r', 'normalized', ['i', 'k'], 4341), ('[44]', 'r', 'normalized', ['i', 'k'], 4342), ('[44]', 'r', 'normalized', ['i', 'k'], 4342), ('[44]', 'r', 'normalized', ['i', 'k'], 4343)]
LDEs formed:0

sav_l -> [('[k]', 'w', 'normalized', ['i', 'k'], 4341), ('[k]', 'r', 'normalized', ['i', 'k'], 4343)]
LDEs formed:2

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4344: (sav_l[k]=,w) (ptr_i[10],r) 
	}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
		{
		L4345: (ptr_i[10],r) (ptr_i[10],r) 
		}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4346: (ptr_i[10],r) (sav_l[k],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'k'], 4344), ('[10]', 'r', 'normalized', ['i', 'k'], 4345), ('[10]', 'r', 'normalized', ['i', 'k'], 4345), ('[10]', 'r', 'normalized', ['i', 'k'], 4346)]
LDEs formed:0

sav_l -> [('[k]', 'w', 'normalized', ['i', 'k'], 4344), ('[k]', 'r', 'normalized', ['i', 'k'], 4346)]
LDEs formed:2

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4347: (sav_uc[k]=,w) (ptr_i[44],r) 
	}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
		{
		L4348: (ptr_i[44],r) (ptr_i[44],r) 
		}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4349: (ptr_i[44],r) (sav_uc[k],r) 
	}
 }
array table
-----------------------------------------------
sav_uc -> [('[k]', 'w', 'normalized', ['i', 'k'], 4347), ('[k]', 'r', 'normalized', ['i', 'k'], 4349)]
LDEs formed:2

ptr_i -> [('[44]', 'r', 'normalized', ['i', 'k'], 4347), ('[44]', 'r', 'normalized', ['i', 'k'], 4348), ('[44]', 'r', 'normalized', ['i', 'k'], 4348), ('[44]', 'r', 'normalized', ['i', 'k'], 4349)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4350: (sav_uc[k]=,w) (ptr_i[10],r) 
	}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
		{
		L4351: (ptr_i[10],r) (ptr_i[10],r) 
		}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4352: (ptr_i[10],r) (sav_uc[k],r) 
	}
 }
array table
-----------------------------------------------
sav_uc -> [('[k]', 'w', 'normalized', ['i', 'k'], 4350), ('[k]', 'r', 'normalized', ['i', 'k'], 4352)]
LDEs formed:2

ptr_i -> [('[10]', 'r', 'normalized', ['i', 'k'], 4350), ('[10]', 'r', 'normalized', ['i', 'k'], 4351), ('[10]', 'r', 'normalized', ['i', 'k'], 4351), ('[10]', 'r', 'normalized', ['i', 'k'], 4352)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4353: (sav_us[k]=,w) (ptr_i[44],r) 
	}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
		{
		L4354: (ptr_i[44],r) (ptr_i[44],r) 
		}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4355: (ptr_i[44],r) (sav_us[k],r) 
	}
 }
array table
-----------------------------------------------
sav_us -> [('[k]', 'w', 'normalized', ['i', 'k'], 4353), ('[k]', 'r', 'normalized', ['i', 'k'], 4355)]
LDEs formed:2

ptr_i -> [('[44]', 'r', 'normalized', ['i', 'k'], 4353), ('[44]', 'r', 'normalized', ['i', 'k'], 4354), ('[44]', 'r', 'normalized', ['i', 'k'], 4354), ('[44]', 'r', 'normalized', ['i', 'k'], 4355)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4356: (sav_us[k]=,w) (ptr_i[10],r) 
	}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
		{
		L4357: (ptr_i[10],r) (ptr_i[10],r) 
		}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4358: (ptr_i[10],r) (sav_us[k],r) 
	}
 }
array table
-----------------------------------------------
sav_us -> [('[k]', 'w', 'normalized', ['i', 'k'], 4356), ('[k]', 'r', 'normalized', ['i', 'k'], 4358)]
LDEs formed:2

ptr_i -> [('[10]', 'r', 'normalized', ['i', 'k'], 4356), ('[10]', 'r', 'normalized', ['i', 'k'], 4357), ('[10]', 'r', 'normalized', ['i', 'k'], 4357), ('[10]', 'r', 'normalized', ['i', 'k'], 4358)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4359: (sav_ul[k]=,w) (ptr_i[44],r) 
	}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
		{
		L4360: (ptr_i[44],r) (ptr_i[44],r) 
		}
	loop info: k=0 k<nu*nu2 k++
	induction variable: ['i', 'k']
	{
	L4361: (ptr_i[44],r) (sav_ul[k],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[44]', 'r', 'normalized', ['i', 'k'], 4359), ('[44]', 'r', 'normalized', ['i', 'k'], 4360), ('[44]', 'r', 'normalized', ['i', 'k'], 4360), ('[44]', 'r', 'normalized', ['i', 'k'], 4361)]
LDEs formed:0

sav_ul -> [('[k]', 'w', 'normalized', ['i', 'k'], 4359), ('[k]', 'r', 'normalized', ['i', 'k'], 4361)]
LDEs formed:2

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(nz-ptr->cnt) i++
induction variable: ['i']
{
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4362: (sav_ul[k]=,w) (ptr_i[10],r) 
	}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
		{
		L4363: (ptr_i[10],r) (ptr_i[10],r) 
		}
	loop info: k=0 k<nu k++
	induction variable: ['i', 'k']
	{
	L4364: (ptr_i[10],r) (sav_ul[k],r) 
	}
 }
array table
-----------------------------------------------
ptr_i -> [('[10]', 'r', 'normalized', ['i', 'k'], 4362), ('[10]', 'r', 'normalized', ['i', 'k'], 4363), ('[10]', 'r', 'normalized', ['i', 'k'], 4363), ('[10]', 'r', 'normalized', ['i', 'k'], 4364)]
LDEs formed:0

sav_ul -> [('[k]', 'w', 'normalized', ['i', 'k'], 4362), ('[k]', 'r', 'normalized', ['i', 'k'], 4364)]
LDEs formed:2

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4365: (ptr_d[ptr->cnt*(nu*nu2)+i]=,w) (u_d[i],r) 
}
array table
-----------------------------------------------
ptr_d -> [('[ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4365)]
LDEs formed:1

u_d -> [('[i]', 'r', 'normalized', ['i'], 4365)]
LDEs formed:0

distinct LDEs:
ptr->cnt*(nu*nu2)+i1=ptr->cnt*(nu*nu2)+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4366: (ptr_d[ptr->cnt+i*nz]=,w) (u_d[i],r) 
}
array table
-----------------------------------------------
ptr_d -> [('[ptr->cnt+i*nz]', 'w', 'not normalized', ['i'], 4366)]
LDEs formed:1

u_d -> [('[i]', 'r', 'normalized', ['i'], 4366)]
LDEs formed:0

distinct LDEs:
ptr->cnt+i1*nz=ptr->cnt+i2*nz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4367: (ptr_d[ptr->cnt*(nu*nu2)+i]=,w) (u_d[i],r) 
L4368: (ptr_d[nz*nu*nu2+ptr->cnt*(nu*nu2)+i]=,w) (u_cd[i],r) 
}
array table
-----------------------------------------------
u_cd -> [('[i]', 'r', 'normalized', ['i'], 4368)]
LDEs formed:0

ptr_d -> [('[ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4367), ('[nz*nu*nu2+ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4368)]
LDEs formed:3

u_d -> [('[i]', 'r', 'normalized', ['i'], 4367)]
LDEs formed:0

distinct LDEs:
nz*nu*nu2+ptr->cnt*(nu*nu2)+i1=nz*nu*nu2+ptr->cnt*(nu*nu2)+i2
ptr->cnt*(nu*nu2)+i1=nz*nu*nu2+ptr->cnt*(nu*nu2)+i2
ptr->cnt*(nu*nu2)+i1=ptr->cnt*(nu*nu2)+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu i++
induction variable: ['i']
{
L4368: (ptr_d[ptr->cnt+i*nz]=,w) (u_d[i],r) 
L4369: (ptr_d[nz*nu+ptr->cnt+i*nz]=,w) (u_cd[i],r) 
}
array table
-----------------------------------------------
u_cd -> [('[i]', 'r', 'normalized', ['i'], 4369)]
LDEs formed:0

ptr_d -> [('[ptr->cnt+i*nz]', 'w', 'not normalized', ['i'], 4368), ('[nz*nu+ptr->cnt+i*nz]', 'w', 'not normalized', ['i'], 4369)]
LDEs formed:3

u_d -> [('[i]', 'r', 'normalized', ['i'], 4368)]
LDEs formed:0

distinct LDEs:
ptr->cnt+i1*nz=nz*nu+ptr->cnt+i2*nz
nz*nu+ptr->cnt+i1*nz=nz*nu+ptr->cnt+i2*nz
ptr->cnt+i1*nz=ptr->cnt+i2*nz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4369: (ptr_c[ptr->cnt*(nu*nu2)+i]=,w) (u_c[i],r) 
}
array table
-----------------------------------------------
u_c -> [('[i]', 'r', 'normalized', ['i'], 4369)]
LDEs formed:0

ptr_c -> [('[ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4369)]
LDEs formed:1

distinct LDEs:
ptr->cnt*(nu*nu2)+i1=ptr->cnt*(nu*nu2)+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu i++
induction variable: ['i']
{
L4370: (ptr_c[ptr->cnt+i*nz]=,w) (u_c[i],r) 
}
array table
-----------------------------------------------
u_c -> [('[i]', 'r', 'normalized', ['i'], 4370)]
LDEs formed:0

ptr_c -> [('[ptr->cnt+i*nz]', 'w', 'not normalized', ['i'], 4370)]
LDEs formed:1

distinct LDEs:
ptr->cnt+i1*nz=ptr->cnt+i2*nz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4371: (ptr_s[ptr->cnt*(nu*nu2)+i]=,w) (u_s[i],r) 
}
array table
-----------------------------------------------
u_s -> [('[i]', 'r', 'normalized', ['i'], 4371)]
LDEs formed:0

ptr_s -> [('[ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4371)]
LDEs formed:1

distinct LDEs:
ptr->cnt*(nu*nu2)+i1=ptr->cnt*(nu*nu2)+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu i++
induction variable: ['i']
{
L4372: (ptr_s[ptr->cnt*nu+i*nz]=,w) (u_s[i],r) 
}
array table
-----------------------------------------------
u_s -> [('[i]', 'r', 'normalized', ['i'], 4372)]
LDEs formed:0

ptr_s -> [('[ptr->cnt*nu+i*nz]', 'w', 'not normalized', ['i'], 4372)]
LDEs formed:1

distinct LDEs:
ptr->cnt*nu+i1*nz=ptr->cnt*nu+i2*nz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4373: (ptr_l[ptr->cnt*(nu*nu2)+i]=,w) (u_l[i],r) 
}
array table
-----------------------------------------------
ptr_l -> [('[ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4373)]
LDEs formed:1

u_l -> [('[i]', 'r', 'normalized', ['i'], 4373)]
LDEs formed:0

distinct LDEs:
ptr->cnt*(nu*nu2)+i1=ptr->cnt*(nu*nu2)+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu i++
induction variable: ['i']
{
L4374: (ptr_l[ptr->cnt+i*nz]=,w) (u_l[i],r) 
}
array table
-----------------------------------------------
ptr_l -> [('[ptr->cnt+i*nz]', 'w', 'not normalized', ['i'], 4374)]
LDEs formed:1

u_l -> [('[i]', 'r', 'normalized', ['i'], 4374)]
LDEs formed:0

distinct LDEs:
ptr->cnt+i1*nz=ptr->cnt+i2*nz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4375: (ptr_uc[ptr->cnt*(nu*nu2)+i]=,w) (u_uc[i],r) 
}
array table
-----------------------------------------------
u_uc -> [('[i]', 'r', 'normalized', ['i'], 4375)]
LDEs formed:0

ptr_uc -> [('[ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4375)]
LDEs formed:1

distinct LDEs:
ptr->cnt*(nu*nu2)+i1=ptr->cnt*(nu*nu2)+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu i++
induction variable: ['i']
{
L4376: (ptr_uc[ptr->cnt+i*nz]=,w) (u_uc[i],r) 
}
array table
-----------------------------------------------
u_uc -> [('[i]', 'r', 'normalized', ['i'], 4376)]
LDEs formed:0

ptr_uc -> [('[ptr->cnt+i*nz]', 'w', 'not normalized', ['i'], 4376)]
LDEs formed:1

distinct LDEs:
ptr->cnt+i1*nz=ptr->cnt+i2*nz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4377: (ptr_us[ptr->cnt*(nu*nu2)+i]=,w) (u_us[i],r) 
}
array table
-----------------------------------------------
u_us -> [('[i]', 'r', 'normalized', ['i'], 4377)]
LDEs formed:0

ptr_us -> [('[ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4377)]
LDEs formed:1

distinct LDEs:
ptr->cnt*(nu*nu2)+i1=ptr->cnt*(nu*nu2)+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu i++
induction variable: ['i']
{
L4378: (ptr_us[ptr->cnt+i*nz]=,w) (u_us[i],r) 
}
array table
-----------------------------------------------
u_us -> [('[i]', 'r', 'normalized', ['i'], 4378)]
LDEs formed:0

ptr_us -> [('[ptr->cnt+i*nz]', 'w', 'not normalized', ['i'], 4378)]
LDEs formed:1

distinct LDEs:
ptr->cnt+i1*nz=ptr->cnt+i2*nz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu*nu2 i++
induction variable: ['i']
{
L4379: (ptr_ul[ptr->cnt*(nu*nu2)+i]=,w) (u_ul[i],r) 
}
array table
-----------------------------------------------
ptr_ul -> [('[ptr->cnt*(nu*nu2)+i]', 'w', 'not normalized', ['i'], 4379)]
LDEs formed:1

u_ul -> [('[i]', 'r', 'normalized', ['i'], 4379)]
LDEs formed:0

distinct LDEs:
ptr->cnt*(nu*nu2)+i1=ptr->cnt*(nu*nu2)+i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nu i++
induction variable: ['i']
{
L4380: (ptr_ul[ptr->cnt+i*nz]=,w) (u_ul[i],r) 
}
array table
-----------------------------------------------
ptr_ul -> [('[ptr->cnt+i*nz]', 'w', 'not normalized', ['i'], 4380)]
LDEs formed:1

u_ul -> [('[i]', 'r', 'normalized', ['i'], 4380)]
LDEs formed:0

distinct LDEs:
ptr->cnt+i1*nz=ptr->cnt+i2*nz
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4381: (u1[i]==,r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4381)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4381)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4381)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4382: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4382)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4382)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4382)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4383: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4383)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4383)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4383)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4384: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4384)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4384)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4384)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4385: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4385)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4385)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4385)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4386: (u1[i],r) (u2[i],r) (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4386)]
LDEs formed:1

u1 -> [('[i]', 'r', 'normalized', ['i'], 4386)]
LDEs formed:0

u2 -> [('[i]', 'r', 'normalized', ['i'], 4386)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4387: (u1[i]==,r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4387)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4387)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4387)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4388: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4388)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4388)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4388)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4389: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4389)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4389)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4389)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4390: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4390)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4390)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4390)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4391: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4391)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4391)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4391)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4392: (u1[i],r) (u2[i],r) (mode[i]=,w) 
}
array table
-----------------------------------------------
u1 -> [('[i]', 'r', 'normalized', ['i'], 4392)]
LDEs formed:0

mode -> [('[i]', 'w', 'normalized', ['i'], 4392)]
LDEs formed:1

u2 -> [('[i]', 'r', 'normalized', ['i'], 4392)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(mu*nu1) i++
induction variable: ['i']
{
L4393: (IN1[2*i]=,w) (u1r[i],r) 
L4394: (IN1[2*i+1]=,w) (u1i[i],r) 
}
array table
-----------------------------------------------
u1i -> [('[i]', 'r', 'normalized', ['i'], 4394)]
LDEs formed:0

u1r -> [('[i]', 'r', 'normalized', ['i'], 4393)]
LDEs formed:0

IN1 -> [('[2*i]', 'w', 'normalized', ['i'], 4393), ('[2*i+1]', 'w', 'normalized', ['i'], 4394)]
LDEs formed:3

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(mu*nu2) i++
induction variable: ['i']
{
L4395: (IN2[2*i]=,w) (u2r[i],r) 
L4396: (IN2[2*i+1]=,w) (u2i[i],r) 
}
array table
-----------------------------------------------
u2r -> [('[i]', 'r', 'normalized', ['i'], 4395)]
LDEs formed:0

IN2 -> [('[2*i]', 'w', 'normalized', ['i'], 4395), ('[2*i+1]', 'w', 'normalized', ['i'], 4396)]
LDEs formed:3

u2i -> [('[i]', 'r', 'normalized', ['i'], 4396)]
LDEs formed:0

distinct LDEs:
2*i1=2*i2+1
2*i1+1=2*i2+1
2*i1=2*i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4397: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4397)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4398: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4398)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4399: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4399)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4400: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4400)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4401: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4401)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4402: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4402)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4403: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4403)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4404: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4404)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4405: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4405)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4406: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4406)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4407: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4407)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4408: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4408)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4409: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4409)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4410: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4410)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4411: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4411)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4412: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4412)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4413: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4413)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4414: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4414)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4415: (y[i]=,w) 
L4416: (u[i],r) 
L4417: (y[i]=,w) 
L4418: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4415), ('[i]', 'w', 'normalized', ['i'], 4417), ('[i]', 'w', 'normalized', ['i'], 4418)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4416), ('[i]', 'r', 'normalized', ['i'], 4418)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4419: (y[i]=,w) 
L4420: (u[i],r) 
L4421: (y[i]=,w) 
L4422: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4419), ('[i]', 'w', 'normalized', ['i'], 4421), ('[i]', 'w', 'normalized', ['i'], 4422)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4420), ('[i]', 'r', 'normalized', ['i'], 4422)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4423: (y[i]=,w) 
L4424: (u[i],r) 
L4425: (y[i]=,w) 
L4426: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4423), ('[i]', 'w', 'normalized', ['i'], 4425), ('[i]', 'w', 'normalized', ['i'], 4426)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4424), ('[i]', 'r', 'normalized', ['i'], 4426)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4427: (y[i]=,w) 
L4428: (u[i],r) 
L4429: (y[i]=,w) 
L4430: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4427), ('[i]', 'w', 'normalized', ['i'], 4429), ('[i]', 'w', 'normalized', ['i'], 4430)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4428), ('[i]', 'r', 'normalized', ['i'], 4430)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4431: (y[i]=,w) 
L4432: (u[i],r) 
L4433: (y[i]=,w) 
L4434: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4431), ('[i]', 'w', 'normalized', ['i'], 4433), ('[i]', 'w', 'normalized', ['i'], 4434)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4432), ('[i]', 'r', 'normalized', ['i'], 4434)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4435: (y[i]=,w) 
L4436: (u[i],r) 
L4437: (y[i]=,w) 
L4438: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4435), ('[i]', 'w', 'normalized', ['i'], 4437), ('[i]', 'w', 'normalized', ['i'], 4438)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4436), ('[i]', 'r', 'normalized', ['i'], 4438)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4439: (y[i]=,w) 
L4440: (u[i],r) 
L4441: (y[i]=,w) 
L4442: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4439), ('[i]', 'w', 'normalized', ['i'], 4441), ('[i]', 'w', 'normalized', ['i'], 4442)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4440), ('[i]', 'r', 'normalized', ['i'], 4442)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4443: (y[i]=,w) 
L4444: (u[i],r) 
L4445: (y[i]=,w) 
L4446: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4443), ('[i]', 'w', 'normalized', ['i'], 4445), ('[i]', 'w', 'normalized', ['i'], 4446)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4444), ('[i]', 'r', 'normalized', ['i'], 4446)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4447: (y[i]=,w) 
L4448: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4447), ('[i]', 'w', 'normalized', ['i'], 4448)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4448)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4449: (y[i]=,w) 
L4450: (u[i],r) 
L4451: (y[i]=,w) 
L4452: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4449), ('[i]', 'w', 'normalized', ['i'], 4451), ('[i]', 'w', 'normalized', ['i'], 4452)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4450), ('[i]', 'r', 'normalized', ['i'], 4452)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4453: (y[i]=,w) 
L4454: (u[i],r) 
L4455: (y[i]=,w) 
L4456: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4453), ('[i]', 'w', 'normalized', ['i'], 4455), ('[i]', 'w', 'normalized', ['i'], 4456)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4454), ('[i]', 'r', 'normalized', ['i'], 4456)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4457: (y[i]=,w) 
L4458: (u[i],r) 
L4459: (y[i]=,w) 
L4460: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4457), ('[i]', 'w', 'normalized', ['i'], 4459), ('[i]', 'w', 'normalized', ['i'], 4460)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4458), ('[i]', 'r', 'normalized', ['i'], 4460)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4461: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4461)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4461)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4462: (y[i]=,w) 
L4463: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4462), ('[i]', 'w', 'normalized', ['i'], 4463)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4463)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4464: (y[i]=,w) 
L4465: (u[i],r) 
L4466: (y[i]=,w) 
L4467: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4464), ('[i]', 'w', 'normalized', ['i'], 4466), ('[i]', 'w', 'normalized', ['i'], 4467)]
LDEs formed:6

u -> [('[i]', 'r', 'normalized', ['i'], 4465), ('[i]', 'r', 'normalized', ['i'], 4467)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4468: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4468)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4468)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4469: (y[i]=,w) 
L4470: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4469), ('[i]', 'w', 'normalized', ['i'], 4470)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4470)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4471: (y[i]=,w) 
L4472: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4471), ('[i]', 'w', 'normalized', ['i'], 4472)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4472)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4473: (y[i]=,w) 
L4474: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4473), ('[i]', 'w', 'normalized', ['i'], 4474)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4474)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4475: (y[i]=,w) 
L4476: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4475), ('[i]', 'w', 'normalized', ['i'], 4476)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4476)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4477: (y[i]=,w) 
L4478: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4477), ('[i]', 'w', 'normalized', ['i'], 4478)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4478)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4479: (y[i]=,w) 
L4480: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4479), ('[i]', 'w', 'normalized', ['i'], 4480)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4480)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4481: (y[i]=,w) 
L4482: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4481), ('[i]', 'w', 'normalized', ['i'], 4482)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4482)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4483: (y[i]=,w) 
L4484: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4483), ('[i]', 'w', 'normalized', ['i'], 4484)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4484)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4485: (y[i]=,w) 
L4486: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4485), ('[i]', 'w', 'normalized', ['i'], 4486)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4486)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4487: (y[i]=,w) 
L4488: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4487), ('[i]', 'w', 'normalized', ['i'], 4488)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4488)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4489: (y[i]=,w) 
L4490: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4489), ('[i]', 'w', 'normalized', ['i'], 4490)]
LDEs formed:3

u -> [('[i]', 'r', 'normalized', ['i'], 4490)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4491: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4491)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4491)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4492: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4492)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4492)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4493: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4493)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4493)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4494: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4494)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4494)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4495: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4495)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4495)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4496: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4496)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4496)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4497: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4497)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4497)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4498: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4498)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4498)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4499: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4499)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4499)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4500: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4500)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4500)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4501: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4501)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4501)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4502: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4502)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4502)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4503: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4503)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4503)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4504: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4504)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4504)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4505: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4505)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4505)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4506: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4506)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4506)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4507: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4507)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4507)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4508: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4508)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4508)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4509: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4509)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4509)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4510: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4510)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4510)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4511: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4511)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4511)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4512: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4512)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4512)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4513: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4513)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4513)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4514: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4514)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4514)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4515: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4515)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4515)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4516: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4516)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4516)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4517: (y[i]=,w) (u[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4517)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i'], 4517)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4518: (u[i],r) 
	L4519: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4519)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4518)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4519: (u[i],r) 
	L4520: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4520)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4519)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4520: (u[i],r) 
	L4521: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4521)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4520)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4521: (u[i],r) 
	L4522: (y[i]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4522)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4521)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
	loop info: j=1 j<nin+1 j++
	induction variable: ['i', 'j']
	{
	L4522: (u[i],r) 
	}
L4523: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4523)]
LDEs formed:1

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4522)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L4523: (y[i]=,w) 
}
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i'], 4523)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L4524: (u1[ji],r) (u2[il],r) 
		}
	L4525: (y[jl]=,w) 
	L4526: (y[jl]=,w) 
	L4527: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 4525), ('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 4526), ('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 4527)]
LDEs formed:6

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 4524)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 4524)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<mu*nu i++
induction variable: ['i']
{
L4525: (u[i],r) 
	loop info: j=0 j<ipar[0] j++
	induction variable: ['i', 'j']
	{
	L4526: (y[i]=,w) 
	L4527: (y[i]==,r) (y[i]=,w) 
	L4528: (y[i]=,w) 
	L4529: (y[i]=,w) (y[i],r) 
	L4530: (y[i],r) 
	}
 }
array table
-----------------------------------------------
y -> [('[i]', 'w', 'normalized', ['i', 'j'], 4526), ('[i]', 'r', 'normalized', ['i', 'j'], 4527), ('[i]', 'w', 'normalized', ['i', 'j'], 4527), ('[i]', 'w', 'normalized', ['i', 'j'], 4528), ('[i]', 'w', 'normalized', ['i', 'j'], 4529), ('[i]', 'r', 'normalized', ['i', 'j'], 4529), ('[i]', 'r', 'normalized', ['i', 'j'], 4530)]
LDEs formed:22

u -> [('[i]', 'r', 'normalized', ['i', 'j'], 4525)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: l=0 l<nu2 l++
induction variable: ['l']
{
	loop info: j=0 j<mu1 j++
	induction variable: ['l', 'j']
	{
		loop info: i=0 i<nu1 i++
		induction variable: ['l', 'j', 'i']
		{
		L4526: (u1[ji],r) (u2[il],r) 
		}
	L4527: (y[jl]=,w) 
	L4528: (y[jl]=,w) 
	L4529: (y[jl]=,w) 
	}
 }
array table
-----------------------------------------------
y -> [('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 4527), ('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 4528), ('[jl]', 'w', 'not normalized', ['l', 'j', 'i'], 4529)]
LDEs formed:6

u1 -> [('[ji]', 'r', 'not normalized', ['l', 'j', 'i'], 4526)]
LDEs formed:0

u2 -> [('[il]', 'r', 'not normalized', ['l', 'j', 'i'], 4526)]
LDEs formed:0

distinct LDEs:
jl=jl
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L4527: (xd[((i - 1) << 2) + 1]=,w) (x[((i - 1) << 2) + 2],r) 
L4528: (xd[((i - 1) << 2) + 3]=,w) (x[((i - 1) << 2) + 4],r) 
L4529: (xd[((i - 1) << 2) + 2]=,w) (x[((i - 1) << 2) + 2],r) 
L4530: (xd[((i - 1) << 2) + 4]=,w) (rpar[(n << 1) + 5],r) 
}
array table
-----------------------------------------------
x -> [('[((i - 1) << 2) + 2]', 'r', 'normalized', ['i'], 4527), ('[((i - 1) << 2) + 4]', 'r', 'normalized', ['i'], 4528), ('[((i - 1) << 2) + 2]', 'r', 'normalized', ['i'], 4529)]
LDEs formed:0

xd -> [('[((i - 1) << 2) + 1]', 'w', 'normalized', ['i'], 4527), ('[((i - 1) << 2) + 3]', 'w', 'normalized', ['i'], 4528), ('[((i - 1) << 2) + 2]', 'w', 'normalized', ['i'], 4529), ('[((i - 1) << 2) + 4]', 'w', 'normalized', ['i'], 4530)]
LDEs formed:10

rpar -> [('[(n << 1) + 5]', 'r', 'not normalized', ['i'], 4530)]
LDEs formed:0

distinct LDEs:
((i1 - 1) << 2) + 3=((i2 - 1) << 2) + 2
((i1 - 1) << 2) + 3=((i2 - 1) << 2) + 3
((i1 - 1) << 2) + 3=((i2 - 1) << 2) + 4
((i1 - 1) << 2) + 1=((i2 - 1) << 2) + 4
((i1 - 1) << 2) + 4=((i2 - 1) << 2) + 4
((i1 - 1) << 2) + 1=((i2 - 1) << 2) + 1
((i1 - 1) << 2) + 1=((i2 - 1) << 2) + 2
((i1 - 1) << 2) + 1=((i2 - 1) << 2) + 3
((i1 - 1) << 2) + 2=((i2 - 1) << 2) + 4
((i1 - 1) << 2) + 2=((i2 - 1) << 2) + 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L4531: (y1[i]=,w) (x[((i - 1) << 2) + 1],r) 
L4532: (y2[i]=,w) (x[((i - 1) << 2) + 3],r) 
}
array table
-----------------------------------------------
y1 -> [('[i]', 'w', 'normalized', ['i'], 4531)]
LDEs formed:1

x -> [('[((i - 1) << 2) + 1]', 'r', 'normalized', ['i'], 4531), ('[((i - 1) << 2) + 3]', 'r', 'normalized', ['i'], 4532)]
LDEs formed:0

y2 -> [('[i]', 'w', 'normalized', ['i'], 4532)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= i1  ++k
induction variable: ['k']
{
L4533: (ipar[((k - 1) << 1) + 1],r) 
L4534: (ipar[((k - 1) << 1) + 2],r) 
L4535: (x[((i - 1) << 2) + 1]-,r) (x[((j - 1) << 2) + 1],r) 
L4536: (x[((i - 1) << 2) + 3]-,r) (x[((j - 1) << 2) + 3],r) 
L4537: (rpar[i + n]+,r) (rpar[j + n],r) 
L4538: (g[k]=,w) 
}
array table
-----------------------------------------------
x -> [('[((i - 1) << 2) + 1]', 'r', 'not normalized', ['k'], 4535), ('[((j - 1) << 2) + 1]', 'r', 'not normalized', ['k'], 4535), ('[((i - 1) << 2) + 3]', 'r', 'not normalized', ['k'], 4536), ('[((j - 1) << 2) + 3]', 'r', 'not normalized', ['k'], 4536)]
LDEs formed:0

g -> [('[k]', 'w', 'normalized', ['k'], 4538)]
LDEs formed:1

ipar -> [('[((k - 1) << 1) + 1]', 'r', 'normalized', ['k'], 4533), ('[((k - 1) << 1) + 2]', 'r', 'normalized', ['k'], 4534)]
LDEs formed:0

rpar -> [('[i + n]', 'r', 'not normalized', ['k'], 4537), ('[j + n]', 'r', 'not normalized', ['k'], 4537)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L4538: (g[k]=,w) (x[((i - 1) << 2) + 3]-,r) (rpar[i + n]-,r) (rpar[(n << 1) + 3],r) 
L4539: (g[k]=,w) (rpar[(n << 1) + 4]-,r) (x[((i - 1) << 2) + 3]-,r) (rpar[i + n],r) 
L4540: (g[k]=,w) (x[((i - 1) << 2) + 1]-,r) (rpar[(n << 1) + 1]-,r) (rpar[i + n],r) 
L4541: (g[k]=,w) (rpar[(n << 1) + 2]-,r) (rpar[i + n]-,r) (x[((i - 1) << 2) + 1],r) 
}
array table
-----------------------------------------------
x -> [('[((i - 1) << 2) + 3]', 'r', 'normalized', ['i'], 4538), ('[((i - 1) << 2) + 3]', 'r', 'normalized', ['i'], 4539), ('[((i - 1) << 2) + 1]', 'r', 'normalized', ['i'], 4540), ('[((i - 1) << 2) + 1]', 'r', 'normalized', ['i'], 4541)]
LDEs formed:0

g -> [('[k]', 'w', 'not normalized', ['i'], 4538), ('[k]', 'w', 'not normalized', ['i'], 4539), ('[k]', 'w', 'not normalized', ['i'], 4540), ('[k]', 'w', 'not normalized', ['i'], 4541)]
LDEs formed:10

rpar -> [('[i + n]', 'r', 'not normalized', ['i'], 4538), ('[(n << 1) + 3]', 'r', 'not normalized', ['i'], 4538), ('[(n << 1) + 4]', 'r', 'not normalized', ['i'], 4539), ('[i + n]', 'r', 'not normalized', ['i'], 4539), ('[(n << 1) + 1]', 'r', 'not normalized', ['i'], 4540), ('[i + n]', 'r', 'not normalized', ['i'], 4540), ('[(n << 1) + 2]', 'r', 'not normalized', ['i'], 4541), ('[i + n]', 'r', 'not normalized', ['i'], 4541)]
LDEs formed:0

distinct LDEs:
k=k
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 1  k <= i1  ++k
induction variable: ['k']
{
L4542: (jroot[k],r) 
L4543: (ipar[((k - 1) << 1) + 1],r) 
L4544: (ipar[((k - 1) << 1) + 2],r) 
L4545: (x[((j - 1) << 2) + 1]-,r) (x[((i - 1) << 2) + 1],r) 
L4546: (rpar[i]*,r) (rpar[j],r) 
L4547: (x[((j - 1) << 2) + 3]-,r) (x[((i - 1) << 2) + 3],r) 
L4548: (rpar[i]*,r) (rpar[j],r) 
L4549: (rpar[i]*,r) (rpar[j]*,r) 
L4550: (rpar[i]*,r) (x[((i - 1) << 2) + 2]+,r) 
L4551: (rpar[j]*,r) (x[((j - 1) << 2) + 2]+,r) 
L4552: (x[((j - 1) << 2) + 4],r) 
L4553: (x[((i - 1) << 2) + 2]+=,w) 
L4554: (x[((j - 1) << 2) + 2]+=,w) 
L4555: (x[((i - 1) << 2) + 4]+=,w) 
L4556: (x[((j - 1) << 2) + 4]+=,w) 
}
array table
-----------------------------------------------
x -> [('[((j - 1) << 2) + 1]', 'r', 'not normalized', ['k'], 4545), ('[((i - 1) << 2) + 1]', 'r', 'not normalized', ['k'], 4545), ('[((j - 1) << 2) + 3]', 'r', 'not normalized', ['k'], 4547), ('[((i - 1) << 2) + 3]', 'r', 'not normalized', ['k'], 4547), ('[((i - 1) << 2) + 2]', 'r', 'not normalized', ['k'], 4550), ('[((j - 1) << 2) + 2]', 'r', 'not normalized', ['k'], 4551), ('[((j - 1) << 2) + 4]', 'r', 'not normalized', ['k'], 4552), ('[((i - 1) << 2) + 2]', 'w', 'not normalized', ['k'], 4553), ('[((j - 1) << 2) + 2]', 'w', 'not normalized', ['k'], 4554), ('[((i - 1) << 2) + 4]', 'w', 'not normalized', ['k'], 4555), ('[((j - 1) << 2) + 4]', 'w', 'not normalized', ['k'], 4556)]
LDEs formed:38

jroot -> [('[k]', 'r', 'normalized', ['k'], 4542)]
LDEs formed:0

ipar -> [('[((k - 1) << 1) + 1]', 'r', 'normalized', ['k'], 4543), ('[((k - 1) << 1) + 2]', 'r', 'normalized', ['k'], 4544)]
LDEs formed:0

rpar -> [('[i]', 'r', 'not normalized', ['k'], 4546), ('[j]', 'r', 'not normalized', ['k'], 4546), ('[i]', 'r', 'not normalized', ['k'], 4548), ('[j]', 'r', 'not normalized', ['k'], 4548), ('[i]', 'r', 'not normalized', ['k'], 4549), ('[j]', 'r', 'not normalized', ['k'], 4549), ('[i]', 'r', 'not normalized', ['k'], 4550), ('[j]', 'r', 'not normalized', ['k'], 4551)]
LDEs formed:0

distinct LDEs:
((i - 1) << 2) + 1=((i - 1) << 2) + 2
((i - 1) << 2) + 1=((i - 1) << 2) + 4
((j - 1) << 2) + 2=((i - 1) << 2) + 4
((i - 1) << 2) + 3=((i - 1) << 2) + 2
((j - 1) << 2) + 3=((i - 1) << 2) + 2
((j - 1) << 2) + 4=((j - 1) << 2) + 4
((j - 1) << 2) + 4=((i - 1) << 2) + 4
((i - 1) << 2) + 2=((i - 1) << 2) + 4
((j - 1) << 2) + 1=((j - 1) << 2) + 4
((j - 1) << 2) + 1=((j - 1) << 2) + 2
((j - 1) << 2) + 1=((i - 1) << 2) + 2
((j - 1) << 2) + 1=((i - 1) << 2) + 4
((j - 1) << 2) + 3=((i - 1) << 2) + 4
((j - 1) << 2) + 3=((j - 1) << 2) + 2
((i - 1) << 2) + 2=((j - 1) << 2) + 2
((j - 1) << 2) + 2=((j - 1) << 2) + 2
((i - 1) << 2) + 2=((j - 1) << 2) + 4
((i - 1) << 2) + 1=((j - 1) << 2) + 2
((j - 1) << 2) + 2=((j - 1) << 2) + 4
((i - 1) << 2) + 2=((i - 1) << 2) + 2
((j - 1) << 2) + 3=((j - 1) << 2) + 4
((i - 1) << 2) + 1=((j - 1) << 2) + 4
((i - 1) << 2) + 4=((i - 1) << 2) + 4
((i - 1) << 2) + 3=((j - 1) << 2) + 2
((i - 1) << 2) + 3=((j - 1) << 2) + 4
((i - 1) << 2) + 3=((i - 1) << 2) + 4
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= i1  ++i
induction variable: ['i']
{
L4552: (jroot[k],r) 
L4553: (x[((i - 1) << 2) + 4]=,w) (x[((i - 1) << 2) + 4],r) 
L4554: (jroot[k],r) 
L4555: (x[((i - 1) << 2) + 4]=,w) (x[((i - 1) << 2) + 4],r) 
L4556: (jroot[k],r) 
L4557: (x[((i - 1) << 2) + 2]=,w) (x[((i - 1) << 2) + 2],r) 
L4558: (jroot[k],r) 
L4559: (x[((i - 1) << 2) + 2]=,w) (x[((i - 1) << 2) + 2],r) 
}
array table
-----------------------------------------------
x -> [('[((i - 1) << 2) + 4]', 'w', 'normalized', ['i'], 4553), ('[((i - 1) << 2) + 4]', 'r', 'normalized', ['i'], 4553), ('[((i - 1) << 2) + 4]', 'w', 'normalized', ['i'], 4555), ('[((i - 1) << 2) + 4]', 'r', 'normalized', ['i'], 4555), ('[((i - 1) << 2) + 2]', 'w', 'normalized', ['i'], 4557), ('[((i - 1) << 2) + 2]', 'r', 'normalized', ['i'], 4557), ('[((i - 1) << 2) + 2]', 'w', 'normalized', ['i'], 4559), ('[((i - 1) << 2) + 2]', 'r', 'normalized', ['i'], 4559)]
LDEs formed:26

jroot -> [('[k]', 'r', 'not normalized', ['i'], 4552), ('[k]', 'r', 'not normalized', ['i'], 4554), ('[k]', 'r', 'not normalized', ['i'], 4556), ('[k]', 'r', 'not normalized', ['i'], 4558)]
LDEs formed:0

distinct LDEs:
((i1 - 1) << 2) + 4=((i2 - 1) << 2) + 4
((i1 - 1) << 2) + 2=((i2 - 1) << 2) + 2
((i1 - 1) << 2) + 4=((i2 - 1) << 2) + 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fieldIndex = 1  fieldIndex < nbFields - 1  fieldIndex++
induction variable: ['fieldIndex']
{
L4559: (fieldNames[fieldIndex + 1]=,w) 
L4560: (fieldNames[fieldIndex + 1]==,r) 
}
array table
-----------------------------------------------
fieldNames -> [('[fieldIndex + 1]', 'w', 'normalized', ['fieldIndex'], 4559), ('[fieldIndex + 1]', 'r', 'normalized', ['fieldIndex'], 4560)]
LDEs formed:2

distinct LDEs:
fieldIndex1 + 1=fieldIndex2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0  K<matVariable->rank  K++
induction variable: ['K']
{
L4561: (dims[K],r) 
}
array table
-----------------------------------------------
dims -> [('[K]', 'r', 'normalized', ['K'], 4561)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fieldIndex = 0  fieldIndex < nbFields - 2  fieldIndex++
induction variable: ['fieldIndex']
{
L4562: (allData[fieldIndex],r) 
L4563: (allData[fieldIndex]-,r) 
L4564: (allData[fieldIndex]-,r) 
}
array table
-----------------------------------------------
allData -> [('[fieldIndex]', 'r', 'normalized', ['fieldIndex'], 4562), ('[fieldIndex]', 'r', 'normalized', ['fieldIndex'], 4563), ('[fieldIndex]', 'r', 'normalized', ['fieldIndex'], 4564)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fieldIndex = 0  fieldIndex < nbFields - 2  fieldIndex++
induction variable: ['fieldIndex']
{
	loop info: valueIndex = 0  valueIndex < prodDims  valueIndex++
	induction variable: ['fieldIndex', 'valueIndex']
	{
	L4565: (allData[(fieldIndex) + (nbFields-2)*valueIndex],r) 
	L4566: (allData[(fieldIndex) + (nbFields-2)*valueIndex]-,r) 
	L4567: (allData[(fieldIndex) + (nbFields-2)*valueIndex]-,r) 
	}
 }
array table
-----------------------------------------------
allData -> [('[(fieldIndex) + (nbFields-2)*valueIndex]', 'r', 'not normalized', ['fieldIndex', 'valueIndex'], 4565), ('[(fieldIndex) + (nbFields-2)*valueIndex]', 'r', 'not normalized', ['fieldIndex', 'valueIndex'], 4566), ('[(fieldIndex) + (nbFields-2)*valueIndex]', 'r', 'not normalized', ['fieldIndex', 'valueIndex'], 4567)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0  K<sparseData->njc-1  K++
induction variable: ['K']
{
L4568: (colIndexes[K]=,w) (jc[K+1]-,r) (jc[K],r) 
}
array table
-----------------------------------------------
colIndexes -> [('[K]', 'w', 'normalized', ['K'], 4568)]
LDEs formed:1

jc -> [('[K+1]', 'r', 'normalized', ['K'], 4568), ('[K]', 'r', 'normalized', ['K'], 4568)]
LDEs formed:0

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0  K<sparseData->nir  K++
induction variable: ['K']
{
L4569: (rowIndexes[K]=,w) (ir[K]+,r) 
}
array table
-----------------------------------------------
ir -> [('[K]', 'r', 'normalized', ['K'], 4569)]
LDEs formed:0

rowIndexes -> [('[K]', 'w', 'normalized', ['K'], 4569)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0  K<matVariable->rank  K++
induction variable: ['K']
{
L4570: (dims[K],r) 
}
array table
-----------------------------------------------
dims -> [('[K]', 'r', 'normalized', ['K'], 4570)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: valueIndex = 0  valueIndex < prodDims  valueIndex++
induction variable: ['valueIndex']
{
L4571: (allData[valueIndex],r) 
L4572: (allData[valueIndex]-,r) 
}
array table
-----------------------------------------------
allData -> [('[valueIndex]', 'r', 'normalized', ['valueIndex'], 4571), ('[valueIndex]', 'r', 'normalized', ['valueIndex'], 4572)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < dims[0] * dims[1]   i++
induction variable: ['i']
{
L4573: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 4573)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 4573)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < dims[0] * dims[1]   i++
induction variable: ['i']
{
L4574: (pstData[i]=,w) (piLen[i]+,r) 
}
array table
-----------------------------------------------
pstData -> [('[i]', 'w', 'normalized', ['i'], 4574)]
LDEs formed:1

piLen -> [('[i]', 'r', 'normalized', ['i'], 4574)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < dims[0]   i++
induction variable: ['i']
{
L4575: (piLen[0],r) (piLen[i],r) 
L4576: (dims[0]*,r) (dims[1],r) 
}
array table
-----------------------------------------------
dims -> [('[0]', 'r', 'normalized', ['i'], 4576), ('[1]', 'r', 'normalized', ['i'], 4576)]
LDEs formed:0

piLen -> [('[0]', 'r', 'normalized', ['i'], 4575), ('[i]', 'r', 'normalized', ['i'], 4575)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < dims[0]   i++
induction variable: ['i']
{
	loop info: j = 0   j < piLen[0]   j++
	induction variable: ['i', 'j']
	{
	L4576: (dims[0],r) (pstData[i][j],r) 
	}
 }
array table
-----------------------------------------------
dims -> [('[0]', 'r', 'normalized', ['i', 'j'], 4576)]
LDEs formed:0

pstData -> [('[i][j]', 'r', 'normalized', ['i', 'j'], 4576)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0  K<nbRow  K++
induction variable: ['K']
{
L4577: (charData[K]=,w) (dims[1]+,r) 
L4578: (charData[K]==,r) 
}
array table
-----------------------------------------------
dims -> [('[1]', 'r', 'normalized', ['K'], 4577)]
LDEs formed:0

charData -> [('[K]', 'w', 'normalized', ['K'], 4577), ('[K]', 'r', 'normalized', ['K'], 4578)]
LDEs formed:2

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0  K<matVariable->dims[0]  K++
induction variable: ['K']
{
	loop info: L=0  L<matVariable->dims[1]  L++
	induction variable: ['K', 'L']
	{
	L4579: (charData[K][L]=,w) (dims[0]+,r) 
	L4580: (charData[K][L]=,w) (dims[0]+,r) 
	}
L4581: (charData[K][L]=,w) 
}
array table
-----------------------------------------------
dims -> [('[0]', 'r', 'normalized', ['K', 'L'], 4579), ('[0]', 'r', 'normalized', ['K', 'L'], 4580)]
LDEs formed:0

charData -> [('[K][L]', 'w', 'normalized', ['K', 'L'], 4579), ('[K][L]', 'w', 'normalized', ['K', 'L'], 4580), ('[K][L]', 'w', 'normalized', ['K', 'L'], 4581)]
LDEs formed:12

distinct LDEs:
K1=K2,L1=L2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0 K<numberOfMatfiles K++
induction variable: ['K']
{
L4582: (openedMatfiles[K]==,r) 
L4583: (openedMatfiles[K]=,w) 
}
array table
-----------------------------------------------
openedMatfiles -> [('[K]', 'r', 'normalized', ['K'], 4582), ('[K]', 'w', 'normalized', ['K'], 4583)]
LDEs formed:2

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0 K<numberOfMatfiles K++
induction variable: ['K']
{
L4584: (openedMatfiles[K],r) 
L4585: (openedMatfiles[K]-,r) 
}
array table
-----------------------------------------------
openedMatfiles -> [('[K]', 'r', 'normalized', ['K'], 4584), ('[K]', 'r', 'normalized', ['K'], 4585)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < nbRow*nbCol  K++
induction variable: ['K']
{
L4586: (intPtr[K]=,w) 
}
array table
-----------------------------------------------
intPtr -> [('[K]', 'w', 'normalized', ['K'], 4586)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < nbRow*nbCol  K++
induction variable: ['K']
{
L4587: (dblPtr[K]=,w) 
}
array table
-----------------------------------------------
dblPtr -> [('[K]', 'w', 'normalized', ['K'], 4587)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < scilabSparse.m  K++
induction variable: ['K']
{
L4588: (colIndexes[K + 1]=,w) (colIndexes[K]+,r) (scilabSparse.mnel[K],r) 
}
array table
-----------------------------------------------
colIndexes -> [('[K + 1]', 'w', 'normalized', ['K'], 4588), ('[K]', 'r', 'normalized', ['K'], 4588)]
LDEs formed:2

scilabSparse.mnel -> [('[K]', 'r', 'normalized', ['K'], 4588)]
LDEs formed:0

distinct LDEs:
K1 + 1=K2 + 1
K1 + 1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < scilabSparse.nel  K++
induction variable: ['K']
{
L4589: (rowIndexes[K]=,w) (scilabSparse.icol[K]-,r) 
}
array table
-----------------------------------------------
scilabSparse.icol -> [('[K]', 'r', 'normalized', ['K'], 4589)]
LDEs formed:0

rowIndexes -> [('[K]', 'w', 'normalized', ['K'], 4589)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < scilabSparse.nel  K++
induction variable: ['K']
{
L4590: (data[K]=,w) (scilabSparse.R[K],r) 
}
array table
-----------------------------------------------
scilabSparse.R -> [('[K]', 'r', 'normalized', ['K'], 4590)]
LDEs formed:0

data -> [('[K]', 'w', 'normalized', ['K'], 4590)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < scilabSparse.nel  K++
induction variable: ['K']
{
L4591: (data[K]=,w) (scilabSparse.R[K],r) 
}
array table
-----------------------------------------------
scilabSparse.R -> [('[K]', 'r', 'normalized', ['K'], 4591)]
LDEs formed:0

data -> [('[K]', 'w', 'normalized', ['K'], 4591)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < scilabSparse.nel  K++
induction variable: ['K']
{
L4592: (data[K + scilabSparse.nel]=,w) (scilabSparse.I[K],r) 
}
array table
-----------------------------------------------
scilabSparse.I -> [('[K]', 'r', 'normalized', ['K'], 4592)]
LDEs formed:0

data -> [('[K + scilabSparse.nel]', 'w', 'not normalized', ['K'], 4592)]
LDEs formed:1

distinct LDEs:
K1 + scilabSparse.nel=K2 + scilabSparse.nel
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nbRow*nbFields i++
induction variable: ['i']
{
L4593: (fieldNames[i]=,w) (pilen[i]+,r) 
}
array table
-----------------------------------------------
pilen -> [('[i]', 'r', 'normalized', ['i'], 4593)]
LDEs formed:0

fieldNames -> [('[i]', 'w', 'normalized', ['i'], 4593)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < prodDims*(nbFields-2)+1  K++
induction variable: ['K']
{
L4594: (structEntries[K]=,w) 
}
array table
-----------------------------------------------
structEntries -> [('[K]', 'w', 'normalized', ['K'], 4594)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fieldIndex = 2  fieldIndex < nbFields  fieldIndex++
induction variable: ['fieldIndex']
{
L4595: (structEntries[fieldIndex - 2]=,w) (fieldNames[fieldIndex],r) 
}
array table
-----------------------------------------------
structEntries -> [('[fieldIndex - 2]', 'w', 'normalized', ['fieldIndex'], 4595)]
LDEs formed:1

fieldNames -> [('[fieldIndex]', 'r', 'normalized', ['fieldIndex'], 4595)]
LDEs formed:0

distinct LDEs:
fieldIndex1 - 2=fieldIndex2 - 2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fieldIndex = 2  fieldIndex < nbFields  fieldIndex++
induction variable: ['fieldIndex']
{
	loop info: valueIndex = 0  valueIndex < prodDims  valueIndex++
	induction variable: ['fieldIndex', 'valueIndex']
	{
	L4596: (structEntries[(fieldIndex-1) + (nbFields-2)*valueIndex]=,w) (fieldNames[fieldIndex],r) 
	}
 }
array table
-----------------------------------------------
structEntries -> [('[(fieldIndex-1) + (nbFields-2)*valueIndex]', 'w', 'not normalized', ['fieldIndex', 'valueIndex'], 4596)]
LDEs formed:1

fieldNames -> [('[fieldIndex]', 'r', 'normalized', ['fieldIndex', 'valueIndex'], 4596)]
LDEs formed:0

distinct LDEs:
(fieldIndex1-1) + (nbFields-2)*valueIndex1=(fieldIndex2-1) + (nbFields-2)*valueIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0  K<*rank  K++
induction variable: ['K']
{
L4597: (dims[K],r) 
}
array table
-----------------------------------------------
dims -> [('[K]', 'r', 'normalized', ['K'], 4597)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nbRow*nbCol  i++
induction variable: ['i']
{
L4598: (tmp_int8[i]=,w) 
}
array table
-----------------------------------------------
tmp_int8 -> [('[i]', 'w', 'normalized', ['i'], 4598)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nbRow*nbCol  i++
induction variable: ['i']
{
L4599: (tmp_int16[i]=,w) 
}
array table
-----------------------------------------------
tmp_int16 -> [('[i]', 'w', 'normalized', ['i'], 4599)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nbRow*nbCol  i++
induction variable: ['i']
{
L4600: (tmp_int32[i]=,w) 
}
array table
-----------------------------------------------
tmp_int32 -> [('[i]', 'w', 'normalized', ['i'], 4600)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nbRow*nbCol  i++
induction variable: ['i']
{
L4601: (tmp_int64[i]=,w) 
}
array table
-----------------------------------------------
tmp_int64 -> [('[i]', 'w', 'normalized', ['i'], 4601)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nbRow*nbCol  i++
induction variable: ['i']
{
L4602: (tmp_uint8[i]=,w) 
}
array table
-----------------------------------------------
tmp_uint8 -> [('[i]', 'w', 'normalized', ['i'], 4602)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nbRow*nbCol  i++
induction variable: ['i']
{
L4603: (tmp_uint16[i]=,w) 
}
array table
-----------------------------------------------
tmp_uint16 -> [('[i]', 'w', 'normalized', ['i'], 4603)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<nbRow*nbCol  i++
induction variable: ['i']
{
L4604: (tmp_uint32[i]=,w) 
}
array table
-----------------------------------------------
tmp_uint32 -> [('[i]', 'w', 'normalized', ['i'], 4604)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<nbRow*nbCol  i++
induction variable: ['i']
{
L4605: (tmp_uint64[i]=,w) 
}
array table
-----------------------------------------------
tmp_uint64 -> [('[i]', 'w', 'normalized', ['i'], 4605)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K=0  K<prodDims  K++
induction variable: ['K']
{
L4606: (cellEntries[K]=,w) 
}
array table
-----------------------------------------------
cellEntries -> [('[K]', 'w', 'normalized', ['K'], 4606)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < *_iDims   i++
induction variable: ['i']
{
L4607: (_piDims[i]=,w) (dims[*_iDims - 1 - i],r) 
L4608: (_piDims[i],r) 
}
array table
-----------------------------------------------
_piDims -> [('[i]', 'w', 'normalized', ['i'], 4607), ('[i]', 'r', 'normalized', ['i'], 4608)]
LDEs formed:2

dims -> [('[*_iDims - 1 - i]', 'r', 'not normalized', ['i'], 4607)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iCount  i++
induction variable: ['i']
{
L4608: (pstNameList[iNbItem]=,w) 
L4609: (pstNameList[iNbItem],r) 
}
array table
-----------------------------------------------
pstNameList -> [('[iNbItem]', 'w', 'not normalized', ['i'], 4608), ('[iNbItem]', 'r', 'not normalized', ['i'], 4609)]
LDEs formed:2

distinct LDEs:
iNbItem=iNbItem
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < _iDims   i++
induction variable: ['i']
{
L4610: (_piDims[i],r) 
}
array table
-----------------------------------------------
_piDims -> [('[i]', 'r', 'normalized', ['i'], 4610)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iSize  i++
induction variable: ['i']
{
L4611: (pData[i],r) 
L4612: (_piNbCoef[i],r) (_pdblReal[i],r) (_pdblImg[i],r) 
L4613: (_piNbCoef[i],r) (_pdblReal[i],r) 
}
array table
-----------------------------------------------
_pdblReal -> [('[i]', 'r', 'normalized', ['i'], 4612), ('[i]', 'r', 'normalized', ['i'], 4613)]
LDEs formed:0

_pdblImg -> [('[i]', 'r', 'normalized', ['i'], 4612)]
LDEs formed:0

_piNbCoef -> [('[i]', 'r', 'normalized', ['i'], 4612), ('[i]', 'r', 'normalized', ['i'], 4613)]
LDEs formed:0

pData -> [('[i]', 'r', 'normalized', ['i'], 4611)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < *_piRank   i++
induction variable: ['i']
{
L4612: (piDims[i]=,w) (_piDims[*_piRank - 1 - i],r) 
L4613: (piDims[i],r) 
}
array table
-----------------------------------------------
_piDims -> [('[*_piRank - 1 - i]', 'r', 'not normalized', ['i'], 4612)]
LDEs formed:0

piDims -> [('[i]', 'w', 'normalized', ['i'], 4612), ('[i]', 'r', 'normalized', ['i'], 4613)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iSize   i++
induction variable: ['i']
{
L4614: (_piNbCoef[i],r) (_pdblReal[i],r) (_pdblImg[i],r) 
L4615: (_piNbCoef[i],r) (_pdblReal[i],r) 
L4616: (pData[i],r) 
}
array table
-----------------------------------------------
_pdblReal -> [('[i]', 'r', 'normalized', ['i'], 4614), ('[i]', 'r', 'normalized', ['i'], 4615)]
LDEs formed:0

_pdblImg -> [('[i]', 'r', 'normalized', ['i'], 4614)]
LDEs formed:0

_piNbCoef -> [('[i]', 'r', 'normalized', ['i'], 4614), ('[i]', 'r', 'normalized', ['i'], 4615)]
LDEs formed:0

pData -> [('[i]', 'r', 'normalized', ['i'], 4616)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iCount  i++
induction variable: ['i']
{
L4617: (pstNameList[iNbItem]=,w) 
L4618: (pstNameList[iNbItem],r) 
}
array table
-----------------------------------------------
pstNameList -> [('[iNbItem]', 'w', 'not normalized', ['i'], 4617), ('[iNbItem]', 'r', 'not normalized', ['i'], 4618)]
LDEs formed:2

distinct LDEs:
iNbItem=iNbItem
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iRows * _iCols  i++
induction variable: ['i']
{
L4619: (_pstData[i]=,w) 
}
array table
-----------------------------------------------
_pstData -> [('[i]', 'w', 'normalized', ['i'], 4619)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iRows * _iCols  i++
induction variable: ['i']
{
L4620: (start[1]=,w) 
L4621: (count[1]=,w) 
L4622: (piStart[i + 1],r) 
L4623: (_pstData[i],r) 
L4624: (piEnd[i + 1],r) 
}
array table
-----------------------------------------------
count -> [('[1]', 'w', 'normalized', ['i'], 4621)]
LDEs formed:1

start -> [('[1]', 'w', 'normalized', ['i'], 4620)]
LDEs formed:1

_pstData -> [('[i]', 'r', 'normalized', ['i'], 4623)]
LDEs formed:0

piStart -> [('[i + 1]', 'r', 'normalized', ['i'], 4622)]
LDEs formed:0

piEnd -> [('[i + 1]', 'r', 'normalized', ['i'], 4624)]
LDEs formed:0

distinct LDEs:
1=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iRows * _iCols  i++
induction variable: ['i']
{
L4625: (piEnd[i + 1].QuadPart-,r) (piStart[i + 1].QuadPart,r) 
}
array table
-----------------------------------------------
piStart -> [('[i + 1]', 'r', 'normalized', ['i'], 4625)]
LDEs formed:0

piEnd -> [('[i + 1]', 'r', 'normalized', ['i'], 4625)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < _iRows * _iCols  i++
induction variable: ['i']
{
L4626: (pData[i],r) 
L4627: (_piNbCoef[i],r) (_pdblReal[i],r) (_pdblImg[i],r) 
L4628: (_piNbCoef[i],r) (_pdblReal[i],r) 
}
array table
-----------------------------------------------
_pdblReal -> [('[i]', 'r', 'normalized', ['i'], 4627), ('[i]', 'r', 'normalized', ['i'], 4628)]
LDEs formed:0

_pdblImg -> [('[i]', 'r', 'normalized', ['i'], 4627)]
LDEs formed:0

_piNbCoef -> [('[i]', 'r', 'normalized', ['i'], 4627), ('[i]', 'r', 'normalized', ['i'], 4628)]
LDEs formed:0

pData -> [('[i]', 'r', 'normalized', ['i'], 4626)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L4627: (result[i],r) 
L4628: (result[i],r) 
L4629: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 4627), ('[i]', 'r', 'normalized', ['i'], 4628), ('[i]', 'w', 'normalized', ['i'], 4629)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L4630: (result[i],r) 
L4631: (result[i],r) 
L4632: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 4630), ('[i]', 'r', 'normalized', ['i'], 4631), ('[i]', 'w', 'normalized', ['i'], 4632)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<len  i++
induction variable: ['i']
{
L4633: (result[i],r) 
L4634: (result[i],r) 
L4635: (result[i]=,w) 
}
array table
-----------------------------------------------
result -> [('[i]', 'r', 'normalized', ['i'], 4633), ('[i]', 'r', 'normalized', ['i'], 4634), ('[i]', 'w', 'normalized', ['i'], 4635)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=0, pos=0   j<L   j++
induction variable: ['j']
{
L4636: (blck_szs[%d],r) 
}
array table
-----------------------------------------------
blck_szs -> [('[%d]', 'r', 'not normalized', ['j'], 4636)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0, n=0, sz=0, up_sz=0, max_n=0   i<L   i++
induction variable: ['i']
{
L4637: (blck_szs[i],r) 
L4638: (blck_szs[i]*,r) (blck_szs[i]+,r) 
L4639: (blck_szs[i]*,r) (blck_szs[i],r) 
L4640: (blck_szs[i],r) 
}
array table
-----------------------------------------------
blck_szs -> [('[i]', 'r', 'normalized', ['i'], 4637), ('[i]', 'r', 'normalized', ['i'], 4638), ('[i]', 'r', 'normalized', ['i'], 4638), ('[i]', 'r', 'normalized', ['i'], 4639), ('[i]', 'r', 'normalized', ['i'], 4639), ('[i]', 'r', 'normalized', ['i'], 4640)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: *iters=0  *iters <= maxiters  (*iters
induction variable: []
{
L4641: (blck_szs[i]*,r) (blck_szs[i]+,r) 
L4642: (blck_szs[i]*,r) (blck_szs[i],r) 
L4643: (blck_szs[i],r) 
L4644: (blck_szs[i]*,r) (blck_szs[i]+,r) 
L4645: (blck_szs[i],r) 
	loop info: k=0  k<blck_szs[i]  k++
	induction variable: ['k']
		{
		L4646: (sigx[pos3+k],r) 
		L4647: (sigx[pos3+k]=,w) 
		L4648: (blck_szs[i],r) 
		}
L4649: (ul[1]=,w) 
L4650: (ul[0]=,w) 
L4651: (ul[0],r) (ul[1],r) 
L4652: (ul[1],r) (ul[1],r) 
L4653: (ul[0],r) (ul[0],r) 
L4654: (ul[0],r) 
L4655: (ul[1],r) 
	loop info: j=0, pos=0   j<m   j++
	induction variable: ['k', 'j']
	}
L4656: (blck_szs[i]*,r) (blck_szs[i]+,r) 
L4657: (blck_szs[i]*,r) (blck_szs[i],r) 
L4658: (blck_szs[i],r) 
	loop info: k=0, pos4=pos   k<blck_szs[i]   pos4 += blck_szs[i]-k, k++
	induction variable: ['k', 'j', 'pos4']
		}
L4659: (blck_szs[i]*,r) (blck_szs[i]+,r) 
L4660: (blck_szs[i],r) 
	loop info: k=0, pos4=pos   k<blck_szs[i]   pos4+=blck_szs[i]-k, k++
	induction variable: ['k', 'j', 'pos4']
	{
	L4661: (sigx[pos3+k],r) 
	L4662: (rhs[pos4]=,w) 
	}
L4663: (blck_szs[i]*,r) (blck_szs[i]+,r) 
L4664: (blck_szs[i]*,r) (blck_szs[i],r) 
L4665: (blck_szs[i],r) 
L4666: (blck_szs[i]*,r) (blck_szs[i]+,r) 
L4667: (blck_szs[i],r) 
	loop info: k=0, pos4=lngth   k<blck_szs[i]   pos4+=blck_szs[i]-k, k++
	induction variable: ['k', 'j', 'pos4']
		}
L4668: (blck_szs[i],r) 
	loop info: i=0  i<n  i++
	induction variable: ['k', 'j', 'pos4', 'i']
	{
	L4669: (sigx[i],r) 
	L4670: (sigx[i],r) 
	L4671: (sigx[i],r) 
	L4672: (sigx[i],r) 
	L4673: (sigz[i],r) 
	L4674: (sigz[i],r) 
	L4675: (sigz[i],r) 
	L4676: (sigz[i],r) 
	}
L4677: (ul[0]+,r) 
L4678: (ul[1]-,r) 
L4679: (ul[0]=,w) (ul[1]=,w) 
L4680: (ul[0],r) (ul[1],r) 
	loop info: i=0  i<n  i++
	induction variable: ['k', 'j', 'pos4', 'i']
		{
		L4681: (sigx[i]/,r) (sigx[i],r) 
		L4682: (sigx[i]/,r) (sigx[i],r) 
		L4683: (sigz[i]/,r) (sigz[i],r) 
		L4684: (sigz[i]/,r) (sigz[i],r) 
		}
	loop info: i=0  i<n  i++
	induction variable: ['k', 'j', 'pos4', 'i']
		{
		L4685: (sigx[i]/,r) (sigx[i],r) 
		L4686: (sigx[i]/,r) (sigx[i],r) 
		}
	loop info: i=0  i<n  i++
	induction variable: ['k', 'j', 'pos4', 'i']
		{
		L4687: (sigz[i]/,r) (sigz[i],r) 
		L4688: (sigz[i]/,r) (sigz[i],r) 
		}
 }
array table
-----------------------------------------------
ul -> [('[1]', 'w', 'normalized', ['k', 'j', 'pos4', 'i'], 4649), ('[0]', 'w', 'normalized', ['k', 'j', 'pos4', 'i'], 4650), ('[0]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4651), ('[1]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4651), ('[1]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4652), ('[1]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4652), ('[0]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4653), ('[0]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4653), ('[0]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4654), ('[1]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4655), ('[0]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4677), ('[1]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4678), ('[0]', 'w', 'normalized', ['k', 'j', 'pos4', 'i'], 4679), ('[1]', 'w', 'normalized', ['k', 'j', 'pos4', 'i'], 4679), ('[0]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4680), ('[1]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4680)]
LDEs formed:58

sigx -> [('[pos3+k]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4646), ('[pos3+k]', 'w', 'not normalized', ['k', 'j', 'pos4', 'i'], 4647), ('[pos3+k]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4661), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4669), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4670), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4671), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4672), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4681), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4681), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4682), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4682), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4685), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4685), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4686), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4686)]
LDEs formed:15

rhs -> [('[pos4]', 'w', 'normalized', ['k', 'j', 'pos4', 'i'], 4662)]
LDEs formed:1

sigz -> [('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4673), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4674), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4675), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4676), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4683), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4683), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4684), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4684), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4687), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4687), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4688), ('[i]', 'r', 'normalized', ['k', 'j', 'pos4', 'i'], 4688)]
LDEs formed:0

blck_szs -> [('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4641), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4641), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4642), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4642), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4643), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4644), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4644), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4645), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4648), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4656), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4656), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4657), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4657), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4658), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4659), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4659), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4660), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4663), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4663), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4664), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4664), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4665), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4666), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4666), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4667), ('[i]', 'r', 'not normalized', ['k', 'j', 'pos4', 'i'], 4668)]
LDEs formed:0

distinct LDEs:
pos3+k1=pos3+k2
pos3+k1=i2
0=0
pos41=pos42
1=1
1=0
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *nx  ++i
induction variable: ['i']
{
L4669: (xr[i - 1],r) (xi[i - 1],r) (alpha[i - 1],r) (yr[i - 1],r) 
L4670: (yi[i - 1],r) (wr[1],r) (wi[0],r) 
}
array table
-----------------------------------------------
yi -> [('[i - 1]', 'r', 'normalized', ['i'], 4670)]
LDEs formed:0

xi -> [('[i - 1]', 'r', 'normalized', ['i'], 4669)]
LDEs formed:0

wi -> [('[0]', 'r', 'normalized', ['i'], 4670)]
LDEs formed:0

wr -> [('[1]', 'r', 'normalized', ['i'], 4670)]
LDEs formed:0

xr -> [('[i - 1]', 'r', 'normalized', ['i'], 4669)]
LDEs formed:0

alpha -> [('[i - 1]', 'r', 'normalized', ['i'], 4669)]
LDEs formed:0

yr -> [('[i - 1]', 'r', 'normalized', ['i'], 4669)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *nx  ++i
induction variable: ['i']
{
L4670: (xr[i - 1],r) (xi[i - 1],r) (alpha[0],r) (yr[i - 1],r) 
L4671: (yi[i - 1],r) (wr[0],r) (wi[0],r) 
}
array table
-----------------------------------------------
yi -> [('[i - 1]', 'r', 'normalized', ['i'], 4671)]
LDEs formed:0

xi -> [('[i - 1]', 'r', 'normalized', ['i'], 4670)]
LDEs formed:0

wi -> [('[0]', 'r', 'normalized', ['i'], 4671)]
LDEs formed:0

wr -> [('[0]', 'r', 'normalized', ['i'], 4671)]
LDEs formed:0

xr -> [('[i - 1]', 'r', 'normalized', ['i'], 4670)]
LDEs formed:0

alpha -> [('[0]', 'r', 'normalized', ['i'], 4670)]
LDEs formed:0

yr -> [('[i - 1]', 'r', 'normalized', ['i'], 4670)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i <= *nx  ++i
induction variable: ['i']
{
L4671: (xr[i - 1],r) (xi[i - 1],r) (alpha[l - 1],r) (wr[0],r) (wi[0],r) 
L4672: (wr[*na],r) (wi[*na],r) 
L4673: (wr[0],r) (yr[(i + (l - 1) * *nx) - 1],r) 
L4674: (wi[0],r) (yi[(i + (l - 1) * *nx) - 1],r) 
}
array table
-----------------------------------------------
yi -> [('[(i + (l - 1) * *nx) - 1]', 'r', 'not normalized', ['i'], 4674)]
LDEs formed:0

xi -> [('[i - 1]', 'r', 'normalized', ['i'], 4671)]
LDEs formed:0

wi -> [('[0]', 'r', 'normalized', ['i'], 4671), ('[*na]', 'r', 'not normalized', ['i'], 4672), ('[0]', 'r', 'normalized', ['i'], 4674)]
LDEs formed:0

wr -> [('[0]', 'r', 'normalized', ['i'], 4671), ('[*na]', 'r', 'not normalized', ['i'], 4672), ('[0]', 'r', 'normalized', ['i'], 4673)]
LDEs formed:0

xr -> [('[i - 1]', 'r', 'normalized', ['i'], 4671)]
LDEs formed:0

alpha -> [('[l - 1]', 'r', 'not normalized', ['i'], 4671)]
LDEs formed:0

yr -> [('[(i + (l - 1) * *nx) - 1]', 'r', 'not normalized', ['i'], 4673)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < mnx   i++ 
induction variable: ['i']
{
L4674: (x[i],r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'r', 'normalized', ['i'], 4674)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < mnx * MNp1   i++ 
induction variable: ['i']
{
L4675: (ipqa[i],r) 
L4676: (pqa[i]=,w) 
L4677: (ipqa[i],r) 
L4678: (pqa[i]=,w) (pqa[i]*,r) 
}
array table
-----------------------------------------------
pqa -> [('[i]', 'w', 'normalized', ['i'], 4676), ('[i]', 'w', 'normalized', ['i'], 4678), ('[i]', 'r', 'normalized', ['i'], 4678)]
LDEs formed:5

ipqa -> [('[i]', 'r', 'normalized', ['i'], 4675), ('[i]', 'r', 'normalized', ['i'], 4677)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < mnx   i++ 
induction variable: ['i']
{
L4678: (x[i],r) 
	loop info:  j = 0   j < MNp1   j += 2 
	induction variable: ['i', 'j']
			{
			L4679: (pqa[i * MNp1 + j]=,w) (pqa[i * MNp1 + j],r) 
			}
	loop info:  j = 1   j < MNp1   j += 2 
	induction variable: ['i', 'j']
			{
			L4680: (pqa[i * MNp1 + j]=,w) (pqa[i * MNp1 + j],r) 
			}
 }
array table
-----------------------------------------------
x -> [('[i]', 'r', 'normalized', ['i', 'j'], 4678)]
LDEs formed:0

pqa -> [('[i * MNp1 + j]', 'w', 'not normalized', ['i', 'j'], 4679), ('[i * MNp1 + j]', 'r', 'not normalized', ['i', 'j'], 4679), ('[i * MNp1 + j]', 'w', 'not normalized', ['i', 'j'], 4680), ('[i * MNp1 + j]', 'r', 'not normalized', ['i', 'j'], 4680)]
LDEs formed:7

distinct LDEs:
i1 * MNp1 + j1=i2 * MNp1 + j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 1   i < nb_elt   i++ 
induction variable: ['i']
{
L4681: (x[i],r) (x[i - 1]+,r) 
}
array table
-----------------------------------------------
x -> [('[i]', 'r', 'normalized', ['i'], 4681), ('[i - 1]', 'r', 'normalized', ['i'], 4681)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < mx*nx   i++ 
induction variable: ['i']
{
L4682: (x[i],r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 4682)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 4682)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < mx*nx   i++ 
induction variable: ['i']
{
L4683: (x[i]+,r) (y[i],r) 
L4684: (z[i]=,w) (x[i],r) (y[i],r) 
L4685: (z[i]=,w) (x[i],r) (y[i],r) 
}
array table
-----------------------------------------------
y -> [('[i]', 'r', 'normalized', ['i'], 4683), ('[i]', 'r', 'normalized', ['i'], 4684), ('[i]', 'r', 'normalized', ['i'], 4685)]
LDEs formed:0

x -> [('[i]', 'r', 'normalized', ['i'], 4683), ('[i]', 'r', 'normalized', ['i'], 4684), ('[i]', 'r', 'normalized', ['i'], 4685)]
LDEs formed:0

z -> [('[i]', 'w', 'normalized', ['i'], 4684), ('[i]', 'w', 'normalized', ['i'], 4685)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < dimMax  i++
induction variable: ['i']
{
L4686: (achKey[MAX_KEY_LENGTH],r) 
L4687: (ListKeys[i]=,w) 
}
array table
-----------------------------------------------
achKey -> [('[MAX_KEY_LENGTH]', 'r', 'not normalized', ['i'], 4686)]
LDEs formed:0

ListKeys -> [('[i]', 'w', 'normalized', ['i'], 4687)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < dimMax  i++
induction variable: ['i']
{
L4688: (achKey[MAX_KEY_LENGTH],r) 
L4689: (ListKeys[i]=,w) 
}
array table
-----------------------------------------------
achKey -> [('[MAX_KEY_LENGTH]', 'r', 'not normalized', ['i'], 4688)]
LDEs formed:0

ListKeys -> [('[i]', 'w', 'normalized', ['i'], 4689)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: fin = *SizeStrings - 1  fin > 0  fin--
induction variable: ['fin']
{
	loop info: i=0 i<fin i++
	induction variable: ['fin', 'i']
	{
	L4690: (Strings[i],r) 
	L4691: (Strings[i],r) (Strings[i+1],r) 
	L4692: (Strings[i+1],r) 
	L4693: (Strings[i+1]=,w) 
	L4694: (Strings[i]=,w) (Strings[i+1],r) 
	L4695: (Strings[i+1]=,w) 
	}
 }
array table
-----------------------------------------------
Strings -> [('[i]', 'r', 'normalized', ['fin', 'i'], 4690), ('[i]', 'r', 'normalized', ['fin', 'i'], 4691), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 4691), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 4692), ('[i+1]', 'w', 'normalized', ['fin', 'i'], 4693), ('[i]', 'w', 'normalized', ['fin', 'i'], 4694), ('[i+1]', 'r', 'normalized', ['fin', 'i'], 4694), ('[i+1]', 'w', 'normalized', ['fin', 'i'], 4695)]
LDEs formed:21

distinct LDEs:
i1=i2+1
i1+1=i2+1
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(int)wcslen(wcSciPathName) i++
induction variable: ['i']
{
L4696: (wcSciPathName[i]==,r) (wcSciPathName[i]=,w) 
}
array table
-----------------------------------------------
wcSciPathName -> [('[i]', 'r', 'normalized', ['i'], 4696), ('[i]', 'w', 'normalized', ['i'], 4696)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(int)strlen(path_out) i++
induction variable: ['i']
{
L4697: (path_in[i]==,r) 
L4698: (path_out[i]=,w) 
L4699: (path_in[i]==,r) 
L4700: (path_out[i]=,w) 
}
array table
-----------------------------------------------
path_in -> [('[i]', 'r', 'normalized', ['i'], 4697), ('[i]', 'r', 'normalized', ['i'], 4699)]
LDEs formed:0

path_out -> [('[i]', 'w', 'normalized', ['i'], 4698), ('[i]', 'w', 'normalized', ['i'], 4700)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = (int)strlen(command) - 1  i >= 0  i--
induction variable: ['i']
{
L4701: (command[i]==,r) (command[i]=,w) 
}
array table
-----------------------------------------------
command -> [('[i]', 'r', 'normalized', ['i'], 4701), ('[i]', 'w', 'normalized', ['i'], 4701)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < len  j++
induction variable: ['j']
{
L4702: (_string[j]==,r) 
L4703: (_string[j]=,w) 
}
array table
-----------------------------------------------
_string -> [('[j]', 'r', 'normalized', ['j'], 4702), ('[j]', 'w', 'normalized', ['j'], 4703)]
LDEs formed:2

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < argc  i++
induction variable: ['i']
{
L4704: (my_argv[i]=,w) (argv[i],r) 
}
array table
-----------------------------------------------
my_argv -> [('[i]', 'w', 'normalized', ['i'], 4704)]
LDEs formed:1

argv -> [('[i]', 'r', 'normalized', ['i'], 4704)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nArgs  i++
induction variable: ['i']
{
L4705: (my_argv[i]=,w) (szArglist[i],r) 
}
array table
-----------------------------------------------
szArglist -> [('[i]', 'r', 'normalized', ['i'], 4705)]
LDEs formed:0

my_argv -> [('[i]', 'w', 'normalized', ['i'], 4705)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < my_argc  i++
induction variable: ['i']
{
L4706: (my_argv[i],r) (my_argv[i],r) (my_argv[i],r) (my_argv[i],r) 
L4707: (my_argv[i],r) 
L4708: (my_argv[i],r) 
L4709: (my_argv[i],r) 
L4710: (my_argv[i],r) 
L4711: (my_argv[i],r) 
L4712: (Msg[2048],r) 
}
array table
-----------------------------------------------
Msg -> [('[2048]', 'r', 'normalized', ['i'], 4712)]
LDEs formed:0

my_argv -> [('[i]', 'r', 'normalized', ['i'], 4706), ('[i]', 'r', 'normalized', ['i'], 4706), ('[i]', 'r', 'normalized', ['i'], 4706), ('[i]', 'r', 'normalized', ['i'], 4706), ('[i]', 'r', 'normalized', ['i'], 4707), ('[i]', 'r', 'normalized', ['i'], 4708), ('[i]', 'r', 'normalized', ['i'], 4709), ('[i]', 'r', 'normalized', ['i'], 4710), ('[i]', 'r', 'normalized', ['i'], 4711)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < (int)strlen(pathin)  i++
induction variable: ['i']
{
L4712: (pathin[i]==,r) 
L4713: (pathout[i]=,w) 
L4714: (pathout[i]=,w) (pathin[i],r) 
}
array table
-----------------------------------------------
pathin -> [('[i]', 'r', 'normalized', ['i'], 4712), ('[i]', 'r', 'normalized', ['i'], 4714)]
LDEs formed:0

pathout -> [('[i]', 'w', 'normalized', ['i'], 4713), ('[i]', 'w', 'normalized', ['i'], 4714)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < TextLength  i++
induction variable: ['i']
{
L4715: (LignePrint[Index1]=,w) (lines[i],r) 
L4716: (LignePrint[Index1]=,w) 
L4717: (LignePrint[Index1 - 1]==,r) 
L4718: (LignePrint[Index1 - 1]=,w) 
L4719: (lines[i]==,r) 
L4720: (LignePrint[Index1]=,w) 
L4721: (LignePrint[Index1 - 1]==,r) 
L4722: (LignePrint[Index1 - 1]=,w) 
}
array table
-----------------------------------------------
LignePrint -> [('[Index1]', 'w', 'not normalized', ['i'], 4715), ('[Index1]', 'w', 'not normalized', ['i'], 4716), ('[Index1 - 1]', 'r', 'not normalized', ['i'], 4717), ('[Index1 - 1]', 'w', 'not normalized', ['i'], 4718), ('[Index1]', 'w', 'not normalized', ['i'], 4720), ('[Index1 - 1]', 'r', 'not normalized', ['i'], 4721), ('[Index1 - 1]', 'w', 'not normalized', ['i'], 4722)]
LDEs formed:25

lines -> [('[i]', 'r', 'normalized', ['i'], 4715), ('[i]', 'r', 'normalized', ['i'], 4719)]
LDEs formed:0

distinct LDEs:
Index1=Index1 - 1
Index1=Index1
Index1 - 1=Index1 - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < subline  i++
induction variable: ['i']
{
	loop info: j = 0  j < (NombredeCaracteresparLignes)  j++
	induction variable: ['i', 'j']
	{
	L4720: (line[(i * NombredeCaracteresparLignes) + j]==,r) 
	L4721: (LignePrint[j]=,w) 
	L4722: (LignePrint[j]=,w) (line[(i * NombredeCaracteresparLignes) + j],r) 
	}
L4723: (LignePrint[j]=,w) 
}
array table
-----------------------------------------------
line -> [('[(i * NombredeCaracteresparLignes) + j]', 'r', 'not normalized', ['i', 'j'], 4720), ('[(i * NombredeCaracteresparLignes) + j]', 'r', 'not normalized', ['i', 'j'], 4722)]
LDEs formed:0

LignePrint -> [('[j]', 'w', 'normalized', ['i', 'j'], 4721), ('[j]', 'w', 'normalized', ['i', 'j'], 4722), ('[j]', 'w', 'normalized', ['i', 'j'], 4723)]
LDEs formed:6

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < (restsubline)  j++
induction variable: ['j']
{
L4724: (line[(i * NombredeCaracteresparLignes) + j]==,r) 
L4725: (LignePrint[j]=,w) 
L4726: (LignePrint[j]=,w) (line[(i * NombredeCaracteresparLignes) + j],r) 
}
array table
-----------------------------------------------
line -> [('[(i * NombredeCaracteresparLignes) + j]', 'r', 'not normalized', ['j'], 4724), ('[(i * NombredeCaracteresparLignes) + j]', 'r', 'not normalized', ['j'], 4726)]
LDEs formed:0

LignePrint -> [('[j]', 'w', 'normalized', ['j'], 4725), ('[j]', 'w', 'normalized', ['j'], 4726)]
LDEs formed:3

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NumberOfLines + 1  i++
induction variable: ['i']
{
L4727: (Line[i * NumberOfCharByLine],r) 
L4728: (BufferCat[MAX_PATH],r) 
L4729: (Line[i * NumberOfCharByLine],r) 
}
array table
-----------------------------------------------
Line -> [('[i * NumberOfCharByLine]', 'r', 'not normalized', ['i'], 4727), ('[i * NumberOfCharByLine]', 'r', 'not normalized', ['i'], 4729)]
LDEs formed:0

BufferCat -> [('[MAX_PATH]', 'r', 'not normalized', ['i'], 4728)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < argc  i++
induction variable: ['i']
{
L4729: (argv[i],r) 
L4730: (argv[i],r) 
L4731: (argv[i],r) 
}
array table
-----------------------------------------------
argv -> [('[i]', 'r', 'normalized', ['i'], 4729), ('[i]', 'r', 'normalized', ['i'], 4730), ('[i]', 'r', 'normalized', ['i'], 4731)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 1  i < argc  i++
induction variable: ['i']
{
L4732: (argvbis[i + 1]=,w) (argv[i],r) 
}
array table
-----------------------------------------------
argvbis -> [('[i + 1]', 'w', 'normalized', ['i'], 4732)]
LDEs formed:1

argv -> [('[i]', 'r', 'normalized', ['i'], 4732)]
LDEs formed:0

distinct LDEs:
i1 + 1=i2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < argc  i++
induction variable: ['i']
{
L4733: (argvbis[i]=,w) (argv[i],r) 
}
array table
-----------------------------------------------
argvbis -> [('[i]', 'w', 'normalized', ['i'], 4733)]
LDEs formed:1

argv -> [('[i]', 'r', 'normalized', ['i'], 4733)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < numberOfGuids   i++
induction variable: ['i']
{
L4734: (GUIDs[i]=,w) 
}
array table
-----------------------------------------------
GUIDs -> [('[i]', 'w', 'normalized', ['i'], 4734)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < NumbersElm  i++
induction variable: ['i']
{
L4735: (ListKeysName[i]=,w) 
}
array table
-----------------------------------------------
ListKeysName -> [('[i]', 'w', 'normalized', ['i'], 4735)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i<nbrlines i++
induction variable: ['i']
{
L4736: (ouput[i],r) 
L4737: (ouput[i],r) 
}
array table
-----------------------------------------------
ouput -> [('[i]', 'r', 'normalized', ['i'], 4736), ('[i]', 'r', 'normalized', ['i'], 4737)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= AllocatedSize  I++
induction variable: ['I']
{
L4738: (IntToExtColMap[I]=,w) 
}
array table
-----------------------------------------------
IntToExtColMap -> [('[I]', 'w', 'normalized', ['I'], 4738)]
LDEs formed:1

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= AllocatedSize  I++
induction variable: ['I']
{
L4739: (ExtToIntRowMap[I]=,w) 
}
array table
-----------------------------------------------
ExtToIntRowMap -> [('[I]', 'w', 'normalized', ['I'], 4739)]
LDEs formed:1

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4740: (Intermediate[I],r) 
L4741: (Diag[I],r) 
L4742: (Intermediate[I]=,w) 
L4743: (Intermediate[pElement->Row]-=,w) 
L4744: (Intermediate[I]=,w) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'normalized', ['I'], 4741)]
LDEs formed:0

Intermediate -> [('[I]', 'r', 'normalized', ['I'], 4740), ('[I]', 'w', 'normalized', ['I'], 4742), ('[pElement->Row]', 'w', 'not normalized', ['I'], 4743), ('[I]', 'w', 'normalized', ['I'], 4744)]
LDEs formed:9

distinct LDEs:
I1=pElement->Row
pElement->Row=pElement->Row
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size   I > 0  I--
induction variable: ['I']
{
L4745: (Diag[I]==,r) 
L4746: (Intermediate[I]=,w) 
L4747: (Diag[I]-,r) 
L4748: (Intermediate[pElement->Col],r) 
L4749: (Intermediate[I]=,w) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'normalized', ['I'], 4745), ('[I]', 'r', 'normalized', ['I'], 4747)]
LDEs formed:0

Intermediate -> [('[I]', 'w', 'normalized', ['I'], 4746), ('[pElement->Col]', 'r', 'not normalized', ['I'], 4748), ('[I]', 'w', 'normalized', ['I'], 4749)]
LDEs formed:5

distinct LDEs:
I1=pElement->Col
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I > 0  I--
induction variable: ['I']
{
L4750: (Intermediate[I].Imag=,w) (iRHS[*(pExtOrder--)],r) 
}
array table
-----------------------------------------------
Intermediate -> [('[I]', 'w', 'normalized', ['I'], 4750)]
LDEs formed:1

iRHS -> [('[*(pExtOrder--)]', 'r', 'not normalized', ['I'], 4750)]
LDEs formed:0

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4751: (Diag[I],r) 
L4752: (Intermediate[I]=,w) 
L4753: (Intermediate[pElement->Row],r) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'normalized', ['I'], 4751)]
LDEs formed:0

Intermediate -> [('[I]', 'w', 'normalized', ['I'], 4752), ('[pElement->Row]', 'r', 'not normalized', ['I'], 4753)]
LDEs formed:2

distinct LDEs:
I1=pElement->Row
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I > 0  I--
induction variable: ['I']
{
L4754: (Diag[I]-,r) 
L4755: (Intermediate[pElement->Col],r) 
L4756: (Intermediate[I]=,w) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'normalized', ['I'], 4754)]
LDEs formed:0

Intermediate -> [('[pElement->Col]', 'r', 'not normalized', ['I'], 4755), ('[I]', 'w', 'normalized', ['I'], 4756)]
LDEs formed:2

distinct LDEs:
pElement->Col=I2
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I > 0  I--
induction variable: ['I']
{
L4757: (iSolution[*(pExtOrder--)]=,w) (Intermediate[I].Imag,r) 
}
array table
-----------------------------------------------
Intermediate -> [('[I]', 'r', 'normalized', ['I'], 4757)]
LDEs formed:0

iSolution -> [('[*(pExtOrder--)]', 'w', 'not normalized', ['I'], 4757)]
LDEs formed:1

distinct LDEs:
*(pExtOrder--)=*(pExtOrder--)
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4758: (Intermediate[I],r) 
L4759: (Diag[I]-,r) 
L4760: (Intermediate[pElement->Col]-=,w) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'normalized', ['I'], 4759)]
LDEs formed:0

Intermediate -> [('[I]', 'r', 'normalized', ['I'], 4758), ('[pElement->Col]', 'w', 'not normalized', ['I'], 4760)]
LDEs formed:2

distinct LDEs:
I1=pElement->Col
pElement->Col=pElement->Col
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I > 0  I--
induction variable: ['I']
{
L4761: (Intermediate[I],r) 
L4762: (Intermediate[pElement->Row],r) 
L4763: (Intermediate[I]=,w) 
}
array table
-----------------------------------------------
Intermediate -> [('[I]', 'r', 'normalized', ['I'], 4761), ('[pElement->Row]', 'r', 'not normalized', ['I'], 4762), ('[I]', 'w', 'normalized', ['I'], 4763)]
LDEs formed:3

distinct LDEs:
pElement->Row=I2
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I > 0  I--
induction variable: ['I']
{
L4764: (Intermediate[I].Imag=,w) (iRHS[*(pExtOrder--)],r) 
}
array table
-----------------------------------------------
Intermediate -> [('[I]', 'w', 'normalized', ['I'], 4764)]
LDEs formed:1

iRHS -> [('[*(pExtOrder--)]', 'r', 'not normalized', ['I'], 4764)]
LDEs formed:0

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4765: (Diag[I]-,r) 
L4766: (Intermediate[pElement->Col],r) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'normalized', ['I'], 4765)]
LDEs formed:0

Intermediate -> [('[pElement->Col]', 'r', 'not normalized', ['I'], 4766)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I > 0  I--
induction variable: ['I']
{
L4767: (Intermediate[I],r) 
L4768: (Intermediate[pElement->Row],r) 
L4769: (Intermediate[I],r) 
}
array table
-----------------------------------------------
Intermediate -> [('[I]', 'r', 'normalized', ['I'], 4767), ('[pElement->Row]', 'r', 'not normalized', ['I'], 4768), ('[I]', 'r', 'normalized', ['I'], 4769)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I > 0  I--
induction variable: ['I']
{
L4770: (iSolution[*(pExtOrder--)]=,w) (Intermediate[I].Imag,r) 
}
array table
-----------------------------------------------
Intermediate -> [('[I]', 'r', 'normalized', ['I'], 4770)]
LDEs formed:0

iSolution -> [('[*(pExtOrder--)]', 'w', 'not normalized', ['I'], 4770)]
LDEs formed:1

distinct LDEs:
*(pExtOrder--)=*(pExtOrder--)
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *nel  k++
induction variable: ['k']
{
L4771: (lln[i-1],r) 
L4772: (col[k],r) 
L4773: (val[k],r) 
}
array table
-----------------------------------------------
lln -> [('[i-1]', 'r', 'not normalized', ['k'], 4771)]
LDEs formed:0

val -> [('[k]', 'r', 'normalized', ['k'], 4773)]
LDEs formed:0

col -> [('[k]', 'r', 'normalized', ['k'], 4772)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4773: (indsigd[I-1]=,w) 
L4774: (indsigd[Size+I-1]=,w) (IntToExtColMap[I],r) 
L4775: (sigd[I-1]=,w) 
}
array table
-----------------------------------------------
sigd -> [('[I-1]', 'w', 'normalized', ['I'], 4775)]
LDEs formed:1

indsigd -> [('[I-1]', 'w', 'normalized', ['I'], 4773), ('[Size+I-1]', 'w', 'not normalized', ['I'], 4774)]
LDEs formed:3

IntToExtColMap -> [('[I]', 'r', 'normalized', ['I'], 4774)]
LDEs formed:0

distinct LDEs:
I1-1=Size+I2-1
Size+I1-1=Size+I2-1
I1-1=I2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size -(mc)+1    I <= Size  I++
induction variable: ['I']
{
	loop info:  J=last+1  J <=Size  J++
	induction variable: ['I', 'J']
	{
	L4775: (ExtToIntColMap[J]==,r) 
	}
L4776: (indsigd[I-1]=,w) 
L4777: (indsigd[Size+I-1]=,w) 
}
array table
-----------------------------------------------
ExtToIntColMap -> [('[J]', 'r', 'normalized', ['I', 'J'], 4775)]
LDEs formed:0

indsigd -> [('[I-1]', 'w', 'normalized', ['I', 'J'], 4776), ('[Size+I-1]', 'w', 'not normalized', ['I', 'J'], 4777)]
LDEs formed:3

distinct LDEs:
I1-1=Size+I2-1
Size+I1-1=Size+I2-1
I1-1=I2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size-mc   I++
induction variable: ['I']
{
L4778: (indsigg[I-1]=,w) 
L4779: (IntToExtRowMap[I]-,r) 
L4780: (sigg[I-1]=,w) 
}
array table
-----------------------------------------------
IntToExtRowMap -> [('[I]', 'r', 'normalized', ['I'], 4779)]
LDEs formed:0

sigg -> [('[I-1]', 'w', 'normalized', ['I'], 4780)]
LDEs formed:1

indsigg -> [('[I-1]', 'w', 'normalized', ['I'], 4778)]
LDEs formed:1

distinct LDEs:
I1-1=I2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size -(mc)+1    I <= Size  I++
induction variable: ['I']
{
	loop info:  J=last+1  J <=Size  J++
	induction variable: ['I', 'J']
	{
	L4779: (ExtToIntRowMap[J]==,r) 
	}
L4780: (indsigg[I-1]=,w) 
L4781: (indsigg[Size+last-1]=,w) 
L4782: (sigg[I-1]=,w) 
}
array table
-----------------------------------------------
sigg -> [('[I-1]', 'w', 'normalized', ['I', 'J'], 4782)]
LDEs formed:1

ExtToIntRowMap -> [('[J]', 'r', 'normalized', ['I', 'J'], 4779)]
LDEs formed:0

indsigg -> [('[I-1]', 'w', 'normalized', ['I', 'J'], 4780), ('[Size+last-1]', 'w', 'not normalized', ['I', 'J'], 4781)]
LDEs formed:3

distinct LDEs:
I1-1=Size+last-1
Size+last-1=Size+last-1
I1-1=I2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: J = 1  J <= Size   J++
induction variable: ['J']
{
L4782: (indl[J-1]=,w) 
L4783: (indu[J-1]=,w) 
}
array table
-----------------------------------------------
indu -> [('[J-1]', 'w', 'normalized', ['J'], 4783)]
LDEs formed:1

indl -> [('[J-1]', 'w', 'normalized', ['J'], 4782)]
LDEs formed:1

distinct LDEs:
J1-1=J2-1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size   I++
induction variable: ['I']
{
L4783: (indu[I-1]=,w) (indu[I-1]+,r) 
L4784: (indu[Size+usize]=,w) 
L4785: (u[usize]=,w) 
L4786: (FirstInRow[I],r) 
L4787: (indl[I-1]=,w) (indl[I-1]+,r) 
L4788: (indl[Size+lsize]=,w) 
L4789: (l[lsize]=,w) 
L4790: (indu[I-1]=,w) (indu[I-1]+,r) 
L4791: (indu[Size+usize]=,w) 
L4792: (u[usize]=,w) 
}
array table
-----------------------------------------------
indu -> [('[I-1]', 'w', 'normalized', ['I'], 4783), ('[I-1]', 'r', 'normalized', ['I'], 4783), ('[Size+usize]', 'w', 'not normalized', ['I'], 4784), ('[I-1]', 'w', 'normalized', ['I'], 4790), ('[I-1]', 'r', 'normalized', ['I'], 4790), ('[Size+usize]', 'w', 'not normalized', ['I'], 4791)]
LDEs formed:18

indl -> [('[I-1]', 'w', 'normalized', ['I'], 4787), ('[I-1]', 'r', 'normalized', ['I'], 4787), ('[Size+lsize]', 'w', 'not normalized', ['I'], 4788)]
LDEs formed:5

u -> [('[usize]', 'w', 'not normalized', ['I'], 4785), ('[usize]', 'w', 'not normalized', ['I'], 4792)]
LDEs formed:3

l -> [('[lsize]', 'w', 'not normalized', ['I'], 4789)]
LDEs formed:1

FirstInRow -> [('[I]', 'r', 'normalized', ['I'], 4786)]
LDEs formed:0

distinct LDEs:
usize=usize
Size+lsize=Size+lsize
Size+usize=Size+usize
I1-1=Size+usize
lsize=lsize
I1-1=I2-1
I1-1=Size+lsize
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: J = 1  J <= Size   J++
induction variable: ['J']
{
L4787: (FirstInCol[J],r) 
}
array table
-----------------------------------------------
FirstInCol -> [('[J]', 'r', 'normalized', ['J'], 4787)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0  i<sci_luptr_index  i++
induction variable: ['i']
{
L4788: (sci_luptr_table[i]==,r) 
}
array table
-----------------------------------------------
sci_luptr_table -> [('[i]', 'r', 'normalized', ['i'], 4788)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= I1  ++j
induction variable: ['j']
{
L4789: (inda[j]-,r) (inda[j-1],r) 
	loop info: ii = 1  ii <= I2  ++ii
	induction variable: ['j', 'ii']
		{
		L4790: (inda[*na  + k + ii],r) 
		L4791: (rr[I + (j - 1) * *ma -1 ]=,w) (a[k + ii -1],r) 
		}
 }
array table
-----------------------------------------------
a -> [('[k + ii -1]', 'r', 'not normalized', ['j', 'ii'], 4791)]
LDEs formed:0

inda -> [('[j]', 'r', 'normalized', ['j', 'ii'], 4789), ('[j-1]', 'r', 'normalized', ['j', 'ii'], 4789), ('[*na  + k + ii]', 'r', 'not normalized', ['j', 'ii'], 4790)]
LDEs formed:0

rr -> [('[I + (j - 1) * *ma -1 ]', 'w', 'not normalized', ['j', 'ii'], 4791)]
LDEs formed:1

distinct LDEs:
I + (j1 - 1) * *ma -1 =I + (j2 - 1) * *ma -1 
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 1  j <= I1  ++j
induction variable: ['j']
{
L4792: (inda[j]-,r) (inda[j-1],r) 
	loop info: ii = 1  ii <= I2  ++ii
	induction variable: ['j', 'ii']
		{
		L4793: (inda[*na + k + ii],r) 
		L4794: (rr[I + (j - 1) * *ma -1]=,w) (ar[k + ii -1],r) 
		L4795: (ri[I + (j - 1) * *ma -1]=,w) (ai[k + ii -1],r) 
		}
 }
array table
-----------------------------------------------
ai -> [('[k + ii -1]', 'r', 'not normalized', ['j', 'ii'], 4795)]
LDEs formed:0

ar -> [('[k + ii -1]', 'r', 'not normalized', ['j', 'ii'], 4794)]
LDEs formed:0

inda -> [('[j]', 'r', 'normalized', ['j', 'ii'], 4792), ('[j-1]', 'r', 'normalized', ['j', 'ii'], 4792), ('[*na + k + ii]', 'r', 'not normalized', ['j', 'ii'], 4793)]
LDEs formed:0

ri -> [('[I + (j - 1) * *ma -1]', 'w', 'not normalized', ['j', 'ii'], 4795)]
LDEs formed:1

rr -> [('[I + (j - 1) * *ma -1]', 'w', 'not normalized', ['j', 'ii'], 4794)]
LDEs formed:1

distinct LDEs:
I + (j1 - 1) * *ma -1=I + (j2 - 1) * *ma -1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= lSize  I++
induction variable: ['I']
{
L4795: (FirstInRow[I],r) 
}
array table
-----------------------------------------------
FirstInRow -> [('[I]', 'r', 'normalized', ['I'], 4795)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= lSize  I++
induction variable: ['I']
{
L4796: (FirstInCol[I],r) 
}
array table
-----------------------------------------------
FirstInCol -> [('[I]', 'r', 'normalized', ['I'], 4796)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= lSize  I++
induction variable: ['I']
{
L4797: (FirstInRow[I],r) 
}
array table
-----------------------------------------------
FirstInRow -> [('[I]', 'r', 'normalized', ['I'], 4797)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= lSize  I++
induction variable: ['I']
{
L4798: (FirstInCol[I],r) 
}
array table
-----------------------------------------------
FirstInCol -> [('[I]', 'r', 'normalized', ['I'], 4798)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Matrix->Size  I > 0  I--
induction variable: ['I']
{
L4799: (Vector[pElement->Col],r) 
L4800: (RHS[*pExtOrder--]=,w) 
}
array table
-----------------------------------------------
RHS -> [('[*pExtOrder--]', 'w', 'not normalized', ['I'], 4800)]
LDEs formed:1

Vector -> [('[pElement->Col]', 'r', 'not normalized', ['I'], 4799)]
LDEs formed:0

distinct LDEs:
*pExtOrder--=*pExtOrder--
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Matrix->Size  I > 0  I--
induction variable: ['I']
{
L4800: (Vector[I].Imag=,w) (iSolution[*(pExtOrder--)],r) 
}
array table
-----------------------------------------------
Vector -> [('[I]', 'w', 'normalized', ['I'], 4800)]
LDEs formed:1

iSolution -> [('[*(pExtOrder--)]', 'r', 'not normalized', ['I'], 4800)]
LDEs formed:0

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Matrix->Size  I > 0  I--
induction variable: ['I']
{
L4801: (Vector[pElement->Col],r) 
L4802: (RHS[*pExtOrder]=,w) 
L4803: (iRHS[*pExtOrder--]=,w) 
}
array table
-----------------------------------------------
RHS -> [('[*pExtOrder]', 'w', 'not normalized', ['I'], 4802)]
LDEs formed:1

Vector -> [('[pElement->Col]', 'r', 'not normalized', ['I'], 4801)]
LDEs formed:0

iRHS -> [('[*pExtOrder--]', 'w', 'not normalized', ['I'], 4803)]
LDEs formed:1

distinct LDEs:
*pExtOrder=*pExtOrder
*pExtOrder--=*pExtOrder--
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Matrix->Size  I > 0  I--
induction variable: ['I']
{
L4804: (Vector[pElement->Row],r) 
L4805: (RHS[*pExtOrder--]=,w) 
}
array table
-----------------------------------------------
RHS -> [('[*pExtOrder--]', 'w', 'not normalized', ['I'], 4805)]
LDEs formed:1

Vector -> [('[pElement->Row]', 'r', 'not normalized', ['I'], 4804)]
LDEs formed:0

distinct LDEs:
*pExtOrder--=*pExtOrder--
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Matrix->Size  I > 0  I--
induction variable: ['I']
{
L4805: (Vector[I].Imag=,w) (iSolution[*(pExtOrder--)],r) 
}
array table
-----------------------------------------------
Vector -> [('[I]', 'w', 'normalized', ['I'], 4805)]
LDEs formed:1

iSolution -> [('[*(pExtOrder--)]', 'r', 'not normalized', ['I'], 4805)]
LDEs formed:0

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Matrix->Size  I > 0  I--
induction variable: ['I']
{
L4806: (Vector[pElement->Row],r) 
L4807: (RHS[*pExtOrder]=,w) 
L4808: (iRHS[*pExtOrder--]=,w) 
}
array table
-----------------------------------------------
RHS -> [('[*pExtOrder]', 'w', 'not normalized', ['I'], 4807)]
LDEs formed:1

Vector -> [('[pElement->Row]', 'r', 'not normalized', ['I'], 4806)]
LDEs formed:0

iRHS -> [('[*pExtOrder--]', 'w', 'not normalized', ['I'], 4808)]
LDEs formed:1

distinct LDEs:
*pExtOrder=*pExtOrder
*pExtOrder--=*pExtOrder--
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4809: (Diag[pElement->Col]==,r) 
L4810: (Diag[pElement->Col]=,w) 
}
array table
-----------------------------------------------
Diag -> [('[pElement->Col]', 'r', 'not normalized', ['I'], 4809), ('[pElement->Col]', 'w', 'not normalized', ['I'], 4810)]
LDEs formed:2

distinct LDEs:
pElement->Col=pElement->Col
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4811: (T[I],r) 
L4812: (T[I],r) 
	loop info: K = Size  K > 0  K--
	induction variable: ['I', 'K']
		}
L4813: (T[I],r) 
L4814: (T[I]-,r) 
L4815: (T[I]-,r) 
L4816: (T[I],r) 
L4817: (Tm[Row]=,w) (T[Row]-,r) 
L4818: (T[Row]-=,w) 
L4819: (T[Row],r) 
L4820: (Tm[Row],r) 
L4821: (T[I]=,w) 
L4822: (T[pElement->Row]=,w) (Tm[pElement->Row],r) 
L4823: (T[I]=,w) 
}
array table
-----------------------------------------------
Tm -> [('[Row]', 'w', 'not normalized', ['I', 'K'], 4817), ('[Row]', 'r', 'not normalized', ['I', 'K'], 4820), ('[pElement->Row]', 'r', 'not normalized', ['I', 'K'], 4822)]
LDEs formed:3

T -> [('[I]', 'r', 'normalized', ['I', 'K'], 4811), ('[I]', 'r', 'normalized', ['I', 'K'], 4812), ('[I]', 'r', 'normalized', ['I', 'K'], 4813), ('[I]', 'r', 'normalized', ['I', 'K'], 4814), ('[I]', 'r', 'normalized', ['I', 'K'], 4815), ('[I]', 'r', 'normalized', ['I', 'K'], 4816), ('[Row]', 'r', 'not normalized', ['I', 'K'], 4817), ('[Row]', 'w', 'not normalized', ['I', 'K'], 4818), ('[Row]', 'r', 'not normalized', ['I', 'K'], 4819), ('[I]', 'w', 'normalized', ['I', 'K'], 4821), ('[pElement->Row]', 'w', 'not normalized', ['I', 'K'], 4822), ('[I]', 'w', 'normalized', ['I', 'K'], 4823)]
LDEs formed:42

distinct LDEs:
Row=pElement->Row
I1=Row
pElement->Row=pElement->Row
I1=pElement->Row
Row=Row
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I >= 1  I--
induction variable: ['I']
{
L4824: (T[I]-=,w) (T[pElement->Col],r) 
L4825: (T[I],r) 
L4826: (T[I],r) 
	loop info: K = Size  K > 0  K--
	induction variable: ['I', 'K']
		}
 }
array table
-----------------------------------------------
T -> [('[I]', 'w', 'normalized', ['I', 'K'], 4824), ('[pElement->Col]', 'r', 'not normalized', ['I', 'K'], 4824), ('[I]', 'r', 'normalized', ['I', 'K'], 4825), ('[I]', 'r', 'normalized', ['I', 'K'], 4826)]
LDEs formed:4

distinct LDEs:
I1=pElement->Col
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4827: (T[pElement->Col]-=,w) (T[I]*,r) 
L4828: (T[I],r) 
L4829: (T[I],r) 
	loop info: K = Size  K > 0  K--
	induction variable: ['I', 'K']
		}
 }
array table
-----------------------------------------------
T -> [('[pElement->Col]', 'w', 'not normalized', ['I', 'K'], 4827), ('[I]', 'r', 'normalized', ['I', 'K'], 4827), ('[I]', 'r', 'normalized', ['I', 'K'], 4828), ('[I]', 'r', 'normalized', ['I', 'K'], 4829)]
LDEs formed:4

distinct LDEs:
pElement->Col=pElement->Col
pElement->Col=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I >= 1  I--
induction variable: ['I']
{
L4830: (T[I]-=,w) (T[pElement->Row],r) 
L4831: (T[I]*=,w) 
L4832: (T[I],r) 
L4833: (T[I],r) 
	loop info: K = Size  K > 0  K--
	induction variable: ['I', 'K']
		}
 }
array table
-----------------------------------------------
T -> [('[I]', 'w', 'normalized', ['I', 'K'], 4830), ('[pElement->Row]', 'r', 'not normalized', ['I', 'K'], 4830), ('[I]', 'w', 'normalized', ['I', 'K'], 4831), ('[I]', 'r', 'normalized', ['I', 'K'], 4832), ('[I]', 'r', 'normalized', ['I', 'K'], 4833)]
LDEs formed:9

distinct LDEs:
I1=pElement->Row
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4834: (T[I].Real,r) 
L4835: (T[I],r) 
	loop info: K = Size  K > 0  K--
	induction variable: ['I', 'K']
		}
L4836: (T[I],r) 
L4837: (Tm[Row],r) (T[Row],r) 
L4838: (T[Row],r) 
L4839: (T[Row],r) 
L4840: (Tm[Row],r) 
L4841: (T[I]=,w) 
L4842: (T[pElement->Row]=,w) (Tm[pElement->Row],r) 
L4843: (T[I]=,w) 
}
array table
-----------------------------------------------
Tm -> [('[Row]', 'r', 'not normalized', ['I', 'K'], 4837), ('[Row]', 'r', 'not normalized', ['I', 'K'], 4840), ('[pElement->Row]', 'r', 'not normalized', ['I', 'K'], 4842)]
LDEs formed:0

T -> [('[I]', 'r', 'normalized', ['I', 'K'], 4834), ('[I]', 'r', 'normalized', ['I', 'K'], 4835), ('[I]', 'r', 'normalized', ['I', 'K'], 4836), ('[Row]', 'r', 'not normalized', ['I', 'K'], 4837), ('[Row]', 'r', 'not normalized', ['I', 'K'], 4838), ('[Row]', 'r', 'not normalized', ['I', 'K'], 4839), ('[I]', 'w', 'normalized', ['I', 'K'], 4841), ('[pElement->Row]', 'w', 'not normalized', ['I', 'K'], 4842), ('[I]', 'w', 'normalized', ['I', 'K'], 4843)]
LDEs formed:24

distinct LDEs:
Row=pElement->Row
I1=pElement->Row
pElement->Row=pElement->Row
Row=I2
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I >= 1  I--
induction variable: ['I']
{
L4844: (T[I],r) (T[pElement->Col],r) 
L4845: (T[I],r) 
L4846: (T[I],r) 
	loop info: K = Size  K > 0  K--
	induction variable: ['I', 'K']
		}
 }
array table
-----------------------------------------------
T -> [('[I]', 'r', 'normalized', ['I', 'K'], 4844), ('[pElement->Col]', 'r', 'not normalized', ['I', 'K'], 4844), ('[I]', 'r', 'normalized', ['I', 'K'], 4845), ('[I]', 'r', 'normalized', ['I', 'K'], 4846)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4847: (T[pElement->Col],r) (T[I],r) 
L4848: (T[I],r) 
L4849: (T[I],r) 
	loop info: K = Size  K > 0  K--
	induction variable: ['I', 'K']
		}
 }
array table
-----------------------------------------------
T -> [('[pElement->Col]', 'r', 'not normalized', ['I', 'K'], 4847), ('[I]', 'r', 'normalized', ['I', 'K'], 4847), ('[I]', 'r', 'normalized', ['I', 'K'], 4848), ('[I]', 'r', 'normalized', ['I', 'K'], 4849)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Size  I >= 1  I--
induction variable: ['I']
{
L4850: (T[I],r) (T[pElement->Row],r) 
L4851: (T[I],r) 
L4852: (T[I],r) 
L4853: (T[I],r) 
	loop info: K = Size  K > 0  K--
	induction variable: ['I', 'K']
		}
 }
array table
-----------------------------------------------
T -> [('[I]', 'r', 'normalized', ['I', 'K'], 4850), ('[pElement->Row]', 'r', 'not normalized', ['I', 'K'], 4850), ('[I]', 'r', 'normalized', ['I', 'K'], 4851), ('[I]', 'r', 'normalized', ['I', 'K'], 4852), ('[I]', 'r', 'normalized', ['I', 'K'], 4853)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Matrix->Size  I++
induction variable: ['I']
{
L4854: (FirstInRow[I],r) 
L4855: (FirstInCol[I],r) 
}
array table
-----------------------------------------------
FirstInCol -> [('[I]', 'r', 'normalized', ['I'], 4855)]
LDEs formed:0

FirstInRow -> [('[I]', 'r', 'normalized', ['I'], 4854)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Matrix->Size  I++
induction variable: ['I']
{
L4855: (FirstInRow[I],r) 
L4856: (FirstInCol[I],r) 
}
array table
-----------------------------------------------
FirstInCol -> [('[I]', 'r', 'normalized', ['I'], 4856)]
LDEs formed:0

FirstInRow -> [('[I]', 'r', 'normalized', ['I'], 4855)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: Step = 2  Step <= Size  Step++
induction variable: ['Step']
{
L4856: (FirstInCol[Step],r) 
L4857: (Dest[pElement->Row]=,w) 
L4858: (FirstInCol[Step],r) 
L4859: (Diag[pColumn->Row],r) 
L4860: (Dest[pColumn->Row]*,r) 
L4861: (Dest[pElement->Row]-=,w) 
L4862: (Diag[Step]-,r) 
L4863: (Dest[pElement->Row],r) 
L4864: (Dest[Step]==,r) 
L4865: (FirstInCol[Step],r) 
L4866: (pDest[pElement->Row]=,w) 
L4867: (FirstInCol[Step],r) 
L4868: (Diag[pColumn->Row],r) 
L4869: (pDest[pColumn->Row]*=,w) 
L4870: (pDest[pElement->Row]-=,w) 
L4871: (Diag[Step]-,r) 
}
array table
-----------------------------------------------
Dest -> [('[pElement->Row]', 'w', 'not normalized', ['Step'], 4857), ('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4860), ('[pElement->Row]', 'w', 'not normalized', ['Step'], 4861), ('[pElement->Row]', 'r', 'not normalized', ['Step'], 4863), ('[Step]', 'r', 'normalized', ['Step'], 4864)]
LDEs formed:9

Diag -> [('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4859), ('[Step]', 'r', 'normalized', ['Step'], 4862), ('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4868), ('[Step]', 'r', 'normalized', ['Step'], 4871)]
LDEs formed:0

FirstInCol -> [('[Step]', 'r', 'normalized', ['Step'], 4856), ('[Step]', 'r', 'normalized', ['Step'], 4858), ('[Step]', 'r', 'normalized', ['Step'], 4865), ('[Step]', 'r', 'normalized', ['Step'], 4867)]
LDEs formed:0

pDest -> [('[pElement->Row]', 'w', 'not normalized', ['Step'], 4866), ('[pColumn->Row]', 'w', 'not normalized', ['Step'], 4869), ('[pElement->Row]', 'w', 'not normalized', ['Step'], 4870)]
LDEs formed:6

distinct LDEs:
pColumn->Row=pColumn->Row
pElement->Row=pColumn->Row
pElement->Row=pElement->Row
pElement->Row=Step2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: Step = 2  Step <= Size  Step++
induction variable: ['Step']
{
L4871: (FirstInCol[Step],r) 
L4872: (Dest[pElement->Row]=,w) 
L4873: (FirstInCol[Step],r) 
L4874: (Diag[pColumn->Row],r) 
L4875: (Dest[pColumn->Row],r) 
L4876: (Dest[pElement->Row],r) 
L4877: (Diag[Step]-,r) 
L4878: (Dest[pElement->Row],r) 
L4879: (Dest[Step],r) 
L4880: (Diag[Step],r) 
L4881: (FirstInCol[Step],r) 
L4882: (pDest[pElement->Row]=,w) 
L4883: (FirstInCol[Step],r) 
L4884: (Diag[pColumn->Row],r) 
L4885: (pDest[pColumn->Row],r) 
L4886: (pDest[pColumn->Row],r) 
L4887: (pDest[pElement->Row],r) 
L4888: (Diag[Step],r) 
}
array table
-----------------------------------------------
Dest -> [('[pElement->Row]', 'w', 'not normalized', ['Step'], 4872), ('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4875), ('[pElement->Row]', 'r', 'not normalized', ['Step'], 4876), ('[pElement->Row]', 'r', 'not normalized', ['Step'], 4878), ('[Step]', 'r', 'normalized', ['Step'], 4879)]
LDEs formed:5

Diag -> [('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4874), ('[Step]', 'r', 'normalized', ['Step'], 4877), ('[Step]', 'r', 'normalized', ['Step'], 4880), ('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4884), ('[Step]', 'r', 'normalized', ['Step'], 4888)]
LDEs formed:0

FirstInCol -> [('[Step]', 'r', 'normalized', ['Step'], 4871), ('[Step]', 'r', 'normalized', ['Step'], 4873), ('[Step]', 'r', 'normalized', ['Step'], 4881), ('[Step]', 'r', 'normalized', ['Step'], 4883)]
LDEs formed:0

pDest -> [('[pElement->Row]', 'w', 'not normalized', ['Step'], 4882), ('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4885), ('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4886), ('[pElement->Row]', 'r', 'not normalized', ['Step'], 4887)]
LDEs formed:4

distinct LDEs:
pElement->Row=pColumn->Row
pElement->Row=pElement->Row
pElement->Row=Step2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: Step = 1  Step <= Size  Step++
induction variable: ['Step']
{
L4888: (FirstInCol[Step],r) 
L4889: (Nc[Step]++,w) 
L4890: (FirstInCol[Step],r) 
L4891: (Diag[pColumn->Row],r) 
L4892: (Nm[Step]++,w) 
L4893: (No[Step]++,w) 
}
array table
-----------------------------------------------
No -> [('[Step]', 'w', 'normalized', ['Step'], 4893)]
LDEs formed:1

Diag -> [('[pColumn->Row]', 'r', 'not normalized', ['Step'], 4891)]
LDEs formed:0

Nc -> [('[Step]', 'w', 'normalized', ['Step'], 4889)]
LDEs formed:1

FirstInCol -> [('[Step]', 'r', 'normalized', ['Step'], 4888), ('[Step]', 'r', 'normalized', ['Step'], 4890)]
LDEs formed:0

Nm -> [('[Step]', 'w', 'normalized', ['Step'], 4892)]
LDEs formed:1

distinct LDEs:
Step1=Step2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: Step = 1  Step <= Size  Step++
induction variable: ['Step']
{
L4893: (DoRealDirect[Step]=,w) (Nm[Step]+,r) (No[Step],r) (Nc[Step]-,r) (Nm[Step],r) 
L4894: (DoCmplxDirect[Step]=,w) 
L4895: (DoRealDirect[Step]=,w) (Nm[Step]+,r) (No[Step],r) (Nc[Step]-,r) (Nm[Step],r) 
L4896: (DoCmplxDirect[Step]=,w) (Nm[Step]+,r) (No[Step],r) (Nc[Step]-,r) (Nm[Step],r) 
L4897: (DoRealDirect[Step]=,w) (Nm[Step]+,r) (No[Step],r) (Nc[Step]-,r) (Nm[Step],r) 
L4898: (DoCmplxDirect[Step]=,w) (Nm[Step]+,r) (No[Step],r) (Nc[Step]-,r) (Nm[Step],r) 
}
array table
-----------------------------------------------
DoCmplxDirect -> [('[Step]', 'w', 'normalized', ['Step'], 4894), ('[Step]', 'w', 'normalized', ['Step'], 4896), ('[Step]', 'w', 'normalized', ['Step'], 4898)]
LDEs formed:6

Nc -> [('[Step]', 'r', 'normalized', ['Step'], 4893), ('[Step]', 'r', 'normalized', ['Step'], 4895), ('[Step]', 'r', 'normalized', ['Step'], 4896), ('[Step]', 'r', 'normalized', ['Step'], 4897), ('[Step]', 'r', 'normalized', ['Step'], 4898)]
LDEs formed:0

DoRealDirect -> [('[Step]', 'w', 'normalized', ['Step'], 4893), ('[Step]', 'w', 'normalized', ['Step'], 4895), ('[Step]', 'w', 'normalized', ['Step'], 4897)]
LDEs formed:6

Nm -> [('[Step]', 'r', 'normalized', ['Step'], 4893), ('[Step]', 'r', 'normalized', ['Step'], 4893), ('[Step]', 'r', 'normalized', ['Step'], 4895), ('[Step]', 'r', 'normalized', ['Step'], 4895), ('[Step]', 'r', 'normalized', ['Step'], 4896), ('[Step]', 'r', 'normalized', ['Step'], 4896), ('[Step]', 'r', 'normalized', ['Step'], 4897), ('[Step]', 'r', 'normalized', ['Step'], 4897), ('[Step]', 'r', 'normalized', ['Step'], 4898), ('[Step]', 'r', 'normalized', ['Step'], 4898)]
LDEs formed:0

No -> [('[Step]', 'r', 'normalized', ['Step'], 4893), ('[Step]', 'r', 'normalized', ['Step'], 4895), ('[Step]', 'r', 'normalized', ['Step'], 4896), ('[Step]', 'r', 'normalized', ['Step'], 4897), ('[Step]', 'r', 'normalized', ['Step'], 4898)]
LDEs formed:0

distinct LDEs:
Step1=Step2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Step  I <= Size  I++
induction variable: ['I']
{
L4899: (FirstInRow[I],r) 
L4900: (IntToExtRowMap[I],r) 
L4901: (RHS[ExtRow],r) 
L4902: (RHS[2*ExtRow],r) (RHS[2*ExtRow+1],r) 
L4903: (RHS[I],r) 
L4904: (MarkowitzRow[I]=,w) 
}
array table
-----------------------------------------------
MarkowitzRow -> [('[I]', 'w', 'normalized', ['I'], 4904)]
LDEs formed:1

IntToExtRowMap -> [('[I]', 'r', 'normalized', ['I'], 4900)]
LDEs formed:0

RHS -> [('[ExtRow]', 'r', 'not normalized', ['I'], 4901), ('[2*ExtRow]', 'r', 'not normalized', ['I'], 4902), ('[2*ExtRow+1]', 'r', 'not normalized', ['I'], 4902), ('[I]', 'r', 'normalized', ['I'], 4903)]
LDEs formed:0

FirstInRow -> [('[I]', 'r', 'normalized', ['I'], 4899)]
LDEs formed:0

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Step  I <= Size  I++
induction variable: ['I']
{
L4900: (FirstInCol[I],r) 
L4901: (MarkowitzCol[I]=,w) 
}
array table
-----------------------------------------------
MarkowitzCol -> [('[I]', 'w', 'normalized', ['I'], 4901)]
LDEs formed:1

FirstInCol -> [('[I]', 'r', 'normalized', ['I'], 4900)]
LDEs formed:0

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L4901: (Diag[I],r) 
L4902: (FirstInRow[I],r) 
L4903: (FirstInCol[I],r) 
L4904: (TiedElements[0]=,w) 
L4905: (TiedElements[++NumberOfTies]=,w) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'not normalized', [], 4901)]
LDEs formed:0

TiedElements -> [('[0]', 'w', 'normalized', [], 4904), ('[++NumberOfTies]', 'w', 'not normalized', [], 4905)]
LDEs formed:3

FirstInCol -> [('[I]', 'r', 'not normalized', [], 4903)]
LDEs formed:0

FirstInRow -> [('[I]', 'r', 'not normalized', [], 4902)]
LDEs formed:0

distinct LDEs:
++NumberOfTies=++NumberOfTies
0=0
0=++NumberOfTies
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   
induction variable: []
{
L4903: (Diag[I],r) 
L4904: (FirstInRow[I],r) 
L4905: (FirstInCol[I],r) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'not normalized', [], 4903)]
LDEs formed:0

FirstInCol -> [('[I]', 'r', 'not normalized', [], 4905)]
LDEs formed:0

FirstInRow -> [('[I]', 'r', 'not normalized', [], 4904)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: J = Size+1  J > Step  J--
induction variable: ['J']
{
L4905: (Diag[I],r) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'not normalized', ['J'], 4905)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = Step  I <= Size  I++
induction variable: ['I']
{
L4906: (MarkowitzRow[pElement->Row]*,r) 
L4907: (MarkowitzCol[pElement->Col],r) 
}
array table
-----------------------------------------------
MarkowitzRow -> [('[pElement->Row]', 'r', 'not normalized', ['I'], 4906)]
LDEs formed:0

MarkowitzCol -> [('[pElement->Col]', 'r', 'not normalized', ['I'], 4907)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: ColPtr = pPivot->NextInCol  ColPtr != NULL  ColPtr = ColPtr->NextInCol
induction variable: ['ColPtr']
{
L4908: (--MarkoRow[Row],w) 
L4909: (MarkoRow[Row],r) (MarkoCol[Row],r) 
L4910: (MarkoCol[Row],r) (MarkoRow[Row],r) 
L4911: (MarkoCol[Row]*,r) (MarkoRow[Row],r) 
L4912: (MarkowitzProd[Row]=,w) 
L4913: (MarkowitzProd[Row]=,w) 
L4914: (MarkowitzProd[Row]=,w) (MarkoRow[Row]*,r) (MarkoCol[Row],r) 
L4915: (MarkoRow[Row]==,r) 
}
array table
-----------------------------------------------
MarkoCol -> [('[Row]', 'r', 'not normalized', ['ColPtr'], 4909), ('[Row]', 'r', 'not normalized', ['ColPtr'], 4910), ('[Row]', 'r', 'not normalized', ['ColPtr'], 4911), ('[Row]', 'r', 'not normalized', ['ColPtr'], 4914)]
LDEs formed:0

MarkoRow -> [('[Row]', 'w', 'not normalized', ['ColPtr'], 4908), ('[Row]', 'r', 'not normalized', ['ColPtr'], 4909), ('[Row]', 'r', 'not normalized', ['ColPtr'], 4910), ('[Row]', 'r', 'not normalized', ['ColPtr'], 4911), ('[Row]', 'r', 'not normalized', ['ColPtr'], 4914), ('[Row]', 'r', 'not normalized', ['ColPtr'], 4915)]
LDEs formed:6

MarkowitzProd -> [('[Row]', 'w', 'not normalized', ['ColPtr'], 4912), ('[Row]', 'w', 'not normalized', ['ColPtr'], 4913), ('[Row]', 'w', 'not normalized', ['ColPtr'], 4914)]
LDEs formed:6

distinct LDEs:
Row=Row
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: RowPtr = pPivot->NextInRow  RowPtr != NULL  RowPtr = RowPtr->NextInRow
induction variable: ['RowPtr']
{
L4915: (--MarkoCol[Col],w) 
L4916: (MarkoRow[Col],r) (MarkoCol[Col],r) 
L4917: (MarkoCol[Col],r) (MarkoRow[Col],r) 
L4918: (MarkoCol[Col]*,r) (MarkoRow[Col],r) 
L4919: (MarkowitzProd[Col]=,w) 
L4920: (MarkowitzProd[Col]=,w) 
L4921: (MarkowitzProd[Col]=,w) (MarkoRow[Col]*,r) (MarkoCol[Col],r) 
L4922: (MarkoCol[Col]==,r) (MarkoRow[Col],r) 
}
array table
-----------------------------------------------
MarkoCol -> [('[Col]', 'w', 'not normalized', ['RowPtr'], 4915), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4916), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4917), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4918), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4921), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4922)]
LDEs formed:6

MarkoRow -> [('[Col]', 'r', 'not normalized', ['RowPtr'], 4916), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4917), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4918), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4921), ('[Col]', 'r', 'not normalized', ['RowPtr'], 4922)]
LDEs formed:0

MarkowitzProd -> [('[Col]', 'w', 'not normalized', ['RowPtr'], 4919), ('[Col]', 'w', 'not normalized', ['RowPtr'], 4920), ('[Col]', 'w', 'not normalized', ['RowPtr'], 4921)]
LDEs formed:6

distinct LDEs:
Col=Col
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: Col = Matrix->Size  Col >= 1  Col--
induction variable: ['Col']
{
L4922: (FirstInCol[Col],r) 
L4923: (FirstInRowArray[pElement->Row],r) 
}
array table
-----------------------------------------------
FirstInRowArray -> [('[pElement->Row]', 'r', 'not normalized', ['Col'], 4923)]
LDEs formed:0

FirstInCol -> [('[Col]', 'r', 'normalized', ['Col'], 4922)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = OldAllocatedSize+1  I <= NewSize  I++
induction variable: ['I']
{
L4923: (IntToExtRowMap[I]=,w) 
L4924: (Diag[I]=,w) 
L4925: (FirstInRow[I]=,w) 
L4926: (FirstInCol[I]=,w) 
}
array table
-----------------------------------------------
IntToExtRowMap -> [('[I]', 'w', 'normalized', ['I'], 4923)]
LDEs formed:1

FirstInRow -> [('[I]', 'w', 'normalized', ['I'], 4925)]
LDEs formed:1

FirstInCol -> [('[I]', 'w', 'normalized', ['I'], 4926)]
LDEs formed:1

Diag -> [('[I]', 'w', 'normalized', ['I'], 4924)]
LDEs formed:1

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = OldAllocatedSize+1  I <= NewSize  I++
induction variable: ['I']
{
L4925: (ExtToIntColMap[I]=,w) 
}
array table
-----------------------------------------------
ExtToIntColMap -> [('[I]', 'w', 'normalized', ['I'], 4925)]
LDEs formed:1

distinct LDEs:
I1=I2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: J = Matrix->Size  J > 0  J--
induction variable: ['J']
{
L4926: (IntToExtColMap[J],r) 
L4927: (IntToExtRowMap[pElement->Row],r) 
}
array table
-----------------------------------------------
IntToExtRowMap -> [('[pElement->Row]', 'r', 'not normalized', ['J'], 4927)]
LDEs formed:0

IntToExtColMap -> [('[J]', 'r', 'normalized', ['J'], 4926)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4927: (IntToExtColMap[I],r) 
}
array table
-----------------------------------------------
IntToExtColMap -> [('[I]', 'r', 'normalized', ['I'], 4927)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: J = 1, I = 1  I <= Top_  I++
induction variable: ['I']
{
L4928: (PrintOrdToIntRowMap[ J++ ]=,w) (PrintOrdToIntRowMap[ I ],r) 
}
array table
-----------------------------------------------
PrintOrdToIntRowMap -> [('[ J++ ]', 'w', 'not normalized', ['I'], 4928), ('[ I ]', 'r', 'normalized', ['I'], 4928)]
LDEs formed:2

distinct LDEs:
 J++ = I2 
 J++ = J++ 
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: J = 1, I = 1  I <= Top_  I++
induction variable: ['I']
{
L4929: (PrintOrdToIntColMap[ J++ ]=,w) (PrintOrdToIntColMap[ I ],r) 
}
array table
-----------------------------------------------
PrintOrdToIntColMap -> [('[ J++ ]', 'w', 'not normalized', ['I'], 4929), ('[ I ]', 'r', 'normalized', ['I'], 4929)]
LDEs formed:2

distinct LDEs:
 J++ = I2 
 J++ = J++ 
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = StartCol  I <= StopCol  I++
induction variable: ['I']
{
L4930: (PrintOrdToIntColMap[I],r) 
L4931: (IntToExtColMap[ Col ],r) 
}
array table
-----------------------------------------------
PrintOrdToIntColMap -> [('[I]', 'r', 'normalized', ['I'], 4930)]
LDEs formed:0

IntToExtColMap -> [('[ Col ]', 'r', 'not normalized', ['I'], 4931)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4932: (PrintOrdToIntRowMap[I],r) 
L4933: (IntToExtRowMap[ Row ],r) 
	loop info: J = StartCol  J <= StopCol  J++
	induction variable: ['I', 'J']
	{
	L4934: (PrintOrdToIntColMap[J],r) 
	L4935: (FirstInCol[Col],r) 
	L4936: (pImagElements[J - StartCol]=,w) 
	}
	loop info: J = StartCol  J <= StopCol  J++
	induction variable: ['I', 'J']
		{
		L4937: (pImagElements[J-StartCol]-,r) 
		}
 }
array table
-----------------------------------------------
PrintOrdToIntRowMap -> [('[I]', 'r', 'normalized', ['I', 'J'], 4932)]
LDEs formed:0

PrintOrdToIntColMap -> [('[J]', 'r', 'normalized', ['I', 'J'], 4934)]
LDEs formed:0

pImagElements -> [('[J - StartCol]', 'w', 'not normalized', ['I', 'J'], 4936), ('[J-StartCol]', 'r', 'not normalized', ['I', 'J'], 4937)]
LDEs formed:2

FirstInCol -> [('[Col]', 'r', 'not normalized', ['I', 'J'], 4935)]
LDEs formed:0

IntToExtRowMap -> [('[ Row ]', 'r', 'not normalized', ['I', 'J'], 4933)]
LDEs formed:0

distinct LDEs:
J1 - StartCol=J2 - StartCol
J1 - StartCol=J2-StartCol
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4934: (Diag[I],r) 
}
array table
-----------------------------------------------
Diag -> [('[I]', 'r', 'normalized', ['I'], 4934)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4935: (IntToExtRowMap[pElement->Row],r) 
L4936: (IntToExtColMap[I],r) 
}
array table
-----------------------------------------------
IntToExtRowMap -> [('[pElement->Row]', 'r', 'not normalized', ['I'], 4935)]
LDEs formed:0

IntToExtColMap -> [('[I]', 'r', 'normalized', ['I'], 4936)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4937: (IntToExtRowMap[pElement->Row],r) 
L4938: (IntToExtColMap[I],r) 
}
array table
-----------------------------------------------
IntToExtRowMap -> [('[pElement->Row]', 'r', 'not normalized', ['I'], 4937)]
LDEs formed:0

IntToExtColMap -> [('[I]', 'r', 'normalized', ['I'], 4938)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4939: (IntToExtRowMap[pElement->Row],r) 
L4940: (IntToExtColMap[I],r) 
}
array table
-----------------------------------------------
IntToExtRowMap -> [('[pElement->Row]', 'r', 'not normalized', ['I'], 4939)]
LDEs formed:0

IntToExtColMap -> [('[I]', 'r', 'normalized', ['I'], 4940)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4941: (RHS[I],r) (iRHS[I],r) 
}
array table
-----------------------------------------------
RHS -> [('[I]', 'r', 'normalized', ['I'], 4941)]
LDEs formed:0

iRHS -> [('[I]', 'r', 'normalized', ['I'], 4941)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: I = 1  I <= Size  I++
induction variable: ['I']
{
L4942: (RHS[2*I],r) (RHS[2*I+1],r) 
}
array table
-----------------------------------------------
RHS -> [('[2*I]', 'r', 'normalized', ['I'], 4942), ('[2*I+1]', 'r', 'normalized', ['I'], 4942)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < i1  ++k
induction variable: ['k']
{
L4943: (cmntest.b[k]=,w) (a[k],r) 
}
array table
-----------------------------------------------
a -> [('[k]', 'r', 'normalized', ['k'], 4943)]
LDEs formed:0

cmntest.b -> [('[k]', 'w', 'normalized', ['k'], 4943)]
LDEs formed:1

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < i1  ++k
induction variable: ['k']
{
L4944: (c[k]=,w) (cmntest.b[k],r) 
}
array table
-----------------------------------------------
c -> [('[k]', 'w', 'normalized', ['k'], 4944)]
LDEs formed:1

cmntest.b -> [('[k]', 'r', 'normalized', ['k'], 4944)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L4945: (c[k]=,w) (a[k]+,r) (b[k],r) 
}
array table
-----------------------------------------------
a -> [('[k]', 'r', 'normalized', ['k'], 4945)]
LDEs formed:0

c -> [('[k]', 'w', 'normalized', ['k'], 4945)]
LDEs formed:1

b -> [('[k]', 'r', 'normalized', ['k'], 4945)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L4946: (c[k]=,w) (a[k]+,r) (b[k],r) 
}
array table
-----------------------------------------------
a -> [('[k]', 'r', 'normalized', ['k'], 4946)]
LDEs formed:0

c -> [('[k]', 'w', 'normalized', ['k'], 4946)]
LDEs formed:1

b -> [('[k]', 'r', 'normalized', ['k'], 4946)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < *n  ++k
induction variable: ['k']
{
L4947: (c[k]=,w) (a[k],r) (b[k],r) 
}
array table
-----------------------------------------------
a -> [('[k]', 'r', 'normalized', ['k'], 4947)]
LDEs formed:0

c -> [('[k]', 'w', 'normalized', ['k'], 4947)]
LDEs formed:1

b -> [('[k]', 'r', 'normalized', ['k'], 4947)]
LDEs formed:0

distinct LDEs:
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < LastInterf   i++
induction variable: ['i']
{
L4948: (DynInterf[i].name,r) 
L4949: (DynInterf[i].Nshared,r) 
}
array table
-----------------------------------------------
DynInterf -> [('[i]', 'r', 'normalized', ['i'], 4948), ('[i]', 'r', 'normalized', ['i'], 4949)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < LastInterf   i++
induction variable: ['i']
{
L4950: (DynInterf[i].ok==,r) 
}
array table
-----------------------------------------------
DynInterf -> [('[i]', 'r', 'normalized', ['i'], 4950)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0 i < sizefcts  i++
induction variable: ['i']
{
L4951: (id[nsiz],r) 
L4952: (fcts[i],r) (fcts[i],r) 
L4953: (fcts[i],r) (fcts[i],r) 
}
array table
-----------------------------------------------
fcts -> [('[i]', 'r', 'normalized', ['i'], 4952), ('[i]', 'r', 'normalized', ['i'], 4952), ('[i]', 'r', 'normalized', ['i'], 4953), ('[i]', 'r', 'normalized', ['i'], 4953)]
LDEs formed:0

id -> [('[nsiz]', 'r', 'not normalized', ['i'], 4951)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i= 0   i < MaxInterfaces   i++
induction variable: ['i']
{
L4952: (DynInterf[i].name,r) 
L4953: (DynInterf[i].func=,w) 
L4954: (DynInterf[i].Nshared=,w) 
L4955: (DynInterf[i].ok=,w) 
}
array table
-----------------------------------------------
DynInterf -> [('[i]', 'r', 'normalized', ['i'], 4952), ('[i]', 'w', 'normalized', ['i'], 4953), ('[i]', 'w', 'normalized', ['i'], 4954), ('[i]', 'w', 'normalized', ['i'], 4955)]
LDEs formed:9

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < LastInterf   i++ 
induction variable: ['i']
{
L4956: (DynInterf[i].Nshared==,r) 
L4957: (DynInterf[i].ok=,w) 
}
array table
-----------------------------------------------
DynInterf -> [('[i]', 'r', 'normalized', ['i'], 4956), ('[i]', 'w', 'normalized', ['i'], 4957)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i= MaxInterfaces   i < newMaxInterfaces   i++
induction variable: ['i']
{
L4958: (DynInterf[i].name,r) 
L4959: (DynInterf[i].func=,w) 
L4960: (DynInterf[i].Nshared=,w) 
L4961: (DynInterf[i].ok=,w) 
}
array table
-----------------------------------------------
DynInterf -> [('[i]', 'r', 'normalized', ['i'], 4958), ('[i]', 'w', 'normalized', ['i'], 4959), ('[i]', 'w', 'normalized', ['i'], 4960), ('[i]', 'w', 'normalized', ['i'], 4961)]
LDEs formed:9

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizesubnamesarray   i++
induction variable: ['i']
{
L4962: (subnamesarray[i],r) 
L4963: (subnamesarray[i],r) 
}
array table
-----------------------------------------------
subnamesarray -> [('[i]', 'r', 'normalized', ['i'], 4962), ('[i]', 'r', 'normalized', ['i'], 4963)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < Nshared   i++
induction variable: ['i']
{
L4964: (hd[i].ok==,r) 
L4965: (ListId[(*sizeList) - 1]=,w) 
L4966: (ListId[(*sizeList) - 1]=,w) 
}
array table
-----------------------------------------------
ListId -> [('[(*sizeList) - 1]', 'w', 'not normalized', ['i'], 4965), ('[(*sizeList) - 1]', 'w', 'not normalized', ['i'], 4966)]
LDEs formed:3

hd -> [('[i]', 'r', 'normalized', ['i'], 4964)]
LDEs formed:0

distinct LDEs:
(*sizeList) - 1=(*sizeList) - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = NEpoints - 1   i >= 0   i--
induction variable: ['i']
{
L4965: (EP[i].name,r) 
L4966: (EP[i].name,r) 
L4967: (EP[i].name,r) 
L4968: (NamesOfFunctions[(*sizearray) - 1]=,w) 
}
array table
-----------------------------------------------
EP -> [('[i]', 'r', 'normalized', ['i'], 4965), ('[i]', 'r', 'normalized', ['i'], 4966), ('[i]', 'r', 'normalized', ['i'], 4967)]
LDEs formed:0

NamesOfFunctions -> [('[(*sizearray) - 1]', 'w', 'not normalized', ['i'], 4968)]
LDEs formed:1

distinct LDEs:
(*sizearray) - 1=(*sizearray) - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < ENTRYMAX   i++
induction variable: ['i']
{
L4969: (hd[i].ok=,w) 
L4970: (hd[i].shl=,w) (EP[i].Nshared=,w) 
}
array table
-----------------------------------------------
EP -> [('[i]', 'w', 'normalized', ['i'], 4970)]
LDEs formed:1

hd -> [('[i]', 'w', 'normalized', ['i'], 4969), ('[i]', 'w', 'normalized', ['i'], 4970)]
LDEs formed:3

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = NEpoints - 1   i >= 0   i--
induction variable: ['i']
{
L4971: (EP[i].name,r) 
L4972: (EP[i].epoint,r) 
L4973: (EP[i].Nshared,r) 
}
array table
-----------------------------------------------
EP -> [('[i]', 'r', 'normalized', ['i'], 4971), ('[i]', 'r', 'normalized', ['i'], 4972), ('[i]', 'r', 'normalized', ['i'], 4973)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = NEpoints - 1   i >= 0   i--
induction variable: ['i']
{
L4974: (EP[i].name,r) (EP[i].Nshared==,r) 
}
array table
-----------------------------------------------
EP -> [('[i]', 'r', 'normalized', ['i'], 4974), ('[i]', 'r', 'normalized', ['i'], 4974)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < Nshared   i++
induction variable: ['i']
{
L4975: (hd[i].ok==,r) 
}
array table
-----------------------------------------------
hd -> [('[i]', 'r', 'normalized', ['i'], 4975)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = NEpoints - 1   i >= 0   i--
induction variable: ['i']
{
L4976: (EP[i].name,r) (EP[i].Nshared,r) 
}
array table
-----------------------------------------------
EP -> [('[i]', 'r', 'normalized', ['i'], 4976), ('[i]', 'r', 'normalized', ['i'], 4976)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = 0   i < Nshared   i++ 
induction variable: ['i']
{
L4977: (hd[i].ok==,r) 
L4978: (hd[i].shl=,w) 
L4979: (hd[i].ok=,w) 
}
array table
-----------------------------------------------
hd -> [('[i]', 'r', 'normalized', ['i'], 4977), ('[i]', 'w', 'normalized', ['i'], 4978), ('[i]', 'w', 'normalized', ['i'], 4979)]
LDEs formed:5

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i = NEpoints - 1   i >= 0   i--
induction variable: ['i']
{
L4980: (EP[i].Nshared==,r) 
	loop info:  j = i   j <= NEpoints - 2   j++ 
	induction variable: ['i', 'j']
		{
		L4981: (EP[j].epoint=,w) (EP[j + 1].epoint,r) 
		L4982: (EP[j].Nshared=,w) (EP[j + 1].Nshared,r) 
		L4983: (EP[j].name,r) (EP[j + 1].name,r) 
		}
 }
array table
-----------------------------------------------
EP -> [('[i]', 'r', 'normalized', ['i', 'j'], 4980), ('[j]', 'w', 'normalized', ['i', 'j'], 4981), ('[j + 1]', 'r', 'normalized', ['i', 'j'], 4981), ('[j]', 'w', 'normalized', ['i', 'j'], 4982), ('[j + 1]', 'r', 'normalized', ['i', 'j'], 4982), ('[j]', 'r', 'normalized', ['i', 'j'], 4983), ('[j + 1]', 'r', 'normalized', ['i', 'j'], 4983)]
LDEs formed:13

distinct LDEs:
j1=j2
i1=j2
j1=j2 + 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m1*n1  i++
induction variable: ['i']
{
L4984: (params[i],r) 
}
array table
-----------------------------------------------
params -> [('[i]', 'r', 'normalized', ['i'], 4984)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < nbRowDefaultValues * nbColDefaultValues  K++
induction variable: ['K']
{
L4985: (defaultValuesInt[K]=,w) (defaultValues[K],r) 
}
array table
-----------------------------------------------
defaultValues -> [('[K]', 'r', 'normalized', ['K'], 4985)]
LDEs formed:0

defaultValuesInt -> [('[K]', 'w', 'normalized', ['K'], 4985)]
LDEs formed:1

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: K = 0  K < nbRowDefaultValues * nbColDefaultValues  K++
induction variable: ['K']
{
L4986: (userValueDouble[K]=,w) (userValue[K],r) 
}
array table
-----------------------------------------------
userValueDouble -> [('[K]', 'w', 'normalized', ['K'], 4986)]
LDEs formed:1

userValue -> [('[K]', 'r', 'normalized', ['K'], 4986)]
LDEs formed:0

distinct LDEs:
K1=K2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: iMenuitemIndex = 0  iMenuitemIndex < iRows * iCols  iMenuitemIndex++
induction variable: ['iMenuitemIndex']
{
L4987: (pstAllMenuLabels[iMenuitemIndex],r) 
}
array table
-----------------------------------------------
pstAllMenuLabels -> [('[iMenuitemIndex]', 'r', 'normalized', ['iMenuitemIndex'], 4987)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: inputIndex = 0  inputIndex < NBPROPERTIES  inputIndex++
induction variable: ['inputIndex']
{
L4988: (propertiesValuesIndices[inputIndex]=,w) 
}
array table
-----------------------------------------------
propertiesValuesIndices -> [('[inputIndex]', 'w', 'normalized', ['inputIndex'], 4988)]
LDEs formed:1

distinct LDEs:
inputIndex1=inputIndex2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: inputIndex = beginIndex  inputIndex < Rhs  inputIndex = inputIndex + 2
induction variable: ['inputIndex']
{
	loop info: k = 0  k < NBPROPERTIES  k++
	induction variable: ['inputIndex', 'k']
		{
		L4989: (propertiesNames[k],r) 
		L4990: (propertyPart[strlen(propertyName)]=,w) 
		L4991: (propertiesValuesIndices[k]=,w) 
		}
 }
array table
-----------------------------------------------
propertiesNames -> [('[k]', 'r', 'normalized', ['inputIndex', 'k'], 4989)]
LDEs formed:0

propertyPart -> [('[strlen(propertyName)]', 'w', 'not normalized', ['inputIndex', 'k'], 4990)]
LDEs formed:1

propertiesValuesIndices -> [('[k]', 'w', 'normalized', ['inputIndex', 'k'], 4991)]
LDEs formed:1

distinct LDEs:
strlen(propertyName)=strlen(propertyName)
k1=k2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: inputIndex = 1  inputIndex < NBPROPERTIES  inputIndex++
induction variable: ['inputIndex']
{
L4992: (propertiesValuesIndices[inputIndex],r) 
L4993: (propertiesValuesIndices[inputIndex],r) 
L4994: (propertiesValuesIndices[inputIndex],r) 
L4995: (propertiesNames[inputIndex],r) 
L4996: (propertiesValuesIndices[inputIndex],r) 
L4997: (propertiesValuesIndices[inputIndex],r) 
L4998: (propertiesNames[inputIndex],r) 
L4999: (propertiesValuesIndices[inputIndex],r) 
L5000: (propertiesNames[inputIndex],r) 
L5001: (propertiesValuesIndices[inputIndex],r) 
L5002: (propertiesNames[inputIndex],r) 
L5003: (propertiesValuesIndices[inputIndex],r) 
L5004: (propertiesNames[inputIndex],r) 
L5005: (propertiesNames[inputIndex],r) 
}
array table
-----------------------------------------------
propertiesNames -> [('[inputIndex]', 'r', 'normalized', ['inputIndex'], 4995), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 4998), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 5000), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 5002), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 5004), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 5005)]
LDEs formed:0

propertiesValuesIndices -> [('[inputIndex]', 'r', 'normalized', ['inputIndex'], 4992), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 4993), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 4994), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 4996), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 4997), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 4999), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 5001), ('[inputIndex]', 'r', 'normalized', ['inputIndex'], 5003)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m2  i++
induction variable: ['i']
{
	loop info: j = 0  j < n2  j++
	induction variable: ['i', 'j']
	{
	L5004: (Str[j * m2 + i],r) 
	L5005: (buffer[i * n2 + j]=,w) (Str[j * m2 + i],r) 
	}
 }
array table
-----------------------------------------------
buffer -> [('[i * n2 + j]', 'w', 'not normalized', ['i', 'j'], 5005)]
LDEs formed:1

Str -> [('[j * m2 + i]', 'r', 'not normalized', ['i', 'j'], 5004), ('[j * m2 + i]', 'r', 'not normalized', ['i', 'j'], 5005)]
LDEs formed:0

distinct LDEs:
i1 * n2 + j1=i2 * n2 + j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < m2  i++
induction variable: ['i']
{
	loop info: j = 0  j < n2  j++
	induction variable: ['i', 'j']
	{
	L5006: (buffer[l2++],r) 
	}
 }
array table
-----------------------------------------------
buffer -> [('[l2++]', 'r', 'not normalized', ['i', 'j'], 5006)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iColsA  i++
induction variable: ['i']
{
L5007: (pdblFinalAlphaReal[i]=,w) (pdblFinalAlphaReal[i]/,r) (pdblFinalBeta[i],r) 
L5008: (pdblFinalAlphaImg[i]=,w) (pdblFinalAlphaImg[i]/,r) (pdblFinalBeta[i],r) 
}
array table
-----------------------------------------------
pdblFinalAlphaReal -> [('[i]', 'w', 'normalized', ['i'], 5007), ('[i]', 'r', 'normalized', ['i'], 5007)]
LDEs formed:2

pdblFinalBeta -> [('[i]', 'r', 'normalized', ['i'], 5007), ('[i]', 'r', 'normalized', ['i'], 5008)]
LDEs formed:0

pdblFinalAlphaImg -> [('[i]', 'w', 'normalized', ['i'], 5008), ('[i]', 'r', 'normalized', ['i'], 5008)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: index = 0  index < size  index++
induction variable: ['index']
{
L5009: (values[index],r) 
}
array table
-----------------------------------------------
values -> [('[index]', 'r', 'normalized', ['index'], 5009)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < iColsA  i++
induction variable: ['i']
{
L5010: (pdblFinalAlphaReal[i]=,w) (pdblFinalAlphaReal[i]/,r) (pdblFinalBeta[i],r) 
L5011: (pdblFinalAlphaImg[i]=,w) (pdblFinalAlphaImg[i]/,r) (pdblFinalBeta[i],r) 
}
array table
-----------------------------------------------
pdblFinalAlphaReal -> [('[i]', 'w', 'normalized', ['i'], 5010), ('[i]', 'r', 'normalized', ['i'], 5010)]
LDEs formed:2

pdblFinalBeta -> [('[i]', 'r', 'normalized', ['i'], 5010), ('[i]', 'r', 'normalized', ['i'], 5011)]
LDEs formed:0

pdblFinalAlphaImg -> [('[i]', 'w', 'normalized', ['i'], 5011), ('[i]', 'r', 'normalized', ['i'], 5011)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows   i++
induction variable: ['i']
{
L5012: (EVRealTarget[ij]=,w) (EVRealSource[ij],r) 
L5013: (EVImgTarget[ij]=,w) 
}
array table
-----------------------------------------------
EVRealTarget -> [('[ij]', 'w', 'not normalized', ['i'], 5012)]
LDEs formed:1

EVRealSource -> [('[ij]', 'r', 'not normalized', ['i'], 5012)]
LDEs formed:0

EVImgTarget -> [('[ij]', 'w', 'not normalized', ['i'], 5013)]
LDEs formed:1

distinct LDEs:
ij=ij
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows   i++
induction variable: ['i']
{
L5014: (EVRealTarget[ij]=,w) (EVRealSource[ij],r) 
L5015: (EVImgTarget[ij]=,w) (EVRealSource[ij1],r) 
L5016: (EVRealTarget[ij1]=,w) (EVRealSource[ij],r) 
L5017: (EVImgTarget[ij1]=,w) (EVRealSource[ij1],r) 
}
array table
-----------------------------------------------
EVRealTarget -> [('[ij]', 'w', 'not normalized', ['i'], 5014), ('[ij1]', 'w', 'not normalized', ['i'], 5016)]
LDEs formed:3

EVRealSource -> [('[ij]', 'r', 'not normalized', ['i'], 5014), ('[ij1]', 'r', 'not normalized', ['i'], 5015), ('[ij]', 'r', 'not normalized', ['i'], 5016), ('[ij1]', 'r', 'not normalized', ['i'], 5017)]
LDEs formed:0

EVImgTarget -> [('[ij]', 'w', 'not normalized', ['i'], 5015), ('[ij1]', 'w', 'not normalized', ['i'], 5017)]
LDEs formed:3

distinct LDEs:
ij1=ij1
ij=ij1
ij=ij
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows   i++
induction variable: ['i']
{
L5018: (EVImg[ij]=,w) (EVReal[ij1],r) 
L5019: (EVImg[ij1]=,w) (EVReal[ij1],r) 
L5020: (EVReal[ij1]=,w) (EVReal[ij],r) 
}
array table
-----------------------------------------------
EVImg -> [('[ij]', 'w', 'not normalized', ['i'], 5018), ('[ij1]', 'w', 'not normalized', ['i'], 5019)]
LDEs formed:3

EVReal -> [('[ij1]', 'r', 'not normalized', ['i'], 5018), ('[ij1]', 'r', 'not normalized', ['i'], 5019), ('[ij1]', 'w', 'not normalized', ['i'], 5020), ('[ij]', 'r', 'not normalized', ['i'], 5020)]
LDEs formed:4

distinct LDEs:
ij1=ij1
ij=ij1
ij=ij
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0   i < iRows   i++
induction variable: ['i']
{
L5021: (EVRealTarget[ii]=,w) (EVRealSource[i],r) 
L5022: (EVImgTarget[ii]=,w) (EVImgSource[i],r) 
}
array table
-----------------------------------------------
EVRealTarget -> [('[ii]', 'w', 'not normalized', ['i'], 5021)]
LDEs formed:1

EVRealSource -> [('[i]', 'r', 'normalized', ['i'], 5021)]
LDEs formed:0

EVImgSource -> [('[i]', 'r', 'normalized', ['i'], 5022)]
LDEs formed:0

EVImgTarget -> [('[ii]', 'w', 'not normalized', ['i'], 5022)]
LDEs formed:1

distinct LDEs:
ii=ii
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: icol = 0   icol < iRows   icol++
induction variable: ['icol']
{
L5023: (EVRealTarget[ii]=,w) (EVSource[icol].r,r) 
L5024: (EVImgTarget[ii]=,w) (EVSource[icol].i,r) 
}
array table
-----------------------------------------------
EVRealTarget -> [('[ii]', 'w', 'not normalized', ['icol'], 5023)]
LDEs formed:1

EVSource -> [('[icol]', 'r', 'normalized', ['icol'], 5023), ('[icol]', 'r', 'normalized', ['icol'], 5024)]
LDEs formed:0

EVImgTarget -> [('[ii]', 'w', 'not normalized', ['icol'], 5024)]
LDEs formed:1

distinct LDEs:
ii=ii
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: icol = 0   icol < iRows   icol++
induction variable: ['icol']
{
L5025: (EVTarget[ii]=,w) (EVSource[icol],r) 
}
array table
-----------------------------------------------
EVTarget -> [('[ii]', 'w', 'not normalized', ['icol'], 5025)]
LDEs formed:1

EVSource -> [('[icol]', 'r', 'normalized', ['icol'], 5025)]
LDEs formed:0

distinct LDEs:
ii=ii
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < *nb_lines * *nb_columns   ++j
induction variable: ['j']
{
L5026: (index_list[j]=,w) 
}
array table
-----------------------------------------------
index_list -> [('[j]', 'w', 'normalized', ['j'], 5026)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0  j < i   ++j
induction variable: ['j']
{
L5027: (tmp_list[j],r) 
L5028: (index_list[(current_column - 1) * *nb_lines + current_line - 1]=,w) (tmp_list[j],r) 
}
array table
-----------------------------------------------
tmp_list -> [('[j]', 'r', 'normalized', ['j'], 5027), ('[j]', 'r', 'normalized', ['j'], 5028)]
LDEs formed:0

index_list -> [('[(current_column - 1) * *nb_lines + current_line - 1]', 'w', 'not normalized', ['j'], 5028)]
LDEs formed:1

distinct LDEs:
(current_column - 1) * *nb_lines + current_line - 1=(current_column - 1) * *nb_lines + current_line - 1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<m*n i++
induction variable: ['i']
{
L5029: (MatrixDouble[i]=,w) 
}
array table
-----------------------------------------------
MatrixDouble -> [('[i]', 'w', 'normalized', ['i'], 5029)]
LDEs formed:1

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=1 i<m+1 i++
induction variable: ['i']
{
L5030: (VarValueWithIndice[2048],r) 
L5031: (VarNameWithIndice[2048],r) 
	loop info: j=1 j<n+1 j++
	induction variable: ['i', 'j']
	{
	L5032: (MatrixDouble[(i-1)+m*(j-1)],r) 
	}
 }
array table
-----------------------------------------------
VarValueWithIndice -> [('[2048]', 'r', 'normalized', ['i', 'j'], 5030)]
LDEs formed:0

MatrixDouble -> [('[(i-1)+m*(j-1)]', 'r', 'not normalized', ['i', 'j'], 5032)]
LDEs formed:0

VarNameWithIndice -> [('[2048]', 'r', 'normalized', ['i', 'j'], 5031)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j=1 j<n+1 j++
induction variable: ['j']
{
	loop info: i=1 i<m+1 i++
	induction variable: ['j', 'i']
	{
	L5032: (VarArrayName[1024],r) 
	L5033: (Str[l++],r) 
	}
 }
array table
-----------------------------------------------
Str -> [('[l++]', 'r', 'not normalized', ['j', 'i'], 5033)]
LDEs formed:0

VarArrayName -> [('[1024]', 'r', 'normalized', ['j', 'i'], 5032)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i=0 i<(int)strlen(PathUnix) i++
induction variable: ['i']
{
L5033: (PathUnix[i]==,r) (PathUnix[i]=,w) 
}
array table
-----------------------------------------------
PathUnix -> [('[i]', 'r', 'normalized', ['i'], 5033), ('[i]', 'w', 'normalized', ['i'], 5033)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: nc = 0   nc <= ncomm   nc++ 
induction variable: ['nc']
{
L5034: (seqf[nc]==,r) 
L5035: (comm[nc],r) 
L5036: (comm[nc],r) 
L5037: (comm[nc],r) (seqf[nc],r) 
L5038: (comm[nc],r) 
L5039: (comm[nc],r) 
}
array table
-----------------------------------------------
comm -> [('[nc]', 'r', 'normalized', ['nc'], 5035), ('[nc]', 'r', 'normalized', ['nc'], 5036), ('[nc]', 'r', 'normalized', ['nc'], 5037), ('[nc]', 'r', 'normalized', ['nc'], 5038), ('[nc]', 'r', 'normalized', ['nc'], 5039)]
LDEs formed:0

seqf -> [('[nc]', 'r', 'normalized', ['nc'], 5034), ('[nc]', 'r', 'normalized', ['nc'], 5037)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: j = 0   j < nb_lines * nb_columns   j++
induction variable: ['j']
{
L5038: (ReturnArrayString[j]=,w) (index_list[j],r) 
}
array table
-----------------------------------------------
index_list -> [('[j]', 'r', 'normalized', ['j'], 5038)]
LDEs formed:0

ReturnArrayString -> [('[j]', 'w', 'normalized', ['j'], 5038)]
LDEs formed:1

distinct LDEs:
j1=j2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i<m1*n1  i++
induction variable: ['i']
{
L5039: (Str[i],r) 
L5040: (Str[i],r) 
L5041: (ReturnArrayString[k++]=,w) 
}
array table
-----------------------------------------------
Str -> [('[i]', 'r', 'normalized', ['i'], 5039), ('[i]', 'r', 'normalized', ['i'], 5040)]
LDEs formed:0

ReturnArrayString -> [('[k++]', 'w', 'not normalized', ['i'], 5041)]
LDEs formed:1

distinct LDEs:
k++=k++
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: k = 0  k < nbElements  k++
induction variable: ['k']
{
L5042: (dDates[k],r) 
	loop info: n = 0  n < NB_ELEMNT_ARRAY_GETDATE  n++
	induction variable: ['k', 'n']
		{
		L5043: (dResults[j]=,w) (dConverted[n],r) 
		}
 }
array table
-----------------------------------------------
dConverted -> [('[n]', 'r', 'normalized', ['k', 'n'], 5043)]
LDEs formed:0

dDates -> [('[k]', 'r', 'normalized', ['k', 'n'], 5042)]
LDEs formed:0

dResults -> [('[j]', 'w', 'not normalized', ['k', 'n'], 5043)]
LDEs formed:1

distinct LDEs:
j=j
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < nbElements  i++
induction variable: ['i']
{
L5044: (dValues[i],r) 
}
array table
-----------------------------------------------
dValues -> [('[i]', 'r', 'normalized', ['i'], 5044)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: day = 1  day <= numdays  ++day, ++day_1, day_1 %= 7
induction variable: ['day', 'day_1', 'day_1']
{
L5045: (CALMONTH[a]=,w) 
}
array table
-----------------------------------------------
CALMONTH -> [('[a]', 'w', 'not normalized', ['day', 'day_1', 'day_1'], 5045)]
LDEs formed:1

distinct LDEs:
a=a
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:  i=0  i < cSymbols  i++ 
induction variable: ['i']
{
L5046: (symbol[8]=,w) 
L5047: (symbol[0]==,r) 
L5048: (symbol[1],r) 
L5049: (s[0],r) 
}
array table
-----------------------------------------------
symbol -> [('[8]', 'w', 'normalized', ['i'], 5046), ('[0]', 'r', 'normalized', ['i'], 5047), ('[1]', 'r', 'normalized', ['i'], 5048)]
LDEs formed:3

s -> [('[0]', 'r', 'normalized', ['i'], 5049)]
LDEs formed:0

distinct LDEs:
8=0
8=8
8=1
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info:   arg < argc  arg++
induction variable: ['arg']
{
L5050: (argv[arg][0]==,r) 
L5051: (argv[arg][1],r) 
L5052: (argv[arg],r) 
	loop info: i = 0  i < arg  i++
	induction variable: ['arg', 'i']
		{
		L5053: (cmdline[pos],r) (argv[i],r) 
		L5054: (cmdline[pos],r) 
		L5055: (fargv[i]=,w) (argv[i],r) 
		}
L5056: (cmdline[pos],r) 
L5057: (cmdline[pos],r) 
L5058: (cmdline[pos],r) (fargv[i],r) 
L5059: (argv[arg],r) 
}
array table
-----------------------------------------------
cmdline -> [('[pos]', 'r', 'not normalized', ['arg', 'i'], 5053), ('[pos]', 'r', 'not normalized', ['arg', 'i'], 5054), ('[pos]', 'r', 'not normalized', ['arg', 'i'], 5056), ('[pos]', 'r', 'not normalized', ['arg', 'i'], 5057), ('[pos]', 'r', 'not normalized', ['arg', 'i'], 5058)]
LDEs formed:0

argv -> [('[arg][0]', 'r', 'normalized', ['arg', 'i'], 5050), ('[arg][1]', 'r', 'normalized', ['arg', 'i'], 5051), ('[arg]', 'r', 'normalized', ['arg', 'i'], 5052), ('[i]', 'r', 'normalized', ['arg', 'i'], 5053), ('[i]', 'r', 'normalized', ['arg', 'i'], 5055), ('[arg]', 'r', 'normalized', ['arg', 'i'], 5059)]
LDEs formed:0

fargv -> [('[i]', 'w', 'normalized', ['arg', 'i'], 5055), ('[i]', 'r', 'normalized', ['arg', 'i'], 5058)]
LDEs formed:2

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < xpathObj->nodesetval->nodeNr  i++
induction variable: ['i']
{
L5059: (nodeTab[i]-,r) 
L5060: (CPUS_BLAS_SPEC[i]=,w) 
L5061: (CPUS_BLAS_SPEC[i],r) 
L5062: (CPUS_BLAS_SPEC[i]-,r) 
L5063: (CPUS_BLAS_SPEC[i]-,r) 
L5064: (CPUS_BLAS_SPEC[i]-,r) 
L5065: (CPUS_BLAS_SPEC[i]-,r) 
L5066: (CPUS_BLAS_SPEC[i]-,r) 
L5067: (CPUS_BLAS_SPEC[i]-,r) 
L5068: (CPUS_BLAS_SPEC[i]-,r) 
}
array table
-----------------------------------------------
CPUS_BLAS_SPEC -> [('[i]', 'w', 'normalized', ['i'], 5060), ('[i]', 'r', 'normalized', ['i'], 5061), ('[i]', 'r', 'normalized', ['i'], 5062), ('[i]', 'r', 'normalized', ['i'], 5063), ('[i]', 'r', 'normalized', ['i'], 5064), ('[i]', 'r', 'normalized', ['i'], 5065), ('[i]', 'r', 'normalized', ['i'], 5066), ('[i]', 'r', 'normalized', ['i'], 5067), ('[i]', 'r', 'normalized', ['i'], 5068)]
LDEs formed:9

nodeTab -> [('[i]', 'r', 'normalized', ['i'], 5059)]
LDEs formed:0

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizeCPUS_SPEC  i++
induction variable: ['i']
{
L5060: (CPUS_SPEC[i]-,r) 
L5061: (CPUS_SPEC[i]-,r) 
L5062: (CPUS_SPEC[i]-,r) 
L5063: (CPUS_SPEC[i]-,r) 
L5064: (CPUS_SPEC[i]-,r) 
L5065: (CPUS_SPEC[i]-,r) 
}
array table
-----------------------------------------------
CPUS_SPEC -> [('[i]', 'r', 'normalized', ['i'], 5060), ('[i]', 'r', 'normalized', ['i'], 5061), ('[i]', 'r', 'normalized', ['i'], 5062), ('[i]', 'r', 'normalized', ['i'], 5063), ('[i]', 'r', 'normalized', ['i'], 5064), ('[i]', 'r', 'normalized', ['i'], 5065)]
LDEs formed:0

distinct LDEs:
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

loop info: i = 0  i < sizeCPUS_SPEC  i++
induction variable: ['i']
{
L5066: (CPUS_SPEC[i],r) 
L5067: (CPUS_SPEC[i]-,r) 
L5068: (CPUS_SPEC[i]-,r) 
L5069: (CPUS_SPEC[i]-,r) 
L5070: (CPUS_SPEC[i]-,r) 
L5071: (CPUS_SPEC[i]-,r) 
L5072: (CPUS_SPEC[i]-,r) 
L5073: (CPUS_SPEC[i]-,r) 
L5074: (CPUS_SPEC[i]-,r) 
L5075: (CPUS_SPEC[i]-,r) 
L5076: (CPUS_SPEC[i],r) 
L5077: (CPUS_SPEC[i]=,w) 
}
array table
-----------------------------------------------
CPUS_SPEC -> [('[i]', 'r', 'normalized', ['i'], 5066), ('[i]', 'r', 'normalized', ['i'], 5067), ('[i]', 'r', 'normalized', ['i'], 5068), ('[i]', 'r', 'normalized', ['i'], 5069), ('[i]', 'r', 'normalized', ['i'], 5070), ('[i]', 'r', 'normalized', ['i'], 5071), ('[i]', 'r', 'normalized', ['i'], 5072), ('[i]', 'r', 'normalized', ['i'], 5073), ('[i]', 'r', 'normalized', ['i'], 5074), ('[i]', 'r', 'normalized', ['i'], 5075), ('[i]', 'r', 'normalized', ['i'], 5076), ('[i]', 'w', 'normalized', ['i'], 5077)]
LDEs formed:12

distinct LDEs:
i1=i2
#########################################################################################
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

***************************************stats******************************************
total_ldes: 13132
distinct_ldes: 2490
maximum_ldes_for_a_loop: 106
total_array_refs: 9114
normalized_array_refs: 6750
maximum_loop_nest: 4
total_read_count: 6123
total_write_count: 2991
n-variable_ldes: {0: 87, 1: 23, 2: 1902, 3: 97, 4: 199, 5: 17, 6: 118, 7: 11, 8: 21, 9: 1, 10: 11, 12: 1, 13: 1, 16: 1}
